<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>东风微鸣 Blog</title><link>https://www.EWhisper.cn/</link><description>Focus on Python/Java/DevOps/Observability</description><lastBuildDate>Wed, 08 May 2019 18:41:34 +0800</lastBuildDate><item><title>使用OpenShift进行二进制构建</title><link>https://www.EWhisper.cn/binary-builds-with-openshift.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;介绍&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;用例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;限制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;教程概述&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_5"&gt;教程：构建本地代码更改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;教程：构建私有代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pipeline"&gt;教程：来自 pipeline 的二进制工件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;介绍&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;OpenShift 推荐和常用的构建方式是: 直接从代码仓库(如GIT 或SVN)中拉取源码进行构建(即源码构建). 但是这一种构建方式并不能满足所有的需求, 所以还有一种构建方式就是: 二进制构建. 二进制构建适用于以下2个场景:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发人员本地开发调试代码并构建;&lt;/li&gt;
&lt;li&gt;OpenShift和 CI/CD的pipeline进行整合, 获取从前边平台(如自动化开发平台或测试平台)传过来的工件(即二进制包)并构建为镜像.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OpenShift中的二进制构建功能允许开发人员将源代码或工件直接上传到构建(build)，而不是从Git存储库URL pull需要构建的源。通过源代码，Docker或自定义构建策略的 BuildConfig 都可以作为二进制构建启动。从本地工件启动构建时，现有源引用将替换为来自本地用户计算机的源。&lt;/p&gt;
&lt;p&gt;可以使用几种方式提供源，这些方式对应于使用&lt;code&gt;start-build&lt;/code&gt;命令时可用的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从文件（&lt;code&gt;--from-file&lt;/code&gt;）：当构建的整个源包含单个文件时就是这种情况。例如，它可能是用于Docker构建的&lt;code&gt;Dockerfile&lt;/code&gt;，用于Java应用构建的&lt;code&gt;pom.xml&lt;/code&gt;，或用于Ruby构建的&lt;code&gt;Gemfile&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;从目录（&lt;code&gt;--from-directory&lt;/code&gt;）：当源在本地目录中并且未提交到Git存储库时使用此目录。&lt;code&gt;start-build&lt;/code&gt; 命令将创建给定目录的存档，并将其作为源上传到构建器(builder)。&lt;/li&gt;
&lt;li&gt;从存档（&lt;code&gt;--from-archive&lt;/code&gt;）：当具有源的存档已存在时使用此选项。该存档可以是&lt;code&gt;tar&lt;/code&gt;，&lt;code&gt;tar.gz&lt;/code&gt;或&lt;code&gt;zip&lt;/code&gt;格式。&lt;/li&gt;
&lt;li&gt;从Git存储库（&lt;code&gt;--from-repo&lt;/code&gt;）：源是当前用户本地计算机上的Git存储库的一部分。当前存储库的HEAD commit将被存档并发送到OpenShift进行构建。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;用例&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;二进制构建适用于无法从现有Git存储库中提取源的需求。使用二进制构建的原因包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建和测试本地代码的变更。克隆来自公共存储库的源，并将本地变更上传到OpenShift进行构建。而无需在任何地方提交或推送本地更改。&lt;/li&gt;
&lt;li&gt;构建私有代码。新构建可以作为二进制构建从头开始。然后可以将源直接从本地工作站上传到OpenShift，而无需将其签入SCM。&lt;/li&gt;
&lt;li&gt;使用其他来源的工件构建镜像。通过Jenkins pipeline，二进制构建可以用于整合使用Maven或C编译器等工具构建的工件，以及使用这些构建的运行时镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;限制&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;二进制构建无法重复。由于二进制构建依赖于在构建开始时用户上传工件，因此OpenShift无法重复相同的构建而无需用户每次都重复相同的上载。&lt;/li&gt;
&lt;li&gt;无法自动触发二进制生成。它们只能在用户上传所需的二进制工件时手动启动。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;以二进制构建方式启动的构建版本也可能具有已配置的源URL。如果是这种情况，触发器会成功启动构建，但源将来自配置的源URL，而不是来自上次构建运行时用户提供的源。(比如: 用户先从Git仓库下载了源码并修改, 用本地修改后的源码手动上传、构建，那么OpenShift会获取到Git仓库的URL, 如果配置了触发器, 下次构建就直接通过Git URL pull源码并自动构建, 而不是自动获取本地的源码.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_4"&gt;教程概述&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下教程假设您有一个可用的OpenShift集群，并且您有一个可以创建工件的项目。它要求您拥有本地&lt;code&gt;git&lt;/code&gt;和&lt;code&gt;oc&lt;/code&gt;客户端。&lt;/p&gt;
&lt;h3 id="_5"&gt;教程：构建本地代码更改&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;基于现有源存储库创建新应用程序并为其创建路由：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app https://github.com/openshift/ruby-hello-world.git
oc expose svc/ruby-hello-world
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;等待初始构建完成并通过route来查看应用程序的页面。你应该得到一个欢迎页面：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc get route ruby-hello-world
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;在本地克隆存储库：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/openshift/ruby-hello-world.git
&lt;span class="nb"&gt;cd&lt;/span&gt; ruby-hello-world
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;
&lt;p&gt;更改应用程序的视图。使用您喜欢的编辑器编辑 &lt;code&gt;views/main.rb&lt;/code&gt;：将&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;标签更改为&lt;code&gt;&amp;lt;body style="background-color:blue"&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用本地修改的源启动新构建。在存储库的本地目录中，运行：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc start-build ruby-hello-world --from-dir&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; --follow
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;构建完成并重新部署应用程序后，指向应用程序主机的route应该会生成一个蓝色背景的页面。&lt;/p&gt;
&lt;p&gt;您可以继续在本地进行更改并使用&lt;code&gt;oc start-build --from-dir&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;您还可以创建代码分支，在本地提交更改，并使用存储库的HEAD作为构建的源：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout -b my_branch
git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;My changes&amp;quot;&lt;/span&gt;
oc start-build ruby-hello-world --from-repo&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; --follow
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_6"&gt;教程：构建私有代码&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;创建一个本地目录来保存您的代码：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir myapp
&lt;span class="nb"&gt;cd&lt;/span&gt; myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;在目录中创建一个名为&lt;code&gt;Dockerfile&lt;/code&gt;的文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; centos:centos7&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8080&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; index.html /var/run/web/index.html
&lt;span class="k"&gt;CMD&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /var/run/web &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; python -m SimpleHTTPServer &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;创建一个&lt;code&gt;index.html&lt;/code&gt;文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My local app&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is my local application&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;为您的应用程序创建一个新的构建：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-build --strategy docker --binary --docker-image centos:centos7 --name myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="5"&gt;
&lt;li&gt;使用本地目录的内容启动二进制构建：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc start-build myapp --from-dir . --follow
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="6"&gt;
&lt;li&gt;使用&lt;code&gt;new-app&lt;/code&gt;部署应用程序，然后为其创建路由：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app myapp
oc expose svc/myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="7"&gt;
&lt;li&gt;获取指向对应应用主机的路由：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc get route myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在构建和部署代码之后，您可以通过更改本地文件并通过&lt;code&gt;oc start-build myapp --from-dir&lt;/code&gt;再次调用启动新构建来进行迭代。构建完成后，代码将自动部署，更新的内容将在刷新页面时反映在浏览器中。&lt;/p&gt;
&lt;h3 id="pipeline"&gt;教程：来自 pipeline 的二进制工件&lt;a class="headerlink" href="#pipeline" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;OpenShift上的Jenkins允许使用带有合适工具的slave镜像来构建代码。例如，您可以使用&lt;code&gt;maven&lt;/code&gt; slave镜像来从代码存储库构建WAR包。但是，一旦构建了此工件，您需要将其提交到包含正确的运行时工件的镜像以运行您的代码。可以使用二进制构建将这些工件添加到运行时映像。在下面的教程中，我们将创建一个Jenkins pipeline，该pipeline使用&lt;code&gt;maven&lt;/code&gt; slave构建WAR，然后使用带有&lt;code&gt;Dockerfile&lt;/code&gt;的二进制构建将WAR添加到 wildfly 运行时映像。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为您的应用程序创建一个新目录：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir mavenapp
&lt;span class="nb"&gt;cd&lt;/span&gt; mavenapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;创建一个&lt;code&gt;Dockerfile&lt;/code&gt;将WAR复制到wildfly镜像内的适当位置以供执行。将以下内容复制到名为的本地文件 &lt;code&gt;Dockerfile&lt;/code&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; wildfly:latest&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; ROOT.war /wildfly/standalone/deployments/ROOT.war
&lt;span class="k"&gt;CMD&lt;/span&gt;  &lt;span class="nv"&gt;$STI_SCRIPTS_PATH&lt;/span&gt;/run
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;为该&lt;code&gt;Dockerfile&lt;/code&gt;创建一个新的BuildConfig：&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;这将自动启动一个构建, 刚开始会构建失败，因为 &lt;code&gt;ROOT.war&lt;/code&gt;工件尚不可用。下面的pipeline将使用二进制构建将该WAR包传递给构建。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat Dockerfile &lt;span class="p"&gt;|&lt;/span&gt; oc new-build -D - --name mavenapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;创建1个使用Jenkins pipeline的BuildConfig, 这个BuildConfig将构建1个WAR包，然后使用该WAR包和先前创建的&lt;code&gt;Dockerfile&lt;/code&gt;来构建镜像。相同的模式可用于其他平台，其中二进制工件由一组工具构建，然后与最终的包含不同运行时的镜像组合。将以下代码保存到&lt;code&gt;mavenapp-pipeline.yml&lt;/code&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;BuildConfig&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mavenapp-pipeline&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;jenkinsPipelineStrategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;jenkinsfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|-&lt;/span&gt;
        &lt;span class="no"&gt;pipeline {&lt;/span&gt;
          &lt;span class="no"&gt;agent { label &amp;quot;maven&amp;quot; }&lt;/span&gt;
          &lt;span class="no"&gt;stages {&lt;/span&gt;
            &lt;span class="no"&gt;stage(&amp;quot;Clone Source&amp;quot;) {&lt;/span&gt;
              &lt;span class="no"&gt;steps {&lt;/span&gt;
                &lt;span class="no"&gt;checkout([$class: &amp;#39;GitSCM&amp;#39;,&lt;/span&gt;
                            &lt;span class="no"&gt;branches: [[name: &amp;#39;*/master&amp;#39;]],&lt;/span&gt;
                            &lt;span class="no"&gt;extensions: [&lt;/span&gt;
                              &lt;span class="no"&gt;[$class: &amp;#39;RelativeTargetDirectory&amp;#39;, relativeTargetDir: &amp;#39;mavenapp&amp;#39;]&lt;/span&gt;
                            &lt;span class="no"&gt;],&lt;/span&gt;
                            &lt;span class="no"&gt;userRemoteConfigs: [[url: &amp;#39;https://github.com/openshift/openshift-jee-sample.git&amp;#39;]]&lt;/span&gt;
                        &lt;span class="no"&gt;])&lt;/span&gt;
              &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;stage(&amp;quot;Build WAR&amp;quot;) {&lt;/span&gt;
              &lt;span class="no"&gt;steps {&lt;/span&gt;
                &lt;span class="no"&gt;dir(&amp;#39;mavenapp&amp;#39;) {&lt;/span&gt;
                  &lt;span class="no"&gt;sh &amp;#39;mvn clean package -Popenshift&amp;#39;&lt;/span&gt;
                &lt;span class="no"&gt;}&lt;/span&gt;
              &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;stage(&amp;quot;Build Image&amp;quot;) {&lt;/span&gt;
              &lt;span class="no"&gt;steps {&lt;/span&gt;
                &lt;span class="no"&gt;dir(&amp;#39;mavenapp/target&amp;#39;) {&lt;/span&gt;
                  &lt;span class="no"&gt;sh &amp;#39;oc start-build mavenapp --from-dir . --follow&amp;#39;&lt;/span&gt;
                &lt;span class="no"&gt;}&lt;/span&gt;
              &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;}&lt;/span&gt;
          &lt;span class="no"&gt;}&lt;/span&gt;
        &lt;span class="no"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;JenkinsPipeline&lt;/span&gt;
  &lt;span class="nt"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="5"&gt;
&lt;li&gt;创建pipeline 构建。如果Jenkins未部署到您的项目中，则使用管道创建的BuildConfig会先部署Jenkins。在Jenkins准备建立您的管道之前可能需要几分钟来启动。您可以通过调用&lt;code&gt;oc rollout status dc/jenkins&lt;/code&gt;来检查Jenkins的状态：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc create -f ./mavenapp-pipeline.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="6"&gt;
&lt;li&gt;一旦Jenkins准备就绪，启动之前定义的管道：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc start-build mavenapp-pipeline
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="7"&gt;
&lt;li&gt;管道构建完成后，使用&lt;code&gt;new-app&lt;/code&gt;部署新应用程序并公开其route：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app mavenapp
oc expose svc/mavenapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="8"&gt;
&lt;li&gt;使用浏览器，导航到应用程序的路径：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc get route mavenapp
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 08 May 2019 18:41:34 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-08:/binary-builds-with-openshift.html</guid><category>openshift</category><category>docker</category><category>devops</category><category>git</category><category>containers</category></item><item><title>OpenShift 和 Kubernetes 有什么区别?</title><link>https://www.EWhisper.cn/openshift-and-kubernetes-whats-difference.html</link><description>&lt;p&gt;OpenShift 3以后, 架构完全基于K8S进行了重构, 但是又有一些差异. 今天, 我们就深入研究一下.&lt;/p&gt;
&lt;h2 id="k8s"&gt;K8S 是"内核"&lt;a class="headerlink" href="#k8s" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;K8S可以认为是当代分布式系统的"内核". 我们意识到, 一个设计良好的作业调度程序, 跨多台及其运行, 能够协调托管在骑上的工作负载的状态, 自然就会促进写作, 就像Linux内核为单个主机上调度工作负载所做的那样. 遵循这一逻辑, 我们知道不同的产品会根据针对用户的不同而差异化地打造.&lt;/p&gt;
&lt;p&gt;在很多手机, 电脑, 服务器, 甚至是树莓派上, 运行的都是相同的Linux 内核, 但是通过不同的不定来支持多种多样的硬件.&lt;/p&gt;
&lt;p&gt;K8S和各种各样的K8S发行版也适用于同样的模型, 通过不同类型的补丁, 来支持在K8S上面的一层. &lt;/p&gt;
&lt;h2 id="openshift"&gt;OpenShift 是发行版&lt;a class="headerlink" href="#openshift" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这是一个强有力的区别。OpenShift就是Kubernetes的发行版，专注于开发人员的体验，而开发人员需要开发下一代云原生应用程序。&lt;/p&gt;
&lt;p&gt;虽然任何人都可以通过选择每1个部分并按照每个用户选择的定制方式组装它们来&lt;a href="http://www.linuxfromscratch.org/"&gt;从Scratch &lt;/a&gt;构建&lt;a href="http://www.linuxfromscratch.org/"&gt;Linux&lt;/a&gt;，但大多数人都没有。大多数用户选择的抽象级别意味着他们不会从管理（甚至了解）Util-Linux版本2.31和2.33之间的差异中获得很多价值。为了更进一步，用户关心最低级别的功能（例如，只要超过最小版本号，他们就知道哪些命令/ API可用），然后提供所提供功能的列表。&lt;/p&gt;
&lt;p&gt;这与OpenShift非常相似。OpenShift将Kubernetes打包并包含其他工具作为OpenShift认为重要且OpenShift的用户需求的功能。就像CoreOS和CentOS包含不同的工具集一样，迎合不同的用户，因此Kubernetes发行版也是如此。&lt;/p&gt;
&lt;h2 id="openshiftk8s"&gt;OpenShift和K8S的具体区别&lt;a class="headerlink" href="#openshiftk8s" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="openshift_1"&gt;OpenShift 架构概述&lt;a class="headerlink" href="#openshift_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;OpenShift容器平台是一系列流行的组件和服务的集合体, 构建于Red Hat Enterprise Linux, Docker, 和K8S之上. OpenShift针对开发人员, 增强了以下功能: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;远程管理&lt;/li&gt;
&lt;li&gt;多租户&lt;/li&gt;
&lt;li&gt;安全性增强&lt;/li&gt;
&lt;li&gt;应用生命周期管理&lt;/li&gt;
&lt;li&gt;自服务接口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="OpenShift 架构" src="./images/openshift-architecture-overview.png"&gt;&lt;/p&gt;
&lt;p&gt;在上图中, 从下至上, 从左至右, 展示了经过Red Hat 在基本的容器架构基础上进一步集成、增强的架构:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本OS是Red Hat Enterprise Linux (RHEL)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;  提供了基本的容器管理API和容器镜像文件格式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt; 管理运行容器的主机集群(实体的或虚拟的). 它通过资源(resources)来描述多容器应用是由多个资源组成的, 以及他们间如何交互&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Etcd&lt;/strong&gt; 是一个分布式 key-value 存储, Kubernetes 通过它来存储集群内的关于容器和其他资源的配置和状态信息.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Docker + Kubernetes 之上, OpenShift增加了容器平台所需要的其他功能. 具体包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OpenShift-Kubernetes 扩展&lt;/strong&gt; 是存储在Etcd中, 由Kubernetes管理的额外的资源类型(resource types). 这些额外的资源类型组成了OpenShift 内部状态和配置, 还有应用的资源.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器化服务&lt;/strong&gt; 充实了很多基础架构功能, 比如网络和认证. 这些功能有些是一直运行的, 有些是按需启动的. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行时和xPaaS&lt;/strong&gt; 是为开发者准备好的容器镜像, 每个都预配置了特定的语言运行时或数据库. 可以被用作镜像流(Image Stream)或在此基础上增加不同的框架, 库, 甚至是中间件来进行扩展. xPaaS 提供了一系列JBoss中间件产品的基础镜像, 如: JBoss EAP 和 ActiveMQ.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DevOps 工具集和用户体验&lt;/strong&gt;: OpenShift 为开发人员和系统管理员提供了一个Web UI和CLI 管理工具, 允许配置和监控应用和OpenShift的服务和资源. Web和 CLI 都是基于相同的REST API, 这个API也可以被外部工具(如: IDE和CI平台)整合. OpenShift也可以访问外部SCM库和容器镜像库.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;OpenShift 团队:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;帮助K8S 完成了Namespace 和 quota功能的开发;&lt;/li&gt;
&lt;li&gt;推动了RBAC 授权认证的开发&lt;/li&gt;
&lt;li&gt;帮助K8S运行更多类型的应用, 并为其开发了一些卷插件(Volume Plugin)&lt;/li&gt;
&lt;li&gt;相比K8S, 多了Deployment Config(DC) resource. 使用该资源可以进行参数化部署, 执行滚动部署和回滚等.&lt;/li&gt;
&lt;li&gt;相比K8S, 多了Route resource. 而Router也是K8S的Ingress功能的前身.&lt;/li&gt;
&lt;li&gt;相比K8S, 默认集成了SDN (Open vSwitch)&lt;/li&gt;
&lt;li&gt;相比K8S, 实现了开发运维一体化.&lt;/li&gt;
&lt;li&gt;纳入CoreOS&lt;/li&gt;
&lt;li&gt;OpenShift 3.11, 集成了Prometheus和Grafana&lt;/li&gt;
&lt;li&gt;相比K8S, 增强了管理物理节点的能力&lt;/li&gt;
&lt;li&gt;目前, OpenShift还和NV合作, 未来会提供基于GPU运算能力的支持.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;资源类型差异&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes 资源类型&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pods&lt;/li&gt;
&lt;li&gt;Services&lt;/li&gt;
&lt;li&gt;Replication Controllers&lt;/li&gt;
&lt;li&gt;Persistent Volume (PV)&lt;/li&gt;
&lt;li&gt;Persistent Volume Claims (PVC)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;OpenShift 资源类型&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;除了以上资源类型, OpenShift 还增加了以下主要的资源类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deployment Configurations (DC) - 用于 持续交付(CD)工作流&lt;/li&gt;
&lt;li&gt;Build Configurations (BC) - 用于 持续集成(CI) 工作流&lt;/li&gt;
&lt;li&gt;Routes - 基于HAProxy, 作用类似于K8S Ingress, 但早于Ingress.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="openshift-s2i"&gt;OpenShift 特有的S2I 功能&lt;a class="headerlink" href="#openshift-s2i" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;OpenShift中的Source-to-Image (S2I) 进程会从SCM仓库中拉取代码, 自动化监测代码需要哪种类型的运行时, 并从特定运行时的基础镜像启动一个pod. 在这个pod 中, OpenShift 以开发人员相同的方式来构建该应用(如, 使用&lt;strong&gt;maven&lt;/strong&gt;来构建java程序). 如果构建成功, 另一个镜像会被创建, 把应用二进制附加到运行时层之上, 并把这个新镜像推送到OpenShift的内部镜像仓库中. 接下来, 可以从这个新镜像创建一个pod来运行该应用. S2I 可以看做是一个嵌入到OpenShift平台中的 CI/CD pipeline.&lt;/p&gt;
&lt;p&gt;CI/CD pipelines 会有很多种变异, 这个pipeline会暴露在这个项目(project, 就是K8S的namespace)中, 那么它就可以被调节来满足开发人员的需求. 例如, 外部CI工具(如Jenkins)可以用于来启动和运行测试, 然后给新镜像打上"成功"或"失败"的标签(label), 并推送到QA或生产环境. 随着时间推移, 一个组织一个部门一个公司可以创建他们自己的pipeline模板, 包括自定义的构建器和部署器.&lt;/p&gt;
&lt;h2 id="_2"&gt;总结&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;OpenShift 平台相比K8S, 具有以下特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自服务平台;&lt;/li&gt;
&lt;li&gt;多语言, 多中间件, 数据库支持&lt;/li&gt;
&lt;li&gt;高可用, 可伸缩性&lt;/li&gt;
&lt;li&gt;也是开源的(Red Hat收取服务费)&lt;/li&gt;
&lt;li&gt;安全 (基于: RBAC, LDAP, 主机, 网络, 容器各个层面的加固)&lt;/li&gt;
&lt;li&gt;动态存储管理&lt;/li&gt;
&lt;li&gt;企业级&lt;/li&gt;
&lt;li&gt;日志整合/ 监控整合&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 03 May 2019 16:51:34 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-03:/openshift-and-kubernetes-whats-difference.html</guid><category>docker</category><category>openshift</category><category>k8s</category><category>containers</category><category>PAAS</category></item><item><title>Dynatrace 告警简要分析流程</title><link>https://www.EWhisper.cn/analyze-problems-with-dynatrace.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;告警类别及含义&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;应用告警&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;中间件告警&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;主机告警&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpu"&gt;CPU运行状况不佳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;告警简要分析流程&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_6"&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;响应时间/速度较慢的请求的响应时间降低&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_8"&gt;失败率过高/页面操作/事务整体失败率高&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;应用程序进程不可用（非预期）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;应用程序进程运行状况不佳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#jvm"&gt;可能挂起的JVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;应用程序进程内存不足&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpu_1"&gt;CPU运行状况不佳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;硬盘运行状况不佳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_13"&gt;内存运行状况不佳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_14"&gt;网络运行状况不佳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynatrace"&gt;dynaTrace告警确认及关闭&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;告警类别及含义&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_2"&gt;应用告警&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;响应时间/速度较慢的请求的响应时间降低&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;响应时间降低--对应的应用或URL平均响应时间(中值)明显高于期望。即使所观测的响应时间尚可被客户接受，这种状态明显是应用程序或是硬件问题导致，并且会降低所能达到的最大吞吐量。&lt;/li&gt;
&lt;li&gt;速度较慢的请求的响应时间降低--观测中 10% 最慢请求的反应时间明显增加。这将导致用户体验变差。应用程序及硬件问题都能导致该问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;失败率过高/页面操作/事务整体失败率高&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;失败率过高--事务失败率远高于预期。&lt;/li&gt;
&lt;li&gt;页面操作失败率高--总体页面操作失败率超过预设阀值。&lt;/li&gt;
&lt;li&gt;事务整体失败率高--事务整体失败率高。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_3"&gt;中间件告警&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;应用程序进程不可用（非预期）&lt;/h4&gt;
&lt;p&gt;与之前连接的应用程序进程/Agent 之间的连接已丢失，无法与 Agent 断开连接。&lt;/p&gt;
&lt;p&gt;一般出现该告警的原因为停止或杀掉对应中间件的进程。&lt;/p&gt;
&lt;h4&gt;应用程序进程运行状况不佳&lt;/h4&gt;
&lt;p&gt;由于在垃圾回收过程中花费大量执行时间，因此应用程序进程的显著挂起时间会持续一段时间。&lt;/p&gt;
&lt;p&gt;一般是由于频繁GC导致的。&lt;/p&gt;
&lt;h4&gt;可能挂起的JVM&lt;/h4&gt;
&lt;p&gt;可能的java VM挂起。可能是由于heap/thread dump或者GC活动。原因未知需要手动分析。&lt;/p&gt;
&lt;h4&gt;应用程序进程内存不足&lt;/h4&gt;
&lt;p&gt;应用程序进程报出内存不足。&lt;/p&gt;
&lt;p&gt;一般是由于中间件内存使用已满或内存溢出。&lt;/p&gt;
&lt;h3 id="_4"&gt;主机告警&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;主机类告警的阈值与所属的主机组有关。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCXRay6p/bea1t.jpg"&gt;&lt;/p&gt;
&lt;h3 id="cpu"&gt;CPU运行状况不佳&lt;a class="headerlink" href="#cpu" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CPU使用率或系统时间超过预设阈值。&lt;/p&gt;
&lt;p&gt;CPU的阈值有2个阈值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用率&lt;/li&gt;
&lt;li&gt;系统时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;硬盘运行状况不佳&lt;/h4&gt;
&lt;p&gt;主机硬盘的可用空间大小及百分比低于预设阈值。有2个阈值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可用空间大小&lt;/li&gt;
&lt;li&gt;可用空间百分比&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;内存运行状况不佳&lt;/h4&gt;
&lt;p&gt;主机的可用内存大小及百分比低于预设阈值或内存页面故障大于预设阈值。有3个阈值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可用内存大小&lt;/li&gt;
&lt;li&gt;可用内存百分比&lt;/li&gt;
&lt;li&gt;页面故障数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;网络运行状况不佳&lt;/h4&gt;
&lt;p&gt;网络带宽使用率大于预设阈值。有1个阈值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带宽使用率&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;告警简要分析流程&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_6"&gt;简介&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;通用入口&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;“驾驶舱”，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCY07pnX/Ry7Q9.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Start Center，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCY32F9u/eT8op.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;“监控”，如下图：(绿色正常/红色异常/灰色无数据)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCY4WDEM/l7JDg.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_7"&gt;响应时间/速度较慢的请求的响应时间降低&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;打开事件仪表板，如下图：(告警红色为Severe级别/黄色为Warning级别；告警时间段可以按需选择)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCY7f5oF/dYODm.jpg"&gt; &lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;移动到对应的告警信息→右键→深入分析→PurePath，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYaxIBv/uWnkT.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;跳转到PurePath仪表板，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYdl5vQ/10ziUa.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;
&lt;p&gt;右键仪表板→编辑筛选器→筛选对应的PurePath并应用，如下图:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYehBhS/Jkp4w.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYfBRlP/NMHo5.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全选所有的PurePath→右键→深入分析→响应时间热点 （此处可以点击第二列”响应时间“对PurePath进行排序，针对性分析）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYhLI4x/nAr3y.jpg"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;响应时间热点仪表板，如下：(针对“速度较慢的请求的响应时间降低”告警，需要在右上角“百分比筛选器进行选择。至此，初步分析结果已得出)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYk4En1/n9rDF.jpg"&gt;&lt;/p&gt;
&lt;ol start="8"&gt;
&lt;li&gt;
&lt;p&gt;最终分析结果：API细分仪表板及方法细分仪表板，如下图：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYlQlsd/NpiKX.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYlQd76/REkXi.jpg"&gt;&lt;/p&gt;
&lt;ol start="10"&gt;
&lt;li&gt;更近一步分析：可以直接分析源代码，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYnAAJy/yrJBF.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYnwwKB/LynTC.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_8"&gt;失败率过高/页面操作/事务整体失败率高&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;事件→Purepath，如上文&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑筛选器内容，如上文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按错误排序，如下图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYrsFLH/Qyujo.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;右键上图报错方法，出现具体的报错/异常/日志等内容，如下图：(可以多看十几条PurePath，如果报错内容都相同，则已经初步定位到告警原因)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYsL7Nf/UcVBq.jpg"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;全选所有PurePath→深入分析→错误率相关菜单，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYtOs3i/Myyj4.jpg"&gt; &lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;定位到告警原因，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYuXMxi/148DNZ.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_9"&gt;应用程序进程不可用（非预期）&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该类报错通常是由于停止或杀掉或重启中间件等进程导致的。&lt;/p&gt;
&lt;p&gt;可以直接在”事件”仪表板中查看，如下图：（告警开始时间就是停进程的时间；终止时间就是启动进程的时间）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYwhZNA/gEE3m.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_10"&gt;应用程序进程运行状况不佳&lt;a class="headerlink" href="#_10" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该类报错分析起来较为复杂，需要有丰富的中间件运维经验和dynaTrace使用经验。详细信息参考附件：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《应用程序进程运行状况不佳分析示例》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="jvm"&gt;可能挂起的JVM&lt;a class="headerlink" href="#jvm" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如上文所述：可能是由于heap/thread dump或者GC活动。原因未知需要手动分析。具体问题具体对待。&lt;/p&gt;
&lt;h3 id="_11"&gt;应用程序进程内存不足&lt;a class="headerlink" href="#_11" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如上文所述，通常是由于内存溢出或内存快满。分析流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过上文提到的入口--“监控”→点击“进程”→查看进程仪表板，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYKC06L/RD3sF.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYJdo4D/10CMzY.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;点击内存快照→创建内存快照→按需选择快照的类型并应用，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYMr7TG/RzIqA.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;dynaTrace会自动分析并给出结果，如下图：(至此已经定位到问题所在)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYO7UoS/jZMqd.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;如需进一步分析，可以点击内存快照分析的其他标签页。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYPQTpk/T02uX.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dynaTrace支持内存溢出时自动做内存快照，且默认开启，在生产环境建议关闭该功能，有需求可以针对性开启。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYRN2UG/H6NSX.jpg"&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="cpu_1"&gt;CPU运行状况不佳&lt;a class="headerlink" href="#cpu_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;从入口“监控”进入→主机列表→主机监控，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYV9u5l/aweYD.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;主机监控仪表图分析，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYVyY4X/NmNbr.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;做CPU采样与线程快照（步骤与做内存快照类似，见上文）。CPU采样与线程快照分析如下：(已经定位到告警原因)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYX1rCQ/RpJ2j.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;可以对线程快照进一步分析，定位到线程的堆栈以及当时线程执行的URL请求，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYZHuqt/10KqLh.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_12"&gt;硬盘运行状况不佳&lt;a class="headerlink" href="#_12" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;直接进入主机仪表板，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCZ2mxAA/C7G0x.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_13"&gt;内存运行状况不佳&lt;a class="headerlink" href="#_13" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;直接进入主机仪表板查看内存使用率，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCZ3lGA6/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;分析占用物理内存的进程情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;JVM使用的JVM代码区、JVM数据区、heap区都应该是固定的。但是JVM进程所使用的线程栈区、永久代、内核内存是可能随着应用程序吞吐量、业务量、负载量的变化而变化的。&lt;/p&gt;
&lt;p&gt;JVM是作为一个进程运行在Linux上的。从进程的角度来看，进程能直接访问的用户内存（虚拟内存空间）被划分为5个部分：代码区、数据区、堆区、栈区、未使用区。代码区中存放应用程序的机器代码，运行过程中代码不能被修改，具有只读和固定大小的特点。数据区中存放了应用程序中的全局数据，静态数据和一些常量字符串等，其大小也是固定的。堆是运行时程序动态申请的空间，属于程序运行时直接申请、释放的内存资源。栈区用来存放函数的传入参数、临时变量，以及返回地址等数据。未使用区是分配新内存空间的预备区域。 &lt;/p&gt;
&lt;p&gt;JavaNIO使得JVM可以使用内核内存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_14"&gt;网络运行状况不佳&lt;a class="headerlink" href="#_14" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;直接进入主机仪表板查看网络利用率，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCZ2o2RS/hLaMM.jpg"&gt;&lt;/p&gt;
&lt;h1 id="dynatrace"&gt;dynaTrace告警确认及关闭&lt;a class="headerlink" href="#dynatrace" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;dynaTrace的告警确认及关闭需要登录客户端，进入到“事件”仪表板进行操作。具体如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCZ6HvHe/eop6b.jpg"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 03 May 2019 14:54:12 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-03:/analyze-problems-with-dynatrace.html</guid><category>Dynatrace</category><category>Observability</category><category>性能调优</category></item><item><title>Dynatrace AppMon 实战手册 - 10.Dynatrace权限管理</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-10-authority-management.html</link><description>&lt;ol&gt;
&lt;li&gt;在Dynatrace Server设置 -&amp;gt; 用户面板，如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX8vxzug/YnE01.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;
&lt;p&gt;Dynatrace 关于权限管理方面，从3个层面实现对用户权限的精细化管理，从面到点依次为：&lt;strong&gt;角色、组、账户&lt;/strong&gt;。同时，Dynatrace的权限管理支持LDAP以及密码复杂度的配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“角色”层面，主要负责Dynatrace所有详细权限的配置。Dynatrace默认配置的有如下角色：Administrator（管理员）、Guest（访客）、Power User、User（普通用户）。其中，Administrator具有Dynatrace的所有权限。具体如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX8vuSXj/7BPLt.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;可以根据生产环境的实际需要，创建新的角色及配置详细的权限。如：创建应用项目组的角色--Project Team。权限包括应用分析的所有权限及保密字符串的查看权限，以及可以做线程快照进行分析。权限细节如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX8vuCTD/8Iu8o.png"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;
&lt;p&gt;“组”层面。对3个方面进行了细化，分别是：Dynatrace Server管理（指定角色权限）；系统配置文件（对具体的系统配置文件进行详细的角色权限配置）；仪表板（对具体的仪表板进行权限配置，分为：可读和读写权限。）默认的组有：Incident Email Group（事件邮件告警组）、Business Users。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据实际情况，创建新的组并配置详细的权限。如：创建ilog组--ilog。权限为Project Team，所有与ilog相关的仪表板都有可读权限。具体操作如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX8vuaV7/3bcPr.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX8vulJK/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX8vuvnf/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;“账户”层面。就是实际使用Dynatrace的账户。包括以下内容：用户ID、电子邮件、所属用户组。具体操作如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX8vuLrs/medium.jpg"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-10-authority-management.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 11.Dynatrace创建定时任务</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-11-create-shedule-task.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;操作步骤&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;创建月报，每月邮件发送&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynatrace可以设置在每隔一定时间后，执行指定的任务。&lt;/p&gt;
&lt;p&gt;Dynatrace配置定时任务主要是在&lt;strong&gt;System Profile&lt;/strong&gt;（系统配置文件）层面进行配置。与定时任务有关的配置项包括以下2类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Schedule&lt;/strong&gt;（计划）：主要是与时间相关的配置。计划可以用于创建&lt;strong&gt;Task&lt;/strong&gt; （任务）和&lt;strong&gt;Monitor&lt;/strong&gt;（监视器）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task&lt;/strong&gt; （任务）：主要是具体执行的操作。如：做内存快照、线程快照、CPU采样、Session存储以及定期报告等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;操作步骤&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_3"&gt;创建月报，每月邮件发送&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;创建计划&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;右击指定的System Profile（系统配置文件）-&amp;gt; 编辑系统配置文件。可以看到编辑系统配置文件首选项，在左面版中可以找到&lt;strong&gt;计划&lt;/strong&gt;和&lt;strong&gt;任务&lt;/strong&gt;标签页。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击计划，默认的计划有每10min、每10s、每小时、每分钟。根据需要，创建一个&lt;strong&gt;每月&lt;/strong&gt;的计划，每月计划细则为：从20160701 9:35开始执行，每一个月执行一次，直到永远。如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9Fcrwn/vbDWA.png"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;下边以创建更复杂的&lt;strong&gt;Every workday&lt;/strong&gt;来说明创建计划的具体操作。点击&lt;strong&gt;创建计划...&lt;/strong&gt;跳出创建计划对话框。对话框分为2部分，分别为&lt;strong&gt;运行计划&lt;/strong&gt;和&lt;strong&gt;排除&lt;/strong&gt;，如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FczTZ/A4ZZf.png"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;创建或编辑&lt;strong&gt;计划运行&lt;/strong&gt;，在对话框中可以选择&lt;strong&gt;开始&lt;/strong&gt;、&lt;strong&gt;结束&lt;/strong&gt;时间和&lt;strong&gt;重复周期&lt;/strong&gt;。开始时间可以指定具体到时分秒；结束有3种方式：指定时间结束、执行一定次数后结束、永不结束。如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FcLIJ/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;
&lt;p&gt;设置&lt;strong&gt;重复周期&lt;/strong&gt;，重复周期可以选择具体的重复时间单位和具体的月份。如上图。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建&lt;strong&gt;排除&lt;/strong&gt;。排除有3种方式：始终排除、排除时间（日期）、排除时间自-到。&lt;strong&gt;Every workday&lt;/strong&gt;可以根据需求，始终排除1-12月的周六、周日。如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FcVKB/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;至此，&lt;strong&gt;计划&lt;/strong&gt;创建完毕。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;创建任务&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;回到系统配置文件首选项。点击&lt;strong&gt;任务&lt;/strong&gt;标签页。任务标签页可以对任务进行挂起和恢复以及停止。具体内容如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9Fd93j/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;可以在标签页点击&lt;strong&gt;创建...&lt;/strong&gt;,在本页面可以创建的任务有：内存快照、CPU采样、线程快照、Session存储。注意：无法在本页面创建报告。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9Fdi7K/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;如果需要创建报告任务，可以在Dynatrace客户端 -&amp;gt; 仪表板 -&amp;gt; 打开需要创建为报告的仪表板。如某系统的月报仪表板。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FdrgC/FkwEk.png"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;
&lt;p&gt;在仪表板标签右击 -&amp;gt; 点击报告，如上图：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;弹出&lt;strong&gt;报告创建&lt;/strong&gt;对话框，点击&lt;strong&gt;创建计划...&lt;/strong&gt;，如下图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FdAUJ/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;弹出计划报告任务对话框，主要有3个标签页可以设置：任务、计划、报告设置。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FdNiy/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;任务&lt;/strong&gt;标签页可以指定发送邮件，邮件接收人，主题；或者存放到本机或远程主机磁盘上。本例通过邮件发送。如上图：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;计划&lt;/strong&gt;标签页可以选择之前创建好的&lt;strong&gt;Every Month&lt;/strong&gt;计划，计划执行于Dynatrace Server。如下图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FdPls/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="9"&gt;
&lt;li&gt;&lt;strong&gt;报告设置&lt;/strong&gt;可以选择报告格式，支持以下格式：PDF、WORD、HTML、XML、EXCEL、CSV。这里选择HTML格式，可以直接显示在邮件里。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FdWZP/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="10"&gt;
&lt;li&gt;
&lt;p&gt;在&lt;strong&gt;高级&lt;/strong&gt; -&amp;gt; &lt;strong&gt;详细信息&lt;/strong&gt; 中可以进行更多细节设置。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9Fe8zz/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以自定义logo、显示行数、显示的仪表图。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9Fecyh/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置完成后&lt;strong&gt;运行计划&lt;/strong&gt;，运行后月报效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FejjI/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;至此，Dynatrace创建定时任务--月报全部完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-11-create-shedule-task.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 12.Dynatrace细节优化</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-12-appmon-optimization.html</link><description>&lt;h2 id="_1"&gt;应用响应时间失败率阈值优化&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_2"&gt;概述&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dynatrace的应用相关阈值（包括：响应时间、最慢响应时间、失败率）是由Dynatrace 的&lt;strong&gt;Smart Baseline&lt;/strong&gt; 功能来进行动态调整的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;备注:&lt;br&gt;
具体的实现原理可以查看官方文档：&lt;a href="https://community.dynatrace.com/community/display/DOCDT62/Baseline+and+Smart+Alerting+Explained"&gt;Baseline and Smart Alerting Explained&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大致是根据&lt;strong&gt;过去7天&lt;/strong&gt;的表现来进行动态调整。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在某些特殊应用中，Dynatrace的自动基线并不符合生产系统的实际情况，会出现较多的误报。具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXiRtsLv/5BIUQ.png"&gt;&lt;/p&gt;
&lt;p&gt;在这种情况下，我们需要根据应用的实际情况将动态基线改为静态基线。&lt;/p&gt;
&lt;h3 id="_3"&gt;操作步骤&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;下面以修改具体请求的响应时间基线为例，来说明如何对基线、阈值进行优化。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Dynatrace指定系统配置文件的&lt;strong&gt;监控&lt;/strong&gt;页面 -&amp;gt; 点击中下方的&lt;strong&gt;应用程序&lt;/strong&gt; -&amp;gt; 选择对应的应用 -&amp;gt; 选择需要调整的&lt;strong&gt;业务分析&lt;/strong&gt; -&amp;gt; 点击具体业务分析的&lt;strong&gt;齿轮&lt;/strong&gt;图标 -&amp;gt; 选择&lt;strong&gt;配置基准&lt;/strong&gt;。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXiRu0Af/aY6N4.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;跳出如下&lt;strong&gt;基准设置&lt;/strong&gt;对话框。可以设置失败率、响应时间、是否告警等内容。在此，我们将&lt;strong&gt;响应时间&lt;/strong&gt;设置为静态基准：1000ms。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXiRtDaw/nPr34.png"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;将&lt;strong&gt;最慢响应时间&lt;/strong&gt;（最慢的10%请求）的静态基准设为：10000ms。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXiRtFcD/WkmXY.png"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;至此设置完成，回到&lt;strong&gt;应用程序&lt;/strong&gt; -&amp;gt; 具体的业务分析页面。我们看到基准已经按照配置调整为静态。（绿色线条）。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXiRtNUs/QklZs.png"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-12-appmon-optimization.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 13.Dynatrace Agent 迁移</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-13-move-agent.html</link><description>&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在实际生产环境中，由于Dynatrace 的License有类型、数量上的限制（限制同时接入的agent数量），但是并不限制agent必须永远嵌入同一个JVM中。而且，根据生产环境中不同应用系统的上下线，也需要对Dynatrace 的Agent进行调整迁移，以最大化地发挥Dynatrace的监控价值。&lt;/p&gt;
&lt;h2 id="_2"&gt;操作步骤&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynatrace Agent迁移主要分为3大步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dynatrace迁移前相关告警项的临时关闭（即创建Dynatrace事件&lt;strong&gt;停机时间&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;Agent从原有JVM中移除，并重启对应JVM&lt;/li&gt;
&lt;li&gt;Agent嵌入新的JVM，并重启对应JVM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后生效。&lt;/p&gt;
&lt;h3 id="_3"&gt;创建停机时间&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在左侧&lt;strong&gt;驾驶舱&lt;/strong&gt;中，双击&lt;strong&gt;事件&lt;/strong&gt;，出现事件仪表板 -&amp;gt; 点击“旦”形的停机时间图标，可以看到已经创建好的停机时间规则。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXj3wRLW/iZTj3.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;右击&lt;strong&gt;停机时间&lt;/strong&gt;表格空白处 -&amp;gt; &lt;strong&gt;创建停机时间&lt;/strong&gt;，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXj3wEfp/6NQPj.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;跳出&lt;strong&gt;创建停机时间&lt;/strong&gt;对话框，包括：停机开始时间及持续时间；重复周期；结束时间。此处配置如下图，然后点击下一步。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXj3xe7v/11CaLh.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;选择对应的告警事件，此处需要选择对应的系统配置文件的告警事件：&lt;strong&gt;Application Process Unavailable (unexpected)&lt;/strong&gt; ，并点击下一步。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXj3xnC3/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;配置完成后，返回停机时间表查看，规则已存在，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXj3wJlM/QbX65.jpg"&gt;&lt;/p&gt;
&lt;h3 id="dynatrace-agent"&gt;移除Dynatrace Agent&lt;a class="headerlink" href="#dynatrace-agent" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;说明:&lt;br&gt;
以Weblogic为例。其他中间件操作类似。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;备份对应中间件实例启动脚本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取消对应中间件实例启动脚本中的Dynatrace Agent字段，移除启动脚本中的如下内容：&lt;code&gt;-agentpath:&amp;lt;DT_HOME&amp;gt;/agent/lib/libdtagent.so=name=&amp;lt;AgentName&amp;gt;, server=&amp;lt;dynaTraceCollectorName&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在重启窗口时间段内，重启对应中间件实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移除Dynatrace Agent已完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dynatrace-agent_1"&gt;安装Dynatrace Agent&lt;a class="headerlink" href="#dynatrace-agent_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;请参考文档：&lt;a href="http://cloud.189.cn/t/V7VZze3uqERv"&gt;dynaTrace安装文档- 6.4  Agent 配置&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装完成后，可以在Dynatrace客户端左边&lt;strong&gt;驾驶舱&lt;/strong&gt; -&amp;gt; 双击&lt;strong&gt;Agent概述&lt;/strong&gt; -&amp;gt; 查看迁移后的Agent是否存在及抓取的Purepath总数。&lt;/p&gt;
&lt;p&gt;至此，Dynatrace Agent迁移完成。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-13-move-agent.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 14.Dynatrace创建Server-side业务分析</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-14-create-server-side-bussiness-transaction.html</link><description>&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;业务分析（&lt;strong&gt;Business Transaction&lt;/strong&gt;）可以经过对应用的分析来跟踪一些特殊的交易（如：登陆和购买）。例如，你可以跟踪某应用特定用户群的登陆操作响应时间。业务分析包含过滤方法来检查指定的用户标签的出现（如：一个标记过的web请求测量）。默认会计算响应时间和计数。拆分方法默认是&lt;strong&gt;应用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;针对Dynatrace的业务分析又可以根据数据来源的不同，细分为以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于Server端数据的业务分析&lt;/li&gt;
&lt;li&gt;基于UEM用户访问数据的业务分析&lt;/li&gt;
&lt;li&gt;基于UEM用户行为数据的业务分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本次将介绍如何创建Server-side业务分析。&lt;/p&gt;
&lt;h2 id="_2"&gt;案例介绍&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;客户发现人寿显示影像资料频繁告警相应缓慢。怀疑与用户和具体的IP有关，希望创建针对&lt;strong&gt;显示影像&lt;/strong&gt;这一业务，按照用户名和IP地址进行拆分过滤。以进一步分析。&lt;/p&gt;
&lt;h2 id="_3"&gt;操作步骤&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;备注:&lt;br&gt;
推荐使用&lt;strong&gt;第一个&lt;/strong&gt;而不是&lt;strong&gt;最后一个&lt;/strong&gt;来作为业务分析的筛选条件。&lt;br&gt;
这2者的主要区别是：如果PurePath树很长的话，最后一个将导致每个方法都会查看一遍，如果是第一个，就只看第一个节点就行了&lt;br&gt;
所以&lt;strong&gt;第一个&lt;/strong&gt;作为筛选条件效率会高很多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;操作步骤分解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建特定业务的&lt;strong&gt;测量（measure）&lt;/strong&gt; -- &lt;em&gt;1-4步&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;创建作为过滤条件的&lt;strong&gt;测量&lt;/strong&gt;--客户端IP、用户名 -- &lt;em&gt;5-7步&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;创建&lt;strong&gt;业务分析&lt;/strong&gt; --  &lt;em&gt;8-11步&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;进入指定系统配置文件的&lt;strong&gt;编辑系统配置文件&lt;/strong&gt;菜单，在左面板找到&lt;strong&gt;测量&lt;/strong&gt;标签，如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkeeeHe/sgCJu.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;strong&gt;创建测量...&lt;/strong&gt; ，这里需要按照&lt;strong&gt;URI模式值&lt;/strong&gt;进行创建。如上图：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跳出创建新测量对话框，可以通过ctrl+f 直接查找关键字（在任何列表类界面都可以搜索） -&amp;gt; 点击&lt;strong&gt;web请求 - URI模式值&lt;/strong&gt;，需要根据实际需求填写：名称、URI模式和值、拆分等内容。如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkeeyWo/2g7eJ.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;配置好的&lt;strong&gt;显示影像&lt;/strong&gt;（showimage）的测量如下，并点击&lt;strong&gt;确定&lt;/strong&gt; ：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkeeWmD/x6wu1.jpg"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;再次点击&lt;strong&gt;创建测量...&lt;/strong&gt;,查找并选择&lt;strong&gt;Web请求 - 客户端IP&lt;/strong&gt;，并点击&lt;strong&gt;添加&lt;/strong&gt;，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkef6xe/SGhyA.jpg"&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;再次点击&lt;strong&gt;创建测量...&lt;/strong&gt;,查找并选择&lt;strong&gt;Web请求 - 会话属性值&lt;/strong&gt; ，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkefgJ3/mTATJ.jpg"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;并进行详细的配置，配置可以抓取到用户名的&lt;strong&gt;会话属性&lt;/strong&gt;，本例中的会话属性为：&lt;strong&gt;lifeuser.getUserName()&lt;/strong&gt;。关于具体的会话属性，可以询问应用项目组的成员，也可以通过Dynatrace进行配置后发现。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkefpPU/EZUFO.jpg"&gt;&lt;/p&gt;
&lt;ol start="8"&gt;
&lt;li&gt;回到&lt;strong&gt;系统配置文件首选项&lt;/strong&gt;，在左面版点击业务分析，点击&lt;strong&gt;创建...&lt;/strong&gt;，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkeeqoQ/whjeF.jpg"&gt;&lt;/p&gt;
&lt;ol start="9"&gt;
&lt;li&gt;跳出&lt;strong&gt;业务分析编辑器&lt;/strong&gt;对话框。先对&lt;strong&gt;筛选器&lt;/strong&gt;进行选择，点击“&lt;strong&gt;+&lt;/strong&gt;”按钮，选择之前创建好的&lt;strong&gt;showimage&lt;/strong&gt;测量。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkefBbi/10GYpe.jpg"&gt;&lt;/p&gt;
&lt;ol start="10"&gt;
&lt;li&gt;
&lt;p&gt;再对结果抓取结果进行拆分，在&lt;strong&gt;拆分结果&lt;/strong&gt;栏 -&amp;gt; 点击“&lt;strong&gt;+&lt;/strong&gt;”按钮，选择之前创建好的测量--用户名和客户端IP。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkefKdS/wNnu6.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置&lt;strong&gt;拆分选项&lt;/strong&gt;，按照需求进行拆分。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkefVOx/xWmhe.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;至此创建Server-side业务分析完成。可以选择按照&lt;strong&gt;平均响应时间&lt;/strong&gt;排序，排序后下方会显示出平均响应时间占比的饼图。如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkeg73O/5odkC.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;说明:&lt;br&gt;
关于第7步，如果需要测量该指标，则应该先抓取该指标。&lt;/p&gt;
&lt;p&gt;要抓取该指标，需要配置Servlet的传感器属性。具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkrJrPK/PRzj5.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-14-create-server-side-bussiness-transaction.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 15.Dynatrace创建Server-side业务分析 - 实时抓取某系统大于30s的请求</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-15-create-serverside-bt-another-example.html</link><description>&lt;h2 id="_1"&gt;案例介绍&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;某系统是某保险公司的核心系统。需要对系统进行性能上的优化工作，开发及项目组同事想要抓取到系统上个月所有响应时间超过30s的请求，以及请求的详细信息（如请求的具体时间等）。&lt;/p&gt;
&lt;h2 id="_2"&gt;操作步骤&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;思路分解如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建针对 &lt;strong&gt;核心系统&lt;/strong&gt;响应时间&lt;strong&gt;大于30s&lt;/strong&gt;的&lt;strong&gt;web 请求&lt;/strong&gt;的测量； -- 第1-3步&lt;/li&gt;
&lt;li&gt;创建业务分析，用来筛选并按照URI拆分相应的请求；-- 第4-8步&lt;/li&gt;
&lt;li&gt;结果展示 -- 第9-10步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进入&lt;strong&gt;系统配置文件首选项&lt;/strong&gt; -&amp;gt; 左面版&lt;strong&gt;测量&lt;/strong&gt; -&amp;gt;  查找&lt;strong&gt;web请求&lt;/strong&gt;-&lt;strong&gt;时间&lt;/strong&gt; 测量 -&amp;gt; 复制&lt;strong&gt;web请求测量&lt;/strong&gt; ，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3gTEn/10SqYN.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;跳出编辑测量属性的对话框，在&lt;strong&gt;阈值&lt;/strong&gt; -&amp;gt; 严重级别上限值设置为 30000ms，如下图:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3hgdf/5lMEx.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;转到&lt;strong&gt;详细信息&lt;/strong&gt;标签页，选择要抓取请求的系统--&lt;strong&gt;核心系统&lt;/strong&gt;。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3hmv8/pTYrW.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;在&lt;strong&gt;系统配置文件首选项&lt;/strong&gt; -&amp;gt; &lt;strong&gt;创建...&lt;/strong&gt; ，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3hBdF/byLKG.jpg"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;跳出&lt;strong&gt;业务分析编辑器&lt;/strong&gt;，设置业务分析的&lt;strong&gt;名称&lt;/strong&gt;、&lt;strong&gt;描述&lt;/strong&gt;、&lt;strong&gt;筛选器&lt;/strong&gt;。点击筛选器右侧“+”按钮，选择之前创建的测量。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3hRyy/2DyIX.jpg"&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;选择业务分析拆分方式。点击&lt;strong&gt;拆分结果&lt;/strong&gt; -&amp;gt; 点击“+”按钮 -&amp;gt; 选择对应的拆封规则。本例中应该选择的拆分规则为：&lt;strong&gt;完整的URI&lt;/strong&gt;。（图片仅用作说明）如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3i4uG/HzFFm.jpg"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;选择拆分限制。点击&lt;strong&gt;拆分选项...&lt;/strong&gt; ，跳出拆分选项对话框，选择&lt;strong&gt;不限制&lt;/strong&gt;。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3ibxt/KIdRF.jpg"&gt;&lt;/p&gt;
&lt;ol start="8"&gt;
&lt;li&gt;配置完成后的&lt;strong&gt;业务分析&lt;/strong&gt;如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3hHP6/FMqWt.jpg"&gt;&lt;/p&gt;
&lt;ol start="9"&gt;
&lt;li&gt;至此，业务分析配置完成。显示效果如下图（该图展示的是关于符合条件的URI的统计信息，上表显示的结果按照完整的URI进行拆分，每个拆分项都有&lt;strong&gt;计数&lt;/strong&gt;、&lt;strong&gt;平均响应时间&lt;/strong&gt; 等统计数据；下图中按照需求可以对&lt;strong&gt;计数&lt;/strong&gt;、&lt;strong&gt;平均响应时间&lt;/strong&gt;等生成饼图。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3ijPU/14leMe.jpg"&gt;&lt;/p&gt;
&lt;ol start="10"&gt;
&lt;li&gt;如果需要查看每个URI执行的&lt;strong&gt;开始时间&lt;/strong&gt;、&lt;strong&gt;持续时间&lt;/strong&gt;、&lt;strong&gt;执行堆栈&lt;/strong&gt;、&lt;strong&gt;客户端IP&lt;/strong&gt;等详细信息，可以右击对应的URI，点击&lt;strong&gt;深入分析&lt;/strong&gt; -&amp;gt; PurePath 跳转到PurePath界面，以此来查看完整的信息。&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-15-create-serverside-bt-another-example.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 16.Dynatrace创建Server-side业务分析实战案例3</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-16-create-serverside-bt-3rd-example.html</link><description>&lt;h2 id="_1"&gt;案例介绍&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;某关键业务不仅仅需要URI进行过滤，同时需要对query字段&lt;em&gt;busiid&lt;/em&gt;和&lt;em&gt;showflag&lt;/em&gt;进行过滤。&lt;/p&gt;
&lt;h2 id="_2"&gt;操作步骤&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;思路分解如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置sensor属性 - &lt;strong&gt;Servlet&lt;/strong&gt; 的&lt;strong&gt;请求属性&lt;/strong&gt; -- 添加对应的query字段；&lt;/li&gt;
&lt;li&gt;创建业务分析，配置指定的POST的URI、query；&lt;/li&gt;
&lt;li&gt;将配置好的测量作为组合条件配置业务分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;说明:&lt;br&gt;
需要实现的业务分析示例如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/bt_1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;:heavy_exclamation_mark:不正确的配置示例如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/bt_2.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置&lt;strong&gt;servlet&lt;/strong&gt;传感器属性 -- &lt;strong&gt;请求参数&lt;/strong&gt; 来抓取对应的&lt;strong&gt;query&lt;/strong&gt;信息，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/bt_4.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;创建包含指定query的测量 -- busiid （通过&lt;strong&gt;Web请求 - 参数值&lt;/strong&gt; 这个模板测量）。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/bt_5.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;创建包含指定query的测量 -- showflag，如下图:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/bt_7.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;注意&lt;strong&gt;测量&lt;/strong&gt;的&lt;strong&gt;拆分阈值&lt;/strong&gt;要设置为超过&lt;strong&gt;1&lt;/strong&gt;就拆分。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/bt_6.jpg"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;通过组合3种测量 - post URI 、 query 字段 busiid、query字段showFlag 通过组合 &lt;strong&gt;与&lt;/strong&gt; 条件来创建业务分析。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/bt_3.jpg"&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;至此，通过query设置业务分析已经完成。&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-16-create-serverside-bt-3rd-example.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 17.Dynatrace与Tivoli整合</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-17-appmon-and-tivoli.html</link><description>&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynatrace与Tivoli整合是通过SNMP协议完成的。Dynatrace发送SNMP协议信息到Tivoli，Tivoli接收到信息后进行分析，根据Tivoli上相应的规则进行一系列的动作，如：发送告警邮件、告警短信等。&lt;/p&gt;
&lt;p&gt;Dynatrace上有&lt;strong&gt;SNMP Action Plugin&lt;/strong&gt; 插件，通过该插件来实现SNMP协议的发送。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXU473ky/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;要使用&lt;strong&gt;SNMP Action Plugin&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供MIB库文件给SNMP目标系统的管理员。管理员会为其系统解析该文件。MIB库文件也会提供SNMP trap和你目标系统间的接口。&lt;/li&gt;
&lt;li&gt;在Dynatrace Server设置里启用SNMP Action Plugin： &lt;strong&gt;Dynatrace Server设置&lt;/strong&gt; -&amp;gt; &lt;strong&gt;插件&lt;/strong&gt; -&amp;gt; &lt;strong&gt;SNMP Action Plugin&lt;/strong&gt;。启用之后，SNMP action出现在&lt;strong&gt;事件&lt;/strong&gt;行为列表中。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;说明:&lt;br&gt;
Dynatrace SNMP 映射说明文档：&lt;a href="http://cloud.189.cn/t/AfayAfvEjem2"&gt;Dynatrace SNMP Mapping&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当前MIB库文件地址：&lt;a href="https://community.dynatrace.com/community/download/attachments/221381746/DYNATRACE-TRAP-MIB-V2?version=1&amp;amp;modificationDate=1432016056067&amp;amp;api=v2"&gt;DYNATRACE-TRAP-MIB-V2&lt;/a&gt;。MIB为2种受支持的traps提供以下值：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dynaTraceIncidentStart TRAP-TYPE&lt;br&gt;
ENTERPRISE dynaTrace&lt;br&gt;
VARIABLES (name, message, description, severity, violation, server, systemprofile, starttime)&lt;br&gt;
DESCRIPTION "Indicates that a new dynaTrace incident has begun."&lt;br&gt;
::= 1&lt;/p&gt;
&lt;p&gt;dynaTraceIncidentEnd TRAP-TYPE&lt;br&gt;
ENTERPRISE dynaTrace&lt;br&gt;
VARIABLES (name, message, description, severity, violation, server, systemprofile, starttime, endtime, duration)&lt;br&gt;
DESCRIPTION "Indicates that a dynaTrace incident has ended."&lt;br&gt;
::= 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_2"&gt;配置步骤&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以配置&lt;strong&gt;失败率太高&lt;/strong&gt;事件为例，说明事件如何通过SNMP协议发送给Tivoli。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;右击指定系统配置文件，弹出系统配置文件首选项 -&amp;gt; 左面版选择&lt;strong&gt;事件&lt;/strong&gt; -&amp;gt; 右边点击&lt;strong&gt;失败率太高&lt;/strong&gt;事件 -&amp;gt; 点击&lt;strong&gt;编辑&lt;/strong&gt;，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXU47qEb/ZZaXa.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;跳出&lt;strong&gt;编辑事件规则&lt;/strong&gt;对话框。可以看到在下边&lt;strong&gt;设置&lt;/strong&gt;里，默认的是基本设置，点击&lt;strong&gt;高级配置&lt;/strong&gt;进入高级设置页面。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXU47xJD/c5CA3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXU47CET/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;在页面中点击&lt;strong&gt;添加&lt;/strong&gt;，跳出如下界面：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXU47az8/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;
&lt;p&gt;选中&lt;strong&gt;SNMP Action Plugin&lt;/strong&gt;，下边出现一系列相关属性。根据对应的目标SNMP系统（如Tivoli的信息）来进行填写：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Target Host&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Target Port&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SNMP Version&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maximum Number of Message Octets&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完成后点击确定，然后在高级设置里，选择新配置的SNMP插件，设置发送SNMP trap信息 的严重性级别（一般、警告、严重）以及执行的条件（开始时、结束时、开始和结束时）。严重性级别一般警告配置邮件告警，严重配置邮件和短信告警，执行条件一般选择&lt;strong&gt;开始和结束时&lt;/strong&gt;。如下图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXU47iXN/PCCU0.jpg"&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;后续工作由SNMP接受系统的管理员进行进一步的配置。包括确认消息送达，编写告警规则等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_3"&gt;其他配置说明&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在某公司Dynatrace与Tivoli配置期间，出现了较多的问题。现在整理如下：&lt;/p&gt;
&lt;h3 id="_4"&gt;字符集编码&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dynatrace SNMP的编码格式为&lt;strong&gt;utf-8&lt;/strong&gt;，且不可更改。&lt;/p&gt;
&lt;p&gt;而该公司Tivoli的编码格式为&lt;strong&gt;GBK&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;由于编码格式的不同，导致Dynatrace通过SNMP协议发送到Tivoli的内容，在有中文的地方发生&lt;strong&gt;字段跳行&lt;/strong&gt;的情况。&lt;/p&gt;
&lt;p&gt;为了尽量减少该问题，Dynatrace测量、事件等相关内容的名称和描述都尽量修改为&lt;strong&gt;英文&lt;/strong&gt;，以此来减少跳行问题的发生。但是尽管所有的相关内容都改为英文，Dynatrace在发送告警的时候，会自动加入&lt;strong&gt;超过了&lt;/strong&gt; 和&lt;strong&gt;上限&lt;/strong&gt; 字样。具体见示例部分。&lt;/p&gt;
&lt;p&gt;为了解决该问题，确定了如下的方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;dynaTrace使用中文语言包（为了Dynatrace的易用性考虑）&lt;/li&gt;
&lt;li&gt;邮件告警使用dynaTrace自带的邮件告警服务&lt;/li&gt;
&lt;li&gt;Severe级别、静态阈值部分告警通过Tivoli来实现短信告警。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之所以静态阈值部分可以采用Tivoli告警，有以下原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;告警格式、字段、内容固定，即使有中文跳行，跳的行数也是相同的，可以通过Tivoli配置绕过该问题&lt;/li&gt;
&lt;li&gt;由于动态告警以及Dynatrace自带告警无法手动进行触发，且这些告警的格式与静态阈值告警格式不同，所以并未将这些告警发送到Tivoli。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;p&gt;Dynatrace发给Tivoli的信息：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HEX&lt;/strong&gt;格式内容：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;e8 b6 85 e8 bf 87 e4&lt;br&gt;
ba 86 20 57 65 62 4c 6f 67 69 63 20 39 2b 2f 45 4a 42 20 50 6f 6f 6c 20 54 69&lt;br&gt;
6d 65 6f 75 74 20 54 6f 74 61 6c 20 43 6f 75 6e 74 20 3a 20 3c 6c 69 66 65 2d&lt;br&gt;
73 65 72 76 69 63 65 5f 65 69 6e 73 75 3e 20 4a 44 42 43 5f 53 74 61 74 65 20 3c&lt;br&gt;
61 6c 6c 2d 61 70 70 6c 69 63 61 74 69 6f 6e 73 3e 20 28 54 50 4c 69 66 65 5f&lt;br&gt;
77 6c 73 5f 63 78 6a 6b 5f 6c 62 74 5f 33 36 5b 6c 62 74 61 70 70 53 65 72 76&lt;br&gt;
65 72 31 5d 40 73 68 74 70 6c 73 65 65 70 6f 72 74 6c 62 74 30 31 29 20 e4 b8&lt;br&gt;
8a e9 99 90&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;utf-8&lt;/strong&gt; 格式内容：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;超过了&lt;br&gt;
WebLogic 9+/EJB Pool Timeout Total Count : &lt;life-service_einsu&gt;&lt;br&gt;
JDBC_State &lt;all-applications&gt;&lt;br&gt;
(TPLife_wls_cxjk_lbt_36[lbtappServer1]@shtplseeportlbt01) 上限&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;GBK&lt;/strong&gt;内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;瓒呰繃浜?WebLogic9+/EJB Pool Timeout Total Count : &lt;life-service_einsu&gt; JDBC_State&lt;all-applications&gt;(TPLife_wls_cxjk_lbt_36[lbtappServer1]@shtplseeportlbt01) 涓婇檺&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经过排查，确定该字样位于：&lt;strong&gt;oracle jre的lib库--rt.jar包中&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/path/to/dynatrace/dynatrace-6.2/jre/lib/rt.jar&lt;/p&gt;
&lt;p&gt;具体位于：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;com/sun/org/apache/xalan/internal/xsltc/compiler/util/ErrorMessages_zh_CN.class&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只要Dynatrace Server选择了中文语言，就会自动加入该字样。&lt;/p&gt;
&lt;p&gt;同时，发现因为加入的字样类似，导致的&lt;strong&gt;跳行&lt;/strong&gt;都是跳了固定的行数，所以我们在Tivoli上对跳了之后的行进行解析，得到了正确的告警信息。通过该方法绕过了字符集冲突的问题。&lt;/p&gt;
&lt;h3 id="hostnameip"&gt;HOSTNAME与IP映射&lt;a class="headerlink" href="#hostnameip" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;由于Dynatrace发送的告警信息都是具体的HOSTNAME而不是对应的IP。而Tivoli是通过IP来找到对应的系统并告警。所以，为了正确地告警，在Tivoli中加入了Dynatrace所监控主机的&lt;strong&gt;HOSTNAME&lt;/strong&gt;和&lt;strong&gt;IP&lt;/strong&gt;的映射表。&lt;/p&gt;
&lt;p&gt;后续如有新增或调整监控主机，需要联系Tivoli的对应负责人进行相应调整。&lt;/p&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;appserverxxx 10.1.1.xxx&lt;/p&gt;
&lt;p&gt;dzbd-app1 10.x.x.x&lt;/p&gt;
&lt;p&gt;hostnamexxx01 10.1.x.x&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_5"&gt;短信告警&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;短信告警格式如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IP+服务器描述+系统+Weblogic Server+告警描述+当前值+发生时间&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例（短信告警内容）：&lt;/p&gt;
&lt;p&gt;[XXXX公司]10.1.129.36:xx系统xx应用服务器1；xx系统；Weblogic服务器：TPLife_wls_cxjk_xx_xx[appServer1]发生告警：&lt;life-service_einsu&gt; WLS JVM FreeMemory is low；当前值：1698.515644564548已恢复！；发生时间：2016-05-11&lt;br&gt;
18:40:31&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="severe"&gt;Severe级别静态告警阈值&lt;a class="headerlink" href="#severe" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;目前的Severe级别静态阈值告警有：（该级别使用短信告警。）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;TIPS：&lt;br&gt;
目前已经实现各个系统的测量参数、告警阈值、邮件通知人的自定义。（如针对核心系统，活动线程数告警阈值比其他大）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Weblogic Hogging线程数过高     &amp;gt;50 告警&lt;/li&gt;
&lt;li&gt;Weblogic JDBC连接池状态不正常&lt;/li&gt;
&lt;li&gt;JVM剩余内存过小                    &amp;lt;50M 告警&lt;/li&gt;
&lt;li&gt;WLS weblogic.kernel.System-MaxWaitTime 过长     &amp;gt;10min 告警&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="warning"&gt;Warning级别静态告警阈值&lt;a class="headerlink" href="#warning" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;以下为初始的设置，后续可以根据实际的告警情况进行调整和优化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;活动线程数     Warning：&amp;gt;250    （核心系统线程数为400，暂定：Warning： &amp;gt;300 )&lt;/li&gt;
&lt;li&gt;JDBC连接延迟时间    Warning：&amp;gt;5s  Severe:&amp;gt;10s&lt;/li&gt;
&lt;li&gt;JDBC失败重连        Warning：&amp;gt;5      Severe:&amp;gt;10&lt;/li&gt;
&lt;li&gt;JDBC泄漏连接数    Warning：&amp;gt;15   Severe:&amp;gt;30&lt;/li&gt;
&lt;li&gt;JDBC当前等待连接计数   Warning:&amp;gt;10  Severe:&amp;gt;30&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-17-appmon-and-tivoli.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 18.Dynatrace创建自定义告警事件</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-18-create-incidents.html</link><description>&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynatrace有以下概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Measure&lt;/strong&gt;（测量） -- 即需要监控的指标。（包括需要监控的指标、对应的Agent、阈值等）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incidents&lt;/strong&gt;（事件） -- 即告警事件。订阅了Measure，配置了Measure的阈值，然后才能创建Incidents，并且定义好根据哪个阈值来告警，以何种方式发送，产生告警该做的动作（如threaddump等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本次将介绍如何创建自定义告警事件。&lt;/p&gt;
&lt;h2 id="_2"&gt;操作步骤&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本次以创建&lt;strong&gt;指定系统&lt;/strong&gt;的&lt;strong&gt;WebLogic的Hogging线程数&lt;/strong&gt;告警为例。&lt;/p&gt;
&lt;p&gt;操作步骤分解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建需要监控的指标--&lt;strong&gt;Measure&lt;/strong&gt;(测量) -- 1-5步&lt;/li&gt;
&lt;li&gt;创建告警事件--&lt;strong&gt;Incidents&lt;/strong&gt; -- 6-8步&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;打开&lt;strong&gt;系统配置文件&lt;/strong&gt; -&amp;gt; &lt;strong&gt;测量结果&lt;/strong&gt;标签页 -&amp;gt; 点击&lt;strong&gt;创建测量&lt;/strong&gt;。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_1.JPG"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;默认有所有系统的Hogging线程数Measure。可以通过复制，并修改来创建。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_2.JPG"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;对复制出来的测量进行编辑。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_2-1.JPG"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;编辑Measure（测量）的相关属性。（包括：名称、具体的测量属性、阈值、对应的Agent组）。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_3.JPG"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_4.JPG"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_5.JPG"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;
&lt;p&gt;至此，Measure（测量）创建完毕。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始创建&lt;strong&gt;事件规则&lt;/strong&gt;，点击 &lt;strong&gt;事件&lt;/strong&gt;标签页 -&amp;gt; 点击 &lt;strong&gt;创建事件规则&lt;/strong&gt;。如下图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_6.JPG"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;
&lt;p&gt;告警&lt;strong&gt;条件&lt;/strong&gt;选择上文创建好的Measure（测量）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;告警&lt;strong&gt;动作&lt;/strong&gt;可以配置发邮件，做快照等。如下图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_7.JPG"&gt;&lt;/p&gt;
&lt;ol start="9"&gt;
&lt;li&gt;告警&lt;strong&gt;操作&lt;/strong&gt;可以进行更多的设置。另外，可以对告警的细粒度、严重性、告警抑制时间等进行设置。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_8.JPG"&gt;&lt;/p&gt;
&lt;ol start="10"&gt;
&lt;li&gt;至此，自定义告警创建完毕。&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-18-create-incidents.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 19.Dynatrace创建告警事件停机时间</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-19-create-downtime.html</link><description>&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynatrace在生产环境的使用中，往往会碰到所监控系统的正常生产重启（如停机窗口、发版本、维护等）导致的误告警。&lt;/p&gt;
&lt;p&gt;为了避免这种问题，可以通过设置告警&lt;strong&gt;停机时间&lt;/strong&gt;（downtime)来减少不必要的告警。&lt;/p&gt;
&lt;h2 id="_2"&gt;操作&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;点击&lt;strong&gt;事件&lt;/strong&gt;仪表板右上角按钮。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_downtime_1.JPG"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;点击后出现&lt;strong&gt;停机窗口&lt;/strong&gt;表。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_downtime_2.JPG"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;在表中点击右键&lt;strong&gt;创建停机时间&lt;/strong&gt;。勾选对应的系统配置文件中的对应的告警规则（如停机或重启时会出现的告警：应用关闭和应用进程不可用）。出现如下对话框：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_downtime_3.JPG"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;点击下一步，进行详细的设置，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_downtime_4.JPG"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;停机时间规则可以时临时性的一次。也可以根据生产重启窗口的要求，如设置为每月的第三周周六。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_downtime_5.JPG"&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;配置完成后显示如下。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_downtime_6.JPG"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-19-create-downtime.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 5.Dynatrace 客户端安装</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-5-install-client.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-dynatrace"&gt;1 Dynatrace客户端类型简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-web"&gt;2 Web 客户端安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-webstart32"&gt;3 WebStart客户端安装（推荐32位系统安装）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-64"&gt;4 富客户端安装（仅适用64位系统）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-webwebstart"&gt;5 Web端和客户端（WebStart 富客户端）联动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="1-dynatrace"&gt;1 Dynatrace客户端类型简介&lt;a class="headerlink" href="#1-dynatrace" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynatrace有3种类型的客户端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网页端&lt;/li&gt;
&lt;li&gt;WebStart客户端&lt;/li&gt;
&lt;li&gt;富客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三者有以下区别：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网页端&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过浏览器（最新版本IE/Firefox/Chrome等）访问&lt;/li&gt;
&lt;li&gt;默认端口：9911（HTTPS）&lt;/li&gt;
&lt;li&gt;具有基本的监控功能（包括仪表板、应用、运维的基本监控信息），进一步分析需要跳转到后两种客户端执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;WebStart客户端&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要JRE/JDK  7/8支持&lt;/li&gt;
&lt;li&gt;需要通过网页下载一个jnlp文件并打开&lt;/li&gt;
&lt;li&gt;具有完整的监控分析功能（与富客户端功能相同）&lt;/li&gt;
&lt;li&gt;支持32位、64位系统&lt;/li&gt;
&lt;li&gt;支持的系统取决于JRE/JDK所支持的系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;富客户端&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为安装包或绿色压缩包&lt;/li&gt;
&lt;li&gt;只支持64位系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-web"&gt;2 Web 客户端安装&lt;a class="headerlink" href="#2-web" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;访问IP地址：https://X.X.X.X:9911 ,并继续浏览。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVynxlr/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跳转到Dynatrace Web登录页，输入自己的账号密码，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVynKLL/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录后跳转到Dynatrace首页，最上从左到右依次为：（如下图）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;菜单&lt;/li&gt;
&lt;li&gt;仪表板&lt;/li&gt;
&lt;li&gt;筛选应用&lt;/li&gt;
&lt;li&gt;筛选时间范围&lt;/li&gt;
&lt;li&gt;分享&lt;/li&gt;
&lt;li&gt;用户信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyu6tA/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;日常使用的相关菜单及说明如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyCwo8/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="3-webstart32"&gt;3 WebStart客户端安装（推荐32位系统安装）&lt;a class="headerlink" href="#3-webstart32" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载并安装JRE/JDK 7/8，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyD3Kn/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyCVEm/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;浏览器访问Dynatrace Server IP：https://X.X.X.X:8021 ,如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyDEFL/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问后跳转到首页，点击&lt;strong&gt;Webstart客户端&lt;/strong&gt;，会下载一个client.jnlp文件。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyGvZ8/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开client.jnlp文件，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyTbtC/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;忽略告警并继续，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyTEQ2/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;之后会自动下载WebStart客户端，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyV7rn/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;之后会自动启动，忽略告警并继续，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyWtVK/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WebStart客户端的界面显示，输入账号密码，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz0xXl/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WebStart的界面展示如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz1NOi/pFI7J.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="4-64"&gt;4 富客户端安装（仅适用64位系统）&lt;a class="headerlink" href="#4-64" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装包包括苹果OS安装包、windows安装包及绿色解压版、linux版（jar包）如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz8tVT/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下面以windows安装包为例（windows压缩包直接解压使用），点击安装包运行，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz2dG3/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接受协议，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz2Ruw/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择路径，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz3f0G/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装开始，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz3JQe/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装完成，运行客户端，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz47sp/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;填入IP+端口、账号密码，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz4RqZ/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录后会提示升级客户端，点击'YES'并继续，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz5flw/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载升级包，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz5sTF/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;升级后需重启客户端，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz5SVf/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启后会提示选择&lt;strong&gt;语言&lt;/strong&gt;，根据需要选择中文或英文，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz6OMI/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跳转到首界面，界面简介如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz7qPQ/12Mkk2.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="5-webwebstart"&gt;5 Web端和客户端（WebStart 富客户端）联动&lt;a class="headerlink" href="#5-webwebstart" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Web端无法深入分析，可以在分析指定事务的时候，直接点击&lt;strong&gt;OPEN IN CLIENT&lt;/strong&gt; 后在WebStart或富客户端中进行分析。具体操作如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在Web端分析具体的事务，需要深入分析，点击&lt;strong&gt;OPEN IN CLIENT&lt;/strong&gt;如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz7I3h/cFcZZ.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;首次因为https信任会失败，接受告警后再次点击会跳出客户端，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz8dUA/FePWL.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 04 Apr 2019 21:22:03 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-04:/dynatrace-appmon-handbook-5-install-client.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 7.Dynatrace agent安装</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-7-install-agent.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#server"&gt;Server 端配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#agent"&gt;安装 Agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips"&gt;TIPS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="server"&gt;Server 端配置&lt;a class="headerlink" href="#server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;编辑系统配置文件&lt;br&gt;
&lt;img alt="编辑系统配置文件" src="./images/appmon-install-agent-1.png"&gt;&lt;/li&gt;
&lt;li&gt;新建Agent组&lt;br&gt;
&lt;img alt="新建agent组" src="./images/appmon-install-agent-2.png"&gt;&lt;/li&gt;
&lt;li&gt;设置传感器映射关系&lt;ol&gt;
&lt;li&gt;▽ 与agent名字匹配：&lt;br&gt;
&lt;img alt="与agent名字匹配" src="./images/appmon-install-agent-3.png"&gt;&lt;/li&gt;
&lt;li&gt;▽ 高级设置：取消自动生成heapdump，将解析度设为最低，降低系统开销：&lt;br&gt;
&lt;img alt="高级设置" src="./images/appmon-install-agent-4.png"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;▽ 设置放置哪些传感器, 根据实际需要选定传感器种类：&lt;br&gt;
&lt;img alt="传感器种类" src="./images/appmon-install-agent-5.png"&gt;&lt;/li&gt;
&lt;li&gt;配置上一步放置的传感器的属性&lt;br&gt;
&lt;img alt="传感器属性" src="./images/appmon-install-agent-6.png"&gt;&lt;ol&gt;
&lt;li&gt;▽ JDBC传感器设置：将SQL命令捕获长度设为10240：&lt;br&gt;
&lt;img alt="jdbc 10240" src="./images/appmon-install-agent-7.png"&gt;&lt;/li&gt;
&lt;li&gt;▽ Java Logging传感器设置，增加几种级别的日志捕获：&lt;br&gt;
&lt;img alt="java传感器配置" src="./images/appmon-install-agent-8.png"&gt;&lt;/li&gt;
&lt;li&gt;▽ Servlets传感器设置：&lt;br&gt;
&lt;img alt="servlet传感器设置" src="./images/appmon-install-agent-9.png"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其他传感器默认设置即可。&lt;/p&gt;
&lt;h2 id="agent"&gt;安装 Agent&lt;a class="headerlink" href="#agent" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;说明:&lt;br&gt;
此处以&lt;strong&gt;dynatrace appmon 6.2&lt;/strong&gt;版本举例, 请根据实际情况换成对应版本的安装包.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;上传&lt;code&gt;dynatrace-agent-6.2.0.1239-unix.jar&lt;/code&gt;.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;java  -jar dynatrace-agent-6.2.0.1239-unix.jar&lt;/code&gt; （java版本必须与app server使用的相同），安装过程中修改安装路&lt;br&gt;
径，eg:&lt;code&gt;/tpsys/dynatrace/dynatrace-6.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将agent嵌入到java中间件(如:weblogic)实例中：在启动脚本的环境变量&lt;code&gt;USER_MEM_ARGS&lt;/code&gt;中添加，&lt;code&gt;-agentpath:/tpsys/dynatrace/dynatrace-6.2/agent/lib64/libtagent.so=name=TPLife_wls_lbt_10.94.12.232_8001,server=10.94.21.140:9998&lt;/code&gt;（说明：name表示设置该agent的名字，server表示collector）&lt;/li&gt;
&lt;li&gt;重启java中间件生效。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="tips"&gt;TIPS&lt;a class="headerlink" href="#tips" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;确认agent与哪个collector相连&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon-install-agent-10.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon-install-agent-11.png"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 04 Apr 2019 21:22:03 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-04:/dynatrace-appmon-handbook-7-install-agent.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 8.Dynatrace新增主机组&amp;添加应用程序定义</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-8-add-application.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;新增主机组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;应用程序定义&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;新增主机组&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;▽ 编辑系统配置文件--基础结构--创建&lt;br&gt;
&lt;img alt="基础结构" src="./images/appmon-add-application-1.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 输入主机组名称&lt;br&gt;
&lt;img alt="主机组" src="./images/appmon-add-application-2.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 根据主机hostname，添加主机组映射关系：有多重语法，“包含”、“开头为”、“结尾&lt;br&gt;
为”等等。&lt;br&gt;
&lt;img alt="主机名规则" src="./images/appmon-add-application-3.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 设置主机的告警阈值&lt;br&gt;
&lt;img alt="主机告警阈值" src="./images/appmon-add-application-4.png"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;应用程序定义&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;▽ 编辑系统配置文件--应用程序--创建&lt;br&gt;
&lt;img alt="创建应用程序" src="./images/appmon-add-application-5.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 添加应用程序的匹配关系：可以包含应用实例所在主机的IP、应用程序域名等。&lt;br&gt;
&lt;img alt="应用程序匹配规则" src="./images/appmon-add-application-6.png"&gt;&lt;/p&gt;
&lt;p&gt;配置完成后, 还要查看监控面板，如果发现仍有一些URI没有纳入到自定义的应用程序监控，可以查看web请&lt;br&gt;
求，进行全面的纳入。&lt;/p&gt;
&lt;p&gt;▽ 系统配置文件--web请求--右键更多：&lt;br&gt;
&lt;img alt="web请求" src="./images/appmon-add-application-7.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 根据“源”编辑筛选：&lt;br&gt;
&lt;img alt="筛选" src="./images/appmon-add-application-8.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 应用程序条目筛选：&lt;br&gt;
&lt;img alt="条目筛选" src="./images/appmon-add-application-9.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 将未包含的URI全部加入到定义的应用程序中：&lt;br&gt;
&lt;img alt="添加" src="./images/appmon-add-application-10.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 查看监控面板，直到Default Application监控信息为空、以及不再出现其他未纳入的URI为止。&lt;br&gt;
&lt;img alt="default" src="./images/appmon-add-application-11.png"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 04 Apr 2019 21:22:03 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-04:/dynatrace-appmon-handbook-8-add-application.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 6.Dynatrace 生产环境License导入</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-6-import-license.html</link><description>&lt;ol&gt;
&lt;li&gt;在Dynatrace eservices -&amp;gt; &lt;a href="https://eservices.dynatrace.com/eservices/customers-licenses.jsf"&gt;My Licenses&lt;/a&gt;找到对应的License Key的信息，点击&lt;strong&gt;Download License File&lt;/strong&gt;，如下图：(下载后得到License文件名示例：&lt;strong&gt;dynaTrace_license_201608031073.key&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="下载未激活License" src="http://pic.yupoo.com/east4ming_v/FMMHkMhr/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;进入到Dynatrace Server 设置 -&amp;gt; License，选择&lt;strong&gt;导入&lt;/strong&gt;，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="导入未激活License" src="http://pic.yupoo.com/east4ming_v/FMMGDsAH/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;点击&lt;strong&gt;下一步&lt;/strong&gt;，出现如下图所示，如果Dynatrace Server无法连接到Internet，点击&lt;strong&gt;跳过&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FMMGbuuD/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;跳过后需要手动导入之前下载的&lt;strong&gt;未激活的License文件&lt;/strong&gt;，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="从文件导入未激活License" src="http://pic.yupoo.com/east4ming_v/FMMGEfhk/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;导入&lt;strong&gt;未激活的License&lt;/strong&gt;后，会提示需要在网上进行&lt;strong&gt;激活&lt;/strong&gt;的操作，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="需要网上激活" src="http://pic.yupoo.com/east4ming_v/FMMGEMTr/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;点击下一步，会出现License激活的相关信息，主要的是&lt;strong&gt;Activation Key&lt;/strong&gt;信息，为25位的大写字母和数字的组合，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Activation Key" src="http://pic.yupoo.com/east4ming_v/FMMHj38Z/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;记下该激活码信息，登陆Dynatrace eservices -&amp;gt; &lt;a href="https://eservices.dynatrace.com/eservices/customers-licenses.jsf"&gt;My Licenses&lt;/a&gt;,输入激活码激活,如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FMMHj7UN/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="8"&gt;
&lt;li&gt;激活后会提示成功激活，并给出&lt;strong&gt;已激活的License下载地址&lt;/strong&gt;，如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FMMGFUk2/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="9"&gt;
&lt;li&gt;下载&lt;strong&gt;已激活License&lt;/strong&gt;，（下载后的文件示例：&lt;strong&gt;dynaTrace_license_201608031073__activated.key&lt;/strong&gt;),再次导入，如下图：（导入&lt;strong&gt;未激活的License&lt;/strong&gt;会提示&lt;strong&gt;当前许可证尚未启用&lt;/strong&gt;；导入&lt;strong&gt;已激活的License&lt;/strong&gt;提示会消失）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="导入已激活License" src="http://pic.yupoo.com/east4ming_v/FMMGGbCZ/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="10"&gt;
&lt;li&gt;通过文件导入&lt;strong&gt;已激活License&lt;/strong&gt;文件，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="通过文件导入已激活License" src="http://pic.yupoo.com/east4ming_v/FMMGGsUD/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;导入后成功激活，显示如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="成功激活" src="http://pic.yupoo.com/east4ming_v/FMMY9dbb/medium.jpg"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 04 Apr 2019 21:07:23 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-04:/dynatrace-appmon-handbook-6-import-license.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 9.Dynatrace自定义仪表板</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-9-customized-dashboard.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;▽ 仪表板 -&amp;gt; 新建&lt;br&gt;
&lt;img alt="新建仪表板" src="./images/appmon-add-dashboard-1.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 在对应的系统配置文件下，选择图标绘制——自定义，添加系列：&lt;br&gt;
&lt;img alt="添加系列" src="./images/appmon-add-dashboard-2.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 选择测量值，以下以“web页面请求——Purepath响应时间”为例，按应用程序拆分：&lt;br&gt;
&lt;img alt="web请求" src="./images/appmon-add-dashboard-3.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;备注:&lt;br&gt;
注：dynatrace上几乎所有地方都可以可以直接ctrl+F进行搜索。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;▽ 调整图表属性. 如重命名、选择时间范围、分辨率、图标类型、拆分模式、可视性等：&lt;br&gt;
&lt;img alt="图表属性" src="./images/appmon-add-dashboard-4.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 可以继续在该仪表板中添加系列，即将多个图表放在一个仪表板中：&lt;br&gt;
&lt;img alt="添加多个图表" src="./images/appmon-add-dashboard-5.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 拖动图表的标题，结合每个图表的属性，直到调到满意的效果。&lt;br&gt;
&lt;img alt="最终效果" src="./images/appmon-add-dashboard-6.png"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 04 Apr 2019 21:07:23 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-04:/dynatrace-appmon-handbook-9-customized-dashboard.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>监控JAVA JMX 指标 - 通过Dynatrace AppMon而无需Agent</title><link>https://www.EWhisper.cn/monitoring-java-soft-with-dynatrace-appmon-without-agent.html</link><description>&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在近期的中间件组会议中, 发现存在一个监控盲区, 即: &lt;strong&gt;JBoss EAP 6.X和Wildfly 10的监控&lt;/strong&gt;. 目前CA Wily和Zabbix(Zabbix应该可以监控的)暂时无法实现对其监控, 需要Dynatrace对其进行监控.(有Agent和无Agent两种方式). 本次主要介绍&lt;strong&gt;无Agent&lt;/strong&gt;的方式.&lt;/p&gt;
&lt;h2 id="_2"&gt;应用服务器端配置&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JBoss EAP 6.X或Wildfly 10配置调整, &lt;strong&gt;需要配置logmanager和暴露JMX Remote端口&lt;/strong&gt;. 如下:&lt;/p&gt;
&lt;p&gt;对于Wildfly 10.1.0  (windows脚本, Linux下按照shell语法做相应修改, 下同)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;rem # Set LogManager&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;JAVA_OPTS=&lt;/span&gt;&lt;span class="nv"&gt;%JAVA_OPTS%&lt;/span&gt;&lt;span class="s2"&gt; -Djboss.modules.system.pkgs=org.jboss.logmanager  -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Xbootclasspath/p:D:\wildfly-10.1.0.Final\wildfly-10.1.0.Final\modules\system\layers\base\org\jboss\logmanager\main\jboss-logmanager-2.0.4.Final.jar -Xbootclasspath/p:D:\wildfly-10.1.0.Final\wildfly-10.1.0.Final\modules\system\layers\base\org\jboss\log4j\logmanager\main\log4j-jboss-logmanager-1.1.2.Final.jar&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;rem # Set JMX Remote&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;JAVA_OPTS=&lt;/span&gt;&lt;span class="nv"&gt;%JAVA_OPTS%&lt;/span&gt;&lt;span class="s2"&gt; -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=1090 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;JBoss EAP 6.4&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;rem # Set LogManager&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;JAVA_OPTS=&lt;/span&gt;&lt;span class="nv"&gt;%JAVA_OPTS%&lt;/span&gt;&lt;span class="s2"&gt; -Djboss.modules.system.pkgs=org.jboss.logmanager -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Xbootclasspath/p:D:\EAP-6.4.0\modules\system\layers\base\org\jboss\logmanager\main\jboss-logmanager-1.5.4.Final-redhat-1.jar -Xbootclasspath/p:D:\EAP-6.4.0\modules\system\layers\base\org\jboss\log4j\logmanager\main\log4j-jboss-logmanager-1.1.1.Final-redhat-1.jar&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;rem # Set JMX Remote&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;JAVA_OPTS=&lt;/span&gt;&lt;span class="nv"&gt;%JAVA_OPTS%&lt;/span&gt;&lt;span class="s2"&gt; -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=1090 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改完成后重启对应的应用服务器.&lt;/p&gt;
&lt;h2 id="dynatrace"&gt;Dynatrace端配置&lt;a class="headerlink" href="#dynatrace" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dynatrace通过一个插件: &lt;strong&gt;JMX Enhanced Monitor&lt;/strong&gt;来实现对JMX数据的收集.&lt;/p&gt;
&lt;p&gt;要使用该插件, 需要做以下2步操作:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建&lt;strong&gt;任务&lt;/strong&gt;, 通过该任务, 根据不同的JVM类型来抓取所有想要抓取的&lt;strong&gt;监控指标&lt;/strong&gt;, 并生成一个包含相关&lt;strong&gt;监控指标&lt;/strong&gt;的jar包到指定目录.&lt;/li&gt;
&lt;li&gt;再把该jar包以插件形式安装到Dynatrace Server上.&lt;/li&gt;
&lt;li&gt;创建&lt;strong&gt;监视器&lt;/strong&gt;, 从对应的应用服务器上获取想要监控的指标.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后, 通过监控到的指标, 可以实现 &lt;strong&gt;监控面板展示/告警/报告导出&lt;/strong&gt;等功能.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;操作步骤:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在Dynatrace上, 通过安装插件&lt;strong&gt;JMX Enhanced Monitor&lt;/strong&gt;来实现对数据的收集. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="JMX监控插件" src="http://pic.yupoo.com/east4ming_v/ad38044d/358307e5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在具体的配置文件(如:CCIC2), 右键选择&lt;strong&gt;编辑系统配置文件&lt;/strong&gt; → &lt;strong&gt;任务&lt;/strong&gt; → &lt;strong&gt;创建任务&lt;/strong&gt;. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="创建任务1" src="http://pic.yupoo.com/east4ming_v/2310cada/9d4fc386.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;任务具体的配置如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/b2d66e68/e951a0be.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;strong&gt;Include MBeans Patterns&lt;/strong&gt;中, 编辑该配置, 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="包含MBeans" src="http://pic.yupoo.com/east4ming_v/3516c97c/54ece686.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑执行该任务的频率和具体的组件. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/bb7f8b32/d8dc5276.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;手动执行&lt;/strong&gt;该任务, 执行完成后, 右键查看该任务是否执行成功. 具体如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="执行任务" src="http://pic.yupoo.com/east4ming_v/384547c0/1d6444d6.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在第3步指定的路径的&lt;code&gt;mg/build&lt;/code&gt;下找到生成的jar包. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="生成的监控指标jar包" src="http://pic.yupoo.com/east4ming_v/0fe58827/9eef22a1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置&lt;/strong&gt; → Dynatrace Server → &lt;strong&gt;插件&lt;/strong&gt; → 安装插件, 选择上一步的jar包进行安装. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/b5e54e54/ad19a4c1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在具体的配置文件(如:CCIC2), 右键选择&lt;strong&gt;编辑系统配置文件&lt;/strong&gt; → &lt;strong&gt;监视器&lt;/strong&gt; → &lt;strong&gt;创建...&lt;/strong&gt;. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/dec10b0f/193276e5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;监视器的具体配置如下图:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JMX Service URL的通用写法示例: &lt;code&gt;service:jmx:rmi:///jndi/rmi://127.0.0.1:1090/jmxrmi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加要监控的主机.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/a7fc275c/04c867d4.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行频率和具体的执行组件配置如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/5e776a26/85260ee7.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;监控指标(测量结果)配置如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/72fd31d7/4a3b783d.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行该&lt;strong&gt;监视器&lt;/strong&gt;. 成功结果示例如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/058e36b4/86eae21e.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;至此, &lt;strong&gt;无Agent监控方式&lt;/strong&gt;已配置完成. 后续可以根据这些收集到的指标进行&lt;strong&gt;监控面板展示/告警/报告导出&lt;/strong&gt;等功能. 监控面板展示示例如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/da0ed9f8/2bbec94e.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_3"&gt;监控指标&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;主机信息(物理内存和CPU. 需要JDK支持)&lt;/li&gt;
&lt;li&gt;内存使用相关信息(如: heap, perm, new区, old区等)&lt;/li&gt;
&lt;li&gt;类加载相关信息&lt;/li&gt;
&lt;li&gt;GC相关信息&lt;/li&gt;
&lt;li&gt;线程相关信息(总线程,peak线程, 当前线程)&lt;/li&gt;
&lt;li&gt;JAVA软件特定JMX信息(如:jboss的jboss相关信息, ActiveMQ的队列信息, Mule ESB的处理能力相关信息)&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 03 Apr 2019 10:36:27 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-03:/monitoring-java-soft-with-dynatrace-appmon-without-agent.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 1.安装组件前必备工作</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-1-before-installation.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;安装前准备&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#size"&gt;Size&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynatrace-server"&gt;Dynatrace Server&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#indexagent"&gt;禁用Index唯一化Agent名称&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#purepath"&gt;PurePath超时时间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;业务分析最大分裂数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#server-side"&gt;Server Side报告限制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gc"&gt;GC告警设置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynatrace-analysis-server"&gt;Dynatrace Analysis Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynatrace"&gt;Dynatrace 数据库&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;不同分辨率细节说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sql-server"&gt;SQL Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#oracle"&gt;Oracle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynatrace-collector"&gt;Dynatrace Collector&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;最小需求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#indexagent_1"&gt;使用Index唯一化Agent名字&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynatrace-client"&gt;Dynatrace Client&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_5"&gt;客户端最小需求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#client-side"&gt;Client Side 报告限制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;安装前准备&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;禁用&lt;strong&gt;超线程&lt;/strong&gt;（Hyper-Threading）&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/proc/cpuinfo&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;这是开启了超线程: &lt;code&gt;threads per core: 2&lt;/code&gt;  processor = core * 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于&lt;strong&gt;Medium&lt;/strong&gt;及以上规模，CPU时钟频率需大于等于2.6GHz&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="size"&gt;Size&lt;a class="headerlink" href="#size" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="size1" src="http://pic.yupoo.com/east4ming_v/GcvZBqZN/2IfCJ.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="size2" src="http://pic.yupoo.com/east4ming_v/GcvZByIh/RicSG.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="size3" src="http://pic.yupoo.com/east4ming_v/GcvZBDNd/KGXM7.jpg"&gt;&lt;/p&gt;
&lt;h2 id="dynatrace-server"&gt;Dynatrace Server&lt;a class="headerlink" href="#dynatrace-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;语言及字符集必须为&lt;strong&gt;LANG=en_US.UTF-8&lt;/strong&gt; (否则可能仪表板、告警邮件会乱码)&lt;/li&gt;
&lt;li&gt;Linux修改 ~/.bash_profile （直接cd到软件目录或&lt;code&gt;export DT_HOME=/opt/dynatrace-6.5&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;Linux修改chkconfig（配置服务项）&lt;/li&gt;
&lt;li&gt;Linux关闭selinux&lt;/li&gt;
&lt;li&gt;6.3+ Linux用户注意语言设置为中文。&lt;/li&gt;
&lt;li&gt;Linux需要安装JRE 6+（推荐Oracle JRE 8）&lt;/li&gt;
&lt;li&gt;会话存储不要多于&lt;strong&gt;2T&lt;/strong&gt; （500tps，一天1TB空间）&lt;/li&gt;
&lt;li&gt;ulimit -n 2048或更高&lt;/li&gt;
&lt;li&gt;内存分析服务器：在dtanalysisserver.ini中设置-Xmx。&lt;/li&gt;
&lt;li&gt;Windows：电源选项设置为&lt;strong&gt;高性能&lt;/strong&gt; （Linux也需要查看: &lt;code&gt;/proc/cpuinfo&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;不建议SAN-based存储，&lt;strong&gt;可能&lt;/strong&gt;会成为瓶颈(需要测试性能)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么需要这么多核?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dynatrace 是一个复杂的软件解决方案，每时每刻都在后台进行海量的复杂计算。因此高性能的CPU是吞吐量的必要保障。下列列出Dynatrace Server需要较多CPU核数的一些原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关联引擎&lt;/li&gt;
&lt;li&gt;实时分析&lt;/li&gt;
&lt;li&gt;通信（Clients, Collectors, etc.）&lt;/li&gt;
&lt;li&gt;数据库&lt;/li&gt;
&lt;li&gt;存储&lt;/li&gt;
&lt;li&gt;分析缓存&lt;/li&gt;
&lt;li&gt;数据导出&lt;/li&gt;
&lt;li&gt;Web servers&lt;/li&gt;
&lt;li&gt;任务和监视器的job center&lt;/li&gt;
&lt;li&gt;事件（告警）中心&lt;/li&gt;
&lt;li&gt;垃圾收集&lt;/li&gt;
&lt;li&gt;自监控和检查&lt;/li&gt;
&lt;li&gt;操作系统&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="indexagent"&gt;禁用Index唯一化Agent名称&lt;a class="headerlink" href="#indexagent" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;要禁用这个功能，需要在Dynatrace Server的启动文件中加入一个布尔值。默认为true，需要将其设为false。如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Dcom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dynatrace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;diagnostics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;collector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;agentcenter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;unique_agent_names_with_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="purepath"&gt;PurePath超时时间&lt;a class="headerlink" href="#purepath" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;默认为600s（10min），最大可以设置到3600s（1 hour）。在&lt;strong&gt;dtserver.ini&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Dcom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dynatrace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;diagnostics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;completenessTimeout&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;valueInSeconds&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;业务分析最大分裂数&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在&lt;strong&gt;dtserver.ini&lt;/strong&gt;中，在 &lt;em&gt;-server&lt;/em&gt; 前一行添加如下内容：(第二个参数可以根据需要更改，如修改为75000)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Dcom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dynatrace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;diagnostics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;OverruleMaxSplittingsBTs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MeasureExplosionPreventionTest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;ManySplittingsTimeMillis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MeasureExplosionPreventionTest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;MeasureExplosionTriggeringBT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="server-side"&gt;Server Side报告限制&lt;a class="headerlink" href="#server-side" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在&lt;strong&gt;dtserver.ini&lt;/strong&gt;中，设置如下参数：(需要添加在&lt;em&gt;-vmargs&lt;/em&gt; 后一行)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vmargs&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Dcom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dynatrace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;diagnostics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reporting&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;maxTableRows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Xmx1920M&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;并行报告数设置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认为3&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-Dcom.dynatrace.diagnostics.reporting.maxConcurrentReports=5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;报告等待超时&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认60s&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-Dcom.dynatrace.diagnostics.reporting.reportWaitTimeout=120&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;报告等待队列长度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认为3&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-Dcom.dynatrace.diagnostics.reporting.maxWaitingReports=5&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;非拉丁语系PDF报告&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;-Dcom.dynatrace.diagnostics.reporting.pdf.english=false&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="gc"&gt;GC告警设置&lt;a class="headerlink" href="#gc" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;有以下3个参数可以进行设置，在&lt;strong&gt;dtserver.ini&lt;/strong&gt;中，使用-D&amp;lt;参数&amp;gt;=&amp;lt;值&amp;gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;com.dynatrace.diagnostics.maxRelativeGCActivity&lt;/td&gt;
&lt;td&gt;int (default = 15) %&lt;/td&gt;
&lt;td&gt;Set custom health threshold for max relative GC activity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;com.dynatrace.diagnostics.healthWatchPeriodGc&lt;/td&gt;
&lt;td&gt;int (default = 5) min&lt;/td&gt;
&lt;td&gt;Set custom process health threshold for the watch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;com.dynatrace.diagnostics. healthWatchPeriodViolationThresholdGc&lt;/td&gt;
&lt;td&gt;int (default = 4) min&lt;/td&gt;
&lt;td&gt;Set custom process health threshold for the watch&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="dynatrace-analysis-server"&gt;Dynatrace Analysis Server&lt;a class="headerlink" href="#dynatrace-analysis-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;按照监控的JVM的最大heap+25% 修改最大内存-Xmx&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dynatrace"&gt;Dynatrace 数据库&lt;a class="headerlink" href="#dynatrace" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_3"&gt;不同分辨率细节说明&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="分辨率细节" src="http://pic.yupoo.com/east4ming_v/GcvZCl1E/NcZPS.jpg"&gt;&lt;/p&gt;
&lt;h3 id="sql-server"&gt;SQL Server&lt;a class="headerlink" href="#sql-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;起始空间5G&lt;/li&gt;
&lt;li&gt;DBowner权限&lt;/li&gt;
&lt;li&gt;表排序规则要求：&lt;strong&gt;Chinese_PRC_CI_AS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="oracle"&gt;Oracle&lt;a class="headerlink" href="#oracle" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;dba&lt;/li&gt;
&lt;li&gt;字符集：&lt;strong&gt;UTF-8&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dynatrace-collector"&gt;Dynatrace Collector&lt;a class="headerlink" href="#dynatrace-collector" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;预置JDK 8（推荐Oracle）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux修改 ~/.bash_profile （直接cd到软件目录）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux修改chkconfig（配置服务项）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux关闭selinux&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果Collector和Server不在一块，在脚本或注册文件中加入&lt;code&gt;-server &amp;lt;dynaTraceServerName&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果要配置多实例，添加&lt;code&gt;./dtcollector -instance collector02 -listen :10001&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于服务项，拷贝$DT_HOME/init.d/dynaTraceCollector 脚本到/etc/init.d/dynatraceCollector02。并做以下修改：(2选1)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DT_OPTARGS="-instance collector02"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DT_INSTANCE=collector02&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;最小需求&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;50个Java或25个.Net Agents&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disk：30GB&lt;/li&gt;
&lt;li&gt;Memory：2GB（Collector组件需要的，OS要更多一点，3GB+）&lt;/li&gt;
&lt;li&gt;CPU Cores：1 （禁用超线程，推荐2Core+）&lt;/li&gt;
&lt;li&gt;limits.conf 打开文件数 最小为：(500+3×Agents数)×Collectors数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="indexagent_1"&gt;使用Index唯一化Agent名字&lt;a class="headerlink" href="#indexagent_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;要禁用这个功能，需要在Dynatrace Collector的启动文件&lt;strong&gt;dtcollector.ini&lt;/strong&gt;中加入一个布尔值。默认为true，需要将其设为false。如下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-Dcom.dynatrace.diagnostics.collector.agentcenter.unique_agent_names_with_index=false&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="dynatrace-client"&gt;Dynatrace Client&lt;a class="headerlink" href="#dynatrace-client" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_5"&gt;客户端最小需求&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;x64（Dynatrace 6.5+）&lt;/li&gt;
&lt;li&gt;Disk：100MB&lt;/li&gt;
&lt;li&gt;Memory：1GB&lt;/li&gt;
&lt;li&gt;分辨率：1024×768&lt;/li&gt;
&lt;li&gt;Webstart Client：&lt;ul&gt;
&lt;li&gt;IE 8+ Firefox 38-48是经过Dynatrace认证的&lt;/li&gt;
&lt;li&gt;Oracle JRE &amp;gt;= 1.8.0_45&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="client-side"&gt;Client Side 报告限制&lt;a class="headerlink" href="#client-side" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以在&lt;strong&gt;dtclient.ini&lt;/strong&gt;中修改如下参数：(参数得加在 &lt;em&gt;-vmargs&lt;/em&gt; 后一行，而不是最后。)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vmargs&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Dcom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dynatrace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;diagnostics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reporting&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;maxTableRows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Xmx512M&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于Webstart Client，需要设置&lt;strong&gt;JAVA_TOOL_OPTIONS&lt;/strong&gt;环境变量：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JAVA_TOOL_OPTIONS=-Dcom.dynatrace.diagnostics.reporting.maxTableRows=10000&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 02 Apr 2019 23:08:28 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-02:/dynatrace-appmon-handbook-1-before-installation.html</guid><category>Dynatrace</category><category>Observability</category><category>性能调优</category></item><item><title>Dynatrace AppMon 实战手册 - 2.证书创建</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-2-create-certificate.html</link><description>&lt;h2 id="_1"&gt;步骤&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;启动向导&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GaYOMaHa/7Bm8Z.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动内存分析服务器&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GaYOMkg2/WyzsU.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;填写组织名称&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GaYOMsh5/11IJkW.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建私钥成功&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GaYOMw10/1sjoN.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导出私钥和证书&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GaYOMBA4/pfPKT.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动部署到组件&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GaYOMEOc/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组件重启&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GaYOMLBp/tJqrX.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署证书完成&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GaYOMLBp/tJqrX.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 02 Apr 2019 23:08:28 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-02:/dynatrace-appmon-handbook-2-create-certificate.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 3.创建系统配置文件模板</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-3-create-profile-template.html</link><description>&lt;h2 id="_1"&gt;步骤&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在左侧边栏中，右键&lt;strong&gt;系统配置文件模板&lt;/strong&gt; → &lt;strong&gt;创建系统配置文件模板&lt;/strong&gt;， 如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/Gcwcoiwt/hknCr.png"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;配置系统配置文件模板基本信息，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcowF1/QOxbw.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;
&lt;p&gt;选择对应的技术栈（Java、.NET、Web server、PHP、Native）,如上图。具体解释如下：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java  .NET  PHP无须解释&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Web server - 对应一系列Web server，如Apache、Nginx、IIS等&lt;/li&gt;
&lt;li&gt;Native - 对应的是Dynatrace的ADK，通过在应用中嵌入该ADK，可以实现对C++、Python等的监控。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_2"&gt;要点&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_3"&gt;事件（即告警）相关配置&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使某些事件活动或不活动&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下事件规则不需要启用，具体如下图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;部署&lt;/li&gt;
&lt;li&gt;测试违例&lt;/li&gt;
&lt;li&gt;事物整体失败率高（&lt;strong&gt;失败率太高&lt;/strong&gt;已经覆盖）&lt;/li&gt;
&lt;li&gt;数据库Agent相关（没有购买数据库Agent license则无需开启）&lt;/li&gt;
&lt;li&gt;页面操作失败率高（需要UEM license；&lt;strong&gt;失败率太高&lt;/strong&gt;有交集）&lt;/li&gt;
&lt;li&gt;应用程序进程关闭（根据需求确定是否开启）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcoCV4/M1i31.png"&gt;&lt;/p&gt;
&lt;h3 id="_4"&gt;错误检测配置&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;不要将日志标记为错误&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;删除&lt;strong&gt;重要的日志记录&lt;/strong&gt;规则。&lt;/p&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;p&gt;有的开发为了在生产上显示日志，会将一些Info等级别的信息设置为Error，而出现Error日志报错并不一定意味着&lt;strong&gt;事务&lt;/strong&gt;失败。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcoNLt/P7SbT.png"&gt;&lt;/p&gt;
&lt;h3 id="_5"&gt;错误规则创建&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以根据应用所特有的Exception、Logging等来创建，具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcsOkh/65iq5.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_6"&gt;应用程序定义&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dynatrace 6.5 可以通过Web/Mobile（6.5之前只有这一种定义方法）、Messaging、Entry Point来定义应用，可以进一步细化应用的定义。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcsTQp/R2lT9.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_7"&gt;用户体验&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果没有购买UEM license，则禁用UEM，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcoZMb/amzM1.png"&gt;&lt;/p&gt;
&lt;h3 id="schedule"&gt;Schedule&lt;a class="headerlink" href="#schedule" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;创建时间计划&lt;/strong&gt;，如创建&lt;strong&gt;每个工作日、每周、每月&lt;/strong&gt;计划。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/Gcwcp5kE/44NZA.jpg"&gt;&lt;/p&gt;
&lt;h3 id="agent-group-java"&gt;Agent Group - Java&lt;a class="headerlink" href="#agent-group-java" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;创建Java技术栈的Agent Group模板，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcpaOy/8KhP9.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择需要放置的Sensor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原则：最少最需要。如下图：&lt;/p&gt;
&lt;p&gt;必须的Sensor：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDBC&lt;/li&gt;
&lt;li&gt;Exceptions&lt;/li&gt;
&lt;li&gt;Java Logging&lt;/li&gt;
&lt;li&gt;JMX MBean Server&lt;/li&gt;
&lt;li&gt;JMS&lt;/li&gt;
&lt;li&gt;JMS Receive Entry Point&lt;/li&gt;
&lt;li&gt;Executor Tagging&lt;/li&gt;
&lt;li&gt;Thread Start Tagging&lt;/li&gt;
&lt;li&gt;Java Web Requests&lt;/li&gt;
&lt;li&gt;Servers&lt;/li&gt;
&lt;li&gt;Java Web Services&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/Gcwcpjjm/12bHs1.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Sensor - Exception (Java)&lt;/h4&gt;
&lt;p&gt;对Dynatrace默认的Exception定义进行细化，如下图：&lt;/p&gt;
&lt;p&gt;原因：原有的直接排除java.开头的Exception会排除大量我们需要获取的Exception，如网络相关的报错等。所以我们需要尽可能细化不需要抓取的Exception，如&lt;strong&gt;beans&lt;/strong&gt;、 &lt;strong&gt;方法找不到&lt;/strong&gt;相关异常。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcpAV9/YqhSj.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Sensor - JDBC&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;启用聚合（推荐生产环境开启，因为单个事务的SQL执行次数较多，如果不聚合分析起来很不方便。启用聚合了则无法获取&lt;strong&gt;绑定值&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;SQL长度跳大（如：10240）（默认512长度，经常会抓取到不完整的SQL，从而无法定位SQL问题。建议该值大于所监控的应用中的最大的SQL长度）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcpVjP/10a2Js.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Sensor - Logging (Java)&lt;/h4&gt;
&lt;p&gt;此处Log等级大小写敏感，我们可以添加我们监控的级别，如对于WebLogic，可以添加&lt;strong&gt;Error&lt;/strong&gt;等级别，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/Gcwcqeew/5M54W.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Sensor - Servlet&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;通常，我们认为静态资源不会对系统性能造成影响，无需监控，此处设置排除对静态资源的监控。&lt;/li&gt;
&lt;li&gt;此外，一些中间件、硬件设备，会有与应用无关的URI，我们也需要排除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/Gcwcqnte/hunpl.jpg"&gt;&lt;/p&gt;
&lt;h3 id="agent-group-net"&gt;Agent Group - .NET&lt;a class="headerlink" href="#agent-group-net" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;创建.NET Agent Group模板，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcquzV/Pc4ms.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择必要的Sensor&lt;/strong&gt;，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcqFMu/CkZXe.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Sensor - ADO.NET&lt;/h4&gt;
&lt;p&gt;与JDBC Sensor类似，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcqMPS/iVLgB.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Sensor - ASP.NET&lt;/h4&gt;
&lt;p&gt;与Servlet类似，见下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcqRLY/8DuGF.jpg"&gt;&lt;/p&gt;
&lt;h3 id="api"&gt;API&lt;a class="headerlink" href="#api" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以针对应用开发的需求，定义API，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcqXC8/th008.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/Gcwcr2YK/14SZ6f.jpg"&gt;&lt;/p&gt;
&lt;h3 id="measure"&gt;Measure&lt;a class="headerlink" href="#measure" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;根据应用监控的需求，进行相关Measure的定义，此类数据可以进一步作为&lt;strong&gt;过滤、聚合、拆分&lt;/strong&gt;等条件创建Business Transaction。&lt;/p&gt;
&lt;p&gt;如需要创建&lt;strong&gt;大于10s的web请求&lt;/strong&gt;的measure，则具体创建如下：(由&lt;strong&gt;web requests - time&lt;/strong&gt;复制修改而来，设置上限阈值)，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcsFyB/4pne8.jpg"&gt;&lt;/p&gt;
&lt;h3 id="business-transaction"&gt;Business Transaction&lt;a class="headerlink" href="#business-transaction" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如需要进行更为复杂的应用监控（如针对应用细节的监控、对关键业务的监控等），可以创建Business Transaction。&lt;/p&gt;
&lt;p&gt;如要抓取所有&lt;strong&gt;web响应时间大于10s&lt;/strong&gt;的请求，可以将之前创建的Measure作为过滤条件来创建。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/Gcwcrg0x/eFEUX.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TIPS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;勾选&lt;strong&gt;Active&lt;/strong&gt; 才会正式启用。&lt;/li&gt;
&lt;li&gt;勾选对应选项后结果会存放到数据库中。&lt;/li&gt;
&lt;li&gt;三大因子&lt;ul&gt;
&lt;li&gt;Filter&lt;/li&gt;
&lt;li&gt;Calculate Results&lt;/li&gt;
&lt;li&gt;Split Results&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Splitting 也是重要的选项&lt;/li&gt;
&lt;li&gt;基线设置用来设置动态或静态的告警阈值&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="monitor"&gt;Monitor&lt;a class="headerlink" href="#monitor" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Monitor这块内容待完善及丰富。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Unix Monitor&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcrlB8/kLc10.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;VMware Monitor&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Host System Performance Monitor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcrlB8/kLc10.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcrLyx/9Rh2b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Virtual Machine Performance Monitor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcrU8l/7iHmE.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/Gcwcs3as/cUXUV.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Windows Performance Monitor&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcsqFN/hKRir.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_8"&gt;总结&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;至此，系统配置文件模板及关于系统配置文件大部分要点已经配置完成，后续可以基于该模板创建正式的系统配置文件。&lt;/p&gt;
&lt;p&gt;正式的系统配置文件还需要配置的内容有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Agent基础配置（如mapping、分辨率等）&lt;/li&gt;
&lt;li&gt;观察层（Messaging、Load Balance等）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要细化的内容有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用定义&lt;/li&gt;
&lt;li&gt;Monitor&lt;/li&gt;
&lt;li&gt;任务（定时报告、定时采样等）&lt;/li&gt;
&lt;li&gt;Measure（中间件指标、JMX指标、应用其他指标等）&lt;/li&gt;
&lt;li&gt;Business Transaction （关键业务等）&lt;/li&gt;
&lt;li&gt;Sensor（应用特定Sensor，如关键方法--核保金额；定义入口点，如批处理、TCP Socket及其他）&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 02 Apr 2019 23:08:28 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-02:/dynatrace-appmon-handbook-3-create-profile-template.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 4.Dynatrace组件Linux系统配置为服务</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-4-register-linux-system-service.html</link><description>&lt;p&gt;配置为服务，可以在主机启动的时候自启动。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;复制Dynatrace相关脚本（$DT_HOME/init.d）到 /etc/init.d&lt;/li&gt;
&lt;li&gt;在脚本中定义&lt;strong&gt;DT_RUNASUSER&lt;/strong&gt;及其他变量（如有必要，修改&lt;strong&gt;DT_OPTARGS&lt;/strong&gt;和&lt;strong&gt;DT_FE_OPTARGS&lt;/strong&gt;等）(&lt;strong&gt;必需&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;chkconfig --add dynaTraceServer&lt;/code&gt;  (如果是其他Linux版本，如Debian(Ubuntu,...)使用&lt;code&gt;sudo update -rc.d dynaTraceServerNonRoot defaults&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;如果Analysis Server和Server位于同一台，则先启动Analysis Server，过10s左右，再启动Server。（可以再Sever的脚本前加入sleep 10）&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 02 Apr 2019 23:08:28 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-02:/dynatrace-appmon-handbook-4-register-linux-system-service.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>什么是 AIOps?</title><link>https://www.EWhisper.cn/what-is-aiops.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#aiops"&gt;什么是 AIOps&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#aiops_1"&gt;AIOps 描述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aiops_2"&gt;典型AIOps 平台介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;上下文协作和知识捕获&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aiops_3"&gt;AIOps 诞生背景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;市场分析&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;数据摄取和处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;分析结果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;代表性供应商&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aiops_4"&gt;AIOps 平台建设建议&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#aiops_5"&gt;通过采用增量方法确保成功部署AIOps功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aiops_6"&gt;选择能够支持广泛的历史和流数据类型的AIOps平台&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;总结&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_7"&gt;建议&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="aiops"&gt;什么是 AIOps&lt;a class="headerlink" href="#aiops" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AIOps平台结合了&lt;strong&gt;大数据&lt;/strong&gt;和&lt;strong&gt;机器学习&lt;/strong&gt;功能, 通过可扩展的提取和分析IT不断增加的&lt;strong&gt;数据量(volume), 数据种类(variety)和数据生成速度(velocity)&lt;/strong&gt;来支持所有的主要IP运维功能. 该&lt;strong&gt;平台支持使用多个数据源(监控的数据源), 数据收集方法以及分析和演示技术.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="aiops_1"&gt;AIOps 描述&lt;a class="headerlink" href="#aiops_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;AIOps可以增强多种常见的IT运营流程和任务, 包括&lt;strong&gt;性能分析, 异常检测, 事件关联和分析, IT服务管理和自动化.&lt;/strong&gt;&lt;br&gt;
它们的核心功能是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提取数据&lt;/strong&gt; - 从与供应商有关或无关的多个源中提取数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据分析&lt;/strong&gt; - 通过以下2点启用数据分析:&lt;ul&gt;
&lt;li&gt;提取时的实时分析(流式数据引擎)&lt;/li&gt;
&lt;li&gt;存储数据的历史分析(大数据离线分析)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据访问&lt;/strong&gt; - 提供对数据的访问&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据存储&lt;/strong&gt; - 存储采集的数据&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;机器学习&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关联操作&lt;/strong&gt; - 根据分析结果启动操作或下一步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分析工作的目标是发现和建立模型 - 用于预测可能的事件和新出现的使用情况 - 并及时回看历史数据已确定当前系统行为的根本原因.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AIOps平台在IT运营管理(ITOM)中持续洞察" src="./images/340492_0001.png"&gt;&lt;/p&gt;
&lt;h3 id="aiops_2"&gt;典型AIOps 平台介绍&lt;a class="headerlink" href="#aiops_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;下面以典型的AIOps 平台为例, 对AIOps的相关功能进行一一介绍.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;br&gt;
截图来自: &lt;a href="https://www.moogsoft.com/"&gt;moogsoft&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;概览&lt;/h4&gt;
&lt;p&gt;下图为软件首页,  着重展示了功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;告警降噪&lt;/strong&gt; - 250000 的事件降噪为55个场景, 过滤噪声99.9%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="概览" src="./images/moogsoft-ai-ops-overview-in-situ@2x.png"&gt;&lt;/p&gt;
&lt;p&gt;以下是这个AIOps软件的主要功能:&lt;/p&gt;
&lt;h4&gt;集成&lt;/h4&gt;
&lt;p&gt;与IT监控，自动化，服务管理，通知和协作工具进行50多种开箱即用的集成; 通过REST，syslog，webhook，socket或SNMP，我们可以与数百个集成，为您在一个平台上的整个IT工具链提供可见的上下文。(集成, 源端集成监控, 目标端集成自动化, 通知工具等)&lt;/p&gt;
&lt;p&gt;集成接口:&lt;/p&gt;
&lt;p&gt;&lt;img alt="集成方式" src="./images/plug-graphics-logos-lg.png"&gt;&lt;/p&gt;
&lt;p&gt;集成的监控:&lt;/p&gt;
&lt;p&gt;&lt;img alt="集成监控" src="./images/Integrations-1.png"&gt;&lt;/p&gt;
&lt;h4&gt;降噪&lt;/h4&gt;
&lt;p&gt;通过对整个监控堆栈中的所有事件进行数学分析，将信号与噪声分离，将警报量降低90％或更多。&lt;/p&gt;
&lt;p&gt;&lt;img alt="降噪" src="./images/noise-reduction-eduction-reduced.png"&gt;&lt;/p&gt;
&lt;h4&gt;关联&lt;/h4&gt;
&lt;p&gt;关联整个监控堆栈中的相关警报，为运维人员提供上下文感知，以更快地发现事件。&lt;/p&gt;
&lt;p&gt;&lt;img alt="关联" src="./images/Asset-19@3x.png"&gt;&lt;/p&gt;
&lt;h4&gt;根因分析&lt;/h4&gt;
&lt;p&gt;机器学习和基于拓扑的算法在当前事件中列出可能根本原因。最重要的是，我们的技术从过去学习，所以如果问题再次出现，您会自动收到有关如何更快地修复它的说明。&lt;/p&gt;
&lt;p&gt;&lt;img alt="根因分析" src="./images/probable-root-cause-reduced.png"&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;上下文协作和知识捕获&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;将事件传递到合适的人员，以便他们可以一起更快地解决每个事件，同时记录相关恢复步骤，类似事件。我们的AIOps平台可以快速，轻松地跨团队和工具进行协作。&lt;/p&gt;
&lt;p&gt;&lt;img alt="协作1" src="./images/Collaboration-1-reduced.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="协作2" src="./images/Collaboration-2-reduced.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="协作3" src="./images/Collaboration-3-reduced.png"&gt;&lt;/p&gt;
&lt;h3 id="aiops_3"&gt;AIOps 诞生背景&lt;a class="headerlink" href="#aiops_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在过去二十年中，人工智能技术间歇性地影响了ITOM的发展，而AIOps平台只是这种影响的最新例证。IT运营一方面要求精细化运营, 降低成本，另一方面又增加了运营复杂性。可以在&lt;strong&gt;数据量(volume), 数据种类(variety)和数据生成速度(velocity)&lt;/strong&gt;的三个维度上定义复杂性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IT基础架构和应用程序产生的&lt;strong&gt;数据量&lt;/strong&gt;快速增长（每年增长2到3倍）&lt;/li&gt;
&lt;li&gt;机器和人类生成的&lt;strong&gt;数据类型越来越多&lt;/strong&gt;（例如，指标，日志，wire数据和文档[知识管理]）&lt;/li&gt;
&lt;li&gt;由于采用了云原生或其他敏捷架构，&lt;strong&gt;数据生成速度&lt;/strong&gt;不断提高，IT架构内的变化率也在不断提高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在处理大量，多样化和速度的数据时，现有的监控工具面临压力。更重要的是，监控工具不会跨越提取有用见解所需的多种数据类型。例如，企业需要大量数据，这些数据可能跨越&lt;strong&gt;基础架构&lt;/strong&gt;和&lt;strong&gt;应用程序指标&lt;/strong&gt;，&lt;strong&gt;用户体验数据&lt;/strong&gt;，&lt;strong&gt;业务交易数据&lt;/strong&gt;，&lt;strong&gt;拨测数据&lt;/strong&gt;以及来自各种&lt;strong&gt;系统的日志&lt;/strong&gt;，以获得更多分析, 洞察和见解。&lt;/p&gt;
&lt;p&gt;非IT团队如业务条线和IT运营团队（如应用程序开发人员和DevOps），越来越多地表现出对AIOps技术的兴趣，以便在多个数据集中表现出洞察力。&lt;br&gt;
此外，由于数字业务，IT需要采取行动的速度也在不断提高(敏捷快速)，因此需要可以提供以下帮助的工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;降低噪音&lt;/strong&gt;（例如，以误报或冗余事件的形式）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;根因分析&lt;/strong&gt; - 提供更好的因果关系，这有助于确定事故的可能原因&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态告警基线&lt;/strong&gt; - 捕获超出静态阈值的异常，以主动检测异常情况&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;故障预测&lt;/strong&gt; - 推断未来事件以防止潜在的故障&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集成处理&lt;/strong&gt;  - 启动解决问题的操作（直接或通过集成）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;迄今为止，AIOps功能主要用于支持IT运维流程，以便监控或观察IT基础架构，应用程序行为或数字体验。AIOps平台投资几乎总是基于其&lt;strong&gt;减少平均解决问题时间&lt;/strong&gt;(提高业务连续性)的能力而得到认可。无论是采用机器学习还是在事件管理上下文中对事件进行重复数据删除，还是在APM上下文中结合基于字节码检测的分布式跟踪数据来分析应用程序日志数据，它们都是合理的。&lt;/p&gt;
&lt;p&gt;AIOps正在逐渐演变，不仅可以提取数据进行分析，还可以&lt;strong&gt;根据分析启动相应操作&lt;/strong&gt;。这些操作（最有可能通过与其他ITOM和ITSM工具的集成）将采取多种形式，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;告警及告警处置&lt;/li&gt;
&lt;li&gt;问题自动分类及记录&lt;/li&gt;
&lt;li&gt;CMDB清洗, 修正和关联&lt;/li&gt;
&lt;li&gt;运行预定自动化动作&lt;/li&gt;
&lt;li&gt;应用程序发布编排&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AIOps工具在监控的四个阶段 - &lt;strong&gt;数据采集，聚合，分析和行动&lt;/strong&gt;（见图2） - 显示了“右移” - 具有数据聚合和分析的核心功能。随着技术的进一步发展，用户将能够利用平台的主动建议，实现行动操作的阶段。&lt;br&gt;
关于监控工具与AIOps的争论刚刚开始，而且可能会增长。然而，从长远来看，专家领域将存在专业监控工具，而对于IT运营通才(SRE团妒?)，主要的工具将是AIOps。&lt;/p&gt;
&lt;p&gt;&lt;img alt="监控的4个阶段" src="./images/340492_0002.png"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;市场分析&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;迄今为止，很少有供应商提供全面，集成的AIOps平台。然而，许多供应商提供了广泛的AIOps功能，其子集彼此集成。为了更清楚地了解市场如何发展以及供应商彼此之间的位置，Gartner将当前可用的AIOps功能划分为数据管理和分析结果两大类：&lt;/p&gt;
&lt;h3 id="_3"&gt;数据摄取和处理&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;历史和流数据管理 - 允许提取，索引和持久化存储日志数据，wire数据，指标和文档数据的软件或设备。由此产生的数据库大部分是非结构化的或多结构化的，而存储的数据集以高容量累积，以高速度变化并且根据高度变化的格式隐式地构造。这种历史数据管理功能可称为“大数据管理”。为了在IT运营用例下提供价值，该工具还必须将人类用户感知的时间尺度的数据呈现为实时，直接在摄取时提供数据无需访问持久数据库。它必须跨多个实时和历史数据流提供连贯的分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;分析结果&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本和高级统计分析&lt;/strong&gt;- 单变量和多变量分析的组合，包括对IT实体捕获的指标以及源头策划数据的相关性，聚类，分类和推断的使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动建立模型和预测&lt;/strong&gt; - 使用上述一种或多种类型的历史或流数据，以引出描述可以从数据集本身推断但不立即存在的新相关的数学或结构模式。然后可以使用这些模式及时前进并以不同程度的概率预测事件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异常检测&lt;/strong&gt; - 使用先前组件发现的模型首先确定什么构成正常的系统行为，然后辨别出与正常系统行为的偏差。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;根因分析&lt;/strong&gt; - 修剪由自动化模式发现和预测组件建立的相关性网络，以隔离代表真正因果关系的依赖性链接，从而提供有效干预的解决方案。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用性建议&lt;/strong&gt; - 对问题进行分类，将其分类为已知类别。然后，它可以挖掘先前解决方案的存储，分析这些解决方案的适用性并以优先级形式提供它们以用于补救。最终，这些将使用闭环方法，并在使用后对其有效性进行投票。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拓扑&lt;/strong&gt;- 对于AIOps检测到的相关且可操作的模式，必须围绕所摄取的数据放置上下文。该上下文是拓扑。如果没有拓扑的上下文和事实上的约束，检测到的模式虽然有效，但可能无益且分散注意力。从拓扑中的数据派生模式将减少模式的数量，建立相关性并说明隐藏的依赖性。使用拓扑作为因果关系确定的一部分可以大大提高其准确性和有效性。使用图形和瓶颈分析捕获事件发生的位置及其上下游依赖关系可以提供关于重点修复工作的重点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;代表性供应商&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;供应商&lt;/th&gt;
&lt;th&gt;成立年份&lt;/th&gt;
&lt;th&gt;总部&lt;/th&gt;
&lt;th&gt;网站&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Anodot&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;Israel&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.anodot.com/"&gt;https://www.anodot.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BigPanda&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.bigpanda.io/"&gt;https://www.bigpanda.io&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BMC&lt;/td&gt;
&lt;td&gt;1980&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.bmc.com/"&gt;https://www.bmc.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Brains Technology&lt;/td&gt;
&lt;td&gt;2008&lt;/td&gt;
&lt;td&gt;Japan&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.brains-tech.co.jp/en/"&gt;https://www.brains-tech.co.jp/en/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CA Technologies&lt;/td&gt;
&lt;td&gt;1974&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.ca.com/us.html"&gt;https://www.ca.com/us.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Devo (Logtrust)&lt;/td&gt;
&lt;td&gt;2011&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.devo.com/"&gt;https://www.devo.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Elastic&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.elastic.co/"&gt;https://www.elastic.co/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Evolven&lt;/td&gt;
&lt;td&gt;2007&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.evolven.com/"&gt;https://www.evolven.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FixStream&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fixstream.com/"&gt;https://fixstream.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IBM&lt;/td&gt;
&lt;td&gt;1911&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.ibm.com/"&gt;www.ibm.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;InfluxData&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.influxdata.com/"&gt;https://www.influxdata.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ITRS&lt;/td&gt;
&lt;td&gt;1993&lt;/td&gt;
&lt;td&gt;United Kingdom&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.itrsgroup.com/"&gt;https://www.itrsgroup.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jKool&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.jkoolcloud.com/"&gt;https://www.jkoolcloud.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Loom Systems&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.loomsystems.com/"&gt;https://www.loomsystems.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Moogsoft&lt;/td&gt;
&lt;td&gt;2011&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.moogsoft.com/"&gt;https://www.moogsoft.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scalyr&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.scalyr.com/"&gt;https://www.scalyr.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ScienceLogic&lt;/td&gt;
&lt;td&gt;2003&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://sciencelogic.com/"&gt;https://sciencelogic.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SignalFx&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://signalfx.com/"&gt;https://signalfx.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Splunk&lt;/td&gt;
&lt;td&gt;2004&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.splunk.com/"&gt;https://www.splunk.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stackstate&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;Netherlands&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.stackstate.com/"&gt;https://www.stackstate.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sumo Logic&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.sumologic.com/"&gt;https://www.sumologic.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="aiops_4"&gt;AIOps 平台建设建议&lt;a class="headerlink" href="#aiops_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="aiops_5"&gt;通过采用增量方法确保成功部署AIOps功能&lt;a class="headerlink" href="#aiops_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;AIOps功能的有效部署需要从根据数据源重组IT域开始的结构化方法。这种方法将所需的焦点转移到数据集而不是工具，这是传统的方法。Gartner发现，最好先掌握从各种来源获取的大型持久数据集的使用。只有在IT运营团队熟练掌握AIOps的大数据方面之后，才能尝试掌握能力类别。因此，在选择工具或服务时，企业应优先考虑那些允许部署数据提取，存储和访问的供应商，而不依赖于剩余的AIOps组件。鉴于AIOps将用于多个用例，I＆O领导者必须确保供应商支持逐步添加其他功能。&lt;/p&gt;
&lt;h3 id="aiops_6"&gt;选择能够支持广泛的历史和流数据类型的AIOps平台&lt;a class="headerlink" href="#aiops_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;现代IT运营旨在获得IT实体的综合可见性，包括应用程序，其关系，相互依赖性和过去的转换，以深入了解整体IT环境的现状。选择正确的数据源对于避免盲点至关重要。部署成熟度和不断变化的用例的渐进性需要准备好摄取各种数据源。I＆O领导者必须选择能够摄取和提供对各种历史和流数据类型的访问的AIOps平台（参见图3）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="AIOps获取的数据类型" src="./images/340492_0003.png"&gt;&lt;/p&gt;
&lt;h2 id="_6"&gt;总结&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_7"&gt;建议&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;负责优化IT运营的数据中心负责人应该:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过采用以历史数据开始的增量方法部署AIOps, 并逐步使用&lt;strong&gt;流数据&lt;/strong&gt;, 与不断改进的IT运营成熟度保持一致.&lt;/li&gt;
&lt;li&gt;要选择这样的 AIOps平台: 通过识别能够摄取和提供对文本和指标数据访问的AIOps平台, 能够全面了解IT系统过去和现在的平台.&lt;/li&gt;
&lt;li&gt;通过选择支持逐步部署面向IT运维的机器学习四个阶段的工具, 深化其IT运营团队的分析技能: 描述性, 诊断性, 主动性能力和根本原因分析, 以帮助避免高严重性中断.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 02 Apr 2019 22:21:31 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-02:/what-is-aiops.html</guid><category>gartner</category><category>aiops</category><category>可观察性</category><category>大数据</category><category>机器学习</category></item><item><title>SRE 宣言</title><link>https://www.EWhisper.cn/the-declaration-of-sre.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sre"&gt;SRE 宣言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sre_1"&gt;SRE 成立背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sre_2"&gt;何为SRE&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#sre_3"&gt;SRE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sre_4"&gt;SRE 的目标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sre_5"&gt;SRE 运维体系&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sre_6"&gt;SRE 建设阶段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="sre"&gt;SRE 宣言&lt;a class="headerlink" href="#sre" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今天(2019年4月1日)是个对于我来说值得永远铭记的日子.&lt;/p&gt;
&lt;p&gt;从今天起, 我由一名普通的运维转变为一名普通的SRE. 我们专注于: 提高效率, 提高业务连续性, 最终提高用户满意度. 无论是公司的客户, 还是分公司、子公司的用户, 亦或是IT开发分部的同事, 你们都是我们的服务"用户". 我会用我的十分努力, 来换得效率的+1%, 来换得业务连续性的+1s, 来换得你们点赞与笑脸的+1+1.&lt;/p&gt;
&lt;h2 id="sre_1"&gt;SRE 成立背景&lt;a class="headerlink" href="#sre_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;过去一段时间, 我们发现我们运维切实地存在以下问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运维和开发衔接不畅. 运维分部是专业组的组织架构, 就拿新系统上线来举例, 开发几乎需要问遍运维分部内的各个专业组, 从: 主机、中间件、数据库、网络再到安全、监控等等等等。而且时长面临着对方“不是我负责的，你找其他人吧”式的被踢皮球的感受。&lt;/li&gt;
&lt;li&gt;部署规模越来越庞大。随着各类私有云、公有云的引入，微服务架构的引入，以及数字化转型，竞争的激烈。近些年，系统的部署规模较前年甚至都有成倍数的增长，现有的运维模式对于越来越庞大的规模有些力不从心。&lt;/li&gt;
&lt;li&gt;新技术的引入。还是上面提到的，云的引入，容器的引入，开源技术栈（包括：web server，中间件，MQ，缓存，NoSQL...)的引入以及随之而来的工具链的引入(Ansible, SaltStack, Jenkins, Zabbix, ELK...)也带来技术链的爆炸式增长. 而这些也都是需要运维具有相应的技术储备的.&lt;/li&gt;
&lt;li&gt;开发分部DevOps. 开发分部也在推动DevOps的体系. 我们的体系也要和开发分部相对应.&lt;/li&gt;
&lt;li&gt;技术能力的积累和变现.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="sre_2"&gt;何为SRE&lt;a class="headerlink" href="#sre_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="sre_3"&gt;SRE&lt;a class="headerlink" href="#sre_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="SRE logo" src="./images/reliability-icon-t_0.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;定义:&lt;br&gt;
SRE 是谷歌针对DevOps的生产实践和运行模型. 软件由开发团队显示"交接给"运行软件的团队, 即Site Reliability Engineer(SRE, 网站可靠性工程团队). 在这个模型中, Dev团队需要向 SRE 团队提供测试证据(日志, 指标等), 证明他们的软件已经达到一个 SRE 团队认为足够好的标准.&lt;br&gt;
至关重要的是, SRE 团队可以拒绝不符合运维标准的软件(包括开发分部和运维分部的软件), 要求开发人员在投入生产之前改进代码. Dev 和 SRE之间的协作围绕着&lt;strong&gt;运维标准&lt;/strong&gt;展开, 但是, 一旦 SRE 团队对代码满意, 他们(而不是Dev团队)就会在生产环境中提供支持.&lt;/p&gt;
&lt;p&gt;这个模型只适用于工程和组织成熟度较高的组织, 如果运行不当, 可能变为 "Dev 和 Ops筒仓"的模式.&lt;br&gt;
节选自: &lt;a href="https://www.infoq.cn/article/DcIUD_gi17sQjvSt5XSS"&gt;DevOps团队结构类型汇总：总有一款适合你&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="SRE模型" src="./images/devops-models-type-7.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="dev ops 筒仓" src="./images/anti-devops-models-1.png"&gt;&lt;/p&gt;
&lt;h3 id="sre_4"&gt;SRE 的目标&lt;a class="headerlink" href="#sre_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;SRE的目标有"三化", 也是承接了实现公司的"三化"战略. SRE目标为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平台化&lt;/li&gt;
&lt;li&gt;服务化&lt;/li&gt;
&lt;li&gt;自动化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sre_5"&gt;SRE 运维体系&lt;a class="headerlink" href="#sre_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;SRE 运维体系有"三驾马车". &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SRE. 位于金字塔尖, 对外提供服务.&lt;/li&gt;
&lt;li&gt;技术服务. 即: 专业组. "使能"SRE团队.&lt;/li&gt;
&lt;li&gt;运维开发. 新成立(目前还未成立, 过渡期). "赋能"SRE团队. 打造以"三化"为目标的平台, 工具集.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="sre_6"&gt;SRE 建设阶段&lt;a class="headerlink" href="#sre_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这是公司运维分部近十年来的首次变革, 变革需要逐步稳步推进. SRE 建设也会分阶段进行:&lt;br&gt;
当前阶段的主要工作是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;扎口&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;监控告警扎口&lt;/li&gt;
&lt;li&gt;应用, 数据库发布扎口&lt;/li&gt;
&lt;li&gt;资源, 集成部署扎口&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工具平台建设&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自动化运维平台建设&lt;/li&gt;
&lt;li&gt;统一监控告警平台建设&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_1"&gt;总结&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;最终目标&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提高效率&lt;/li&gt;
&lt;li&gt;提高业务连续性&lt;/li&gt;
&lt;li&gt;最终提高客户满意度&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分阶段, 分步骤推进&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;运维团队以往积累了一些优秀的品质, 但也慢慢积累了惰性. 懒惰, 固步自封要被严肃处理.&lt;/li&gt;
&lt;li&gt;用于探索和实践. 敢于试错, 从失败中吸取经验教训.&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 02 Apr 2019 08:32:07 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-02:/the-declaration-of-sre.html</guid><category>DevOps</category><category>SRE</category></item><item><title>DevOps能力成熟度调查问卷</title><link>https://www.EWhisper.cn/devops-questionnaire.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;（一）配置管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;（二）构建与持续集成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;（三）构建与持续集成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;（四）测试管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;（五）部署与发布管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;（六）环境管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;（七）数据管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;（八）度量与反馈&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;（九）分布式应用架构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 问卷说明:&lt;/p&gt;
&lt;p&gt;本问卷来自互联网.&lt;br&gt;
本问卷由九个板块构成,一共73道题, 全部为单选题.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_1"&gt;（一）配置管理&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、版本控制系统&lt;/p&gt;
&lt;p&gt;·       A、未使用统一的版本控制系统，源代码分散在研发本地设备管理。&lt;/p&gt;
&lt;p&gt;·       B、使用集中式的版本控制系统并将所有源代码纳入系统管理。&lt;/p&gt;
&lt;p&gt;·       C、使用分布式的版本控制系统，并将所有源代码、配置文件、构建和部署等自动化脚本纳入系统管理。&lt;/p&gt;
&lt;p&gt;·       D、将数据库变更脚本和环境配置等纳入版本控制系统管理版本控制系统支持自动化的变更操作。&lt;/p&gt;
&lt;p&gt;·       E、将软件生命周期的所有配置项纳入版本控制系统管理，可完整回溯软件交付过程满足审计要求。&lt;/p&gt;
&lt;p&gt;2、分支管理&lt;/p&gt;
&lt;p&gt;·       A、缺乏明确的分支管理策略，分支生命周期混乱。&lt;/p&gt;
&lt;p&gt;·       B、采取长周期和大批量的方式进行代码提交，代码合并过程存在大量冲突和错误。&lt;/p&gt;
&lt;p&gt;·       C、采取短分支频繁提交的方式，研究人员至少每天完成一次代码提交，代码合并过程顺畅。&lt;/p&gt;
&lt;p&gt;·       D、分支策略满足持续交付需求，可灵活适应产品交付。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的分支管理策略，可支持团队高效协作。&lt;/p&gt;
&lt;p&gt;3、构建产物管理&lt;/p&gt;
&lt;p&gt;·       A、未使用统一的制品库，构建产物通过直接拷贝或本地共享等方式进行分发。&lt;/p&gt;
&lt;p&gt;·       B、使用统一的制品库管理构建产物，有清晰的分级和目录结构及权限管控并通过单一制品库地址进行分发。&lt;/p&gt;
&lt;p&gt;·       C、使用统一的制品库管理构建产物，并将二进制库文件和三方依赖软件工具等纳入只凭库管理。&lt;/p&gt;
&lt;p&gt;·       D、对制品库完成分级管理，有成熟的备份恢复清理策略，如采用分布式制品库。&lt;/p&gt;
&lt;p&gt;4、单一可信数据源&lt;/p&gt;
&lt;p&gt;·       A、版本控制系统和制品库作为单一可信数据源，覆盖生产部署环节。&lt;/p&gt;
&lt;p&gt;·       B、单一可信数据源进一步覆盖研发本地环境。&lt;/p&gt;
&lt;p&gt;·       C、单一可信数据源贯穿整个研发价值流交付过程，在组织内部开放共享，建立知识积累和经验复用体系。&lt;/p&gt;
&lt;p&gt;5、变更过程&lt;/p&gt;
&lt;p&gt;·       A、变更过程不受控且变更信变更问题定位困难且回滚操作具有高风险分散在每个系统内部，缺乏信息的有效共享机制。&lt;/p&gt;
&lt;p&gt;·       B、代码变更过程应附带变更管理信息。&lt;/p&gt;
&lt;p&gt;·       C、所有配置项变更由变更管理系统触发，并作为版本控制系统的强制要求。&lt;/p&gt;
&lt;p&gt;·       D、使用同一套变更管理系统覆盖从需求到部署发布全流程。&lt;/p&gt;
&lt;p&gt;·       E、可视化变更生命周期，支持全程数据分析管理和满足审计要求。&lt;/p&gt;
&lt;p&gt;6、变更追溯&lt;/p&gt;
&lt;p&gt;·       A、变更缺乏基本的可追溯性。&lt;/p&gt;
&lt;p&gt;·       B、有清晰定义的软件版本号规则，实现版本和代码的关联，可追溯版本构建对应的完整源代码信息。&lt;/p&gt;
&lt;p&gt;·       C、实现版本控制系统和变更管理系统的自动化关联，信息双向同步和实时可追溯。&lt;/p&gt;
&lt;p&gt;·       D、变更依赖被识别和标记，实现数据库和环境变更信息的可追溯。&lt;/p&gt;
&lt;p&gt;·       E、实现从需求到部署发布各个环节的相关全部信息的全程可追溯。&lt;/p&gt;
&lt;p&gt;7、变更回滚&lt;/p&gt;
&lt;p&gt;·       A、变更问题定位困难且回滚操作具有高风险。&lt;/p&gt;
&lt;p&gt;·       B、可支持版本间差异对比和代码级别问题定位和回滚。&lt;/p&gt;
&lt;p&gt;·       C、实现变更管理系统和版本控制系统的同步回滚，保证状态的一致性。&lt;/p&gt;
&lt;p&gt;·       D、可根据变更管理系统按需快速导出复用软件代码变更集，如建立从变更管理系统到软件代码变更集的关系数据库。&lt;/p&gt;
&lt;p&gt;·       E、支持任何时间点全部状态的自动化回滚需求。&lt;/p&gt;
&lt;h2 id="_2"&gt;（二）构建与持续集成&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、构建方式&lt;/p&gt;
&lt;p&gt;·       A、采用手工方式进行构建，构建过程不可重复。&lt;/p&gt;
&lt;p&gt;·       B、实现脚本自动化，通过手工配置完成构建。&lt;/p&gt;
&lt;p&gt;·       C、定义结构化构建脚本，实现模块级共享复用和统一维护。&lt;/p&gt;
&lt;p&gt;·       D、实现构建服务化，可按需提供接口和用户界面用于可视化构建编排。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的构建服务平台，持续改进服务易用性。&lt;/p&gt;
&lt;p&gt;2、构建环境&lt;/p&gt;
&lt;p&gt;·       A、使用本地设备，构建环境不可靠。&lt;/p&gt;
&lt;p&gt;·       B、有独立的构建服务器，多种任务共享构建环境。&lt;/p&gt;
&lt;p&gt;·       C、构建环境配置实现标准化，有独立的构建集群，单次构建控制在小时级。&lt;/p&gt;
&lt;p&gt;·       D、优化构建速度，实现增量化构建和模块化构建，单次构建控制在分钟级，如可采用分布式构建集群、构建缓存等技术。&lt;/p&gt;
&lt;p&gt;·       E、持续改进构建性能，实现构建资源共享和动态按需分配回收，如搭建基于云服务虚拟化和容器化的分布式构建集群。&lt;/p&gt;
&lt;p&gt;3、构建计划&lt;/p&gt;
&lt;p&gt;·       A、没有明确的版本号规则和构建任务计划。&lt;/p&gt;
&lt;p&gt;·       B、明确定义版本号规则，并根据发布策略细分构建类型，实现每日自动构建。&lt;/p&gt;
&lt;p&gt;·       C、明确定义构建计划和规则，实现代码提交触发构建和定期自动执行构建。&lt;/p&gt;
&lt;p&gt;·       D、分级构建计划，实现按需构建并达到资源和速度的有效平衡。&lt;/p&gt;
&lt;p&gt;·       E、分级构建计划，实现按需构建并达到资源和速度的有效平衡。&lt;/p&gt;
&lt;p&gt;4、构建职责&lt;/p&gt;
&lt;p&gt;·       A、构建工具和环境受限于团队人员能力，频繁手动干预维护。&lt;/p&gt;
&lt;p&gt;·       B、构建工具和环境由专人负责维护，并使用权限隔离。&lt;/p&gt;
&lt;p&gt;·       C、构建工具和环境由专门团队维护，并细分团队人员职责。&lt;/p&gt;
&lt;p&gt;·       D、构建系统服务化提供更多用户使用，构建不再局限于专业团队进行。&lt;/p&gt;
&lt;p&gt;·       E、将构建能力赋予全部团队成员，并按需触发构建实现快速反馈。&lt;/p&gt;
&lt;h2 id="_3"&gt;（三）构建与持续集成&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、集成服务&lt;/p&gt;
&lt;p&gt;·       A、没有搭建持续集成服务，团队成员缺乏对持续集成的理解。&lt;/p&gt;
&lt;p&gt;·       B、搭建统一的持续集成服务并对系统进 行日常维护和管理。&lt;/p&gt;
&lt;p&gt;·       C、组建专门的持续集成团队，负责优化持续集成系统和服务。&lt;/p&gt;
&lt;p&gt;·       D、持续集成嵌入每个研发团队日常活动，实现持续集成系统服务化和自助化。&lt;/p&gt;
&lt;p&gt;·       E、持续优化和改进团队持续集成服务，实现组织交付能力提升。&lt;/p&gt;
&lt;p&gt;2、集成频率&lt;/p&gt;
&lt;p&gt;·       A、长期本地开发代码集成频率几周或者几月一次。&lt;/p&gt;
&lt;p&gt;·       B、采用团队定期统一集成的策略，代码集成频率几天或者几周一次。&lt;/p&gt;
&lt;p&gt;·       C、研发人员至少每天向代码主干集成一次。&lt;/p&gt;
&lt;p&gt;·       D、研发人员每天多次向代码主干集成，每次集成代价较低。&lt;/p&gt;
&lt;p&gt;·       E、任何变更(代码，配置，环境)都会触发完整的持续集成流程。&lt;/p&gt;
&lt;p&gt;3、集成方式&lt;/p&gt;
&lt;p&gt;·       A、代码集成作为软件交付流程中的一个独立阶段。&lt;/p&gt;
&lt;p&gt;·       B、在部分分支上进行每天多次的定时构建。&lt;/p&gt;
&lt;p&gt;·       C、每次代码提交触发自动化构建，构建问题通过自动分析精准推送相关人员处理。&lt;/p&gt;
&lt;p&gt;·       D、每次代码提交构建触发自动化测试和静态代码检查，测试问题自动上报变更管理系统，测试结果作为版本质量标准要求，如：采取质量门禁等方式强化主干代码质量。&lt;/p&gt;
&lt;p&gt;·       E、实现持续集成分级和自动化测试分级，满足不同模块和集成阶段的差异化需求。&lt;/p&gt;
&lt;p&gt;4、反馈周期&lt;/p&gt;
&lt;p&gt;·       A、每次集成伴随大量的问题和冲突，集成期间主干分支长期不可用。&lt;/p&gt;
&lt;p&gt;·       B、集成问题反馈和解决需要半天或者更长时间。&lt;/p&gt;
&lt;p&gt;·       C、集成问题反馈和解决可以在几个小时内完成。&lt;/p&gt;
&lt;p&gt;·       D、集成问题反馈和解决控制在 30分钟以内完成。&lt;/p&gt;
&lt;p&gt;·       E、集成问题反馈和解决控制在 10分钟以内完成。&lt;/p&gt;
&lt;h2 id="_4"&gt;（四）测试管理&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、分层方法&lt;/p&gt;
&lt;p&gt;·       A、只进行用户/业务级的 UI 测试。&lt;/p&gt;
&lt;p&gt;·       B、采用接口/服务级测试对模块/服务进行覆盖全面的接口测试；采用代码级测试对核心模块的函数或类方法进行单元测试；对系统进行基本的性能测试。&lt;/p&gt;
&lt;p&gt;·       C、采用代码级测试对模块的函数或类方法进行覆盖全面的单元测试；系统全面的进行性能、容量、稳定性、可靠性、易用性、兼容性、安全性等非功能性测试。&lt;/p&gt;
&lt;p&gt;·       D、采用测试驱动开发的方式,进行代码级、接口级测试；采用探索性测试方法对需求进行深入挖掘测试&lt;/p&gt;
&lt;p&gt;·       E、采用验收测试驱动开发的方式进行用户/业务级的 UI测试。&lt;/p&gt;
&lt;p&gt;2、分层策略&lt;/p&gt;
&lt;p&gt;·       A、尚未建立测试分层策略，测试不分层。&lt;/p&gt;
&lt;p&gt;·       B、测试开始分层，但对测试分层策略缺乏系统的规划，对用户/业务级测试、接口/服务级、代码级测试分布比例由高到低，各层测试缺乏有效的设计。&lt;/p&gt;
&lt;p&gt;·       C、对测试分层策略进行系统的规划，用户/业务级、接口/服务级、代码级测试分布比例由低到高，充分设计;代码对非功能性测试进行全面系统的设计。&lt;/p&gt;
&lt;p&gt;·       D、测试分层策略的各层测试具有交叉互补性。&lt;/p&gt;
&lt;p&gt;·       E、定期验证测试分层策略，是否完整有效，持续优化策略。&lt;/p&gt;
&lt;p&gt;3、测试时机&lt;/p&gt;
&lt;p&gt;·       A、测试在软件交付过程中在开发完成后才介入。&lt;/p&gt;
&lt;p&gt;·       B、测试在持续交付过程中的介入时间提前到开发的集成阶段，接口/服务级测试在模块的接口开发完成后进行。&lt;/p&gt;
&lt;p&gt;·       C、测试在持续交付过程中的介入时间提前到开发的编码阶段，代码级测试在模块的函数或类方法开发完成后进行。&lt;/p&gt;
&lt;p&gt;·       D、代码级测试在模块的函数或类方法开发过程中同步进行和完成；接口/服务级测试在模块的接口开发过程中同步进行和完成。&lt;/p&gt;
&lt;p&gt;·       E、在需求阶段进行用户/业务级测定期验证测试设计，在需求特性并发、交付，整个过程中同步进行并完成测试。&lt;/p&gt;
&lt;p&gt;4、质量规约&lt;/p&gt;
&lt;p&gt;·       A、代码质量检查无任何规约。&lt;/p&gt;
&lt;p&gt;·       B、代码质量检查具备基本规约，但还缺乏完整性和有效性。&lt;/p&gt;
&lt;p&gt;·       C、代码质量检查具备完整、有效和强制执行的规约。&lt;/p&gt;
&lt;p&gt;·       D、代码质量检查规约根据需要可进行扩展和定制。&lt;/p&gt;
&lt;p&gt;·       E、定期验证代码质量规约的完整性和有效性，持续优化。&lt;/p&gt;
&lt;p&gt;5、检查策略&lt;/p&gt;
&lt;p&gt;·       A、代码质量检查无针对检查范围、质量门限等相关的策略。&lt;/p&gt;
&lt;p&gt;·       B、代码质量检查有针对检查范围、质量门限的策略，对代码规范、错误和圈复杂度、重复度等质量指标进。行检查分析&lt;/p&gt;
&lt;p&gt;·       C、代码质量检查将安全漏洞检查、合规检查纳入到检查范围。&lt;/p&gt;
&lt;p&gt;·       D、代码质量检查针对检查范围、质量门限的策略可根据需要灵活调整。&lt;/p&gt;
&lt;p&gt;·       E、定期验证代码质量策略的完整性和有效性，持续优化。&lt;/p&gt;
&lt;p&gt;6、检查方式&lt;/p&gt;
&lt;p&gt;·       A、代码质量检查采用人工方式进行评审。&lt;/p&gt;
&lt;p&gt;·       B、代码质量检查采用自动化结合手工方式进行。&lt;/p&gt;
&lt;p&gt;·       C、代码质量检查完全自动化，不需要手工干预。&lt;/p&gt;
&lt;p&gt;·       D、对代码质量检查发现的部分问题自动提出修改建议，支持可视化。&lt;/p&gt;
&lt;p&gt;·       E、具备企业级的代码质量管理平台，以服务的形式提供对代码质量的检查分析。&lt;/p&gt;
&lt;p&gt;7、反馈处理&lt;/p&gt;
&lt;p&gt;·       A、对代码质量检查结果处理不及时，遗留大量技术债。&lt;/p&gt;
&lt;p&gt;·       B、对代码质量检查结果给出反馈，根据反馈进行处理，对遗留的部分技术债乏跟踪和管理，导致遗漏。&lt;/p&gt;
&lt;p&gt;·       C、根据代码质量检查结果反馈及时处理，技术债仍有短期遗留，但进行有效的跟踪、管理和处理。&lt;/p&gt;
&lt;p&gt;·       D、将检查结果强制作为版本质量标准要求，根据代码质量检查提出的修改建议，对问题及时处理，在研发阶段主动解决技术债。&lt;/p&gt;
&lt;p&gt;·       E、对代码质量数据进行统一管理，可有效追溯并对代码质量进行有效度量。&lt;/p&gt;
&lt;p&gt;8、自动化设计&lt;/p&gt;
&lt;p&gt;·       A、未采用自动化方式测试，纯手工测试。&lt;/p&gt;
&lt;p&gt;·       B、尚未对测试用例中自动化部分进行规划和设计，覆盖不完整。&lt;/p&gt;
&lt;p&gt;·       C、根据需求、接口和代码对不同测试分层中自动化测试用例进行规划和设计，自动化覆盖比较完整。&lt;/p&gt;
&lt;p&gt;·       D、对性能、稳定性、可靠性、安全性等非功能性测试中自动化用例进行规划和设计，自动化覆盖完整。&lt;/p&gt;
&lt;p&gt;·       E、对故障和测试进行复盘，对遗漏的测试用例进行补充，不断优化和完善，持续提升覆盖率。&lt;/p&gt;
&lt;p&gt;9、自动化开发&lt;/p&gt;
&lt;p&gt;·       A、尚未对自动化测试脚本进行开发和管理，手工测试。&lt;/p&gt;
&lt;p&gt;·       B、对自动化测试脚本进行开发和本地管理。&lt;/p&gt;
&lt;p&gt;·       C、自动化测试脚本开发采用数据驱动、关键字驱动等方法；使用版本控制系统对自动化测试脚本进行有效管理。&lt;/p&gt;
&lt;p&gt;·       D、自动化测试用例脚本间具备独立性和大批量执行的健壮性。&lt;/p&gt;
&lt;p&gt;·       E、自动化脚本是测试用例设计的活文档，自动化脚本开发和测试用例设计完全统一。&lt;/p&gt;
&lt;p&gt;10、自动化执行&lt;/p&gt;
&lt;p&gt;·       A、手工测试执行效率低下，以周级为单位。&lt;/p&gt;
&lt;p&gt;·       B、对用户/业务级测试采用自动化测试，自动化测试的执行效率不高，以天级为单位。&lt;/p&gt;
&lt;p&gt;·       C、从代码级、接口级UI级测试实现了端到端的自动化测试打通；自动化测试执行效率较高，代码级测试分钟级，UI级测试小时级。&lt;/p&gt;
&lt;p&gt;·       D、有组织级的统一自动化测试平台，和上下游需求、故障系统打通；可以根据需求针对性自动关联选择自动化测试用例脚本执行；可以将由于版和故障关联。&lt;/p&gt;
&lt;p&gt;·       E、采用企业级统一的自动化测试平台，以云化的方式提供测试服务，进行分布式测试调度执行，提高测试执行效率和资源利用率；定期验证自动化执行策略,持续优化。&lt;/p&gt;
&lt;p&gt;11、自动化分析&lt;/p&gt;
&lt;p&gt;·       A、手工对测试结果进行分析判断，错误高，可信度低。&lt;/p&gt;
&lt;p&gt;·       B、对自动化测试结果具备一定的自动判断能力，存在一定的误报，可信度不足。&lt;/p&gt;
&lt;p&gt;·       C、对自动化测试结果具备较强的自动判断能力，误报少，可信度高。&lt;/p&gt;
&lt;p&gt;·       D、自动化测试数据模型标准化，和上下游需求、故障等研发数据关联，可以对自动化测试效果进行度量分析。例如：需求测试覆盖率、测试通过率和测试效率等。&lt;/p&gt;
&lt;p&gt;·       E、对自动化测试结果可以智能分析，自动分析失败用例的失败类型及原因，可以自动向故障管理系统提交故障，可信度高。&lt;/p&gt;
&lt;h2 id="_5"&gt;（五）部署与发布管理&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、部署方式&lt;/p&gt;
&lt;p&gt;·       A、运维人员手工完成所有环境的部署。&lt;/p&gt;
&lt;p&gt;·       B、运维人员通过自动化脚本实现部署过程部分自动化。&lt;/p&gt;
&lt;p&gt;·       C、部署和发布实现全自动化，同时支持数据库自动化部署。&lt;/p&gt;
&lt;p&gt;·       D、部署发布服务化，实现交付团队自助一键式多环境自动化。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的部署发布模式和工具系统平台。&lt;/p&gt;
&lt;p&gt;2、部署活动&lt;/p&gt;
&lt;p&gt;·       A、部署过程复杂不可控，伴随大量问题和较长的停机时间。&lt;/p&gt;
&lt;p&gt;·       B、部署过程通过流程文档定义实现标准化整体可控。&lt;/p&gt;
&lt;p&gt;·       C、使用相同的过程和工具完成所有环境部署，一次部署过程中使用相同的构建产物。&lt;/p&gt;
&lt;p&gt;·       D、部署过程可灵活响应业务需求变化通过合理组合高效编排。&lt;/p&gt;
&lt;p&gt;·       E、持续部署，每次变更都触发一次自动化生产环境部署过程。&lt;/p&gt;
&lt;p&gt;3、部署策略&lt;/p&gt;
&lt;p&gt;·       A、采用定期大批量部署策略。&lt;/p&gt;
&lt;p&gt;·       B、应用作为部署的最小单位，应用和数据库部署实现分离，实现测试环境的自动化部署。&lt;/p&gt;
&lt;p&gt;·       C、可运行的环境作为部署的最小单位，应用和配置进行分离。&lt;/p&gt;
&lt;p&gt;·       D、通过多种部署发布策略保证流程风险可控，如：蓝绿部署，金丝雀发布。&lt;/p&gt;
&lt;p&gt;·       E、软件交付团队自主进行安全可靠的部署和发布活动。&lt;/p&gt;
&lt;p&gt;4、部署质量&lt;/p&gt;
&lt;p&gt;·       A、部署整体失败率较高，并且无法实现回滚，生产问题只能在线上修复，修复时间不可控。&lt;/p&gt;
&lt;p&gt;·       B、实现应用部署的回滚操作，部署失败率中等，问题可及时修复。&lt;/p&gt;
&lt;p&gt;·       C、部署活动集成自动化测试功能，并以测试结果为部署前置条件每次部署活动提供变更对象范围报告和测试报告。&lt;/p&gt;
&lt;p&gt;·       D、建立监控体系跟踪和分析部署过程，出现问题自动化降级回滚，失败率较低。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的部署监控体系和测试体系，部署失败率维持在极低水平。&lt;/p&gt;
&lt;p&gt;5、协作模式&lt;/p&gt;
&lt;p&gt;·       A、整个软件交付过程严格遵循预先计划，存在复杂的部门间协作和等待，只有在开发完成后才进行测试和部署。&lt;/p&gt;
&lt;p&gt;·       B、通过定义完整的软件交付过程和清晰的交付规范，保证团队之间交付的有序。&lt;/p&gt;
&lt;p&gt;·       C、团队间交付按照约定由系统间调用完成，仅在必要环节进行手工确认。&lt;/p&gt;
&lt;p&gt;·       D、团队间依赖解耦，可实现独立安全的自主部署交付。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的交付业务组织灵活响应业务变化改善发布效率。&lt;/p&gt;
&lt;p&gt;6、流水线过程&lt;/p&gt;
&lt;p&gt;·       A、软件交付过程中的大部分工作通过手工方式完成。&lt;/p&gt;
&lt;p&gt;·       B、软件交付过程中的各个环节建立自动化能力以提升处理效率。&lt;/p&gt;
&lt;p&gt;·       C、打通软件交付过程中的各个环节，建立全流程的自动化能力，并根据自动化测试结果控制软件交付质量。&lt;/p&gt;
&lt;p&gt;·       D、建立可视化部署流水线，覆盖整个软件交付过程，每次变更都会触发完整的自动化部署流水线。&lt;/p&gt;
&lt;p&gt;·       E、持续部署流水线驱动持续改进。&lt;/p&gt;
&lt;p&gt;7、过程可视化&lt;/p&gt;
&lt;p&gt;·       A、交付过程中的信息是封闭的，交付状态不可追溯。&lt;/p&gt;
&lt;p&gt;·       B、交付过程在团队内部可见，信息在团队间共享，交付状态可追溯。&lt;/p&gt;
&lt;p&gt;·       C、交付过程组织内部可见，团队共享度量指标。&lt;/p&gt;
&lt;p&gt;·       D、部署流水线全员可见，对过程信息进行有效聚合分析展示趋势。&lt;/p&gt;
&lt;p&gt;·       E、部署流水线过程信息进行数据价值挖掘，推动业务改进。&lt;/p&gt;
&lt;h2 id="_6"&gt;（六）环境管理&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、环境类型&lt;/p&gt;
&lt;p&gt;·       A、环境类型只有生产环境和非生产环境的划分。&lt;/p&gt;
&lt;p&gt;·       B、IT交付过程意识到部分测试环境的重要性，开始提供功能测试环境。&lt;/p&gt;
&lt;p&gt;·       C、持续交付过程意识到研发环境的重要性，开始提供面向各类开发者独立的研发 工作区。&lt;/p&gt;
&lt;p&gt;·       D、全面的测试与灰度环境对于质量交付过程来说非常重要，有各类的环境类型划分，区分了开发者，技术测试及业务测试环境以及灰度发布环境等等。&lt;/p&gt;
&lt;p&gt;·       E、根据业务与应用的需要，弹性分配各类环境。&lt;/p&gt;
&lt;p&gt;2、环境架构&lt;/p&gt;
&lt;p&gt;·       A、环境的构建通过人工创建完成。&lt;/p&gt;
&lt;p&gt;·       B、环境构建通过一键化的脚本或者虚拟机来完成的，构建过程完全黑盒 化完成。&lt;/p&gt;
&lt;p&gt;·       C、环境的构建通过资源交付平台来完成，并且底层是由云来交付。&lt;/p&gt;
&lt;p&gt;·       D、环境的构建可以通过 Docker 容器化快速交付，低成本构建一个新的环境。&lt;/p&gt;
&lt;p&gt;·       E、环境的构建结合底层IT资源状况，采用了各类混合IT技术，根据业务及应用架构弹性构建。&lt;/p&gt;
&lt;p&gt;3、环境依赖与配置管理&lt;/p&gt;
&lt;p&gt;·       A、无依赖管理，环境的管理就是一个OS的交付。&lt;/p&gt;
&lt;p&gt;·       B、以应用为中心有OS级别的依赖和配置管理能力，比如说操作系统版本、组件版本、程序包版本等等。&lt;/p&gt;
&lt;p&gt;·       C、以应用为中心，有服务级依赖的配置管理能力，比如说依赖的关联服务，Mysql 服务、cache 服务、关联应用服务等等。&lt;/p&gt;
&lt;p&gt;·       D、环境和依赖配置管理可以资源化描述，类似dockerfile，大大提升其配置管理能力。&lt;/p&gt;
&lt;p&gt;·       E、环境依赖和配置可以做到实例级的动态配置管理能力，根据业务和应用架构的变化而变化。&lt;/p&gt;
&lt;h2 id="_7"&gt;（七）数据管理&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、数据来源&lt;/p&gt;
&lt;p&gt;·       A、每次测试时手工创建数据，测试数据都是临时性的。&lt;/p&gt;
&lt;p&gt;·       B、从生产环境导出一个子集并进行清洗后，形成基准的测试数据集，满足部分测试用例执行要求。&lt;/p&gt;
&lt;p&gt;·       C、从生产环境导出一个子集并进行清洗后，形成基准的测试数据集，满足部分测试用例执行要求。&lt;/p&gt;
&lt;p&gt;·       D、每个测试用例专属的测试数据都可以通过模拟或调用应用程序 API 的方式自动生成。&lt;/p&gt;
&lt;p&gt;·       E、所有的功能、非功能测试的测试数据，都可以通过模拟、数据库转储或调用应用程序 API 的方式自动生成。&lt;/p&gt;
&lt;p&gt;2、数据覆盖&lt;/p&gt;
&lt;p&gt;·       A、测试数据覆盖率低，仅支持部分测试场景，无法有效支持测试工作。&lt;/p&gt;
&lt;p&gt;·       B、测试数据覆盖主要场景，包括正常类型，错误类型以及边界类型，并进行初步的分类分级，满足不同测。试类型需要。&lt;/p&gt;
&lt;p&gt;·       C、建立体系化测试数据，进行数据依赖管理，覆盖更加复杂的业务场景。&lt;/p&gt;
&lt;p&gt;·       D、测试数据覆盖安全漏洞和开源合规等需求场景并建立定期更新机制。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的持续数据管理方式和策略。&lt;/p&gt;
&lt;p&gt;3、数据独立性&lt;/p&gt;
&lt;p&gt;·       A、测试数据没有版本控制和备份恢复机制。&lt;/p&gt;
&lt;p&gt;·       B、测试数据有明确备份恢复机制，实现测试数据复用和保证测试一致性。&lt;/p&gt;
&lt;p&gt;·       C、每个测试用例拥有专属的测试数据，有明确的测试初始状态测试用例的执行不依赖其他测试用例执行所。产生的数据。&lt;/p&gt;
&lt;p&gt;·       D、通过测试数据分级，实现专属测试数据和通用测试数据的有效管理和灵活组合，保证测试数据的独立性。&lt;/p&gt;
&lt;p&gt;·       E、通过测试数据分级，实现专属测试数据和通用测试数据的有效管理和灵活组合，保证测试数据的独立性。&lt;/p&gt;
&lt;p&gt;4、数据安全&lt;/p&gt;
&lt;p&gt;·       A、测试数据来源复杂，混入核心生产数据，带来信息安全风险&lt;/p&gt;
&lt;p&gt;·       B、测试数据经过清洗，不包含敏感信息，有效避免信息安全风险。&lt;/p&gt;
&lt;p&gt;·       C、测试数据经过清洗，不包含敏感信息，有效避免信息安全风险。&lt;/p&gt;
&lt;p&gt;·       D、测试数据经过清洗，不包含敏感信息，有效避免信息安全风险。&lt;/p&gt;
&lt;p&gt;·       E、测试数据经过清洗，不包含敏感信息，有效避免信息安全风险。&lt;/p&gt;
&lt;p&gt;5、变更过程&lt;/p&gt;
&lt;p&gt;·       A、数据变更由专业人员在后台手工完成 数据变更作为软件发布的一个独立环节，单独实施和交付&lt;/p&gt;
&lt;p&gt;·       B、数据变更通过文档实现标准化，使用自动化脚本完成变更。&lt;/p&gt;
&lt;p&gt;·       C、数据变更作为持续部署流水线的一个环节，随应用的部署自动化完成，无需专业人员单独执行。&lt;/p&gt;
&lt;p&gt;·       D、应用程序部署和数据库迁移解耦，可单独执行。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的数据管理方法，持续改进数据管理效率。&lt;/p&gt;
&lt;p&gt;6、兼容回滚&lt;/p&gt;
&lt;p&gt;·       A、没有识别数据库和应用版本，存在不兼容风险。&lt;/p&gt;
&lt;p&gt;·       B、建立数据库和应用的版本对应关系，并跟踪变更有效性。&lt;/p&gt;
&lt;p&gt;·       C、每次数据变更同时提供明确的恢复回滚机制，并进行变更测试，如：提供升级和回滚两个自动化脚本。&lt;/p&gt;
&lt;p&gt;·       D、数据变更具备向下兼容性，支持保留数据的回滚操作和零停机部署。&lt;/p&gt;
&lt;p&gt;7、版本控制&lt;/p&gt;
&lt;p&gt;·       A、数据变更没有纳入版本控制，变更过程不可重复。&lt;/p&gt;
&lt;p&gt;·       B、数据变更脚本纳入版本控制，并与数据库版本进行关联。&lt;/p&gt;
&lt;p&gt;8、数据监控&lt;/p&gt;
&lt;p&gt;·       A、没有建立变更监控体系，变更结果不可见。&lt;/p&gt;
&lt;p&gt;·       B、对变更日志进行收集分析，帮助问题快速定位。&lt;/p&gt;
&lt;p&gt;·       C、对数据变更进行流程分级定义，应对不同环境下的高危操作。&lt;/p&gt;
&lt;p&gt;·       D、对数据变更进行监控，自动发现异常变更状态。&lt;/p&gt;
&lt;p&gt;·       E、监控数据库性能并持续优化。&lt;/p&gt;
&lt;h2 id="_8"&gt;（八）度量与反馈&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、度量指标定义&lt;/p&gt;
&lt;p&gt;·       A、度量指标没有明确定义，对度量价值的理解是模糊的。&lt;/p&gt;
&lt;p&gt;·       B、在持续交付各个阶段定义度量指标，度量指标局限于职能部门内部。&lt;/p&gt;
&lt;p&gt;·       C、建立跨组织度量指标，进行跨领域综合维度的度量。&lt;/p&gt;
&lt;p&gt;·       D、整个研发团队共享业务价值导向的度量指标，实现指标的抽象分级，关注核心业务指标。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的度量指标，团队自我驱动持续改进。&lt;/p&gt;
&lt;p&gt;2、度量指标类型&lt;/p&gt;
&lt;p&gt;·       A、度量指标以结果指标为主，如变更频率，需求交付前置时间，变更失败率和平均修复时间。&lt;/p&gt;
&lt;p&gt;·       B、度量指标覆盖过程指标，客观反映组织研发现状。&lt;/p&gt;
&lt;p&gt;·       C、度量指标覆盖探索性指标，关注展示趋势和识别潜在改进。&lt;/p&gt;
&lt;p&gt;·       D、支持改进目标和试验结果的有效反馈，用于经验积累和指导下一阶段的改进工作。&lt;/p&gt;
&lt;p&gt;3、度量数据管理&lt;/p&gt;
&lt;p&gt;·       A、度量数据是临时性的，没有收集管理。&lt;/p&gt;
&lt;p&gt;·       B、度量数据的收集是离散的不连续的，历史度量数据没有进行有效理。&lt;/p&gt;
&lt;p&gt;·       C、度量数据的收集是连续的，历史度量数据有明确的管理规则。&lt;/p&gt;
&lt;p&gt;·       D、度量数据的收集是连续且优化的，对历史数据数据进行有效的挖掘分析。&lt;/p&gt;
&lt;p&gt;·       E、度量数据的收集是连续且优化的，对历史数据数据进行有效的挖掘分析。&lt;/p&gt;
&lt;p&gt;4、度量指标更新&lt;/p&gt;
&lt;p&gt;·       A、度量指标的设立和更新是固化的，度量指标没有明确的优先级。&lt;/p&gt;
&lt;p&gt;·       B、度量指标的设立和更新是动态的，可以按照组织需求定期变更，度量指标的优先级在团队内部可以达。&lt;/p&gt;
&lt;p&gt;·       C、建立完整的度量体系和成熟的度量框架，度量指标的设立和更新可按需实现快速定义并纳入度量体系，推动流程的持续改进。&lt;/p&gt;
&lt;p&gt;·       D、度量指标可基于大数据分析和人工智能自动识别推荐，并且动态调整指标优先级。&lt;/p&gt;
&lt;p&gt;5、报告生成方式&lt;/p&gt;
&lt;p&gt;·       A、度量报告通过手工方式生成，没有标准化的格式定义，内容缺乏细节。&lt;/p&gt;
&lt;p&gt;·       B、度量报告以自动化方式生成，通过预定义格式和内容标准化度量报告。&lt;/p&gt;
&lt;p&gt;·       C、度量报告进行分类分级，建立多种度量反馈渠道，内容按需生成。&lt;/p&gt;
&lt;p&gt;·       D、建立跨组织级统一的数据度量平台，数据看板内容可定制。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的度量方法，平台和展现形式。&lt;/p&gt;
&lt;p&gt;6、报告有效性&lt;/p&gt;
&lt;p&gt;·       A、数据时效性无法保证节。&lt;/p&gt;
&lt;p&gt;·       B、数据体现报告生成时间点的最新状态。&lt;/p&gt;
&lt;p&gt;·       C、通过可视化看板实时展示数据。&lt;/p&gt;
&lt;p&gt;·       D、通过可视化看板聚合报告内容，自动生成趋势图，进行趋势分析。&lt;/p&gt;
&lt;p&gt;·       E、通过可视化看板聚合报告内容，自动生成趋势图，进行趋势分析。&lt;/p&gt;
&lt;p&gt;7、报告覆盖范围&lt;/p&gt;
&lt;p&gt;·       A、受众局限于报告生成人员及相关的小范围内部。&lt;/p&gt;
&lt;p&gt;·       B、由预先定义的事件触发自动化报告发送，受众覆盖团队内部成员。&lt;/p&gt;
&lt;p&gt;·       C、实现报告精准范围推送，支持主动订阅，受众覆盖跨部门团队。&lt;/p&gt;
&lt;p&gt;·       D、多维度产品状态实时信息展示。&lt;/p&gt;
&lt;p&gt;·       E、多维度产品状态实时信息展示。&lt;/p&gt;
&lt;p&gt;8、反馈改进&lt;/p&gt;
&lt;p&gt;·       A、报告发现的问题没有进行有效跟踪落实，问题长期无法改进。&lt;/p&gt;
&lt;p&gt;·       B、测试报告中反馈的问题录入问题追踪系统，进行持续跟踪。&lt;/p&gt;
&lt;p&gt;·       C、度量反馈问题纳入研发迭代的待办事项，作为持续改进的一部分。&lt;/p&gt;
&lt;p&gt;·       D、度量反馈的持续改进纳入研发日常工作，预留时间处理非功能性需求和技术债务，并且识别有效改进并扩展到整个组织，作为企业级知识体系积累保留。&lt;/p&gt;
&lt;p&gt;·       E、通过数据挖掘实现跨组织跨流程数据度量分析，分析结果作为业务决策的重要依据，帮助组织持续改进价值交付流程。&lt;/p&gt;
&lt;h2 id="_9"&gt;（九）分布式应用架构&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、分布式应用数量&lt;/p&gt;
&lt;p&gt;·       A、20个以上&lt;/p&gt;
&lt;p&gt;·       B、10~20个&lt;/p&gt;
&lt;p&gt;·       C、5~10个&lt;/p&gt;
&lt;p&gt;·       D、5个以下&lt;/p&gt;
&lt;p&gt;2、实施计划&lt;/p&gt;
&lt;p&gt;·       A、大规模迁移&lt;/p&gt;
&lt;p&gt;·       B、保持现状&lt;/p&gt;
&lt;p&gt;·       C、可能回退&lt;/p&gt;
&lt;p&gt;3、技术成熟度&lt;/p&gt;
&lt;p&gt;·       A、稳定运行&lt;/p&gt;
&lt;p&gt;·       B、基本成熟&lt;/p&gt;
&lt;p&gt;·       C、前期探索&lt;/p&gt;
&lt;p&gt;·       D、研究阶段&lt;/p&gt;
&lt;p&gt;4、云技术&lt;/p&gt;
&lt;p&gt;·       A、虚拟化&lt;/p&gt;
&lt;p&gt;·       B、容器(K8S、MESOS等)&lt;/p&gt;
&lt;p&gt;·       C、物理机&lt;/p&gt;
&lt;p&gt;·       D、外部部署&lt;/p&gt;
&lt;p&gt;5、管理工具&lt;/p&gt;
&lt;p&gt;·       A、openstack系列&lt;/p&gt;
&lt;p&gt;·       B、openshift系列&lt;/p&gt;
&lt;p&gt;·       C、其他&lt;/p&gt;
&lt;p&gt;5、数据库&lt;/p&gt;
&lt;p&gt;·       A、UNIX数据库&lt;/p&gt;
&lt;p&gt;·       B、Linux商业数据库&lt;/p&gt;
&lt;p&gt;·       C、开源分布式数据库&lt;/p&gt;
&lt;p&gt;·       D、开源单数据库&lt;/p&gt;
&lt;p&gt;6、微服务框架&lt;/p&gt;
&lt;p&gt;·       A、dobbo/dobbox&lt;/p&gt;
&lt;p&gt;·       B、spring cloud&lt;/p&gt;
&lt;p&gt;·       C、都用&lt;/p&gt;
&lt;p&gt;·       D、其他&lt;/p&gt;
&lt;p&gt;7、开发&lt;/p&gt;
&lt;p&gt;·       A、完全敏捷&lt;/p&gt;
&lt;p&gt;·       B、部分敏捷&lt;/p&gt;
&lt;p&gt;·       C、传统方法&lt;/p&gt;
&lt;p&gt;8、自动化测试&lt;/p&gt;
&lt;p&gt;·       A、完整单元测试&lt;/p&gt;
&lt;p&gt;·       B、部分单元测试&lt;/p&gt;
&lt;p&gt;·       C、无单元测试&lt;/p&gt;
&lt;p&gt;9、部署策略&lt;/p&gt;
&lt;p&gt;·       A、灰度部署&lt;/p&gt;
&lt;p&gt;·       B、蓝绿部署&lt;/p&gt;
&lt;p&gt;·       C、AB部署&lt;/p&gt;
&lt;p&gt;·       D、直接替换&lt;/p&gt;
&lt;p&gt;10、部署工具&lt;/p&gt;
&lt;p&gt;·       A、SSH&lt;/p&gt;
&lt;p&gt;·       B、SALT&lt;/p&gt;
&lt;p&gt;·       C、容器编排工具&lt;/p&gt;
&lt;p&gt;·       D、其他&lt;/p&gt;
&lt;p&gt;11、回滚策略&lt;/p&gt;
&lt;p&gt;·       A、自动回滚&lt;/p&gt;
&lt;p&gt;·       B、手工回滚&lt;/p&gt;
&lt;p&gt;·       C、无回滚策略&lt;/p&gt;
&lt;p&gt;12、弹性部署&lt;/p&gt;
&lt;p&gt;·       A、自动扩容&lt;/p&gt;
&lt;p&gt;·       B、手工扩容&lt;/p&gt;
&lt;p&gt;·       C、无法扩容&lt;/p&gt;
&lt;p&gt;13、部署对象&lt;/p&gt;
&lt;p&gt;·       A、docker&lt;/p&gt;
&lt;p&gt;·       B、war&lt;/p&gt;
&lt;p&gt;·       C、其他&lt;/p&gt;
&lt;p&gt;14、部署方式&lt;/p&gt;
&lt;p&gt;·       A、虚拟化+docker&lt;/p&gt;
&lt;p&gt;·       B、虚拟化+war&lt;/p&gt;
&lt;p&gt;·       C、容器+docker&lt;/p&gt;
&lt;p&gt;15、部署数量&lt;/p&gt;
&lt;p&gt;·       A、1000+&lt;/p&gt;
&lt;p&gt;·       B、500~1000&lt;/p&gt;
&lt;p&gt;·       C、100~500&lt;/p&gt;
&lt;p&gt;·       D、100以下&lt;/p&gt;
&lt;p&gt;16、更新频率&lt;/p&gt;
&lt;p&gt;·       A、月更新&lt;/p&gt;
&lt;p&gt;·       B、周更新&lt;/p&gt;
&lt;p&gt;·       C、日更新&lt;/p&gt;
&lt;p&gt;·       D、每日多次&lt;/p&gt;
&lt;p&gt;17、更新方式&lt;/p&gt;
&lt;p&gt;·       A、全量更新&lt;/p&gt;
&lt;p&gt;·       B、局部更新&lt;/p&gt;
&lt;p&gt;18、部署工作量&lt;/p&gt;
&lt;p&gt;·       A、比以前复杂&lt;/p&gt;
&lt;p&gt;·       B、较以前简单&lt;/p&gt;
&lt;p&gt;·       C、非常简单&lt;/p&gt;
&lt;p&gt;·       D、几乎自动化&lt;/p&gt;
&lt;p&gt;19、最大障碍&lt;/p&gt;
&lt;p&gt;·       A、分析复杂&lt;/p&gt;
&lt;p&gt;·       B、技术复杂&lt;/p&gt;
&lt;p&gt;·       C、运维复杂&lt;/p&gt;
&lt;p&gt;·       D、成本提高&lt;/p&gt;
&lt;p&gt;·       E、其他&lt;/p&gt;
&lt;p&gt;20、综合效果&lt;/p&gt;
&lt;p&gt;·       A、不明显&lt;/p&gt;
&lt;p&gt;·       B、明显提高&lt;/p&gt;
&lt;p&gt;·       C、效果变差&lt;/p&gt;
&lt;p&gt;·       D、部分提高&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sat, 30 Mar 2019 19:43:07 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-30:/devops-questionnaire.html</guid><category>DevOps</category></item><item><title>苹果ATS合规对Web服务器的影响</title><link>https://www.EWhisper.cn/apple-ats-effect-on-web-server.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;一 前言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#11-ats"&gt;1.1 ATS要求&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;二 检查项&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#21-apache"&gt;2.1 Apache 检查项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#22-nginx"&gt;2.2 NGINX检查项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#23-weblogic"&gt;2.3 WebLogic 检查项&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;三 修改配置项&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#31-apache"&gt;3.1 Apache 配置项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#32-nginx"&gt;3.2 NGINX 配置项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#33-weblogic"&gt;3.3 WebLogic 配置项&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;四 注意项&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;一 前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;这篇文章是在太平保险期间, 我和同时Huang Wentao一起收集资料并实验后协作完成的.&lt;/p&gt;
&lt;p&gt;本文写于2年前, 时至今日可能规范, 软件版本或配置项都发生变化. 如果要应用, 请应用前进行完善测试.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="11-ats"&gt;1.1 ATS要求&lt;a class="headerlink" href="#11-ats" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;协商的传输层安全（TLS）版本必须为TLS 1.2;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连接必须使用AES-128或AES-256对称密码，协商的秘钥交换协议必须是以下之一：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leaf server（设备服务器）证书必须使用以下类型的密钥之一签名&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rivest-Shamir-Adleman (RSA)秘钥，长度至少为2048位&lt;/li&gt;
&lt;li&gt;Elliptic-Curve Cryptography (ECC) 秘钥，长度至少为256位&lt;/li&gt;
&lt;li&gt;此外，leaf server证书散列算法必须是具有至少256（即SHA-256或更大）的摘要长度（有时称为“指纹”）的安全散列算法2（SHA-2）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_2"&gt;二 检查项&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="21-apache"&gt;2.1 Apache 检查项&lt;a class="headerlink" href="#21-apache" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;OpenSSL版本: 需要大于 &lt;a href="https://www.openssl.org/news/changelog.txt"&gt;1.0.1&lt;/a&gt; (OpenSSL从1.0.1以后开始支持TLS 1.2)&lt;/li&gt;
&lt;li&gt;当前加密套件使用的密钥交换协议.&lt;ol&gt;
&lt;li&gt;查看当前加密套件支持的协议. 要保证支持的协议中有以上ATS 中所要求的.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;当前密钥长度/指纹算法是否满足:&lt;ol&gt;
&lt;li&gt;如果是RSA密钥, 则至少要为2048位;&lt;/li&gt;
&lt;li&gt;如果是ECC密钥, 则至少为256位.&lt;/li&gt;
&lt;li&gt;指纹安全散列算法要为 SHA-2&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Apache版本:&lt;ol&gt;
&lt;li&gt;&lt;a href="http://svn.apache.org/repos/asf/httpd/httpd/branches/2.2.x/CHANGES"&gt;Apache 2.2.23&lt;/a&gt; 或&lt;a href="http://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x/CHANGES"&gt;2.4.0&lt;/a&gt; 以上版本都是支持的.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="22-nginx"&gt;2.2 NGINX检查项&lt;a class="headerlink" href="#22-nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;OpenSSL 版本: 需要大于1.0.1&lt;/li&gt;
&lt;li&gt;当前加密套件使用的密钥交换协议.&lt;ol&gt;
&lt;li&gt;查看当前加密套件支持的协议. 要保证支持的协议中有以上ATS 中所要求的.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;当前密钥长度/指纹算法是否满足:&lt;ol&gt;
&lt;li&gt;如果是RSA密钥, 则至少要为2048位;&lt;/li&gt;
&lt;li&gt;如果是ECC密钥, 则至少为256位.&lt;/li&gt;
&lt;li&gt;指纹安全散列算法要为 SHA-2&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;NGINX版本: 建议使用&lt;a href="http://nginx.org/en/CHANGES-1.12"&gt;1.1.13&lt;/a&gt;以上版本.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="23-weblogic"&gt;2.3 WebLogic 检查项&lt;a class="headerlink" href="#23-weblogic" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;JDK版本: 需要版本为JDK 7 以上.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_3"&gt;三 修改配置项&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;除了以上检查项中版本不符合的需要升级、证书的算法、秘钥长度需要达到要求外，还有其他配置项要进行配置.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="31-apache"&gt;3.1 Apache 配置项&lt;a class="headerlink" href="#31-apache" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;示例: Apache版本2.2.23(~~待确定~~)，OpenSSL版本1.0.1e. (最大兼容性配置)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="err"&gt;*:443&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
    SSLEngine on
    SSLCertificateFile      /path/to/signed_certificate
    SSLCertificateChainFile /path/to/intermediate_certificate
    SSLCertificateKeyFile   /path/to/private/key

    # Uncomment the following directive when using client certificate authentication
    #SSLCACertificateFile    /path/to/ca_certs_for_client_authentication


    # HSTS (mod_headers is required) (15768000 seconds = 6 months)
    Header always set Strict-Transport-Security &amp;quot;max-age=15768000&amp;quot;
    ...
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;

# old configuration, tweak to your needs
SSLProtocol             all -SSLv2
SSLCipherSuite          ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:DES-CBC3-SHA:HIGH:SEED:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!RSAPSK:!aDH:!aECDH:!EDH-DSS-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!SRP
SSLHonorCipherOrder     on
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="32-nginx"&gt;3.2 NGINX 配置项&lt;a class="headerlink" href="#32-nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;举例：Nginx版本1.11.0，OpenSSL版本1.0.1e (最大兼容性配置)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="s"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="s"&gt;[::]:80&lt;/span&gt; &lt;span class="s"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.&lt;/span&gt;
    &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt; &lt;span class="s"&gt;https://&lt;/span&gt;&lt;span class="nv"&gt;$host$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;443&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt; &lt;span class="s"&gt;http2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="s"&gt;[::]:443&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt; &lt;span class="s"&gt;http2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# certs sent to the client in SERVER HELLO are concatenated in ssl_certificate&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_certificate&lt;/span&gt; &lt;span class="s"&gt;/path/to/signed_cert_plus_intermediates&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_certificate_key&lt;/span&gt; &lt;span class="s"&gt;/path/to/private_key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_session_timeout&lt;/span&gt; &lt;span class="s"&gt;1d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_session_cache&lt;/span&gt; &lt;span class="s"&gt;shared:SSL:50m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_session_tickets&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_dhparam&lt;/span&gt; &lt;span class="s"&gt;/path/to/dhparam.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# old configuration. tweak to your needs.&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_protocols&lt;/span&gt; &lt;span class="s"&gt;SSLv3&lt;/span&gt; &lt;span class="s"&gt;TLSv1&lt;/span&gt; &lt;span class="s"&gt;TLSv1.1&lt;/span&gt; &lt;span class="s"&gt;TLSv1.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_ciphers&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:DES-CBC3-SHA:HIGH:SEED:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!RSAPSK:!aDH:!aECDH:!EDH-DSS-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!SRP&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)&lt;/span&gt;
    &lt;span class="kn"&gt;add_header&lt;/span&gt; &lt;span class="s"&gt;Strict-Transport-Security&lt;/span&gt; &lt;span class="s"&gt;max-age=15768000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# OCSP Stapling ---&lt;/span&gt;
    &lt;span class="c1"&gt;# fetch OCSP records from URL in ssl_certificate and cache them&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_stapling&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_stapling_verify&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;## verify chain of trust of OCSP response using Root CA and Intermediate certs&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_trusted_certificate&lt;/span&gt; &lt;span class="s"&gt;/path/to/root_CA_cert_plus_intermediates&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;resolver&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;IP&lt;/span&gt; &lt;span class="s"&gt;DNS&lt;/span&gt; &lt;span class="s"&gt;resolver&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;....&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="33-weblogic"&gt;3.3 WebLogic 配置项&lt;a class="headerlink" href="#33-weblogic" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;需要在Oracle官网下载java 7相关的policyfile&lt;br&gt;
解压后，替换&lt;code&gt;JAVA_HOME/jre/lib/security&lt;/code&gt;下的&lt;code&gt;local_policy.jar&lt;/code&gt;、&lt;code&gt;US_export_policy.jar&lt;/code&gt;文件。&lt;/p&gt;
&lt;h2 id="_4"&gt;四 注意项&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;升级OpenSSL，可能会影响sftp、ssh等和ssl有关的协议，需谨慎操作。&lt;/li&gt;
&lt;li&gt;考虑到旧的ssl版本漏洞，以及兼容性，建议都要禁用掉ssl V2及以下版本协议。(最新的建议是SSL v3也禁用)&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sat, 30 Mar 2019 19:37:41 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-30:/apple-ats-effect-on-web-server.html</guid><category>ATS</category><category>apple</category><category>ssl</category><category>nginx</category><category>apache</category><category>tls</category><category>openssl</category></item><item><title>使用 Ansible 批量管理 Windows</title><link>https://www.EWhisper.cn/use-ansible-manage-multi-windows.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;安装指南&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;服务器端的要求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ansible"&gt;服务器端安装Ansible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#windows"&gt;Windows 指南&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#windows_1"&gt;设置Windows主机&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ansiblewindows"&gt;Ansible服务器端配置并管理Windows&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ping-windows"&gt;ping 远程windows主机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;创建目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;下发文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;删除文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;删除目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cmd"&gt;执行cmd命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#windows_2"&gt;重启windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;创建用户&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#windows_3"&gt;windows服务管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ansible是自动化运维工具，基于Python开发，实现了批量系统配置、批量程序部署、批量运行命令等功能。Ansible是基于模块(module)和剧本(playbook)工作。&lt;/p&gt;
&lt;h2 id="_2"&gt;安装指南&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本次在Ubuntu上安装Ansible 2.7 . 更详细安装方式参见: &lt;a href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html"&gt;Ansible 安装指南&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_3"&gt;服务器端的要求&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;目前Ansible可以从安装了Python 2（2.7版）或Python 3（3.5及更高版本）的任何机器上运行。控制计算机&lt;strong&gt;不支持Windows&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这包括Red Hat，Debian，CentOS，macOS，任何BSD等等。&lt;/p&gt;
&lt;h3 id="ansible"&gt;服务器端安装Ansible&lt;a class="headerlink" href="#ansible" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;通过Apt (Ubuntu)安装最新版本&lt;/h4&gt;
&lt;p&gt;这里有&lt;a href="https://launchpad.net/~ansible/+archive/ubuntu/ansible"&gt;一个PPA&lt;/a&gt;版本的Ubuntu源。&lt;/p&gt;
&lt;p&gt;要在您的计算机上配置PPA并安装ansible，请运行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
sudo apt-get install software-properties-common
sudo apt-add-repository --yes --update ppa:ansible/ansible
sudo apt-get install ansible
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;注意:&lt;/p&gt;
&lt;p&gt;在较旧的Ubuntu发行版中，“software-properties-common”被称为“python-software-properties”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="windows"&gt;Windows 指南&lt;a class="headerlink" href="#windows" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="windows_1"&gt;设置Windows主机&lt;a class="headerlink" href="#windows_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;主机要求&lt;/h4&gt;
&lt;p&gt;要使Ansible与Windows主机通信并使用Windows模块，Windows主机必须满足以下要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ansible支持的Windows版本通常与Microsoft当前和扩展支持下的版本相匹配。支持的桌面操作系统包括&lt;strong&gt;Windows 7,8.1和10&lt;/strong&gt;，受支持的服务器操作系统包括&lt;strong&gt;Windows Server 2008,2008 R2,2012,2012 R2和2016&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;Ansible需要&lt;strong&gt;PowerShell 3.0&lt;/strong&gt;或更高版本，并且至少要在Windows主机上安装&lt;strong&gt;.NET 4.0&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;应创建并激活&lt;strong&gt;WinRM listener &lt;/strong&gt;。更多细节可以在下面找到。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;注意:&lt;/p&gt;
&lt;p&gt;虽然这些是Ansible连接的基本要求，但是一些Ansible模块还有其他要求，例如较新的OS或PowerShell版本。请参阅模块的文档页面以确定主机是否满足这些要求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;升级PowerShell和.NET框架&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;升级powershell需要&lt;strong&gt;重启服务器&lt;/strong&gt;才能生效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ansible需要PowerShell 3.0版和.NET Framework 4.0或更高版本才能在较旧的操作系统（如Server 2008和Windows 7）上运行。基本OS镜像不符合此要求。您可以使用&lt;a href="https://github.com/jborean93/ansible-windows/blob/master/scripts/Upgrade-PowerShell.ps1"&gt;Upgrade-PowerShell.ps1&lt;/a&gt;脚本来更新这些脚本。&lt;/p&gt;
&lt;p&gt;这是如何从PowerShell运行此脚本的示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://raw.githubusercontent.com/jborean93/ansible-windows/master/scripts/Upgrade-PowerShell.ps1&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$env:temp\Upgrade-PowerShell.ps1&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Administrator&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Password&amp;quot;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;New-Object&lt;/span&gt; &lt;span class="n"&gt;-TypeName&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WebClient&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;DownloadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;Set-ExecutionPolicy&lt;/span&gt; &lt;span class="n"&gt;-ExecutionPolicy&lt;/span&gt; &lt;span class="n"&gt;Unrestricted&lt;/span&gt; &lt;span class="n"&gt;-Force&lt;/span&gt;

&lt;span class="c"&gt;# version can be 3.0, 4.0 or 5.1&lt;/span&gt;
&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="n"&gt;-Version&lt;/span&gt; &lt;span class="n"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt; &lt;span class="n"&gt;-Username&lt;/span&gt; &lt;span class="nv"&gt;$username&lt;/span&gt; &lt;span class="n"&gt;-Password&lt;/span&gt; &lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="n"&gt;-Verbose&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成后，您将需要删除自动登录并将执行策略设置回默认值&lt;code&gt;Restricted&lt;/code&gt;。您可以使用以下PowerShell命令执行此操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# this isn&amp;#39;t needed but is a good security practice to complete&lt;/span&gt;
&lt;span class="nb"&gt;Set-ExecutionPolicy&lt;/span&gt; &lt;span class="n"&gt;-ExecutionPolicy&lt;/span&gt; &lt;span class="n"&gt;Restricted&lt;/span&gt; &lt;span class="n"&gt;-Force&lt;/span&gt;

&lt;span class="nv"&gt;$reg_winlogon_path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;Set-ItemProperty&lt;/span&gt; &lt;span class="n"&gt;-Path&lt;/span&gt; &lt;span class="nv"&gt;$reg_winlogon_path&lt;/span&gt; &lt;span class="n"&gt;-Name&lt;/span&gt; &lt;span class="n"&gt;AutoAdminLogon&lt;/span&gt; &lt;span class="n"&gt;-Value&lt;/span&gt; &lt;span class="n"&gt;0&lt;/span&gt;
&lt;span class="nb"&gt;Remove-ItemProperty&lt;/span&gt; &lt;span class="n"&gt;-Path&lt;/span&gt; &lt;span class="nv"&gt;$reg_winlogon_path&lt;/span&gt; &lt;span class="n"&gt;-Name&lt;/span&gt; &lt;span class="n"&gt;DefaultUserName&lt;/span&gt; &lt;span class="n"&gt;-ErrorAction&lt;/span&gt; &lt;span class="n"&gt;SilentlyContinue&lt;/span&gt;
&lt;span class="nb"&gt;Remove-ItemProperty&lt;/span&gt; &lt;span class="n"&gt;-Path&lt;/span&gt; &lt;span class="nv"&gt;$reg_winlogon_path&lt;/span&gt; &lt;span class="n"&gt;-Name&lt;/span&gt; &lt;span class="n"&gt;DefaultPassword&lt;/span&gt; &lt;span class="n"&gt;-ErrorAction&lt;/span&gt; &lt;span class="n"&gt;SilentlyContinue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该脚本的工作原理是检查需要安装哪些程序（例如.NET Framework 4.5.2）以及需要什么样的PowerShell版本。如果&lt;strong&gt;需要重新启动&lt;/strong&gt;并且设置了&lt;code&gt;username&lt;/code&gt;和&lt;code&gt;password&lt;/code&gt;参数，则脚本将在重新启动时自动重新启动并登录。该脚本将继续，直到不再需要执行任何操作且PowerShell版本与目标版本匹配为止。如果未设置&lt;code&gt;username&lt;/code&gt;和 &lt;code&gt;password&lt;/code&gt;参数，脚本将提示用户手动重新引导并在需要时登录。当用户下次登录时，脚本将从停止的位置继续，并且该过程将继续，直到不再需要其他操作为止。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;注意:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在Server 2008上运行，则必须安装SP2。如果在Server 2008 R2或Windows 7上运行，则必须安装SP1。&lt;/li&gt;
&lt;li&gt;Windows Server 2008只能安装PowerShell 3.0; 指定较新的版本将导致脚本失败。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt;和&lt;code&gt;password&lt;/code&gt;参数都是存储在注册表中的纯文本。确保在脚本完成后运行清理命令，以确保主机上仍未存储凭据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4&gt;WinRM内存补丁&lt;/h4&gt;
&lt;p&gt;在PowerShell v3.0上运行时，WinRM服务存在一个错误，它限制了WinRM可用的内存量。如果未安装此补丁，Ansible将无法在Windows主机上执行某些命令。这些补丁应作为系统引导或映像过程的一部分安装。&lt;a href="https://github.com/jborean93/ansible-windows/blob/master/scripts/Install-WMF3Hotfix.ps1"&gt;Install-WMF3Hotfix.ps1&lt;/a&gt;脚本可用于在受影响的主机上安装此修补程序。&lt;/p&gt;
&lt;p&gt;以下PowerShell命令将安装此修补程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://raw.githubusercontent.com/jborean93/ansible-windows/master/scripts/Install-WMF3Hotfix.ps1&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$env:temp\Install-WMF3Hotfix.ps1&amp;quot;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;New-Object&lt;/span&gt; &lt;span class="n"&gt;-TypeName&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WebClient&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;DownloadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;powershell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="n"&gt;-ExecutionPolicy&lt;/span&gt; &lt;span class="n"&gt;ByPass&lt;/span&gt; &lt;span class="o"&gt;-File&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="n"&gt;-Verbose&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;WinRM设置&lt;/h4&gt;
&lt;p&gt;一旦Powershell升级到至少3.0版本，最后一步是配置WinRM服务，以便Ansible可以连接到它。WinRM服务有两个主要组件，用于管理Ansible如何与Windows主机连接：&lt;code&gt;listener&lt;/code&gt;和&lt;code&gt;service&lt;/code&gt;配置设置。&lt;/p&gt;
&lt;p&gt;可以在下面阅读有关每个组件的详细信息，也可以使用脚本&lt;a href="https://github.com/ansible/ansible/blob/devel/examples/scripts/ConfigureRemotingForAnsible.ps1"&gt;ConfigureRemotingForAnsible.ps1&lt;/a&gt;来进行基本设置。此脚本使用自签名证书设置HTTP和HTTPS侦听器，并在服务上启用&lt;code&gt;Basic&lt;/code&gt; 身份验证选项。&lt;/p&gt;
&lt;p&gt;要使用此脚本，请在PowerShell中运行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$env:temp\ConfigureRemotingForAnsible.ps1&amp;quot;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;New-Object&lt;/span&gt; &lt;span class="n"&gt;-TypeName&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WebClient&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;DownloadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;powershell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="n"&gt;-ExecutionPolicy&lt;/span&gt; &lt;span class="n"&gt;ByPass&lt;/span&gt; &lt;span class="o"&gt;-File&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;注意:&lt;/p&gt;
&lt;p&gt;ConfigureRemotingForAnsible.ps1脚本仅用于培训和开发目的，不应在生产环境中使用，因为它启用了&lt;code&gt;Basic&lt;/code&gt; 这本质上不安全（如身份验证）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;WinRM Listener&lt;/h4&gt;
&lt;p&gt;WinRM服务侦听一个或多个端口上的请求。每个端口都必须创建并配置一个侦听器。&lt;/p&gt;
&lt;p&gt;要查看在WinRM服务上运行的当前侦听器，请运行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;winrm&lt;/span&gt; &lt;span class="n"&gt;quickconfig&lt;/span&gt;
&lt;span class="n"&gt;winrm&lt;/span&gt; &lt;span class="n"&gt;enumerate&lt;/span&gt; &lt;span class="n"&gt;winrm&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Listener&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行后输出如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Listener&lt;/span&gt;
    &lt;span class="n"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;
    &lt;span class="n"&gt;Transport&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTP&lt;/span&gt;
    &lt;span class="n"&gt;Port&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;5985&lt;/span&gt;
    &lt;span class="n"&gt;Hostname&lt;/span&gt;
    &lt;span class="n"&gt;Enabled&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;URLPrefix&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wsman&lt;/span&gt;
    &lt;span class="n"&gt;CertificateThumbprint&lt;/span&gt;
    &lt;span class="n"&gt;ListeningOn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;127&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;192&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;168&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;56&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;155&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;5efe&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;15&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;5efe&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;192&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;168&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;56&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;155&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
&lt;span class="n"&gt;ffff&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ffff&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fffe&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;203d&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;7d97&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;c2ed&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ec78&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;e8ea&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;d765&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;2c69&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;7756&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;7&lt;/span&gt;

&lt;span class="n"&gt;Listener&lt;/span&gt;
    &lt;span class="n"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;
    &lt;span class="n"&gt;Transport&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPS&lt;/span&gt;
    &lt;span class="n"&gt;Port&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;5986&lt;/span&gt;
    &lt;span class="n"&gt;Hostname&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SERVER2016&lt;/span&gt;
    &lt;span class="n"&gt;Enabled&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;URLPrefix&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wsman&lt;/span&gt;
    &lt;span class="n"&gt;CertificateThumbprint&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;E6CDAA82EEAF2ECE8546E05DB7F3E01AA47D76CE&lt;/span&gt;
    &lt;span class="n"&gt;ListeningOn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;127&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;192&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;168&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;56&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;155&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;5efe&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;15&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;5efe&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;192&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;168&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;56&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;155&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
&lt;span class="n"&gt;ffff&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ffff&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fffe&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;203d&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;7d97&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;c2ed&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ec78&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;e8ea&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;d765&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;2c69&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;7756&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改winrm配置，启用远程连接认证&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;winrm&lt;/span&gt; &lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="n"&gt;winrm&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@{Basic=&amp;quot;true&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;winrm&lt;/span&gt; &lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="n"&gt;winrm&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@{AllowUnencrypted=&amp;quot;true&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;windows 防火墙配置&lt;/h4&gt;
&lt;p&gt;配置防火墙:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加防火墙信任规则，允许5985-5986端口通过&lt;/li&gt;
&lt;li&gt;打开防火墙高级配置，选择&lt;strong&gt;入站规则&lt;/strong&gt;，在点击新建规则&lt;/li&gt;
&lt;li&gt;填写一下信息&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;TCP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;信任端口&lt;strong&gt;5985-5986&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;填写新建规则名称&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="ansiblewindows"&gt;Ansible服务器端配置并管理Windows&lt;a class="headerlink" href="#ansiblewindows" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;添加windows客户端连接信息: 编辑&lt;code&gt;/etc/ansible/hosts&lt;/code&gt;, 添加客户端主机信息(ansible服务端的配置)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[windows]&lt;/span&gt;

&lt;span class="na"&gt;192.168.2.2 ansible_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Administrator&amp;quot; ansible_password=&amp;quot;Password&amp;quot; ansible_port=5986 ansible_connection=&amp;quot;winrm&amp;quot; ansible_winrm_server_cert_validation=ignore ansible_winrm_transport=basic&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="ping-windows"&gt;ping 远程windows主机&lt;a class="headerlink" href="#ping-windows" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ansible &lt;span class="m"&gt;192&lt;/span&gt;.168.2.2 -m win_ping
&lt;span class="m"&gt;192&lt;/span&gt;.168.2.2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false,
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_4"&gt;创建目录&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ansible &lt;span class="m"&gt;192&lt;/span&gt;.168.2.2 -m win_file -a &lt;span class="s1"&gt;&amp;#39;path=D:\\test state=directory&amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;192&lt;/span&gt;.168.2.2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;CHANGED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_5"&gt;下发文件&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ansible &lt;span class="m"&gt;192&lt;/span&gt;.168.2.2 -m win_copy -a &lt;span class="s1"&gt;&amp;#39;src=/etc/hosts dest=D:\\hosts.txt&amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;192&lt;/span&gt;.168.2.2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;CHANGED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: true,
    &lt;span class="s2"&gt;&amp;quot;checksum&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;f6d471689e1233342a8e43a130ff40a6ea0b9f51&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;dest&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;D:\\hosts.txt&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;operation&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;file_copy&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;original_basename&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;hosts&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;635&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;/etc/hosts&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_6"&gt;删除文件&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ansible 192.168.2.2 -m win_file -a &amp;#39;dest=d:\\config_dir\\hosts.txt state=absent&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_7"&gt;删除目录&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ansible 192.168.2.2 -m win_file -a &amp;#39;dest=d:\\config_dir2 state=absent&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="cmd"&gt;执行cmd命令&lt;a class="headerlink" href="#cmd" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ansible 192.168.2.2 -m win_shell -a &amp;#39;ipconfig&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="windows_2"&gt;重启windows&lt;a class="headerlink" href="#windows_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ansible 192.168.2.2 -m win_reboot&lt;/span&gt;
&lt;span class="c1"&gt;# ansible 192.168.2.2 -m win_shell -a &amp;#39;shutdown -r -t 0&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_8"&gt;创建用户&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;远程在windows客户端上创建用户&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ansible 192.168.2.2 -m win_user -a &amp;quot;name=testuser1 passwd=123456&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="windows_3"&gt;windows服务管理&lt;a class="headerlink" href="#windows_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ansible 192.168.2.2 -m win_shell -a “net stop|start zabbix_agent”&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;说明:&lt;/p&gt;
&lt;p&gt;完整的windows module见: &lt;a href="https://docs.ansible.com/ansible/latest/modules/list_of_windows_modules.html"&gt;Windows modules&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sat, 30 Mar 2019 19:37:41 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-30:/use-ansible-manage-multi-windows.html</guid><category>ansible</category><category>windows</category><category>devops</category></item><item><title>HTTPS基础原理和配置 - 加密协议SSL和TLS</title><link>https://www.EWhisper.cn/https-101-chapter-1.html</link><description>&lt;blockquote&gt;
&lt;p&gt;近期又碰到了SSL相关的事情, 就心血来潮开个新专题 - 《HTTPS基础原理和配置》&lt;/p&gt;
&lt;p&gt;本文是第一篇文章， 主要介绍SSL TLS加密协议的相关内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_1"&gt;加密协议历史概要&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;SSL TLS加密协议其实并没有很长的历史，1995年&lt;strong&gt;网景&lt;/strong&gt;发布了SSL v2.0，这也是web加密的开始。这使得电子商务领域，人们可以在线提交密码和信用卡，并且至少是相当安全的。&lt;/p&gt;
&lt;p&gt;SSLv3.0很快发布，这版被保罗·柯克（Paul Coker）及其他人完全重写。这是一个非常坚实的协议。事实上，IETF采用SSL v3.0，并使它成为并不是网景独有的协议，叫做TLS（Transport Layer Security）。SSL意思是安全套接字层，但现在叫传输层安全。&lt;/p&gt;
&lt;p&gt;所以，TLS v1.0几乎和SSL v3.0 一模一样，只是进行了一两个小优化，并且IAF使之标准化。如果你深究这些协议，TLS v1.0实际上就是SSL v3.1；所以你可以认为他们是连续的。&lt;/p&gt;
&lt;p&gt;但是最终IETF提出了新版本v1.1（一些小优化），然后是v1.2，引入了一些新的加密算法。但是看到这你可能会想“好吧，有些客户端支持这些，有些客户端支持更新的，这取决于它们发布的时间. 安全性上可能差不太多". 但实际在安全意义上，这些中的大多数已经以被破解了。&lt;/p&gt;
&lt;h3 id="_2"&gt;关键历史节点&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SSL v2.0 1995年 网景 发布&lt;/li&gt;
&lt;li&gt;SSL v3.0 1996年发布 修复v2的主要问题&lt;/li&gt;
&lt;li&gt;TLS v1.0 1999年 IETF发布；对SSLv3小优化&lt;/li&gt;
&lt;li&gt;TLS v1.1 2006年 发布 小优化&lt;/li&gt;
&lt;li&gt;TLS v1.2 2008年发布 改进hash和AEAD模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;&lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f602.png" title=":joy:" width="20px"&gt;被破解历史概要&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先是SSL v2.0, 设计之初就被破解&lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f602.png" title=":joy:" width="20px"&gt;&lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f602.png" title=":joy:" width="20px"&gt;&lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f602.png" title=":joy:" width="20px"&gt;, 所以，ssl v2.0确实不推荐使用；已经被破解很长很长时间了，不安全。 我们经常听到的支持的SSL版本一般也是从SSL v3.0开始的.&lt;/p&gt;
&lt;p&gt;SSL v3.0呢, 之前一直在用，直到2014年11月被破解。&lt;/p&gt;
&lt;p&gt;TLS呢, v1.0和v1.1基本安全。&lt;/p&gt;
&lt;p&gt;最新的v1.2(其实现在已经不算最新的了, TLS v1.3已经出来了, 但是目前主流的最新协议还是1.2), 是唯一一个还没有针对性攻击的版本(PS: 当然, 近期也有针对TLS v1.2的漏洞爆出, 但还算OK)。&lt;/p&gt;
&lt;p&gt;TLS有一个混乱的历史，并没有真正最好的安全记录，但TLS v1.2一直还是最好的，当涉及到与浏览器和服务的交互，它内置在几乎一切的浏览器和服务器中(最新的)。&lt;/p&gt;
&lt;p&gt;所以，TLS v1.2是大势所趋, 如果涉及到关键业务数据交互, 如&lt;strong&gt;用户关键信息&lt;/strong&gt; &lt;strong&gt;支付&lt;/strong&gt; &lt;strong&gt;金融&lt;/strong&gt;等场景, TLS v1.2才能真正有保障, 而其他老的加密协议, 都已经被破解了, 黑客想拿到你的数据(如果你用老的加密协议)只是时间问题, 并不存在技术上的难点。所以评估ATS(苹果的安全相关要求)合规也要求该版本。&lt;/p&gt;
&lt;h3 id="_4"&gt;&lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f602.png" title=":joy:" width="20px"&gt;被破解关键历史节点&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;SSL v2.0 1995发布 - 设计之初被破解&lt;/li&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;SSL v3.0 1996发布 – 被POODLE破解（2014 .11）&lt;/li&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;TSL v1.0 1999发布 – BEAST(2011)和Lucky 13(2013)发现漏洞&lt;/li&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;T​LS v1.1 2006发布 – 被Lucky 13(2013)和RC4(2013,2015)发现漏洞&lt;/li&gt;
&lt;li&gt;TLS v1.2 2008发布 – 只有在AEAD模式下是安全的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;客户端兼容性&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 注意:&lt;/p&gt;
&lt;p&gt;如果有条件, 强烈建议&lt;strong&gt;只选择 TLS v1.2&lt;/strong&gt;版本. (对于传统企业, 真的挺难做到的)​&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据以上的内容来看, 那我只选择TLS v1.2协议好了, 但实际情况是, TLS v1.2 是&lt;strong&gt;2008&lt;/strong&gt;年才发布的(标注发布), 而真正要落到实处所需要的时间更长. 所以很多客户端并不支持TLS v1.2. &lt;/p&gt;
&lt;p&gt;这些客户端, 是&lt;strong&gt;广义&lt;/strong&gt;的客户端, 包括: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作系统&lt;/li&gt;
&lt;li&gt;浏览器&lt;/li&gt;
&lt;li&gt;手机&lt;/li&gt;
&lt;li&gt;胖客户端(如Java客户端)&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，如果你计划服务器只选择1.2版本，你就可能失去了很多潜在客户(还在用旧的客户端的客户, 当然, 说不定用着旧电脑的员工也被拒之门外了...)。这并不是最好的举动，除非对绝对安全非常敏感。否则的话, 还是建议支持更多的安全协议让更多的客户可以兼容. 是吧? 毕竟比起http这种裸奔, 其他旧的协议好歹还是穿着衣服的.&lt;img align="absmiddle" alt="😏" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f60f.png" title=":smirk:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;但是, 另一些大平台, 已经开始倾向于v1.2。比如ios之前的&lt;a href="https://developer.apple.com/news/?id=12212016b&amp;amp;1482372961"&gt;ATS合规要求&lt;/a&gt;, 比如&lt;a href="https://www.microsoft.com/security/blog/2017/06/20/tls-1-2-support-at-microsoft/"&gt;微软建议你放弃TLS v1.0和 TLS v1.1的支持&lt;/a&gt;。因此，行业正在朝着标准迈进。&lt;/p&gt;
&lt;h3 id="tls-v12"&gt;支持TLS v1.2客户端列表&lt;a class="headerlink" href="#tls-v12" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows 8 以上 (Windows Server 2008以上 - 2017年下半年才支持) (&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; win7不支持! 更别提win xp了)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://access.redhat.com/blogs/766093/posts/1976123"&gt;RHEL 或 CentOS ≥ 6.5&lt;/a&gt; (&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;用CentOS 5.X的注意了啊, 不支持TLS v1.2 ​)&lt;/li&gt;
&lt;li&gt;Chrome ≥ 30&lt;/li&gt;
&lt;li&gt;安卓 ≥ 5.0&lt;/li&gt;
&lt;li&gt;火狐浏览器 ≥ 27&lt;/li&gt;
&lt;li&gt;IE/Edge ≥ 11 (&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;主流的IE8 9 10都不支持!)&lt;/li&gt;
&lt;li&gt;iOS ≥ 5&lt;ul&gt;
&lt;li&gt;注意：iOS 9应用需要TLS 1.2支持。(ATS合规要求, 当时后来好像很难推下去)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tls-10"&gt;支持TLS 1.0 客户端列表&lt;a class="headerlink" href="#tls-10" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TLS 1.0 （真正安全的最老版本）几乎都支持（除了win xp sp2)。&lt;/p&gt;
&lt;p&gt;&lt;img alt="win xp sp2" src="./images/winxpsp2.png"&gt;&lt;/p&gt;
&lt;h2 id="_6"&gt;配置建议&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;再次推荐&lt;a href="https://www.ssllabs.com/"&gt;SSL Labs&lt;/a&gt;, 打分如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="SSL Labs打分示例" src="./images/ssl-labs-example.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_7"&gt;高安全性 低兼容性&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SSLProtocol             all -SSLv3 -TLSv1 -TLSv1.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只支持TLS v1.2.&lt;/strong&gt; 当你配置加密协议时，如果只选择TLS&lt;br&gt;
1.2,得分会是&lt;strong&gt;A&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id="_8"&gt;中安全性 高兼容性&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SSLProtocol             all -SSLv3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;只支持&lt;strong&gt;TLS&lt;/strong&gt;协议, 得分也会是&lt;strong&gt;A&lt;/strong&gt;. (之前的, 近期不确定, 感兴趣的可以测一下).&lt;/p&gt;
&lt;h3 id="_9"&gt;低安全性 最大兼容性&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SSLProtocol             all&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果使用SSLv3.0，有风险，得C。&lt;/p&gt;
&lt;h2 id="_10"&gt;总结&lt;a class="headerlink" href="#_10" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;选择加密协议, 要根据具体的需求, 有侧重, 也要做到安全性和兼容性的兼顾.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我之前有个相关的PPT, 感兴趣的话后续发上来.&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sat, 30 Mar 2019 00:08:23 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-30:/https-101-chapter-1.html</guid><category>linux</category><category>openssl</category><category>ssl</category><category>nginx</category><category>centos</category></item><item><title>CentOS 7.5 安装X11桌面和中文支持</title><link>https://www.EWhisper.cn/centos-7-install-x11-desktop-and-chinese-support.html</link><description>&lt;h1 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;通过在CentOS 7.5 上安装X11桌面环境和中文语言、字体、输入法来将云服务器打造成 Python 集成开发环境。&lt;/p&gt;
&lt;p&gt;需要安装的软件或软件包有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;X Window System&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Fonts&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;input-methods&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="x11"&gt;安装 X11 桌面系统&lt;a class="headerlink" href="#x11" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;软件包组: X Window System 包含的信息如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum group info &lt;span class="s2"&gt;&amp;quot;X Window System&amp;quot;&lt;/span&gt;
Loaded plugins: fastestmirror, langpacks
Loading mirror speeds from cached hostfile

Group: X Window System
 Group-Id: x11
 Description: X Window System Support.
 Mandatory Packages:
   &lt;span class="o"&gt;=&lt;/span&gt;glx-utils
   &lt;span class="o"&gt;=&lt;/span&gt;initial-setup-gui
   &lt;span class="o"&gt;=&lt;/span&gt;mesa-dri-drivers
   &lt;span class="o"&gt;=&lt;/span&gt;plymouth-system-theme
   &lt;span class="o"&gt;=&lt;/span&gt;spice-vdagent
   &lt;span class="o"&gt;=&lt;/span&gt;xorg-x11-drivers
   &lt;span class="o"&gt;=&lt;/span&gt;xorg-x11-server-Xorg
   &lt;span class="o"&gt;=&lt;/span&gt;xorg-x11-utils
   &lt;span class="o"&gt;=&lt;/span&gt;xorg-x11-xauth
   &lt;span class="o"&gt;=&lt;/span&gt;xorg-x11-xinit
   &lt;span class="o"&gt;=&lt;/span&gt;xvattr
 Optional Packages:
   mesa-libGLES
   tigervnc-server
   wayland-protocols-devel
   xorg-x11-drv-keyboard
   xorg-x11-drv-libinput
   xorg-x11-drv-mouse
   xorg-x11-drv-openchrome
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum group install -y &lt;span class="s2"&gt;&amp;quot;X Window System&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_2"&gt;安装字体&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;软件包组: "Fonts"包含以下包:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum group info &lt;span class="s2"&gt;&amp;quot;Fonts&amp;quot;&lt;/span&gt;
Loaded plugins: fastestmirror, langpacks
Loading mirror speeds from cached hostfile

Group: Fonts
 Group-Id: fonts
 Description: Fonts &lt;span class="k"&gt;for&lt;/span&gt; rendering text in a variety of languages and scripts.
 Default Packages:
   &lt;span class="o"&gt;=&lt;/span&gt;cjkuni-uming-fonts
    dejavu-sans-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;dejavu-sans-mono-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;dejavu-serif-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;gnu-free-mono-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;gnu-free-sans-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;gnu-free-serif-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;google-crosextra-caladea-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;google-crosextra-carlito-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;google-noto-emoji-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;jomolhari-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;khmeros-base-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;liberation-mono-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;liberation-sans-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;liberation-serif-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lklug-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-assamese-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-bengali-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-devanagari-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-gujarati-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-kannada-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-malayalam-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-marathi-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-nepali-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-oriya-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-punjabi-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-tamil-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-telugu-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;madan-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;nhn-nanum-gothic-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;open-sans-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;overpass-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;paktype-naskh-basic-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;paratype-pt-sans-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;sil-abyssinica-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;sil-nuosu-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;sil-padauk-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;smc-meera-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;stix-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;thai-scalable-waree-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;ucs-miscfixed-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;vlgothic-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;wqy-microhei-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;wqy-zenhei-fonts
 Optional Packages:
   aajohan-comfortaa-fonts
   bitmap-fixed-fonts
   bitmap-lucida-typewriter-fonts
   bpg-chveulebrivi-fonts
   bpg-courier-fonts
   bpg-glaho-fonts
   cjkuni-ukai-fonts
   comic-neue-fonts
   culmus-aharoni-clm-fonts
   culmus-caladings-clm-fonts
   culmus-david-clm-fonts
   culmus-drugulin-clm-fonts
   culmus-ellinia-clm-fonts
   culmus-frank-ruehl-clm-fonts
   culmus-hadasim-clm-fonts
   culmus-keteryg-fonts
   culmus-miriam-clm-fonts
   culmus-miriam-mono-clm-fonts
   culmus-nachlieli-clm-fonts
   culmus-simple-clm-fonts
   culmus-stamashkenaz-clm-fonts
   culmus-stamsefarad-clm-fonts
   culmus-yehuda-clm-fonts
   freefont
   ghostscript-chinese
   google-noto-sans-armenian-fonts
   google-noto-sans-devanagari-fonts
   google-noto-sans-devanagari-ui-fonts
   google-noto-sans-ethiopic-fonts
   google-noto-sans-fonts
   google-noto-sans-georgian-fonts
   google-noto-sans-hebrew-fonts
   google-noto-sans-khmer-fonts
   google-noto-sans-khmer-ui-fonts
   google-noto-sans-lao-fonts
   google-noto-sans-lao-ui-fonts
   google-noto-sans-tamil-fonts
   google-noto-sans-tamil-ui-fonts
   google-noto-sans-thai-fonts
   google-noto-sans-thai-ui-fonts
   google-noto-sans-ui-fonts
   google-noto-serif-armenian-fonts
   google-noto-serif-fonts
   google-noto-serif-georgian-fonts
   google-noto-serif-lao-fonts
   google-noto-serif-thai-fonts
   gubbi-fonts
   horai-ume-gothic-fonts
   horai-ume-mincho-fonts
   horai-ume-pgothic-fonts
   horai-ume-pmincho-fonts
   horai-ume-uigothic-fonts
   ipa-gothic-fonts
   ipa-mincho-fonts
   ipa-pgothic-fonts
   ipa-pmincho-fonts
   kacst-art-fonts
   kacst-book-fonts
   kacst-decorative-fonts
   kacst-digital-fonts
   kacst-farsi-fonts
   kacst-letter-fonts
   kacst-naskh-fonts
   kacst-office-fonts
   kacst-one-fonts
   kacst-pen-fonts
   kacst-poster-fonts
   kacst-qurn-fonts
   kacst-screen-fonts
   kacst-title-fonts
   kacst-titlel-fonts
   khmeros-battambang-fonts
   khmeros-bokor-fonts
   khmeros-handwritten-fonts
   khmeros-metal-chrieng-fonts
   khmeros-muol-fonts
   khmeros-siemreap-fonts
   kurdit-unikurd-web-fonts
   liberation-narrow-fonts
   nafees-web-naskh-fonts
   navilu-fonts
   nhn-nanum-brush-fonts
   nhn-nanum-myeongjo-fonts
   nhn-nanum-pen-fonts
   paktype-naqsh-fonts
   paktype-tehreer-fonts
   pothana2000-fonts
   saab-fonts
   samyak-devanagari-fonts
   samyak-gujarati-fonts
   samyak-malayalam-fonts
   samyak-oriya-fonts
   samyak-tamil-fonts
   smc-anjalioldlipi-fonts
   smc-dyuthi-fonts
   smc-kalyani-fonts
   smc-rachana-fonts
   smc-raghumalayalam-fonts
   smc-suruma-fonts
   thai-scalable-garuda-fonts
   thai-scalable-kinnari-fonts
   thai-scalable-loma-fonts
   thai-scalable-norasi-fonts
   thai-scalable-purisa-fonts
   thai-scalable-sawasdee-fonts
   thai-scalable-tlwgmono-fonts
   thai-scalable-tlwgtypewriter-fonts
   thai-scalable-tlwgtypist-fonts
   thai-scalable-tlwgtypo-fonts
   thai-scalable-umpush-fonts
   tibetan-machine-uni-fonts
   vemana2000-fonts
   vlgothic-p-fonts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum group install -y &lt;span class="s2"&gt;&amp;quot;Fonts&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;安装完成后可以手动刷新字体缓存:&lt;/p&gt;
&lt;p&gt;安装字体相关的包:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo yum install -y fontconfig mkfontscale&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;执行下面3条命令刷新字体缓存:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ mkfontscale&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ mkfontdir&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ fc-cache -fv&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="_3"&gt;安装输入法&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;软件包组: "input-methods"包含:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum group info &lt;span class="s2"&gt;&amp;quot;input-methods&amp;quot;&lt;/span&gt;
Loaded plugins: fastestmirror, langpacks
Loading mirror speeds from cached hostfile

Group: Input Methods
 Group-Id: input-methods
 Description: Software &lt;span class="k"&gt;for&lt;/span&gt; the input of international text.
 Default Packages:
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-chewing
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-hangul
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-kkc
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-libpinyin
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-m17n
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-rawcode
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-sayura
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-table
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-table-chinese
   &lt;span class="o"&gt;=&lt;/span&gt;m17n-contrib
   &lt;span class="o"&gt;=&lt;/span&gt;m17n-db
 Optional Packages:
   ibus-typing-booster
   iok
 Conditional Packages:
    gtk2-immodule-xim
    gtk3-immodule-xim
    ibus-gtk2
    ibus-gtk3
   -ibus-qt
   -imsettings-cinnamon
   -imsettings-gsettings
   -imsettings-qt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$  sudo yum group install -y &lt;span class="s2"&gt;&amp;quot;input-methods&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="x11forwarding"&gt;启用 X11Forwarding&lt;a class="headerlink" href="#x11forwarding" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;修改&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;X11Forwarding yes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启服务生效:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl restart sshd.service
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_4"&gt;配置输入法&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;启用了 X11Forwarding之后, 就可以配置输入法 ibus 了, 选择使用中文pinyin输入法.&lt;/p&gt;
&lt;h2 id="_5"&gt;英文环境下使用中文输入法&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;因为我个人买个了服务器, 打算既作为开发环境, 又作为网站博客使用. 所以语言环境就选择默认的: &lt;em&gt;en_US.utf8&lt;/em&gt; . 而并没有改为中文环境. 英文环境下使用中文输入法步骤如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将安装到文件复制到英文环境下: (注意是&lt;code&gt;ibus*&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo cp /usr/share/locale/zh_CN/LC_MESSAGES/ibus* /usr/share/locale/en_US/LC_MESSAGES&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将ibus设置为英文环境的开机启动项, 编辑文件&lt;code&gt;/etc/X11/xinit/xinputrc&lt;/code&gt;, 加入如下一行:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_im_language_list=”en zh”&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="ibus"&gt;输入法 ibus 配置&lt;a class="headerlink" href="#ibus" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;输入如下ibus 输入法命令&lt;br&gt;
&lt;code&gt;$ ibus-setup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;ibus-deamon&lt;/code&gt; 没有运行, 会弹出如下界面提示, 点击&lt;em&gt;Yes&lt;/em&gt;. 会后台执行命令: &lt;code&gt;ibus-daemon --xim&lt;/code&gt;&lt;br&gt;
&lt;img alt="ibus-daemon 提示运行" src="images/1552980351961.png"&gt;&lt;/li&gt;
&lt;li&gt;启动后会弹出如下提示:&lt;br/&gt;&lt;br&gt;
&lt;img alt="ibus加入bashrc" src="images/1552981039781.png"&gt;&lt;br/&gt;&lt;br&gt;
    以下需要加入到&lt;code&gt;~/.bashrc&lt;/code&gt;  或 &lt;code&gt;~/.zshrc&lt;/code&gt;中:&lt;br&gt;
&lt;code&gt;export GTK_IM_MODULE=ibus&lt;/code&gt;&lt;br&gt;
&lt;code&gt;export XMODIFIERS=@im=ibus&lt;/code&gt;&lt;br&gt;
&lt;code&gt;export QT_IM_MODULE=ibus&lt;/code&gt;&lt;br&gt;
&lt;code&gt;ibus-daemon -rdx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;点击&lt;em&gt;OK&lt;/em&gt;后会弹出 ibus 的配置界面, 如下:&lt;br&gt;
&lt;img alt="ibus 首选项" src="images/1552981185401.png"&gt;&lt;/li&gt;
&lt;li&gt;点击&lt;em&gt;输入法&lt;/em&gt; → &lt;em&gt;添加&lt;/em&gt; → &lt;em&gt;Chinese&lt;/em&gt; → &lt;em&gt;pinyin&lt;/em&gt; 来添加拼音输入法, 如下图:&lt;br&gt;
&lt;img alt="添加输入法" src="images/1552981294294.png"&gt;&lt;br&gt;
&lt;img alt="添加拼音输入法" src="images/1552981424476.png"&gt;&lt;/li&gt;
&lt;li&gt;添加完成后, 可以通过X11启动, firefox 或 pycharm等来测试拼音输入法是否生效. 默认可以通过: &lt;code&gt;&amp;lt;Super&amp;gt;+&amp;lt;Space&amp;gt;&lt;/code&gt;按键来切换输入法.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;查看后台 ibus相关进程, 如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="ibus 相关进程" src="images/1552981628167.png"&gt;&lt;/p&gt;
&lt;p&gt;另外, 如果某些配置不生效, 可以通过以下操作来使之生效:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt; 对应的文件. 如: &lt;code&gt;source ~/.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重新登陆&lt;/li&gt;
&lt;li&gt;重启相关服务, 如: &lt;code&gt;ibus-daemon -rdx&lt;/code&gt; 或 &lt;code&gt;sudo systemctl restart sshd.service&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;重启主机.&lt;br&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后, 就是安装自己喜欢的编辑器和IDE了, 推荐VSCODE和PyCharm.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 29 Mar 2019 11:01:50 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-29:/centos-7-install-x11-desktop-and-chinese-support.html</guid><category>linux</category><category>腾讯云</category><category>云</category></item><item><title>NGINX 配置SSL 支持</title><link>https://www.EWhisper.cn/nginx-conf-add-ssl-support.html</link><description>&lt;p&gt;&lt;img alt="nginx+ssl" src="./images/nginx-ssl-certificate.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.EWhisper.cn/tencentyun-apply-ssl-certificate.html"&gt;上篇文章&lt;/a&gt;中, 我们已经申请好了SSL证书. 那么现在, 我们就要配置全站SSL了! &lt;img align="absmiddle" alt="💪" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4aa.png" title=":muscle:" width="20px"&gt;&lt;img align="absmiddle" alt="💪" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4aa.png" title=":muscle:" width="20px"&gt;&lt;img align="absmiddle" alt="💪" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4aa.png" title=":muscle:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;这次的工作主要是NGINX的配置, 同时会有一些我的博客本身的配置.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;博客本身配置更改包括: (这篇文章就先不细说了)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网页内链接全部从http改为https(其实配置下SITEURL, 工具会自动生成好) 并重新发布. (特别要注意, 如果有的站内css, js等没有用https就尴尬了, 会被各类浏览器拦截掉, 并提示"不安全的脚本")&lt;/li&gt;
&lt;li&gt;网站有用到的第三方工具(如拨测), 把网站的地址改为 https开头的.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id="nginx"&gt;NGINX配置&lt;a class="headerlink" href="#nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先, 创建并上传准备好的证书文件到指定目录: (crt和key文件)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mkdir -p /etc/pki/nginx/
&lt;span class="c1"&gt;# 通过sftp上传到该目录&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进行nginx.conf 的ssl配置, 本次主要涉及到server块的配置更改, 如下: (具体的指令作用见注释)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt;       &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;server_name&lt;/span&gt;  &lt;span class="s"&gt;www.ewhisper.cn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt; &lt;span class="s"&gt;https://&lt;/span&gt;&lt;span class="nv"&gt;$host$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt;       &lt;span class="mi"&gt;443&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt; &lt;span class="s"&gt;http2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;server_name&lt;/span&gt;  &lt;span class="s"&gt;www.ewhisper.cn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt;         &lt;span class="s"&gt;/usr/share/nginx/html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# 静态博客的存放位置&lt;/span&gt;

        &lt;span class="kn"&gt;ssl_certificate&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/etc/pki/nginx/1_www.ewhisper.cn_bundle.crt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# 证书路径&lt;/span&gt;
        &lt;span class="kn"&gt;ssl_certificate_key&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/etc/pki/nginx/2_www.ewhisper.cn.key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# 证书密钥路径&lt;/span&gt;
        &lt;span class="kn"&gt;ssl_session_cache&lt;/span&gt; &lt;span class="s"&gt;shared:SSL:50m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# ssl session cache分配50m空间, 缓存ssl session&lt;/span&gt;
        &lt;span class="kn"&gt;ssl_session_timeout&lt;/span&gt;  &lt;span class="s"&gt;1d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# ssl session 超时时间为1天&lt;/span&gt;
        &lt;span class="kn"&gt;ssl_session_tickets&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# ssl session ticket 机制, 部分版本有bug, 视情况开启.&lt;/span&gt;

        &lt;span class="kn"&gt;ssl_protocols&lt;/span&gt; &lt;span class="s"&gt;TLSv1.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# ssl 协议版本&lt;/span&gt;
        &lt;span class="kn"&gt;ssl_ciphers&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# ssl ciphers&lt;/span&gt;
        &lt;span class="kn"&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# 倾向于使用server端的ciphers&lt;/span&gt;

        &lt;span class="c1"&gt;# HSTS 6 months&lt;/span&gt;
        &lt;span class="kn"&gt;add_header&lt;/span&gt; &lt;span class="s"&gt;Strict-Transport-Security&lt;/span&gt; &lt;span class="s"&gt;max-age=15768000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
        &lt;span class="c1"&gt;# 添加个http header, 告诉浏览器直接转到https, 此功能有风险, 慎重选择. &lt;/span&gt;
        &lt;span class="c1"&gt;# (比如你的证书过期忘记续了, 那么用户想转到http都没办法)&lt;/span&gt;

        &lt;span class="kn"&gt;ssl_stapling&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# 启用ssl OCSP stapling功能, 服务端主动查询OCSP结果, 提高TLS效率&lt;/span&gt;
        &lt;span class="kn"&gt;ssl_stapling_verify&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# 开启OCSP stapling 验证&lt;/span&gt;

        &lt;span class="c1"&gt;# Load configuration files for the default server block.&lt;/span&gt;
        &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;/etc/nginx/default.d/*.conf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# 我的博客的location在这里配置&lt;/span&gt;

        &lt;span class="c1"&gt;#location / {&lt;/span&gt;
        &lt;span class="c1"&gt;#}&lt;/span&gt;

        &lt;span class="kn"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="s"&gt;/404.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/40x.html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kn"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="mi"&gt;502&lt;/span&gt; &lt;span class="mi"&gt;503&lt;/span&gt; &lt;span class="mi"&gt;504&lt;/span&gt; &lt;span class="s"&gt;/50X.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/50X.html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;以上的某些指令, 我先大概介绍下, 后续会有文章做详细介绍.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;return 301 https://$host$request_uri;&lt;/code&gt;   HTTP的全部永久重定向到https对应的URL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/share/nginx/html&lt;/code&gt;  静态博客的存放位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl_session_timeout  1d;&lt;/code&gt;  ssl session 超时时间为1天&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl_session_tickets off;  #&lt;/code&gt;  ssl session ticket 机制, 部分版本有bug, 视情况开启.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl_prefer_server_ciphers on;&lt;/code&gt;  倾向于使用server端的ciphers&lt;/li&gt;
&lt;li&gt;HSTS功能:　添加个HTTP header, 告诉浏览器直接转到https, &lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;此功能有风险, 慎重选择.  (比如你的证书过期忘记续了, 那么用户想转到HTTP都没办法)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl_stapling on;&lt;/code&gt;  启用ssl OCSP stapling功能, 服务端主动查询OCSP结果, 提高TLS握手效率&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/nginx/default.d/*.conf;&lt;/code&gt;  我的博客&lt;code&gt;location&lt;/code&gt;配置&lt;br&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 小技巧:&lt;/p&gt;
&lt;p&gt;火狐浏览器背后的基金会, 开源了一个非常好用的工具: &lt;a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/"&gt;ssl-config-generator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这上边, 点一点就可以自动生成推荐的SSL配置了.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ssl-config-generator" src="./images/ssl-config-generator.png"&gt;&lt;/p&gt;
&lt;p&gt;提一点, 如上图所示, 第二列一定要根据你的客户浏览器或客户端的版本使用情况慎重选择. &lt;/p&gt;
&lt;p&gt;比如, 用户还在用Windows XP, IE6, Java 6, 那么只能选择Old.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来, 就是要重启nginx来生效了. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo nginx -t  &lt;span class="c1"&gt;# 测试配置, 没问题再重启&lt;/span&gt;
$ sudo systemctl reload nginx.service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启后, 测试发现 css js都没有生效. &lt;img align="absmiddle" alt="😱" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f631.png" title=":scream:" width="20px"&gt;&lt;img align="absmiddle" alt="😱" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f631.png" title=":scream:" width="20px"&gt;&lt;img align="absmiddle" alt="😱" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f631.png" title=":scream:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;因为之前nginx刚配置过缓存. 当时脑子没转过来, 没有第一时间意识到可能是浏览器缓存的问题. 就直接nginx stop 再start了下. 结果悲催的我的网站可用性就从100%跌到99.81%了.&lt;/p&gt;
&lt;p&gt;&lt;img alt="网站可用性" src="images/index.png"&gt;&lt;/p&gt;
&lt;p&gt;后来终于意识到可能是浏览器缓存的问题了, 清理了缓存后, 再启动, 终于页面显示正常, 图标也从"不安全"变成了小锁.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/ssl-ewhisper.png"&gt;&lt;/p&gt;
&lt;p&gt;测试访问http://www.ewhisper.cn, 也会被强制转到 https://www.ewhisper.cn. 完美!&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;/p&gt;
&lt;h2 id="ssl"&gt;我的SSL评级&lt;a class="headerlink" href="#ssl" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;再来介绍个好东西 - &lt;a href="https://www.ssllabs.com/ssltest/analyze.html"&gt;SSL Labs&lt;/a&gt;. 可以对你的网站进行SSL 安全评级. &lt;/p&gt;
&lt;p&gt;点击链接, 输入网站地址, 喝杯茶, 结果就出来了 - &lt;strong&gt;A+&lt;/strong&gt; 哈哈哈哈哈!!!!&lt;/p&gt;
&lt;p&gt;&lt;img alt="我的网站SSL评分" src="./images/ewhisper-ssl-report.png"&gt;&lt;/p&gt;
&lt;p&gt;最后附上我的&lt;a href="https://www.EWhisper.cn/assets/SSL_Server_Test_ www.ewhisper.cn.pdf"&gt;完整报告&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 29 Mar 2019 10:50:29 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-29:/nginx-conf-add-ssl-support.html</guid><category>nginx</category><category>ssl</category><category>拨测</category><category>可用性</category></item><item><title>腾讯云申请免费SSL证书</title><link>https://www.EWhisper.cn/tencentyun-apply-ssl-certificate.html</link><description>&lt;h2 id="_1"&gt;前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;现在申请SSL证书的门槛和费用都大大降低了. 出现了很多免费提供加密证书的机构, 比较知名的是国外的&lt;a href="https://letsencrypt.org/"&gt;Let’s Encrypt&lt;/a&gt;, 免费, 自动化, 开放. 国内的云服务商也会提供免费的SSL证书. 下面是我在腾讯云上申请SSL证书的步骤.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SSL" src="./images/SSL-Certificate.png"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;步骤&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;进入腾讯云&lt;a href="https://console.cloud.tencent.com/ssl"&gt;SSL证书管理页面&lt;/a&gt;, 点击 &lt;strong&gt;申请免费证书&lt;/strong&gt;, 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="申请免费证书" src="./images/tencentyun_app_ssl_1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目前腾讯云上提供的免费证书是 &lt;strong&gt;TRUSTAsia&lt;/strong&gt;家的, 选择并确定. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="TRUSTAsia" src="./images/tencentyun_app_ssl_2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来就填写证书需要的相关信息, 很简单, 只有2项必填项:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通用名称, 具体的&lt;strong&gt;单域名&lt;/strong&gt;. (&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 如: www.ewhisper.cn, blog.ewhisper.cn. 不能是*.ewhisper.cn 这种通用域名.)&lt;/li&gt;
&lt;li&gt;申请邮箱&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="证书信息" src="./images/tencentyun_app_ssl_3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来是域名身份验证. 腾讯云一套的话, 直接选择 &lt;strong&gt;自动DNS验证&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="域名身份验证" src="./images/tencentyun_app_ssl_4.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这样就完成申请了, 接下来就是等待审核了. 我的ssl审核的非常快, 也就十几分钟就下来了. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="等待审核" src="./images/tencentyun_app_ssl_5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;证书详情如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="证书详情" src="./images/tencentyun_app_ssl_6.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;证书信息列表如下, 证书有效期一年. 可以选择部署到CDN和负载均衡上. (如果有的话) 也可以下载部署到nginx上.&lt;/p&gt;
&lt;p&gt;&lt;img alt="证书信息列表" src="./images/tencentyun_app_ssl_7.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载的是个证书压缩包. 包括各类web server的证书类型:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Apache: key, crt, 和bundle.crt&lt;/li&gt;
&lt;li&gt;IIS: pfx&lt;/li&gt;
&lt;li&gt;Nginx: crt, key&lt;/li&gt;
&lt;li&gt;Tomcat: jks&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来就是NGINX配置的事情了. &lt;a href="https://www.EWhisper.cn/nginx-conf-add-ssl-support.html"&gt;戳这儿查看&lt;img align="absmiddle" alt="👉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f449.png" title=":point_right:" width="20px"&gt;&lt;/a&gt; &lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 29 Mar 2019 10:41:49 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-29:/tencentyun-apply-ssl-certificate.html</guid><category>SSL</category><category>腾讯云</category><category>云</category><category>安全</category></item><item><title>Docker 学习笔记 - 镜像</title><link>https://www.EWhisper.cn/docker-handbook-image.html</link><description>&lt;h2 id="_1"&gt;获取镜像&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker pull&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;查看镜像信息&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker inspect &amp;lt;images id&amp;gt;  # 获取镜像的详细信息&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_3"&gt;搜寻镜像&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker search&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_4"&gt;删除镜像&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker rmi&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当一个镜像拥有多个标签，&lt;code&gt;docker rmi&lt;/code&gt;只是删除该镜像指定的标签，并不影响镜像文件
当镜像只剩下一个标签时，再使用会彻底删除该镜像
先删除该镜像的所有容器，再删除镜像&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_5"&gt;创建镜像&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;3种方法：
- 基于已有镜像的&lt;strong&gt;容器&lt;/strong&gt;创建
- 基于本地模板导入
- 基于Dockerfile创建&lt;/p&gt;
&lt;h3 id="_6"&gt;基于已有镜像的容器创建&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker commit&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-a: 作者信息
-m: 提交信息
-p 提交时暂停容器运行
-c changelist&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_7"&gt;基于本地模板的导入&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;推荐使用OpenVZ 提供的模板来创建。下载地址：https://openvz.org/Download/template/precreated
&lt;code&gt;sudo cat ubuntu-16.04-x86_64.tar.gz | docker import - ubuntu:16.04&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_8"&gt;导出和载入镜像&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;导出&lt;/strong&gt;：&lt;code&gt;sudo docker save -o ubuntu_16.04.tar ubuntu:16.04&lt;/code&gt;
&lt;strong&gt;载入&lt;/strong&gt;：&lt;code&gt;sudo docker load --input ubuntu_16.04.tar&lt;/code&gt; 或者 &lt;code&gt;sudo docker load &amp;lt; ubuntu_16.04.tar&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该指令会载入镜像，以及其相关的元数据信息（包括标签等）. 关于&lt;code&gt;docker load&lt;/code&gt;和&lt;code&gt;docker import&lt;/code&gt;指令的区别见下一章.&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 28 Mar 2019 22:17:48 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-28:/docker-handbook-image.html</guid><category>docker</category></item><item><title>在云服务器上搭建集成开发环境</title><link>https://www.EWhisper.cn/build-ide-on-tencentyun.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#python"&gt;python优化配置&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-36"&gt;安装python 3.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pipenv-python-36"&gt;安装pipenv: (主要使用python 3.6)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-37"&gt;编译安装Python 3.7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#docker"&gt;Docker 配置&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;修改仓库源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;开机启动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;使用腾讯云容器的相关服务&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="python"&gt;python优化配置&lt;a class="headerlink" href="#python" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;安装相关软件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install -y --setopt&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;tsflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nodocs gcc make patch  &lt;span class="c1"&gt;# 安装编译软件&lt;/span&gt;
sudo yum group install -y development  &lt;span class="c1"&gt;# 安装开发包组&lt;/span&gt;
sudo yum install -y --setopt&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;tsflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nodocs gdbm-devel openssl-libs openssl-devel openssl-devel ncurses-devel libsqlite3x-devel sqlite-devel readline-devel zlib-devel bzip2-devel python2-bz2file db4-devel libpcap-devel xz-devel libffi-devel sqlite3 sqlite python-ujson  &lt;span class="c1"&gt;# 安装依赖&lt;/span&gt;

sudo yum install -y mariadb mariadb-server redis memcached &lt;span class="c1"&gt;# 安装mariadb&lt;/span&gt;
sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; mariadb.service redis.service  &lt;span class="c1"&gt;# mariadb redis 开机启动&lt;/span&gt;
sudo systemctl start mariadb.service redis.service  &lt;span class="c1"&gt;# 启动mariadb服务&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="python-36"&gt;安装python 3.6&lt;a class="headerlink" href="#python-36" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install -y python36
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum -y install python-pip python34-pip python36-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pip conf: &lt;/p&gt;
&lt;p&gt;在文件&lt;code&gt;~/.pip/pip.conf&lt;/code&gt;中添加或修改:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[global]&lt;/span&gt;
&lt;span class="na"&gt;index-url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http://mirrors.tencentyun.com/pypi/simple&lt;/span&gt;
&lt;span class="na"&gt;trusted-host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;mirrors.tencentyun.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;参考文章:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cloud.tencent.com/document/product/213/8623"&gt;腾讯云软件源加速软件包下载和更新&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="pipenv-python-36"&gt;安装pipenv: (主要使用python 3.6)&lt;a class="headerlink" href="#pipenv-python-36" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3.6 install pipenv --user
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编辑&lt;code&gt;~/.zshrc&lt;/code&gt;, 加入以下内容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/casey/.local/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;后续使用&lt;code&gt;pipenv&lt;/code&gt;管理文件, 有以下几个要点:&lt;br&gt;
1. 安装时候根据需要, 根据OS现有python指定, 如: &lt;code&gt;pipenv install --python /usr/bin/python36&lt;/code&gt;&lt;br&gt;
2. 可以修改&lt;code&gt;Pipfile&lt;/code&gt;的以下配置, 加快依赖下载:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[source]]&lt;/span&gt;
&lt;span class="na"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://mirrors.tencentyun.com/pypi/simple --trusted-host mirrors.tencentyun.com&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;verify_ssl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="python-37"&gt;编译安装Python 3.7&lt;a class="headerlink" href="#python-37" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;需要先yum安装&lt;code&gt;libffi-devel&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 下载源码包并解压&lt;/span&gt;
wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tgz
tar -xvzf Python-3.7.2.tgz
&lt;span class="nb"&gt;cd&lt;/span&gt; Python-3.7.2
&lt;span class="c1"&gt;# configure &lt;/span&gt;
sudo mkdir -p /usr/lib64/python3.7
sudo ./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib64/python3.7
&lt;span class="c1"&gt;# install&lt;/span&gt;
sudo make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo make install
&lt;span class="c1"&gt;# 创建软连接&lt;/span&gt;
sudo rm -f /usr/bin/python3
sudo ln -s /usr/lib64/python3.7/bin/python3 /usr/bin/python3
&lt;span class="c1"&gt;# 加入PATH&lt;/span&gt;
vi ~/.zshrc
&lt;span class="c1"&gt;# .zshrc修改为以下内容&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib64/python3.7/bin:/home/casey/.local/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="c1"&gt;# 使得配置生效&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/.zshrc
&lt;span class="c1"&gt;# 验证&lt;/span&gt;
python3 -V 
&lt;span class="c1"&gt;# 输出: Python 3.7.2&lt;/span&gt;
pip3 -V                     
&lt;span class="c1"&gt;# 输出: pip 18.1 from /usr/lib64/python3.7/lib/python3.7/site-packages/pip (python 3.7)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="docker"&gt;Docker 配置&lt;a class="headerlink" href="#docker" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_1"&gt;安装&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install -y --setopt&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;tsflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nodocs docker docker-compose docker-distribution docker-logrotate docker-lvm-plugin 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;修改仓库源&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;适用于 CentOS 7 版本。&lt;/p&gt;
&lt;p&gt;修改 Docker 配置文件 &lt;code&gt;sudo vi /etc/sysconfig/docker&lt;/code&gt;，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--registry-mirror=https://mirror.ccs.tencentyun.com&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;参考文章:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cloud.tencent.com/document/product/457/9113"&gt;使用 DockerHub 加速器&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_3"&gt;开机启动&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; docker
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_4"&gt;使用腾讯云容器的相关服务&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;控制台, 进入&lt;strong&gt;容器服务&lt;/strong&gt; → &lt;strong&gt;镜像仓库&lt;/strong&gt; → &lt;strong&gt;我的镜像&lt;/strong&gt; , 输入镜像仓库的个人密码. (账号是AppID)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(可选): 在&lt;strong&gt;访问管理&lt;/strong&gt; → &lt;strong&gt;用户组&lt;/strong&gt; → &lt;strong&gt;当前用户组&lt;/strong&gt;里 → &lt;strong&gt;关联策略&lt;/strong&gt; : &lt;a href="https://console.cloud.tencent.com/cam/policy/detail/419082&amp;amp;QcloudCCRFullAccess&amp;amp;2"&gt;QcloudCCRFullAccess&lt;/a&gt; (镜像仓库全读写权限)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;云服务器使用如下命令登录:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo docker login --username=appid ccr.ccs.tencentyun.com&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载镜像:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo docker pull ccr.ccs.tencentyun.com/[namespace]/[ImageName]:[镜像版本号]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 27 Mar 2019 09:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-27:/build-ide-on-tencentyun.html</guid><category>腾讯云</category><category>云</category><category>python</category><category>pipenv</category><category>docker</category></item><item><title>腾讯云服务器初始化操作</title><link>https://www.EWhisper.cn/initialize-my-tencentyun-server.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;重装系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;设置监控告警&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;创建密钥并绑定主机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;安全组配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#centos-75"&gt;CentOS 7.5 优化配置&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_5"&gt;用户/登录相关优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;更新系统和软件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git"&gt;安装及配置 Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#shell"&gt;优化配置shell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-oh-my-zsh"&gt;Using Oh My Zsh&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#themes"&gt;Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;重装系统&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;因为我买的时候, CentOS最新只提供到7.3, 我希望使用CentOS 7.5. 看到镜像库里有(什么毛病, 买的时候为啥不提供&lt;img align="absmiddle" alt="😕" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f615.png" title=":confused:" width="20px"&gt;&lt;img align="absmiddle" alt="😕" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f615.png" title=":confused:" width="20px"&gt;&lt;img align="absmiddle" alt="😕" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f615.png" title=":confused:" width="20px"&gt;), 所以重新安装下系统.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;选中实例, 点击&lt;strong&gt;更多&lt;/strong&gt;, 选择&lt;strong&gt;重装系统&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="重装系统" src="./images/init_tencentyun_install_os_1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择&lt;strong&gt;公共镜像&lt;/strong&gt; -&amp;gt; &lt;strong&gt;CentOS&lt;/strong&gt; -&amp;gt; &lt;strong&gt;CentOS 7.5 64位&lt;/strong&gt; -&amp;gt; 输入root密码. 点击&lt;strong&gt;开始重装&lt;/strong&gt;. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="重装系统具体选项" src="./images/init_tencentyun_install_os_2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等待重装完毕即可.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_2"&gt;设置监控告警&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;strong&gt;监控&lt;/strong&gt;图标:&lt;/p&gt;
&lt;p&gt;&lt;img alt="点击监控" src="./images/init_tencentyun_monitor_1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有以下监控指标, 如下图, 点击&lt;strong&gt;设置告警&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;li&gt;内存&lt;/li&gt;
&lt;li&gt;宽带(内外网)&lt;/li&gt;
&lt;li&gt;磁盘IO&lt;/li&gt;
&lt;li&gt;分区使用请看&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="设置告警" src="./images/init_tencentyun_monitor_2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据自己的需要, 定制告警策略. 示例如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="告警策略" src="./images/init_tencentyun_monitor_3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要配置告警通知渠道, 需要先&lt;strong&gt;新增用户组&lt;/strong&gt;. 如下(我和其他人合用, 所以建立一个用户组还是有必要的):&lt;/p&gt;
&lt;p&gt;&lt;img alt="新增用户组" src="./images/init_tencentyun_monitor_4.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新增用户组的操作如下, 先直接使用预设策略 - 管理员就可以了.&lt;/p&gt;
&lt;p&gt;&lt;img alt="新增用户组" src="./images/init_tencentyun_groupuser_3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来关联到具体的用户组&lt;/p&gt;
&lt;p&gt;&lt;img alt="关联接受组" src="./images/init_tencentyun_monitor_5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;strong&gt;完成&lt;/strong&gt;, 配置完成后如下所示: (可以把默认的禁用掉了)&lt;/p&gt;
&lt;p&gt;&lt;img alt="告警策略" src="./images/init_tencentyun_monitor_6.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_3"&gt;创建密钥并绑定主机&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在&lt;strong&gt;SSH密钥&lt;/strong&gt; 菜单, 点击&lt;strong&gt;创建密钥&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="创建密钥" src="./images/init_tencentyun_key_1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建密钥(&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;  密钥请妥善保存, 勿外传).&lt;/p&gt;
&lt;p&gt;&lt;img alt="创建密钥" src="./images/init_tencentyun_key_2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建后, 先关闭主机(关闭后的主机才能绑定密钥, 很好, 关机也受到告警了👌), 再选择&lt;strong&gt;绑定/解绑实例&lt;/strong&gt;, 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="绑定实例" src="./images/init_tencentyun_key_3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_4"&gt;安全组配置&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;类似于防火墙权限.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;strong&gt;安全组&lt;/strong&gt; -&amp;gt; &lt;strong&gt;新建&lt;/strong&gt;. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="新建安全组" src="./images/init_tencentyun_securegroup_1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择&lt;strong&gt;立即设置规则&lt;/strong&gt;. 具体原因如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="设置规则" src="./images/init_tencentyun_securegroup_2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以先关联到我自己的云主机实例. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="关联到实例" src="./images/init_tencentyun_securegroup_3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后再配置出/入站规则, 先配置入站, 先选择&lt;strong&gt;一键放通&lt;/strong&gt;. 放通以下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Linux SSH登录: 22端口&lt;/li&gt;
&lt;li&gt;Windows登录: 3389&lt;/li&gt;
&lt;li&gt;ping: ICMP协议&lt;/li&gt;
&lt;li&gt;HTTP: 80&lt;/li&gt;
&lt;li&gt;HTTPS: 443&lt;/li&gt;
&lt;li&gt;FTP: 20和21&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="一键放通入站" src="./images/init_tencentyun_securegroup_4.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再根据自己需要添加规则, 如下: (放通TCP的8000端口)&lt;/p&gt;
&lt;p&gt;&lt;img alt="自定义规则" src="./images/init_tencentyun_securegroup_5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后配置出站规则, 选择&lt;strong&gt;一键放通&lt;/strong&gt;. 以后再慢慢细化, 如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="一键放通出栈" src="./images/init_tencentyun_securegroup_6.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此, 控制台上该配置的就配置的差不多了, 接下来登录主机进行配置.&lt;/p&gt;
&lt;h2 id="centos-75"&gt;CentOS 7.5 优化配置&lt;a class="headerlink" href="#centos-75" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_5"&gt;用户/登录相关优化&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;创建普通用户 基于公钥登录&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建普通用户: &lt;code&gt;useradd -m  -p yourpassword casey&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;普通用户基于公钥登录: (因为之前&lt;strong&gt;创建密钥并绑定主机&lt;/strong&gt;, 公钥已经存在于主机上了, 所以不需要keygen了, 直接复制就可以了)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cp /root/.ssh/authorized_keys /home/casey/.ssh &amp;amp;&amp;amp; chown -R casey:casey /home/casey/.ssh/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确认基于ssh公钥的登录是否工作&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;完整的&lt;strong&gt;基于公钥&lt;/strong&gt;登录的步骤如下: (前提是刚开始该账户能通过账号密码方式登录)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在云主机上创建普通用户: &lt;code&gt;useradd -m -p yourpassword hellowordomain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 ssh-keygen命令在云主机上创建密匙对: &lt;code&gt;ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_tencent_$(date +%Y-%m-%d) -C "tencent key for hellowordomain"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 ssh-copy-id 命令安装公匙：&lt;code&gt;ssh-copy-id -i /path/to/public-key-file user@host&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;确认基于ssh公钥的登录是否工作&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4&gt;普通用户配置sudo权限&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;在 CentOS/RHEL 系统中如何将用户 vivek 添加到 sudo 组中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 CentOS/RHEL 和 Fedora 系统中允许 wheel 组中的用户执行所有的命令。使用 usermod 命令将用户 vivek 添加到 wheel 组中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo usermod -aG wheel vivek
$ id vivek
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;sudo无需输入密码&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# root用户&lt;/span&gt;
visudo

&lt;span class="c1"&gt;# 修改如下内容后保存退出&lt;/span&gt;
&lt;span class="c1"&gt;## Allows people in group wheel to run all commands&lt;/span&gt;
&lt;span class="c1"&gt;# %wheel        ALL=(ALL)       ALL&lt;/span&gt;

&lt;span class="c1"&gt;## Same thing without a password&lt;/span&gt;
%wheel  &lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;ALL&lt;span class="o"&gt;)&lt;/span&gt;       NOPASSWD: ALL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试并确保用户 vivek 可以以 root 身份登录执行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -i  &lt;span class="c1"&gt;# 切换到root用户&lt;/span&gt;
sudo systemctl status sshd  &lt;span class="c1"&gt;# 查看sshd的状态&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;code&gt;sshd_config&lt;/code&gt; 优化&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 禁用root登录
PermitRootLogin no
ChallengeResponseAuthentication no
PasswordAuthentication no
UsePAM no
# 禁用密码登录 仅留下公匙登录
AuthenticationMethods publickey
PubkeyAuthentication yes
# 禁用空密码
PermitEmptyPasswords no
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后测试 &lt;code&gt;sshd_config&lt;/code&gt; 文件并重启/重新加载 SSH 服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo sshd -t
sudo systemctl restart sshd.service
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_6"&gt;更新系统和软件&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum upgrade -y  &lt;span class="c1"&gt;# 升级所有软件&lt;/span&gt;
sudo yum clean all -y  &lt;span class="c1"&gt;# 清理缓存&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="git"&gt;安装及配置 Git&lt;a class="headerlink" href="#git" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装Git&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo yum install -y --setopt=tsflags=nodocs git&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置git&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git config --global user.name "east4ming"&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git config --global user.email "cuikaidong@foxmail.com"&lt;/code&gt;&lt;br&gt;
&lt;code&gt;ssh-keygen -t rsa -b 4096 -C "cuikaidong@foxmail.com"  # 已有私钥也可以重复使用&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cat .ssh/id_rsa.pub&lt;/code&gt; 并复制 (id_rsa.pub是对应的公钥信息)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;打开github网页登入账户进入账户settings左边找到SSH，可以清理一下没用的SSH keys，然后新建一个 ，取名任意，粘贴进去cat产生的所有字符。保存即可。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓存HTTPS方式的密码: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ git config --global credential.helper 'cache --timeout=3600'  # Set the cache to timeout after 1 hour (setting is in seconds)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="shell"&gt;优化配置shell&lt;a class="headerlink" href="#shell" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;安装zsh&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install -y --setopt&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;tsflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nodocs zsh
zsh --version
sudo chsh -s &lt;span class="k"&gt;$(&lt;/span&gt;which zsh&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 注销&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装powerline&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install powerline-status --user
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;安装&lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;&lt;strong&gt;oh-my-zsh&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh -c &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="using-oh-my-zsh"&gt;Using Oh My Zsh&lt;a class="headerlink" href="#using-oh-my-zsh" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;以下内容来自 oh-my-zsh github&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="plugins"&gt;Plugins&lt;a class="headerlink" href="#plugins" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Oh My Zsh comes with a shitload of plugins to take advantage of. You can take a look in the &lt;a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins"&gt;plugins&lt;/a&gt; directory and/or the &lt;a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins"&gt;wiki&lt;/a&gt;to see what's currently available.&lt;/p&gt;
&lt;h4&gt;Enabling Plugins&lt;/h4&gt;
&lt;p&gt;Once you spot a plugin (or several) that you'd like to use with Oh My Zsh, you'll need to enable them in the &lt;code&gt;.zshrc&lt;/code&gt; file. You'll find the zshrc file in your &lt;code&gt;$HOME&lt;/code&gt; directory. Open it with your favorite text editor and you'll see a spot to list all the plugins you want to load.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi ~/.zshrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example, this might begin to look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;plugins=(
git
bundler
dotenv
osx
rake
rbenv
ruby
)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Using Plugins&lt;/h4&gt;
&lt;p&gt;Most plugins (should! we're working on this) include a &lt;strong&gt;README&lt;/strong&gt;, which documents how to use them.&lt;/p&gt;
&lt;h3 id="themes"&gt;Themes&lt;a class="headerlink" href="#themes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We'll admit it. Early in the Oh My Zsh world, we may have gotten a bit too theme happy. We have over one hundred themes now bundled. Most of them have &lt;a href="https://wiki.github.com/robbyrussell/oh-my-zsh/themes"&gt;screenshots&lt;/a&gt; on the wiki. Check them out!&lt;/p&gt;
&lt;h4&gt;Selecting a Theme&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Robby's theme is the default one. It's not the fanciest one. It's not the simplest one. It's just the right one (for him).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Once you find a theme that you'd like to use, you will need to edit the &lt;code&gt;~/.zshrc&lt;/code&gt; file. You'll see an environment variable (all caps) in there that looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;ZSH_THEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;robbyrussell&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To use a different theme, simply change the value to match the name of your desired theme. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;ZSH_THEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;agnoster&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# (this is one of the fancy ones)&lt;/span&gt;
&lt;span class="c1"&gt;# see https://github.com/robbyrussell/oh-my-zsh/wiki/Themes#agnoster&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Note: many themes require installing the Powerline Fonts in order to render properly.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Open up a new terminal window and your prompt should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Agnoster theme" src="https://cloud.githubusercontent.com/assets/2618447/6316862/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png"&gt;&lt;/p&gt;
&lt;p&gt;In case you did not find a suitable theme for your needs, please have a look at the wiki for &lt;a href="https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes"&gt;more of them&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you're feeling feisty, you can let the computer select one randomly for you each time you open a new terminal window.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ZSH_THEME=&amp;quot;random&amp;quot; # (...please let it be pie... please be some pie..)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And if you want to pick random theme from a list of your favorite themes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ZSH_THEME_RANDOM_CANDIDATES=(
&amp;quot;robbyrussell&amp;quot;
&amp;quot;agnoster&amp;quot;
)
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 26 Mar 2019 21:09:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-26:/initialize-my-tencentyun-server.html</guid><category>腾讯云</category><category>云</category><category>centos</category><category>监控</category><category>告警</category><category>可观察性</category><category>安全</category><category>密钥</category><category>git</category><category>shell</category></item><item><title>Oracle WebLogic Server 11.1.1.9发布说明</title><link>https://www.EWhisper.cn/oracle-webLogic-server-11.1.1.9-release-notes.html</link><description>&lt;p&gt;&lt;a href="https://docs.oracle.com/middleware/11119/wls/WLSRN/issues.htm#WLSRN114"&gt;参照链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="oracle-weblogic-server"&gt;Oracle WebLogic Server问题&lt;a class="headerlink" href="#oracle-weblogic-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本章节描述了Oracle WebLogic Server相关的问题。它包含以下主题。
一般性问题和解决办法
管理控制台问题和解决办法
Apache Beehive支持问题和解决办法
集群问题和解决办法
配置问题和解决办法
连接器（资源适配器）问题和解决办法
控制台扩展问题和解决办法
核心服务器和核心工作管理器问题和解决办法
部署问题和解决办法
EJB问题和解决办法
示例问题和解决办法
HTTP问题发布/订阅服务器问题和解决办法
安装问题和解决办法
JavaEE问题和解决办法
JDBC问题和解决办法
JMS问题和解决办法
JBDI问题和解决办法
JSP和Servlet问题和解决办法
JTA问题和解决办法
Java虚拟机（JVM）和解决办法
监测问题和解决办法
节点管理器问题和解决办法
操作、管理和受管理问题及解决办法
Oracle Kodo问题和解决办法
插件问题和解决办法
协议问题和解决办法
RMI-IIOP问题和解决办法
安全问题和解决办法
SNMP问题和解决办法
WebLogic Server上Spring框架的问题和解决办法
系统组件体系解救（SCA）问题和解决办法
升级问题和解决办法
Web应用程序问题和解决办法
WebLogic Server脚本工具（WLST）问题及解决办法
!!!
Web服务器插件问题和解决方法
Web服务和XML问题及解决办法
文件 Errata&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：
获取WebLogic Server 11g（10.3.6）修复的Bug列表，请在直属库字段中输入以下文档ID 1302753.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;一般性问题和解决办法&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本章节介绍以下问题和解决办法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Safari时，多字节字符在文件名中显示错误&lt;/li&gt;
&lt;li&gt;Oracle WebLogic的版本号&lt;/li&gt;
&lt;li&gt;Oracle ojdbc14.jar文件更改为ojdbc6.jar&lt;/li&gt;
&lt;li&gt;强密码强制执行可能导致WLST离线脚本出现问题&lt;/li&gt;
&lt;li&gt;在土耳其地区，mds初始化失败&lt;/li&gt;
&lt;li&gt;管理服务器在EM控制台上报告“太多打开文件”消息&lt;/li&gt;
&lt;li&gt;适用于10.3.5.0 Oracle WLS通用安装的Sun JDK 6 U35-B52的可用性。&lt;/li&gt;
&lt;li&gt;IBM JDK SR16 FP3或 JDK 7.0 SR8 FP10修复程序的可用性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;使用Safari时，多字节字符在文件名中显示错误&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;平台：&lt;/strong&gt; 全部
当使用Safari浏览器下载内容时，如果文件名包含多字节字符，则这些字符在文件中显示为乱码
&lt;strong&gt;解决方案&lt;/strong&gt;
在受管服务器上设置&lt;code&gt;UserHeaderEncoding&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; .
使用如下WLST命令实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;connect(&amp;quot;admin_name&amp;quot;, &amp;quot;admin_password&amp;quot;, &amp;quot;t3://localhost:port&amp;quot;)
edit()
startEdit()
cd(&amp;quot;Servers/server_name/WebServer/server_name&amp;quot;)
set(&amp;quot;UseHeaderEncoding&amp;quot;, &amp;quot;true&amp;quot;)
save()
activate()
exit()
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Oracle WebLogic Server 版本号&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;平台：&lt;/strong&gt; 全部
Oracle融合中间件11g包含Oracle WebLogic Server 11g. Oracle WebLogic Server版本为10.3.6.&lt;/p&gt;
&lt;h4&gt;Oracle ojdbc14.jar文件更改为ojdbc6.jar&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;平台：&lt;/strong&gt; 全部
Oracle ojdbc14.jar 更改为为ojdbc6.jar，使用JDK 5或者JDK 6，因此，您对ojdbc14.jar的任何显示引用都必须更改为ojdbc6.jar&lt;/p&gt;
&lt;h4&gt;强密码强制执行可能导致WLST离线脚本出现问题&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;平台：&lt;/strong&gt; 全部
在此版本的WebLogic Server中实施强密码实施（最少8个字符，带有一个数字或特殊字符），现有脚本可能遇到问题。
&lt;strong&gt;解决方案&lt;/strong&gt;
&lt;em&gt; 将&lt;code&gt;ACKWARD_COMPAT_PW_CHECK&lt;/code&gt;境变量设置为&lt;code&gt;ture&lt;/code&gt;.
&lt;/em&gt; 使用WLST时，引用参数&lt;code&gt;-Dbackward.compat.pw.check=true&lt;/code&gt;
&amp;lt;未完待续&amp;gt;
Oracle建议您更改密码以复核新的密码要求，因为此变量和选项将在未来的WebLogic Server版本中删除。&lt;/p&gt;
&lt;h4&gt;在土耳其地区，mds初始化失败&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;平台：&lt;/strong&gt; 全部&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HelloWorDomain</dc:creator><pubDate>Thu, 14 Mar 2019 22:06:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-14:/oracle-webLogic-server-11.1.1.9-release-notes.html</guid><category>WebLogic</category><category>译文</category><category>java</category></item><item><title>使用 Dynatrace AppMon 监控 Docker 应用</title><link>https://www.EWhisper.cn/monitoring-docker-app-with-dynatrace.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#appmon-dockerized-apps-basic"&gt;使用AppMon 监控 dockerized apps (basic)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;基于组合的方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;基于继承的方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#qa"&gt;Q&amp;amp;A&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#appmon-dockerized-apps-kubernetes-openshift"&gt;使用AppMon 监控 dockerized apps - Kubernetes 和 OpenShift&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#a"&gt;方案A: 基于继承的方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#b"&gt;B方案: 基于组合的方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;可以配置 AppMon 来监控包裹在docker 容器里的应用:&lt;/p&gt;
&lt;h2 id="appmon-dockerized-apps-basic"&gt;使用AppMon 监控 dockerized apps (basic)&lt;a class="headerlink" href="#appmon-dockerized-apps-basic" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本章节介绍了将&lt;a href="https://www.dynatrace.com/solutions/application-monitoring/"&gt;AppMon&lt;/a&gt; agent与dockerized应用程序集成的两种方案。这些方案在本页面上被称为&lt;strong&gt;基于组合&lt;/strong&gt;和&lt;strong&gt;基于继承&lt;/strong&gt;的方案。每个方案的利弊都会列出. 但是，建议不要使用&lt;strong&gt;基于继承&lt;/strong&gt;的方法，而是将其用于演示目的。&lt;/p&gt;
&lt;h3 id="_1"&gt;基于组合的方案&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用基于组合的方案，您可以使用&lt;a href="https://hub.docker.com/r/dynatrace/agent/"&gt;AppMon/agent&lt;/a&gt; Docker镜像(示例见下), 该镜像包含所有的AppMon agent, 你可以配置附加到你的现有的Docker容器中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AppMon 6.5 示例:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;#DOCKERFILE FOR DYNATRACE AGENT&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; alpine:3.5&lt;/span&gt;

&lt;span class="k"&gt;LABEL&lt;/span&gt; &lt;span class="nv"&gt;maintainer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Blazej Tomaszewski &amp;lt;blazej.tomaszewski@dynatrace.com&amp;gt;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;ARG&lt;/span&gt; DT_HOME
&lt;span class="k"&gt;ARG&lt;/span&gt; BUILD_VERSION
&lt;span class="k"&gt;ARG&lt;/span&gt; VERSION
&lt;span class="k"&gt;ARG&lt;/span&gt; CUID
&lt;span class="k"&gt;ARG&lt;/span&gt; CGID

&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;AGENT_INSTALLER_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dynatrace-agent-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-unix.jar
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;WSAGENT_INSTALLER32_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dynatrace-wsagent-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-linux-x86-32.tar
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;WSAGENT_INSTALLER64_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dynatrace-wsagent-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-linux-x86-64.tar
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;NODE_AGENT_INSTALLER_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dynatrace-one-agent-nodejs-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-linux-x86.tgz
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;AGENT_INSTALLER_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://files.dynatrace.com/downloads/OnPrem/dynaTrace/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AGENT_INSTALLER_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;WSAGENT_INSTALLER32_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://files.dynatrace.com/downloads/OnPrem/dynaTrace/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;WSAGENT_INSTALLER32_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;WSAGENT_INSTALLER64_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://files.dynatrace.com/downloads/OnPrem/dynaTrace/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;WSAGENT_INSTALLER64_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;NODE_AGENT_INSTALLER_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://files.dynatrace.com/downloads/OnPrem/dynaTrace/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NODE_AGENT_INSTALLER_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;SLAVE_AGENT_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8001&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;DT_INSTALL_DEPS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;curl&lt;span class="se"&gt;\ &lt;/span&gt;openjdk8-jre-base
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;DT_RUNTIME_DEPS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bash

&lt;span class="k"&gt;COPY&lt;/span&gt; build/scripts/install-agent.sh /usr/bin
&lt;span class="k"&gt;COPY&lt;/span&gt; build/scripts/install-node-agent.sh /usr/bin
&lt;span class="k"&gt;COPY&lt;/span&gt; build/scripts/install-wsagent.sh /usr/bin

&lt;span class="k"&gt;RUN&lt;/span&gt;  apk update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add --no-cache &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_INSTALL_DEPS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_RUNTIME_DEPS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     mkdir -p &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     /usr/bin/install-agent.sh &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AGENT_INSTALLER_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     /usr/bin/install-wsagent.sh &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;WSAGENT_INSTALLER32_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     /usr/bin/install-wsagent.sh &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;WSAGENT_INSTALLER64_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     /usr/bin/install-node-agent.sh &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NODE_AGENT_INSTALLER_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     mkdir -p &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/log/agent &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     apk del &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_INSTALL_DEPS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;ADD&lt;/span&gt;  build/bin/dtnginx_offsets.json.tar.gz &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/agent/conf
&lt;span class="k"&gt;COPY&lt;/span&gt; build/scripts/run-wsagent.sh &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt; build/scripts/create-user.sh /tmp
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;CUID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CUID&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;CGID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CGID&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; /bin/sh -c /tmp/create-user.sh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf /tmp/*
&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; ${CUID}:${CGID}&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; true&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; sleep &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从技术上讲，这种方法使用了docker的一个特性，它允许docker容器将其文件系统的一部分导出为&lt;a href="https://docs.docker.com/engine/tutorials/dockervolumes/"&gt;docker卷&lt;/a&gt;，从而使其可以被其他感兴趣的容器获得。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://www.EWhisper.cn/images/dynatrace_docker_1.png"&gt;&lt;/p&gt;
&lt;h4&gt;示例&lt;/h4&gt;
&lt;p&gt;以下示例假定您已经运行&lt;code&gt;dynatrace/agent&lt;/code&gt; Docker容器, 通过名字 &lt;code&gt;dtagent&lt;/code&gt; 导入到&lt;code&gt;/dynatrace&lt;/code&gt;安装目录作为一个卷. GitHub上的&lt;a href="https://github.com/Dynatrace/Dynatrace-AppMon-Docker"&gt;AppMon in Docker&lt;/a&gt; 项目包含脚本来完成这个任务，甚至允许你在docker中方便地设置一个完整的appmon环境。更多的信息可以在以下的"性能诊所"(视频)找到。&lt;/p&gt;
&lt;h5&gt;示例: Apache Tomcat&lt;/h5&gt;
&lt;p&gt;下边的&lt;code&gt;docker-compose.yml&lt;/code&gt; 挂载容器&lt;code&gt;dtagent&lt;/code&gt; 导入的卷, 并且使用合适的&lt;code&gt;-agentpath&lt;/code&gt;来初始化&lt;code&gt;CATALINA_OPTS&lt;/code&gt;环境变量.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;tomcat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tomcat&lt;/span&gt;
  &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080&lt;/span&gt;
  &lt;span class="nt"&gt;volumes_from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;dtagent&lt;/span&gt;
  &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;CATALINA_OPTS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-agentpath:/dynatrace/agent/lib64/libdtagent.so=name=tomcat,collector=127.0.0.1:9998&amp;quot;&lt;/span&gt;
  &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;catalina.sh run&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;示例: NGINX&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;待补充&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;分析&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;: 这种方法有助于巧妙地清晰地分离关注点，这是Docker世界的设计原则。此外，您不需要将agent放入您的基本映像中。在运行时进行一个简单的配置就可以监控您需要的容器的一切。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;: 虽然Docker运行时对容器之间交换volumes有很大的支持，但在容器编排平台（如kubernetes或openshift）上这样做会使您的应用程序配置过于复杂。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;基于继承的方案&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不建议使用此方法，仅在此处进行演示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从技术角度而言，Docker化应用程序通常涉及两个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个基本镜像, 如:&lt;code&gt;java:8&lt;/code&gt;或&lt;code&gt;node:7&lt;/code&gt;, 提供基础的执行环境&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;Dockerfile&lt;/code&gt;, 用特定于应用程序的安装指令来扩充选定的基本镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用你的&lt;code&gt;Dockerfile&lt;/code&gt;, 运行&lt;code&gt;docker build&lt;/code&gt;命令来创建需要的Docker 镜像.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt;上提供了一整套的基础镜像. 你可以阅读&lt;a href="https://www.digitalocean.com/community/tutorials/docker-explained-using-dockerfiles-to-automate-building-of-images"&gt;使用Dockerfiles自动化镜像构建&lt;/a&gt;和&lt;a href="https://docs.docker.com/articles/dockerfile_best-practices/"&gt;写Dockerfiles的最佳实践&lt;/a&gt;获取更多信息.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://www.EWhisper.cn/images/dynatrace_docker_2.png"&gt;&lt;/p&gt;
&lt;h4&gt;示例&lt;/h4&gt;
&lt;p&gt;你可以为准备监控的应用创建基础镜像. 把agent打包为基础的自动启用监控的镜像。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://www.EWhisper.cn/images/dynatrace_docker_3.png"&gt;&lt;/p&gt;
&lt;h5&gt;示例: Java&lt;/h5&gt;
&lt;p&gt;本例子展示了一个&lt;code&gt;Dockerfile&lt;/code&gt;, 来扩展官方的&lt;a href="https://github.com/docker-library/openjdk"&gt;openJDK Docker镜像&lt;/a&gt; 基础镜像, 并下载对应的agent. 为了遍历, 需要设置一些环境变量, 如&lt;code&gt;DT_AGENT_NAME&lt;/code&gt;和&lt;code&gt;DT_AGENT_COLLECTOR&lt;/code&gt;, 以后可以在这些变量中填入你自己的数据. 另外, &lt;code&gt;JAVA_OPTS&lt;/code&gt;添加一个指向&lt;code&gt;DT_AGENT_LIB64&lt;/code&gt;的&lt;code&gt;-agentpath&lt;/code&gt;参数.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; openjdk:8&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt; DT_AGENT_INSTALLER_URL &lt;span class="s2"&gt;&amp;quot;http://files.dynatrace.com/downloads/OnPrem/dynaTrace/6.5/6.5.0.1289/dynatrace-agent-6.5.0.1289-unix.jar&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt; DT                     &lt;span class="s2"&gt;&amp;quot;/dynatrace&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; DT_AGENT_LIB32         &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/agent/lib/libdtagent.so&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; DT_AGENT_LIB64         &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/agent/lib64/libdtagent.so&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt; DT_AGENT_NAME          &lt;span class="s2"&gt;&amp;quot;java&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; DT_AGENT_COLLECTOR     &lt;span class="s2"&gt;&amp;quot;127.0.0.1:9998&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt; JAVA_OPTS              &lt;span class="s2"&gt;&amp;quot;-agentpath:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_AGENT_LIB64&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;=name=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_AGENT_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,collector=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_AGENT_COLLECTOR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Install the Agent&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; curl -L -o /tmp/&lt;span class="sb"&gt;`&lt;/span&gt;basename &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_AGENT_INSTALLER_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_AGENT_INSTALLER_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    java -jar /tmp/&lt;span class="sb"&gt;`&lt;/span&gt;basename &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_AGENT_INSTALLER_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; -t &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm -f /tmp/&lt;span class="sb"&gt;`&lt;/span&gt;basename &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_AGENT_INSTALLER_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;构建该Dockerfile使用&lt;code&gt;docker build . -t openjdk:8-dtappmon -f ./Dockerfile&lt;/code&gt;在本地Docker仓库创建一个新的Docker镜像, 名字为&lt;code&gt;openjdk&lt;/code&gt;, 标签为&lt;code&gt;8-dtappmon&lt;/code&gt;. 每个应用构建, 你可以通过扩展&lt;code&gt;openjdk:8-dtappmon&lt;/code&gt;来创建应用镜像(如下所示, &lt;code&gt;repo.internal&lt;/code&gt;指的是虚拟仓库, &lt;code&gt;my-app&lt;/code&gt;是虚拟应用.) 你也可以覆盖&lt;code&gt;DT_AGENT_NAME&lt;/code&gt;环境变量来在该镜像里更准确的配置.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; openjdk:8-dtappmon&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt; DT_AGENT_NAME &lt;span class="s2"&gt;&amp;quot;my-app&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt; https://repo.internal/my-app/builds/latest.tar.gz /app

&lt;span class="k"&gt;CMD&lt;/span&gt; java &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JAVA_OPTS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -jar /app/my-app.jar
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;示例: Nginx&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;待补充&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;分析&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;: 一旦agent已经被放入你的Docker基础映像中，在哪个容器平台上运行你的应用程序并不重要. 此外，这种方案减少了appmon整合的准备工作，不会增加频繁building，shipping和running Dockerized 应用程序过程的任何开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;: 根据您的特定用例和您所使用的技术,您必须手动集成这些技术. 因为这个方案会在特定技术的基础镜像上, 与特定技术的agent(如Java agent)紧密绑定, 当切换到另一种技术或appmon的新版本时，这些基本镜像可能需要被全部重新创建. (其实这个不算什么大问题, 就是定期更新agent)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="qa"&gt;Q&amp;amp;A&lt;a class="headerlink" href="#qa" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;我能监控运行在docker, alpine上的程序么?&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;待补充&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;我能监控在kubernetes或OpenShift上单 docker化应用么?&lt;/h4&gt;
&lt;p&gt;是的. 参见下一章节.&lt;/p&gt;
&lt;h4&gt;我能在docker中运行easyTravel(AppMon的demo程序)么?&lt;/h4&gt;
&lt;p&gt;EasyTravel已经在GitHub的&lt;a href="https://github.com/dynatrace/Dynatrace-easytravel-docker"&gt;EasyTravel in Docker &lt;/a&gt;完全实现容器化了. 你可以使用&lt;a href="https://github.com/Dynatrace/Dynatrace-AppMon-Docker"&gt;Dynatrace in Docker&lt;/a&gt;项目来注入监控.&lt;/p&gt;
&lt;h2 id="appmon-dockerized-apps-kubernetes-openshift"&gt;使用AppMon 监控 dockerized apps - Kubernetes 和 OpenShift&lt;a class="headerlink" href="#appmon-dockerized-apps-kubernetes-openshift" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上一章描述了如何使用&lt;a href="https://www.dynatrace.com/solutions/application-monitoring/"&gt;AppMon&lt;/a&gt;监控 普通的Docker环境中的Dockerized apps.&lt;/p&gt;
&lt;p&gt;本章阐述了如何监控在&lt;a href="http://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;和&lt;a href="https://www.openshift.com/"&gt;Red Hat OpenShift(v3)&lt;/a&gt;的 Dockerized 应用. (OpenShift算是Kubernetes的商业化).&lt;/p&gt;
&lt;p&gt;如上章"如何使用AppMon监控dockerized apps"所述, 根据于你的实际情况,  你可能会发现下列的方案更适合. 每种方案的利弊都已列出.&lt;/p&gt;
&lt;h3 id="a"&gt;方案A: 基于继承的方案&lt;a class="headerlink" href="#a" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;基于继承的方案的目标是把AppMon的agent放到你的Docker基础镜像里. 因为Kubernetes和OpenShift都是容器平台, 这种方案允许你来在这些平台上复用你的启用监控的镜像. 然而, 因为OpenShift是一个安全加固的容器平台, 使用root运行容器和执行进程(大部分Docker都是这么构建的)默认会被禁止.  参考&lt;a href="https://docs.openshift.org/latest/creating_images/guidelines.html"&gt;OpenShift 容器镜像向导&lt;/a&gt;来学习如何为OpenShift准备你的Docker镜像. 参见&lt;a href="https://www.dynatrace.com/support/doc/appmon/application-monitoring/monitor-specific-applications/monitor-docker-apps/monitor-dockerized-apps-with-appmon/"&gt;如何使用AppMon监控dockerized apps&lt;/a&gt;获取如何应用本方案到你的Docker镜像.&lt;/p&gt;
&lt;h4&gt;示例: Java&lt;/h4&gt;
&lt;p&gt;因为在你的基础镜像中的特定技术已被appmon监控，因此只需简单的运行时配置设置即可将agent绑定到appmon collector。&lt;/p&gt;
&lt;p&gt;下列例子为一个运行在&lt;a href="http://kubernetes.io/docs/user-guide/pods/"&gt;Pod&lt;/a&gt;上的一个叫做&lt;em&gt;catalog&lt;/em&gt;的容器定义了一个&lt;a href="http://kubernetes.io/docs/user-guide/replication-controller/"&gt;ReplicationController&lt;/a&gt;. 环境变量&lt;code&gt;DT_AGENT_NAME&lt;/code&gt;和&lt;code&gt;DT_AGENT_COLLECTOR&lt;/code&gt;(&lt;a href="https://www.dynatrace.com/support/doc/appmon/application-monitoring/monitor-specific-applications/monitor-docker-apps/monitor-dockerized-apps-with-appmon/"&gt;如何使用AppMon监控dockerized apps&lt;/a&gt;中已定义好)覆盖掉由基础的&lt;code&gt;acmeco/my-app&lt;/code&gt;镜像提供的各自的对应值.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ReplicationController&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-app&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-app&lt;/span&gt;
        &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;acmeco/my-app&lt;/span&gt;
        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;DT_AGENT_NAME&lt;/span&gt;
          &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;my-app&amp;quot;&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;DT_AGENT_COLLECTOR&lt;/span&gt;
          &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dtappmon-collector.acmeco.com:9998&amp;quot;&lt;/span&gt;
        &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;containerPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;示例: Nginx&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;待补充&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;分析&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;: 一旦agent已经被放入你的Docker基础映像中，在哪个容器平台上运行你的应用程序并不重要. 此外，这种方案减少了appmon整合的准备工作，不会增加频繁building，shipping和running Dockerized 应用程序过程的任何开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;: 根据您的特定用例和您所使用的技术,您必须手动集成这些技术. 因为这个方案会在特定技术的基础镜像上, 与特定技术的agent(如Java agent)紧密绑定, 当切换到另一种技术或appmon的新版本时，这些基本镜像可能需要被全部重新创建. (其实这个不算什么大问题, 就是定期更新agent)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="b"&gt;B方案: 基于组合的方案&lt;a class="headerlink" href="#b" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;待补充.&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 12 Mar 2019 10:58:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-12:/monitoring-docker-app-with-dynatrace.html</guid><category>APM</category><category>Dynatrace</category><category>docker</category></item><item><title>8种Java 内存溢出之一:Java Heap Space</title><link>https://www.EWhisper.cn/java-oom-1-java-heap-space.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#11-javalangoutofmemoryerror-java-heap-space"&gt;1.1  java.lang.OutOfMemoryError: Java heap space 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#12"&gt;1.2 原因&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#13"&gt;1.3 示例&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#131-1"&gt;1.3.1 示例1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#132"&gt;1.3.2 内存泄漏示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#14"&gt;1.4 解决方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="11-javalangoutofmemoryerror-java-heap-space"&gt;1.1  java.lang.OutOfMemoryError: Java heap space 概述&lt;a class="headerlink" href="#11-javalangoutofmemoryerror-java-heap-space" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Java 应用只允许使用有限的内存。这个限制是在应用启动的时候指定的。展开来说， Java内存分成2个不同的区域。这两个区域叫做Heap Space （堆内存）和 Permgen （Permanent Generation，即永久代）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="java内存结构" src="https://www.EWhisper.cn/images/java_memory.png"&gt;&lt;/p&gt;
&lt;p&gt;这两个区的大小是在JVM启动的时候设置, 可以通过JVM参数&lt;code&gt;-Xmx&lt;/code&gt; 和 &lt;code&gt;-XX:MaxPermSize&lt;/code&gt;进行设置. 如果你没欧进行特别的设置, &lt;strong&gt;平台指定&lt;/strong&gt;的默认配置会被使用.
&lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt; 错误会在应用尝试添加更多的数据到heap space, 但是heap区没有足够的空间时触发.&lt;/p&gt;
&lt;p&gt;需要注意的是即使&lt;strong&gt;物理内存&lt;/strong&gt;可能有很多剩余, 但是只要JVM达到了heap size的限制, 就会抛出该错误.&lt;/p&gt;
&lt;h2 id="12"&gt;1.2 原因&lt;a class="headerlink" href="#12" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对于 &lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt; , 最常见的原因很简单 -- 你把一个XXL号的应用放到了一个S号的Java heap space里了. 也就是说 -- 应用需要更多的Java heap space 来让它正常运行. 对于这个OutOfMemory, 其他的原因会更复杂, 通常是由于编程错误引起的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户/数据量出现峰值&lt;/strong&gt; 该应用被设计来处理一定数量的用户和一定数量的数据. 当用户数或数据量突然冲高, 并且超过了期望的阈值, 在出现峰值停止之前的正常运行时的操作触发了 &lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt; 错误.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存泄漏&lt;/strong&gt; 一种特定类型的编程错误导致应用频繁消耗更多的内存. 每当应用的泄漏的功能被使用时, 它就会在Java heap space种生成一些对象. 随着时间推移, 泄漏的对象消耗了所有可用的Java heap space, 并且触发了常见的&lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt;  错误.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="13"&gt;1.3 示例&lt;a class="headerlink" href="#13" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="131-1"&gt;1.3.1 示例1&lt;a class="headerlink" href="#131-1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;第一个例子相当简单 -- 下列的Java 代码尝试分配200万个(2M) 整数数组. 当你编译该代码, 用一个12MB大小的Java heap space (&lt;code&gt;java -Xmx12m OOM&lt;/code&gt;)运行. 它会运行失败, 抛出 &lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt;  消息. 有13MB Java heap space, 这个程序就能正常运行...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OOM&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="132"&gt;1.3.2 内存泄漏示例&lt;a class="headerlink" href="#132" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;第二个, 更现实一点的例子是内存泄漏. 在Java里, 当开发创建和使用新对象, 如: &lt;code&gt;new Integer(5)&lt;/code&gt;, 他们不必自己分派内存 -- 这通过JVM来处理. 在应用生命周期种, JVM会周期性地检查内存中的哪个对象仍在使用, 哪个没有. 没有被使用的对象会被丢弃, 然后内存重新声明并重新使用. 这个过程叫做&lt;strong&gt;垃圾回收&lt;/strong&gt;. 对应的JVM里的模块叫做&lt;strong&gt;垃圾收集器&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Java的自动内存管理机制以来与GC来周期性地查找没用的对象并移除他们. 简而言之, Java内存泄漏是这么一种场景, 一些对象应用已经不用了, 但是GC却没有检查出来. 结果就是这些没用的对象仍然无限期地存在在Java heap space 中. 如此往复, 最终触发&lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt;错误.&lt;/p&gt;
&lt;p&gt;构造一个满足内存泄漏定义的Java程序也相当容易:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;KeylessEntry&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Key&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsKey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)))&lt;/span&gt;
          &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Nmber:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当执行上面的代码时，您可能期望它永远运行而没有任何问题，假设原始缓存解决方案只将Map扩展到10,000个元素，除此之外，HashMap中已经包含了所有键. 然而, 事实上元素会持续增加因为Key这个类没有在它的&lt;code&gt;hashCode()&lt;/code&gt;种包含一个适当的&lt;code&gt;equals()&lt;/code&gt;实现.&lt;/p&gt;
&lt;p&gt;结果, 随着时间推移, 因为泄漏代码的不断的使用, "缓存"的结果会消耗大量的Java heap space. 当泄漏的内存填满了heap区的所有的可用内存, 并且垃圾收集器无法清理, 会抛出&lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;解决办法也简单 -- 添加个&lt;code&gt;equals()&lt;/code&gt;方法的实现在下边, 就能很好的运行了. 但是在你最终找到这个bug之前, 你会西欧爱好相当多的脑细胞.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="14"&gt;1.4 解决方案&lt;a class="headerlink" href="#14" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;显然第一个解决方案就是 -- 当你的JVM特定资源耗尽了, 你应该增加那个资源的量. 在这个案例种: 当你的应用没有足够的Java heap space内存来正常运行, 只需要在运行JVM的时候配置并添加(或修改现有的)如下参数:
&lt;code&gt;-Xmx1024m&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上述配置会给应用1024M的Java heap space. 你可以使用&lt;code&gt;g&lt;/code&gt;或者&lt;code&gt;G&lt;/code&gt;(单位是GB), &lt;code&gt;m&lt;/code&gt;或&lt;code&gt;M&lt;/code&gt;(MB), &lt;code&gt;k&lt;/code&gt;或&lt;code&gt;K&lt;/code&gt;(KB). 例如下列都是设置最大Java heap space为1GB:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java -Xmx1073741824 com.mycompany.MyClass
java -Xmx1048576k com.mycompany.MyClass
java -Xmx1024m com.mycompany.MyClass
java -Xmx1g com.mycompany.MyClass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然而, 在很多案例种, 提供更多的Java heap space只是饮鸩止渴. 例如, 如果你的应用存在内存泄漏, 添加更多的heap只是延缓&lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt;错误的出现, 并不能解决问题. 另外, 增加Java heap space也会导致GC暂停时间的增加, 从而影响你的应用的&lt;a href="https://plumbr.eu/blog/gc-impact-on-throughput-and-latency"&gt;吞吐量和延迟&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;如果你希望解决潜在的问题, 而不是头痛医头, 联系我就是最好的方式(＠￣ー￣＠). 当然, 有几个工具适合你. &lt;strong&gt;Debuggers&lt;/strong&gt;, &lt;strong&gt;profiles&lt;/strong&gt;, &lt;strong&gt;heap dump analyzers&lt;/strong&gt; -- 供你选择.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题外话:
Dynatrace 也是个分析OOM问题的好工具.感兴趣的可以参考这篇文章:
《案例: Dynatrace分析某财险承保系统内存泄漏问题》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;喜欢我的博客吗? 打赏一杯&lt;img align="absmiddle" alt="☕" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2615.png" title=":coffee:" width="20px"&gt;吧。您的支持是对我的最大鼓励～ 另外记得给我留言或订阅哦 &lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.EWhisper.cn/pages/about.html"&gt;点击这里打赏&lt;img align="absmiddle" alt="👉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f449.png" title=":point_right:" width="20px"&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 12 Mar 2019 10:48:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-12:/java-oom-1-java-heap-space.html</guid><category>jvm</category><category>java</category><category>oom</category></item><item><title>如何编写Python Web框架（三）</title><link>https://www.EWhisper.cn/write-python-framework-part-three.html</link><description>&lt;blockquote&gt;
&lt;p&gt;本文为译文&lt;/p&gt;
&lt;p&gt;原文链接: &lt;a href="http://rahmonov.me/posts/write-python-framework-part-three/"&gt;How to write a Python web framework. Part III.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者: Jahongir Rahmonov&lt;/p&gt;
&lt;p&gt;Github仓库: &lt;a href="https://github.com/rahmonov/alcazar"&gt;alcazar&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在本系列之前的博客文章中，我们开始编写自己的Python框架并实现以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WSGI兼容&lt;/li&gt;
&lt;li&gt;请求处理程序&lt;/li&gt;
&lt;li&gt;路由：简单和参数化&lt;/li&gt;
&lt;li&gt;检查重复的路径&lt;/li&gt;
&lt;li&gt;基于类的处理程序&lt;/li&gt;
&lt;li&gt;单元测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这部分中，我们将为列表添加一些很棒的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试客户端&lt;/li&gt;
&lt;li&gt;添加路径的替代方式（如类似Django的实现）&lt;/li&gt;
&lt;li&gt;支持模板&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;测试客户端&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在第&lt;a href="https://www.EWhisper.cn/write-python-framework-part-two.html"&gt;2部分中&lt;/a&gt;，我们编写了几个单元测试。但是，当我们需要向处理程序发送HTTP请求时，我们停止了，因为我们没有可以执行此操作的测试客户端。我们先添加一个。&lt;/p&gt;
&lt;p&gt;到目前为止，在Python中发送HTTP请求最流行的方式是&lt;a href="https://twitter.com/kennethreitz"&gt;Kenneth Reitz&lt;/a&gt;的&lt;a href="https://github.com/kennethreitz/requests"&gt;&lt;code&gt;Requests&lt;/code&gt;&lt;/a&gt;库。但是，为了能够在单元测试中使用它，我们应该始终启动并运行我们的应用程序（即在运行测试之前启动gunicorn）。原因是&lt;a href="http://docs.python-requests.org/en/master/user/advanced/#transport-adapters"&gt;&lt;code&gt;Requests&lt;/code&gt;只附带一个Transport Adaptter: HTTPAdapter&lt;/a&gt;。这违背了单元测试的目的。单元测试应该是自我维持的。对我们来说幸运的是，&lt;a href="https://github.com/seanbrant"&gt;Sean Brant&lt;/a&gt;编写了一个&lt;a href="https://github.com/seanbrant/requests-wsgi-adapter"&gt;WSGI Transport Adapter，用于&lt;/a&gt;创建测试客户端。让我们先编写代码再进行讨论。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 译者注:&lt;/p&gt;
&lt;p&gt;先安装2个库:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install requests&lt;/code&gt;&lt;br&gt;
&lt;code&gt;pip install requests-wsgi-adapter&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将以下方法添加到&lt;code&gt;api.py&lt;/code&gt;主类&lt;code&gt;API&lt;/code&gt;中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;RequestsSession&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wsgiadapter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WSGIAdapter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;RequestsWSGIAdapter&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://testserver&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RequestsSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;RequestsWSGIAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此&lt;a href="http://docs.python-requests.org/en/master/user/advanced/#transport-adapters"&gt;处所述&lt;/a&gt;，要使用Requests WSGI Adapter，我们需要将其mount到Session对象。这样，使用&lt;code&gt;test_session&lt;/code&gt;,其URL以给定前缀开头的任何请求都将使用给定的RequestsWSGIAdapter。太好了，现在我们可以用&lt;code&gt;test_session&lt;/code&gt;来创建一个测试客户端。创建一个&lt;code&gt;conftest.py&lt;/code&gt;文件并将&lt;code&gt;api&lt;/code&gt; fixture 移动到此文件，使其如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# conftest.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;api&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此文件的&lt;code&gt;pytest&lt;/code&gt;默认情况下会查找fixture 。现在，让我们在这里创建测试客户端fixture ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# conftest.py&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们的&lt;code&gt;client&lt;/code&gt;需要&lt;code&gt;api&lt;/code&gt; fixture 并返回我们之前编写的内容&lt;code&gt;test_session&lt;/code&gt;。现在我们可以在单元测试中使用这个&lt;code&gt;client&lt;/code&gt; fixture 。让我们直接进入&lt;code&gt;test_bumbo.py&lt;/code&gt;文件并编写一个单元测试，测试是否&lt;code&gt;client&lt;/code&gt;可以发送请求：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_bumbo.py&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_bumbo_test_client_can_send_requests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;RESPONSE_TEXT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;THIS IS COOL&amp;quot;&lt;/span&gt;

    &lt;span class="nd"&gt;@api.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/hey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RESPONSE_TEXT&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://testserver/hey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RESPONSE_TEXT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行单元测试&lt;code&gt;pytest test_bumbo.py&lt;/code&gt;并观察。我们看到所有的测试都通过了。让我们为最重要的部分添加几个单元测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_bumbo.py&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_parameterized_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@api.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/{name}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hey {name}&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://testserver/matthew&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hey matthew&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://testserver/ashley&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hey ashley&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个测试我们在url中发送的参数是否正常工作。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_bumbo.py&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_default_404_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://testserver/doesnotexist&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not found.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个测试如果请求被发送到不存在的路由，则返回404（未找到）响应。&lt;/p&gt;
&lt;p&gt;剩下的我会留给你。如果您需要任何帮助，请尝试编写更多测试并在评论中告诉我。以下是单元测试的一些想法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试基于类的处理程序GET请求是否正常运行&lt;/li&gt;
&lt;li&gt;测试基于类的处理程序POST请求是否正常运行&lt;/li&gt;
&lt;li&gt;测试如果使用无效的请求方法，基于类的处理程序返回响应&lt;code&gt;Method Not Allowed.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;测试是否正确返回状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;添加路径的替代方式&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;现在，这是添加路径的方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@api.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;YOLO&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也就是说，路由被添加为装饰器，就像在Flask中一样。有些人可能喜欢Django注册网址的方式。所以，让我们给他们这样添加路径的选择：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;YOLO&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;YOLO2&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/about&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;add_route&lt;/code&gt;方法应该做两件事。检查路径是否已经注册，如果没有，则注册：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Such route already exists.&amp;quot;&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很简单。这段代码看起来很熟悉吗？这是因为我们已经在&lt;code&gt;route&lt;/code&gt;装饰器中编写了这样的代码。我们现在可以遵循DRY原则并在&lt;code&gt;route&lt;/code&gt;装饰器中使用&lt;code&gt;add_route&lt;/code&gt;方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Such route already exists.&amp;quot;&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;让我们添加一个单元测试来检查它是否正常工作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_bumbo.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_alternative_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Alternative way to add a route&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response_text&lt;/span&gt;

    &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/alternative&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://testserver/alternative&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;response_text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行您的测试，您将看到所有测试都通过。&lt;/p&gt;
&lt;h2 id="_3"&gt;模板支持&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当我实现新的东西时，我喜欢做一些叫做README驱动的开发。这是一种技术，您可以在实施之前记下API是什么样子。让我们来实现。假设我们要在我们的处理程序中使用此模板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ title }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        The name of the framework is {{ name }}
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;{{ title }}&lt;/code&gt;和&lt;code&gt;{{ name }}&lt;/code&gt;是从处理程序发送的变量，这是处理程序的样子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;templates_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;templates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@api.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/template&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Awesome Framework&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Alcazar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我希望它尽可能简单，所以我只需要一个方法，将模板名和上下文作为参数，并用给定的参数呈现该模板。另外，我们希望模板目录可以像上面一样配置。&lt;/p&gt;
&lt;p&gt;通过设计API，我们现在可以实现它。&lt;/p&gt;
&lt;p&gt;对于模板支持，我认为&lt;a href="http://jinja.pocoo.org/docs/2.10/"&gt;Jinja2&lt;/a&gt;是最佳选择。它是一个现代的，设计师友好的Python模板语言，模仿Django的模板。所以，如果你知道Django, 那么使用Jinja2应该感觉一样。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Jinja2&lt;/code&gt;使用称为模板&lt;code&gt;Environment&lt;/code&gt;的中心对象。我们将在应用程序初始化和借助此Environment 加载模板的基础上配置此环境。以下是如何创建和配置一个：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;

&lt;span class="n"&gt;templates_env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;templates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;FileSystemLoader&lt;/code&gt;从文件系统加载模板。此加载程序可以在文件系统上的文件夹中查找模板，并且是加载它们的首选方法。它将模板目录的路径作为参数。现在我们可以这样使用&lt;code&gt;templates_env&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;templates_env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Awesome Framework&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Alcazar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;既然我们了解了Jinja2中的所有工作原理，那么我们就将其添加到我们自己的框架中。首先，让我们安装jinja2：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install Jinja2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后，在我们的&lt;code&gt;API&lt;/code&gt;类的&lt;code&gt;__init__&lt;/code&gt;方法中创建&lt;code&gt;Environment&lt;/code&gt; 对象：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;templates_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;templates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;templates_env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;templates_dir&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们做了几乎与上面相同的事情，除了我们为&lt;code&gt;templates_dir&lt;/code&gt;提供了一个默认值，&lt;code&gt;templates&lt;/code&gt;以便用户不必写它。现在我们有了实现我们之前设计的&lt;code&gt;template&lt;/code&gt;方法的所有方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;templates_env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我认为这里没有必要解释任何事情。你唯一想知道的是为什么我给了&lt;code&gt;context&lt;/code&gt;一个默认值&lt;code&gt;None&lt;/code&gt;，检查它是否是&lt;code&gt;None&lt;/code&gt;，然后将值设置为空字典&lt;code&gt;{}&lt;/code&gt;。你可能会说我可以在声明中给它默认值&lt;code&gt;{}&lt;/code&gt;。但是&lt;code&gt;dict&lt;/code&gt;它是一个可变对象，在Python中将可变对象设置为默认值是一种不好的做法。&lt;a href="https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"&gt;在这里&lt;/a&gt;阅读更多相关信息。&lt;/p&gt;
&lt;p&gt;随着一切准备就绪，我们可以创建模板和处理程序。首先，创建&lt;code&gt;templates&lt;/code&gt;文件夹：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir templates
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过执行&lt;code&gt;touch templates/index.html&lt;/code&gt;创建文件&lt;code&gt;index.html&lt;/code&gt;并将以下内容放入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ title }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The name of the framework is {{ name }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在我们可以在我们的&lt;code&gt;app.py&lt;/code&gt;创建处理程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/template&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;template_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Alcazar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Best Framework&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就是这样（好吧，差不多）。启动&lt;code&gt;gunicorn&lt;/code&gt;然后访问&lt;code&gt;http://localhost:8000/template&lt;/code&gt;。你会看到一个大大的&lt;code&gt;Internal Server Error&lt;/code&gt;。那是因为&lt;code&gt;resp.body&lt;/code&gt;期望bytes, 而我们的&lt;code&gt;template&lt;/code&gt;方法返回一个unicode字符串。因此，我们需要对其进行编码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;

&lt;span class="nd"&gt;@api.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/template&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;template_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Alcazar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Best Framework&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重新启动gunicorn，你将看到我们的模板的所有荣耀。在后续的文章中，我们将不再需要&lt;code&gt;encode&lt;/code&gt;并使我们的API更漂亮。&lt;/p&gt;
&lt;h2 id="_4"&gt;结论&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们在这篇文章中实现了三个新功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试客户端&lt;/li&gt;
&lt;li&gt;添加路径的替代方式（如Django的实现方式）&lt;/li&gt;
&lt;li&gt;支持模板&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请务必在评论中告诉我们应该在本系列中实现的其他功能。对于下一部分，我们肯定会添加对静态文件的支持，但我不确定我们应该添加哪些其他功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;稍微提醒一下，这个系列是基于我为学习目的而编写的&lt;a href="https://github.com/rahmonov/alcazar"&gt;Alcazar框架&lt;/a&gt;。如果你喜欢这个系列，&lt;a href="https://github.com/rahmonov/alcazar"&gt;请在这儿&lt;/a&gt;查看博客中的内容，一定要通过star该repo来表达你的喜爱。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fight on!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 06 Mar 2019 11:03:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-06:/write-python-framework-part-three.html</guid><category>python</category><category>web框架</category></item><item><title>如何编写Python Web框架（二）</title><link>https://www.EWhisper.cn/write-python-framework-part-two.html</link><description>&lt;blockquote&gt;
&lt;p&gt;本文为译文&lt;/p&gt;
&lt;p&gt;原文链接: &lt;a href="http://rahmonov.me/posts/write-python-framework-part-two/"&gt;How to write a Python web framework. Part II.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者: Jahongir Rahmonov&lt;/p&gt;
&lt;p&gt;Github仓库: &lt;a href="https://github.com/rahmonov/alcazar"&gt;alcazar&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;a href="https://www.EWhisper.cn/write-python-framework-part-one.html"&gt;第一部分中&lt;/a&gt;，我们开始编写自己的Python框架并实现以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WSGI兼容&lt;/li&gt;
&lt;li&gt;请求处理程序&lt;/li&gt;
&lt;li&gt;路由：简单和参数化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请务必在此之前阅读系列的&lt;a href="https://www.EWhisper.cn/write-python-framework-part-one.html"&gt;第一部分&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这部分同样令人兴奋，我们将在其中添加以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查重复的路径&lt;/li&gt;
&lt;li&gt;基于类的处理程序&lt;/li&gt;
&lt;li&gt;单元测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ready? 让我们开始吧。&lt;/p&gt;
&lt;h2 id="_1"&gt;重复的路径&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;现在，我们的框架允许添加任意次数相同的路由。因此，以下内容将起作用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello from the HOME page&amp;quot;&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello from the SECOND HOME page&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;框架不会抱怨，因为我们使用Python字典来存储路由，只有最后一个才能使用&lt;code&gt;http://localhost:8000/home/&lt;/code&gt;。显然，这并不好。我们希望确保框架在用户尝试添加现有路由时会抛出信息。您可以想象，实施起来并不是很困难。因为我们使用Python dict来存储路由，所以我们可以简单地检查字典中是否已存在给定路径。如果是，我们抛出异常，如果不是，我们让它添加一个路由。在我们编写任何代码之前，让我们回忆下我们的主要&lt;code&gt;API&lt;/code&gt;类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;parse_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parse_result&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parse_result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;named&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not found.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们需要更改&lt;code&gt;route&lt;/code&gt;函数，以便在再次添加现有路由时抛出异常：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Such route already exists.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，尝试添加相同的路径两次并重新启动你的gunicorn。您应该看到抛出以下异常：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
...
AssertionError: Such route already exists.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们可以重构它以将其减少到一行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Such route already exists.&amp;quot;&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完工！进入下一个功能。&lt;/p&gt;
&lt;h2 id="_2"&gt;基于类的处理程序&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果你了解Django，你知道它支持基于函数和基于类的视图（即我们的处理程序）。我们已经有了基于函数的处理程序。现在我们将添加基于类的，适用于更复杂, 更大的处理程序。我们基于类的处理程序将如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BooksHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Books Page&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Endpoint to create a book&amp;quot;&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这意味着我们存储路径的dict:  &lt;code&gt;self.routes&lt;/code&gt;可以包含类和函数作为值。因此，当我们在&lt;code&gt;handle_request()&lt;/code&gt;方法中找到一个处理程序时，我们需要检查处理程序是一个函数还是一个类。如果它是一个函数，它应该像现在一样工作。如果它是一个类，根据请求方法，我们应该调用该类的对应方法。也就是说，如果请求方法是&lt;code&gt;GET&lt;/code&gt;，我们应该调用类的&lt;code&gt;get()&lt;/code&gt;方法，如果是&lt;code&gt;POST&lt;/code&gt;我们应该调用&lt;code&gt;post&lt;/code&gt;方法等。这是&lt;code&gt;handle_request()&lt;/code&gt;方法现在的样子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们要做的第一件事是检查找到的处理程序是否是一个类。为此，我们使用&lt;code&gt;inspect&lt;/code&gt;模块：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;   &lt;span class="c1"&gt;# class based handler is being used&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，如果正在使用基于类的处理程序，我们需要根据请求方法找到类的适当方法。为此，我们可以使用内置的&lt;code&gt;getattr&lt;/code&gt;函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;handler_function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;getattr&lt;/code&gt;接受一个对象实例作为第一个参数，将属性名称作为第二个参数。第三个参数是如果没有找到则返回的值。因此，&lt;code&gt;GET&lt;/code&gt;将返回&lt;code&gt;get&lt;/code&gt;，&lt;code&gt;POST&lt;/code&gt;返回&lt;code&gt;post&lt;/code&gt;, &lt;code&gt;some_other_attribute&lt;/code&gt;返回&lt;code&gt;None&lt;/code&gt;。如果&lt;code&gt;handler_function&lt;/code&gt;是&lt;code&gt;None&lt;/code&gt;，则表示此类函数未在类中实现，并且不允许此请求方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;handler_function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler_function&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Method not allowed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果实际找到了handler_function，那么我们只需调用它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;handler_function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler_function&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Method now allowed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;handler_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在整个方法看起来像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;handler_function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler_function&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Method now allowed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;handler_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我不喜欢我们有两个&lt;code&gt;handler_function&lt;/code&gt;和&lt;code&gt;handler&lt;/code&gt;。我们可以重构它们以使它更优雅：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Method now allowed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就是这样。我们现在可以测试对基于类的处理程序的支持。首先，如果你还没有, 请将此处理程序添加到&lt;code&gt;app.py&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BooksHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Books Page&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，重新启动你的gunicorn并转到页面&lt;code&gt;http://localhost:8000/book&lt;/code&gt;，你应该看到消息&lt;code&gt;Books Page&lt;/code&gt;。就这样, 我们增加了对基于类的处理程序的支持。可以试试实现其他方法(例如&lt;code&gt;post&lt;/code&gt;和&lt;code&gt;delete&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;进入下一个功能！&lt;/p&gt;
&lt;h2 id="_3"&gt;单元测试&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果没有单元测试，哪个项目是可靠的，对吧？所以让我们添加几个。我喜欢使用&lt;code&gt;pytest&lt;/code&gt;，所以让我们安装它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pytest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;并创建一个文件，我们将编写测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch test_bumbo.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;提醒一下，&lt;code&gt;bumbo&lt;/code&gt;是框架的名称。您可能以不同的方式命名。另外，如果您不知道&lt;a href="https://docs.pytest.org/en/latest/"&gt;pytest&lt;/a&gt;是什么，我强烈建议您查看它以了解如何编写单元测试。&lt;/p&gt;
&lt;p&gt;首先，让我们为我们的&lt;code&gt;API&lt;/code&gt;类创建一个我们可以在每个测试中使用的工具：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_bumbo.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;api&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，对于我们的第一次单元测试，让我们从简单的开始。让我们测试一下我们是否可以添加路径。如果它没有抛出异常，则表示测试成功通过：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_basic_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@api.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;YOLO&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;像这样运行测试：&lt;code&gt;pytest test_bumbo.py&lt;/code&gt;你应该看到如下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;collected 1 item

test_bumbo.py .                                                                                                                                                            [100%]

====== 1 passed in 0.09 seconds ======
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，让我们测试它是否会在我们尝试添加现有路由时抛出异常：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_bumbo.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_route_overlap_throws_exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@api.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;YOLO&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nd"&gt;@api.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;YOLO&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再次运行测试，您将看到它们都通过了。&lt;/p&gt;
&lt;p&gt;我们可以添加更多测试，例如默认响应，参数化路由，状态代码等。但是，所有测试都要求我们向处理程序发送HTTP请求。为此，我们需要一个测试客户端。但是如果我们在这里做的话，我认为这篇文章会变得太大了。我们将在这些系列的下一篇文章中完成。我们还将添加对模板和其他一些有趣内容的支持。所以，请继续关注。&lt;/p&gt;
&lt;p&gt;像往常一样，如果您想看一些功能实现，请在评论部分告诉我。&lt;/p&gt;
&lt;p&gt;P.S. 这些博客文章基于我正在构建的&lt;a href="https://github.com/rahmonov/alcazar"&gt;Python Web框架&lt;/a&gt;。因此，&lt;a href="https://github.com/rahmonov/alcazar"&gt;请在这儿&lt;/a&gt;查看博客中的内容，一定要通过star该repo来表达你的喜爱。&lt;/p&gt;
&lt;p&gt;Fight on!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 01 Mar 2019 15:51:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-01:/write-python-framework-part-two.html</guid><category>python</category><category>web框架</category></item><item><title>如何编写Python Web框架（一）</title><link>https://www.EWhisper.cn/write-python-framework-part-one.html</link><description>&lt;blockquote&gt;
&lt;p&gt;译文:&lt;/p&gt;
&lt;p&gt;原文链接: &lt;a href="http://rahmonov.me/posts/write-python-framework-part-one/"&gt;How to write a Python web framework. Part I.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者: Jahongir Rahmonov&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“不要重新发明轮子”是我们每天听到的最常见的咒语之一。但是如果我想了解更多有关车轮的信息怎么办？如果我想学习如何制作这个该死的车轮怎么办？我认为为了学习而重新发明它是一个好主意。因此，在这些系列中，我们将编写自己的Python Web框架，以了解在Flask，Django和其他框架中如何完成所有这些魔术。&lt;/p&gt;
&lt;p&gt;在本系列的第一部分中，我们将构建框架中最重要的部分。最后，我们将有请求处理程序(request handlers)（类似Django 视图 views）和路由(routing)：既有简单（如&lt;code&gt;/books/&lt;/code&gt;）请求也有参数化（如&lt;code&gt;/greet/{name}&lt;/code&gt;）请求。&lt;/p&gt;
&lt;p&gt;在我开始做新事物之前，我想考虑最终结果。在这种情况下，在一天结束时，我们希望能够在生产中使用此框架，因此我们希望我们的框架由快速，轻量级的生产级应用程序服务器提供服务。在过去的几年里，我一直在我的所有项目中使用&lt;a href="https://gunicorn.org/"&gt;gunicorn&lt;/a&gt;，我对结果非常满意。那么，让我们一起来用&lt;code&gt;gunicorn&lt;/code&gt;吧。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Gunicorn&lt;/code&gt;是一个&lt;a href="http://rahmonov.me/posts/what-the-hell-is-wsgi-anyway-and-what-do-you-eat-it-with/"&gt;WSGI&lt;/a&gt; HTTP服务器，因此它需要应用程序的特定入口点。如果你不知道什么&lt;code&gt;WSGI&lt;/code&gt;是什么, &lt;a href="http://rahmonov.me/posts/what-the-hell-is-wsgi-anyway-and-what-do-you-eat-it-with/"&gt;可以阅读这篇文章&lt;/a&gt;，我会等待。否则，你无法理解这篇博文的大部分内容。&lt;/p&gt;
&lt;p&gt;您是否了解了WSGI是什么？如果了解了。那我们就继续吧。&lt;/p&gt;
&lt;p&gt;要与WSGI兼容，我们需要一个可调用的对象（函数或类），它需要两个参数（&lt;code&gt;environ&lt;/code&gt;和&lt;code&gt;start_response&lt;/code&gt;）并返回一个WSGI兼容的响应。那么，让我们开始写代码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 译者注:&lt;/p&gt;
&lt;p&gt;编程环境: Linux或MacOS (windows系统不适用该教程)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;想一个框架的名称并创建具有该名称的文件夹。我把它命名为&lt;code&gt;bumbo&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir bumbo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进入此文件夹，创建一个虚拟环境并激活它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; bumbo
python3.6 -m venv venv
&lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，创建一个名为&lt;code&gt;app.py&lt;/code&gt; 的文件，我们将在这个文件里存储我们的&lt;code&gt;gunicorn&lt;/code&gt;入口点：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch app.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个&lt;code&gt;app.py&lt;/code&gt;内部，让我们编写一个简单的函数来查看它是否可以和&lt;code&gt;gunicorn&lt;/code&gt;一起工作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response_body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;200 OK&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;response_body&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如上所述，这个可调用的入口点接收两个参数。其中之一&lt;code&gt;environ&lt;/code&gt;是存储有关请求的各种信息，例如请求方法，URL，查询参数等。第二个&lt;code&gt;start_response&lt;/code&gt;顾名思义是开始响应的。现在，让我们尝试用&lt;code&gt;gunicorn&lt;/code&gt;运行此代码。对于&lt;code&gt;gunicorn&lt;/code&gt;安装和运行如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install gunicorn
gunicorn app:app
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一个&lt;code&gt;app&lt;/code&gt;是我们创建的文件，第二个&lt;code&gt;app&lt;/code&gt;是我们刚刚编写的函数的名称。如果一切都很好，您将在输出中看到如下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[2019-02-09 17:58:56 +0500] [30962] [INFO] Starting gunicorn 19.9.0
[2019-02-09 17:58:56 +0500] [30962] [INFO] Listening at: http://127.0.0.1:8000 (30962)
[2019-02-09 17:58:56 +0500] [30962] [INFO] Using worker: sync
[2019-02-09 17:58:56 +0500] [30966] [INFO] Booting worker with pid: 30966
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果您看到此内容，请打开浏览器并转到&lt;code&gt;http://localhost:8000&lt;/code&gt;。你应该看到我们的老朋友：&lt;code&gt;Hello, World!&lt;/code&gt;信息。真棒！&lt;/p&gt;
&lt;p&gt;现在，让我们将这个函数变成一个类，因为我们需要很多辅助方法，并且它们更容易在类中编写。创建一个&lt;code&gt;api.py&lt;/code&gt;文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch api.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在此文件中，创建以下&lt;code&gt;API&lt;/code&gt;类。我会解释一下它的作用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response_body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;200 OK&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;response_body&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，删除&lt;code&gt;app.py&lt;/code&gt;里面的所有内容并编写以下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重新启动&lt;code&gt;gunicorn&lt;/code&gt;并在浏览器中检查结果。它应该和以前一样，因为我们只是简单地将我们的&lt;code&gt;app&lt;/code&gt;函数改为一个被调用的类&lt;code&gt;API&lt;/code&gt;并在调用此类实例时覆盖它的&lt;code&gt;__call__&lt;/code&gt;方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app = API()
app()   #  this is where __call__ is called
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在我们创建了我们的类，我希望使代码更加优雅，因为所有这些字节（&lt;code&gt;b"Hello World"&lt;/code&gt;）和&lt;code&gt;start_response&lt;/code&gt;似乎让我感到困惑。值得庆幸的是，有一个名为&lt;a href="https://docs.pylonsproject.org/projects/webob/en/stable/index.html"&gt;WebOb&lt;/a&gt;的酷包，它通过包装&lt;code&gt;WSGI&lt;/code&gt;请求环境和响应状态，标题和正文来为HTTP请求和响应提供对象。通过使用这个包，我们可以通过此包中提供的类传递&lt;code&gt;environ&lt;/code&gt;和&lt;code&gt;start_response&lt;/code&gt;，而不必自己处理。在我们继续之前，我建议你看一下&lt;a href="https://docs.pylonsproject.org/projects/webob/en/stable/index.html"&gt;WebOb&lt;/a&gt;的&lt;a href="https://docs.pylonsproject.org/projects/webob/en/stable/index.html"&gt;文档&lt;/a&gt;来理解我在说什么以及&lt;code&gt;WebOb&lt;/code&gt;更多的API 。&lt;/p&gt;
&lt;p&gt;以下是我们将如何重构此代码。首先，安装&lt;code&gt;WebOb&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install webob
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在&lt;code&gt;api.py&lt;/code&gt;文件开头导入&lt;code&gt;Request&lt;/code&gt;和&lt;code&gt;Response&lt;/code&gt;类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在我们可以在&lt;code&gt;__call__&lt;/code&gt;方法中使用它们：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看起来好多了！重新启动&lt;code&gt;gunicorn&lt;/code&gt;，您应该看到与以前相同的结果。最好的部分是我不必解释这里正在做什么。这一切都是不言自明的。我们正在创建一个请求，一个响应，然后返回该响应。真棒！我必须注意到&lt;code&gt;request&lt;/code&gt;这里还没有使用，因为我们没有对它做任何事情。所以，让我们利用这个机会来使用请求对象。另外，让我们将&lt;code&gt;response&lt;/code&gt;创建重构为它自己的方法。我们稍后会看到为什么这么做会更好：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;user_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;HTTP_USER_AGENT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;No User Agent Found&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, my friend with this user agent: {user_agent}&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启你的&lt;code&gt;gunicorn&lt;/code&gt;，你应该在浏览器中看到这条新消息。你看见了吗？酷。我们继续。&lt;/p&gt;
&lt;p&gt;此时，我们以相同的方式处理所有请求。无论我们收到什么请求，我们只返回在&lt;code&gt;handle_request&lt;/code&gt;方法中创建的相同响应。最终，我们希望它是动态的。也就是说，我们希望提供的来自&lt;code&gt;/home/&lt;/code&gt;的请求不同于来自&lt;code&gt;/about/&lt;/code&gt;的。&lt;/p&gt;
&lt;p&gt;为此，在&lt;code&gt;app.py&lt;/code&gt;内部，让我们创建两个处理这两个请求的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;api.py&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello from the HOME page&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;about&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello from the ABOUT page&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，我们需要以某种方式将这两种方法与上述路径联系起来：&lt;code&gt;/home/&lt;/code&gt;和&lt;code&gt;/about/&lt;/code&gt;。我喜欢Flask的做法，看起来像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;api.py&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello from the HOME page&amp;quot;&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/about&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;about&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello from the ABOUT page&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你觉得怎么样？看起来不错？然后让我们实现这个bad boy吧！&lt;/p&gt;
&lt;p&gt;如您所见，该&lt;code&gt;route&lt;/code&gt;方法是一个装饰器，接受一个路径并包装方法。实施起来应该不会太难：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是我们在这里所做的。在该&lt;code&gt;__init__&lt;/code&gt;方法中，在被调用的&lt;code&gt;self.routes&lt;/code&gt;的地方我们简单地定义了一个&lt;code&gt;dict&lt;/code&gt;，我们将路径存储为键, 处理程序handlers作为值。它看起来像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1100a70c8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;/about&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1101a80c3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在该&lt;code&gt;route&lt;/code&gt;方法中，我们将路径作为参数，并且在装饰器方法中，只需将&lt;code&gt;self.routes&lt;/code&gt;路径作为键放在字典中，将处理程序作为值。&lt;/p&gt;
&lt;p&gt;在这一点上，我们有所有的拼图。我们有处理程序和与之关联的路径。现在，当一个请求进来时，我们需要检查它的&lt;code&gt;path&lt;/code&gt;，找到一个合适的处理程序，调用该处理程序并返回一个适当的响应。我们这样做：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不是太难了，是吗？我们简单地迭代&lt;code&gt;self.routes&lt;/code&gt;，将路径与请求的路径进行比较，如果存在匹配，则调用与该路径关联的处理程序。&lt;/p&gt;
&lt;p&gt;重新启动&lt;code&gt;gunicorn&lt;/code&gt;并在浏览器中尝试这些路径。首先，访问&lt;code&gt;http://localhost:8000/home/&lt;/code&gt;，然后去&lt;code&gt;http://localhost:8000/about/&lt;/code&gt;。您应该看到相应的消息。很酷，对吗？&lt;/p&gt;
&lt;p&gt;下一步，我们可以回答“如果找不到路径会怎么样？”的问题。让我们创建一个返回“Not found.”的简单HTTP响应的方法。状态代码为404：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not found.&amp;quot;&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，让我们在我们的&lt;code&gt;handle_request&lt;/code&gt;方法中使用它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重新启动&lt;code&gt;gunicorn&lt;/code&gt;并尝试一些不存在的路由。你应该看到这个可爱的“Not found.” 页。现在，为了便于阅读，让我们重构一下找到自己方法的处理程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就像之前一样，它只是迭代&lt;code&gt;self.route&lt;/code&gt;，将路径与请求路径进行比较，如果路径相同则返回对应处理程序。如果没有找到处理程序，则返回&lt;code&gt;None&lt;/code&gt;。现在，我们可以在我们的&lt;code&gt;handle_request&lt;/code&gt;方法中使用它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我认为它看起来好多了，并且非常容易解释。重启&lt;code&gt;gunicorn&lt;/code&gt;，看看一切都像以前一样有效。&lt;/p&gt;
&lt;p&gt;此时，我们有路由和处理程序。它非常棒，但我们的路径很简单。它们不支持url路径中的关键字参数。如果我们想拥有&lt;code&gt;@app.route("/hello/{person_name}")&lt;/code&gt;这条路径并且能够在我们的处理程序中使用&lt;code&gt;person_name&lt;/code&gt;这样的内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, {person_name}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为此，如果有人访问&lt;code&gt;/hello/Matthew/&lt;/code&gt;，我们需要能够将&lt;code&gt;/hello/{person_name}/&lt;/code&gt;路径与已注册的路径匹配并找到适当的处理程序。值得庆幸的是，已经有一个名为&lt;code&gt;parse&lt;/code&gt;的包正确地为我们做了。让我们继续安装它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install parse
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;让我们试一下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, {name}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, Matthew&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;named&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Matthew&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如您所见，它解析了字符串&lt;code&gt;Hello, Matthew&lt;/code&gt;，并能够识别出&lt;code&gt;Matthew&lt;/code&gt;是与我们提供的字符串&lt;code&gt;{name}&lt;/code&gt;相对应的字符串。&lt;/p&gt;
&lt;p&gt;让我们在我们的&lt;code&gt;find_handler&lt;/code&gt;方法中使用它，不仅可以找到与路径对应的方法，还可以找到提供的关键字参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;parse_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parse_result&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parse_result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;named&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们仍在迭代&lt;code&gt;self.routes&lt;/code&gt;，现在不是比较请求路径的路径，而是尝试解析它，如果有结果，我们将处理程序和关键字参数作为字典返回。现在，我们可以在&lt;code&gt;handle_request&lt;/code&gt;内部使用这个将这些参数传递给处理程序，如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;唯一的变化是，我们得到了两个&lt;code&gt;handler&lt;/code&gt;和&lt;code&gt;kwargs&lt;/code&gt;从&lt;code&gt;self.find_handler&lt;/code&gt;，并传递一个&lt;code&gt;kwargs&lt;/code&gt;像这样的处理&lt;code&gt;**kwargs&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;让我们用这种类型的路径编写一个处理程序并试一试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/hello/{name}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, {name}&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启你的&lt;code&gt;gunicorn&lt;/code&gt;访问&lt;code&gt;http://localhost:8000/hello/Matthew/&lt;/code&gt;。你应该有这个美妙的信息: &lt;code&gt;Hello, Matthew&lt;/code&gt;。太棒了吧？再添加几个这样的处理程序。您还可以指出给定参数的类型。例如，您可以将处理程序内的&lt;code&gt;@app.route("/tell/{age:d}")&lt;/code&gt;参数&lt;code&gt;age&lt;/code&gt;作为数字。&lt;/p&gt;
&lt;h2 id="_1"&gt;结论&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这是一个漫长的旅程，但我认为这很棒。我写这篇文章时亲自学到了很多东西。如果你喜欢这篇博文，请在评论中告诉我们我们应该在框架中实现的其他功能。我在考虑基于类的处理程序，支持模板和静态文件。&lt;/p&gt;
&lt;p&gt;Fight on!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 01 Mar 2019 14:44:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-01:/write-python-framework-part-one.html</guid><category>python</category><category>web框架</category></item></channel></rss>