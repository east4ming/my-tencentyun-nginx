<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>东风微鸣 Blog</title><link>https://www.EWhisper.cn/</link><description>Focus on Python/Java/DevOps/Observability</description><lastBuildDate>Tue, 19 Nov 2019 16:40:00 +0800</lastBuildDate><item><title>Spring Boot 微服务上容器平台的最佳实践 - 5</title><link>https://www.EWhisper.cn/spring-boot-on-k8s-5.html</link><description>&lt;p&gt;&lt;img alt="Spring+K8s" src="./images/spring_k8s.png"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今天开始第四篇, 主要介绍下 如何将配置外部化。&lt;/p&gt;
&lt;p&gt;这次没有用到&lt;em&gt;Spring&lt;/em&gt;的&lt;em&gt;Config Server&lt;/em&gt;, 而是使用&lt;em&gt;OpenShift&lt;/em&gt;的&lt;em&gt;ConfigMap&lt;/em&gt;作为参数外部化的方案.&lt;/p&gt;
&lt;h2 id="_2"&gt;参数外部化&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Presentation&lt;/em&gt; 服务在其应用程序属性中将&lt;em&gt;Hystrix&lt;/em&gt;配置为&lt;a href="https://github.com/RHsyseng/spring-boot-msa-ocp/blob/master/Presentation/src/main/resources/application.yml#L22"&gt;线程池&lt;/a&gt;大小为20。在航班搜索操作之后，通过搜索&lt;em&gt;presentation&lt;/em&gt; pod的日志来确认这一点，并验证batch size是相同的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc logs presentation-1-k2xlz &lt;span class="p"&gt;|&lt;/span&gt; grep batch
... c.r.r.o.b.l.p.s.API_GatewayController    : Will price a batch of &lt;span class="m"&gt;20&lt;/span&gt; 
tickets
... c.r.r.o.b.l.p.s.API_GatewayController    : Will price a batch of &lt;span class="m"&gt;13&lt;/span&gt; 
tickets
... c.r.r.o.b.l.p.s.API_GatewayController    : Will price a batch of &lt;span class="m"&gt;20&lt;/span&gt; 
tickets
... c.r.r.o.b.l.p.s.API_GatewayController    : Will price a batch of &lt;span class="m"&gt;13&lt;/span&gt; 
tickets
... c.r.r.o.b.l.p.s.API_GatewayController    : Will price a batch of &lt;span class="m"&gt;20&lt;/span&gt; 
tickets
... c.r.r.o.b.l.p.s.API_GatewayController    : Will price a batch of &lt;span class="m"&gt;13&lt;/span&gt; 
tickets
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;△ 当前batch size最大为&lt;strong&gt;20&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建一个新&lt;code&gt;application.yml&lt;/code&gt;文件. &lt;code&gt;vi application.yml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输入以下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;hystrix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;threadpool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;SalesThreads&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;coreSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;30&lt;/span&gt;
      &lt;span class="nt"&gt;maxQueueSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;300&lt;/span&gt;
      &lt;span class="nt"&gt;queueSizeRejectionThreshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;300&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过&lt;code&gt;oc&lt;/code&gt; 创建&lt;code&gt;configmap&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc create configmap presentation --from-file&lt;span class="o"&gt;=&lt;/span&gt;application.yml
configmap &lt;span class="s2"&gt;&amp;quot;presentation&amp;quot;&lt;/span&gt; created
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编辑&lt;em&gt;presentation&lt;/em&gt;的&lt;code&gt;deployment config&lt;/code&gt;并将这个ConfigMap挂载为卷， 路径为： &lt;code&gt;/deployment/config&lt;/code&gt;，它将自动成为Spring启动应用程序classpath的一部分.  &lt;code&gt;$ oc edit dc presentation&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加具有任意名称的新卷，例如&lt;code&gt;config-volume&lt;/code&gt;, 来引用前面创建的configmap。&lt;code&gt;volume&lt;/code&gt;定义是&lt;code&gt;template spec&lt;/code&gt;的一个子规范。接下来，在容器下面创建一个volume mount来引用这个卷，并指定应该挂载它的位置。最后的结果如下所示. (&lt;code&gt;volumeMounts&lt;/code&gt; -&amp;gt; &lt;code&gt;dnsPolicy&lt;/code&gt;之前)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;...&lt;/span&gt;
        &lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{}&lt;/span&gt;
        &lt;span class="nt"&gt;securityContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;privileged&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;
        &lt;span class="nt"&gt;terminationMessagePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/dev/termination-log&lt;/span&gt;
        &lt;span class="nt"&gt;volumeMounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;config-volume&lt;/span&gt;
          &lt;span class="nt"&gt;mountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/deployments/config&lt;/span&gt;
     &lt;span class=" -Error"&gt; &lt;/span&gt;&lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;config-volume&lt;/span&gt;
          &lt;span class="nt"&gt;configMap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;presentation&lt;/span&gt;
      &lt;span class="nt"&gt;dnsPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ClusterFirst&lt;/span&gt;
      &lt;span class="nt"&gt;restartPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Always&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一旦修改并保存了deployment config，OpenShift将部署包含覆盖属性的服务的新版本。这个更改是持久的，将来使用这个新版本的部署配置创建的pod也将挂载这个yaml文件。&lt;/p&gt;
&lt;p&gt;列出pod，并注意一个新的pod正在创建来反映部署配置(即挂载的文件)中的更改:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc get pods
NAME                       READY     STATUS      RESTARTS   AGE
airports-1-72kng           &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          18m
flights-1-4xkfv            &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          15m
presentation-1-k2xlz       &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          10m
presentation-2-deploy      &lt;span class="m"&gt;0&lt;/span&gt;/1       ContainerCreating   &lt;span class="m"&gt;0&lt;/span&gt;          3s
sales-1-fqxjd              &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          7m
salesv2-1-s1wq0            &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          5m
zipkin-1-k0dv6             &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          1h
zipkin-mysql-1-g44s7       &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          1h
zuul-1-2jkj0               &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          1m
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;等待，直到pod的第二个版本已经启动, 处于running状态。第一个版本将被终止，随后被删除.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc get pods
NAME                       READY     STATUS      RESTARTS   AGE
...
presentation-2-pxx85       &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          5m
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一旦发生这种情况，使用浏览器进行一次或多次航班搜索。然后通过搜索新的表示pod的日志来验证更新后的线程池大小，并验证batch size: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc logs presentation-2-pxx85 &lt;span class="p"&gt;|&lt;/span&gt; grep batch
... c.r.r.o.b.l.p.s.API_GatewayController    : Will price a batch of &lt;span class="m"&gt;30&lt;/span&gt; 
tickets
... c.r.r.o.b.l.p.s.API_GatewayController    : Will price a batch of &lt;span class="m"&gt;3&lt;/span&gt; 
tickets
... c.r.r.o.b.l.p.s.API_GatewayController    : Will price a batch of &lt;span class="m"&gt;30&lt;/span&gt; 
tickets
... c.r.r.o.b.l.p.s.API_GatewayController    : Will price a batch of &lt;span class="m"&gt;3&lt;/span&gt; 
tickets
... c.r.r.o.b.l.p.s.API_GatewayController    : Will price a batch of &lt;span class="m"&gt;30&lt;/span&gt; 
tickets
... c.r.r.o.b.l.p.s.API_GatewayController    : Will price a batch of &lt;span class="m"&gt;3&lt;/span&gt; 
tickets
... c.r.r.o.b.l.p.s.API_GatewayController    : Will price a batch of &lt;span class="m"&gt;30&lt;/span&gt; 
tickets
... c.r.r.o.b.l.p.s.API_GatewayController    : Will price a batch of &lt;span class="m"&gt;3&lt;/span&gt; 
tickets
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;△ 注意，使用挂载的覆盖属性时，定价将以30个并发批次进行，而不是现在的20个。&lt;/p&gt;
&lt;h2 id="_3"&gt;小结&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过K8S的&lt;em&gt;configmap&lt;/em&gt;的概念, 我们可以将配置参数外部化. 然后外部化的参数可以通过2种方式挂载到运行时中:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;环境变量 ENV&lt;/li&gt;
&lt;li&gt;Volume 挂载到指定路径.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还是比较灵活的.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 19 Nov 2019 16:40:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-11-19:/spring-boot-on-k8s-5.html</guid><category>spring boot</category><category>k8s</category><category>openshift</category><category>最佳实践</category><category>devops</category></item><item><title>Spring Boot 微服务上容器平台的最佳实践 - 4</title><link>https://www.EWhisper.cn/spring-boot-on-k8s-4.html</link><description>&lt;p&gt;&lt;img alt="Spring+K8s" src="./images/spring_k8s.png"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今天开始第四篇, 主要介绍下 几个微服务的部署. 介绍2种方法, 一种是分步的, 构建jar、打镜像、传到镜像库、K8S部署；另一种直接通过Maven + Farbic8 一气呵成。&lt;/p&gt;
&lt;h2 id="_2"&gt;微服务部署&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;微服务部署这里介绍2种方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Maven, Docker build, K8S 部署&lt;/li&gt;
&lt;li&gt;Maven Farbic8 直接部署到K8S&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果已有的maven编译等方式不希望改动, 且希望build和deploy分离, 则推荐用第一种方式;&lt;/p&gt;
&lt;p&gt;如果希望更快速高效, 全新的代码直接上K8S, 则推荐第二种方式.&lt;/p&gt;
&lt;p&gt;第二种 &lt;strong&gt;Maven Farbic8 直接部署到K8S&lt;/strong&gt; 部署方式的一些优点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参数, 变量, 配置可以全局应用. 如: 服务名....&lt;/li&gt;
&lt;li&gt;会检测&lt;code&gt;actuator&lt;/code&gt;, 并自动添加K8S Liveness和Readiness Probe&lt;/li&gt;
&lt;li&gt;可以添加icon到容器平台, 展示更友好;&lt;/li&gt;
&lt;li&gt;可以根据编译好的版本号等自动打镜像tag&lt;/li&gt;
&lt;li&gt;自动登录K8S或OpenShift平台;&lt;/li&gt;
&lt;li&gt;自动部署&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="maven-docker-build-k8s"&gt;Maven, Docker build, K8S 部署&lt;a class="headerlink" href="#maven-docker-build-k8s" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;细节就不介绍了, 说一下简要步骤.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Maven 构建为jar包&lt;/li&gt;
&lt;li&gt;写个Dockerfile, jar包通过docker build方式构建为docker镜像;&lt;/li&gt;
&lt;li&gt;将构建好的镜像打好tag, 如&lt;code&gt;snapshot-191114-111831-0702&lt;/code&gt;, push到镜像仓库.&lt;/li&gt;
&lt;li&gt;K8S 创建Deployment和Service和Ingress(或Route), 并引用镜像仓库中新的镜像tag, 并启动.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="maven-farbic8-k8s"&gt;Maven Farbic8 直接部署到K8S&lt;a class="headerlink" href="#maven-farbic8-k8s" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;要部署Spring启动服务，使用&lt;em&gt;Maven&lt;/em&gt;构建项目，使用&lt;em&gt;openshift&lt;/em&gt;配置文件的&lt;em&gt;fabric8:deploy&lt;/em&gt; target将构建的镜像部署到openshift。为了方便起见，在项目的根目录下提供了一个聚合器pom文件，它将同一个Maven构建委托给所有6个配置的模块.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mvn clean fabric8:deploy -Popenshift
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Scanning &lt;span class="k"&gt;for&lt;/span&gt; projects...
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; ---------------------------------------------------------------
---------
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Building Lambda Air &lt;span class="m"&gt;1&lt;/span&gt;.0-SNAPSHOT
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; ---------------------------------------------------------------
---------
...
...
...
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; --- fabric8-maven-plugin:3.5.30:deploy &lt;span class="o"&gt;(&lt;/span&gt;default-cli&lt;span class="o"&gt;)&lt;/span&gt; @ aggregation 
---
&lt;span class="o"&gt;[&lt;/span&gt;WARNING&lt;span class="o"&gt;]&lt;/span&gt; F8: No such generated manifest file 
/Users/bmozaffa/RedHatDrive/SysEng/Microservices/SpringBoot/SpringBootOCP/
LambdaAir/target/classes/META-INF/fabric8/openshift.yml &lt;span class="k"&gt;for&lt;/span&gt; this project 
so ignoring
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; ---------------------------------------------------------------
---------
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Reactor Summary:
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Lambda Air ......................................... SUCCESS &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;01&lt;/span&gt;:33 
min&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Lambda Air ......................................... SUCCESS &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;02&lt;/span&gt;:21 
min&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Lambda Air ......................................... SUCCESS &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;01&lt;/span&gt;:25 
min&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Lambda Air ......................................... SUCCESS &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;01&lt;/span&gt;:05 
min&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Lambda Air ......................................... SUCCESS &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;02&lt;/span&gt;:20 
min&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Lambda Air ......................................... SUCCESS &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;01&lt;/span&gt;:06 
min&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Lambda Air ......................................... SUCCESS &lt;span class="o"&gt;[&lt;/span&gt;  
&lt;span class="m"&gt;1&lt;/span&gt;.659 s&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; ---------------------------------------------------------------
---------
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; BUILD SUCCESS
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; ---------------------------------------------------------------
---------
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Total time: &lt;span class="m"&gt;09&lt;/span&gt;:55 min
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Finished at: &lt;span class="m"&gt;2017&lt;/span&gt;-12-08T16:03:12-08:00
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Final Memory: 67M/661M
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; ---------------------------------------------------------------
---------
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上是RedHat官方的做法: 用&lt;em&gt;fabric8&lt;/em&gt; maven插件, 直接将源代码打成镜像, 并推送到镜像仓库. 另外会直接访问OpenShift去创建相关的 &lt;em&gt;Deployment&lt;/em&gt;, &lt;em&gt;Service&lt;/em&gt;, &lt;em&gt;Route&lt;/em&gt;等. &lt;/p&gt;
&lt;h4&gt;Farbic8 详细解释&lt;/h4&gt;
&lt;p&gt;maven Farbic8:deploy 举一个 airports 的构建例子, 具体构建日志如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;运行于 K8S mode: &lt;code&gt;[INFO] F8: Running in Kubernetes mode&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;generator spring-boot. &lt;code&gt;[INFO] F8: Running generator spring-boot&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用Docker Image: &lt;code&gt;registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift&lt;/code&gt;作为基础镜像和构建镜像. &lt;code&gt;[INFO] F8: spring-boot: Using Docker image registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift as base / builder&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;Airports\src\main\fabric8&lt;/code&gt; resource templates, 里边包括&lt;code&gt;deployment.yml&lt;/code&gt;和&lt;code&gt;svc.yml&lt;/code&gt;. 用于创建OpenShift Deployment和Service. &lt;code&gt;[INFO] F8: using resource templates from D:\Projects\spring-boot-msa-ocp\Airports\src\main\fabric8&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于使用了spring-boot的&lt;code&gt;spring-boot-starter-actuator&lt;/code&gt;, 所以会自动加 Readiness Probe. &lt;code&gt;INFO] F8: spring-boot-health-check: Adding readiness probe on port 8080, path='/health', scheme='HTTP', with initial delay 10 seconds&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同理, 也加了Liveness Probe: &lt;code&gt;[INFO] F8: spring-boot-health-check: Adding liveness probe on port 8080, path='/health', scheme='HTTP', with initial delay 180 seconds&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;还能自动加icon到Deployment和Service: &lt;code&gt;[INFO] F8: f8-icon: Adding icon for deployment [INFO] F8: f8-icon: Adding icon for service&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找有没有OpenShift的 DeploymentConfig 的yaml文件, 没找到.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找有没有K8S的Deployment 的yaml文件, 没找到.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后就可以常规的编译, 生成spring-boot jar包: &lt;code&gt;airports-1.0-SNAPSHOT.jar&lt;/code&gt; 和 &lt;code&gt;airports-1.0-SNAPSHOT-exec.jar&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把&lt;code&gt;airports-1.0-SNAPSHOT-exec.jar&lt;/code&gt;拷贝到&lt;code&gt;target\docker\lambdaair\airports\snapshot-191114-101239-0722\build\maven&lt;/code&gt;目录: &lt;code&gt;[INFO] Copying files to D:\Projects\spring-boot-msa-ocp\Airports\target\docker\lambdaair\airports\snapshot-191114-101239-0722\build\maven&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后用&lt;code&gt;Dockerfile&lt;/code&gt; 执行&lt;code&gt;docker build&lt;/code&gt;, 其实很简单的:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dockerfile
FROM registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift
ENV JAVA_APP_DIR=/deployments
EXPOSE 8080 8778 9779
COPY maven /deployments/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后打上标签: &lt;code&gt;latest&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来连接K8S或OpenShift控制台. (我用的是OpenShift 4.2, farbic8好像不兼容, 认成了K8S了. K8S创建的是Deployment, OpenShift创建的是DeploymentConfig).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用Project: &lt;code&gt;lambdaair&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建SVC: &lt;code&gt;[INFO] Updated Service: \target\fabric8\applyJson\lambdaair\service-airports.json&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建Deployment: &lt;code&gt;[INFO] Updated Deployment: \target\fabric8\applyJson\lambdaair\deployment-airports.json&lt;/code&gt;. 这时候已经启动了Pod.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完成.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;fabric8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="mi"&gt;30&lt;/span&gt;:&lt;span class="nv"&gt;deploy&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;cli&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;install&lt;/span&gt; @ &lt;span class="nv"&gt;airports&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="mi"&gt;6&lt;/span&gt;:&lt;span class="nv"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;resources&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;airports&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Using&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;UTF-8&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;encoding&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;copy&lt;/span&gt; &lt;span class="nv"&gt;filtered&lt;/span&gt; &lt;span class="nv"&gt;resources&lt;/span&gt;.
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Copying&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;resources&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;fabric8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="mi"&gt;30&lt;/span&gt;:&lt;span class="nv"&gt;resource&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;airports&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;Running&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;Kubernetes&lt;/span&gt; &lt;span class="nv"&gt;mode&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;Running&lt;/span&gt; &lt;span class="nv"&gt;generator&lt;/span&gt; &lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;: &lt;span class="nv"&gt;Using&lt;/span&gt; &lt;span class="nv"&gt;Docker&lt;/span&gt; &lt;span class="nv"&gt;image&lt;/span&gt; &lt;span class="nv"&gt;registry&lt;/span&gt;.&lt;span class="nv"&gt;access&lt;/span&gt;.&lt;span class="nv"&gt;redhat&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;redhat&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;openjdk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;openjdk18&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;openshift&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;base&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;builder&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;using&lt;/span&gt; &lt;span class="nv"&gt;resource&lt;/span&gt; &lt;span class="nv"&gt;templates&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;src&lt;/span&gt;\&lt;span class="nv"&gt;main&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;health&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;check&lt;/span&gt;: &lt;span class="nv"&gt;Adding&lt;/span&gt; &lt;span class="nv"&gt;readiness&lt;/span&gt; &lt;span class="nv"&gt;probe&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;port&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;, &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;/health&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;HTTP&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;initial&lt;/span&gt; &lt;span class="nv"&gt;delay&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="nv"&gt;seconds&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;health&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;check&lt;/span&gt;: &lt;span class="nv"&gt;Adding&lt;/span&gt; &lt;span class="nv"&gt;liveness&lt;/span&gt; &lt;span class="nv"&gt;probe&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;port&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;, &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;/health&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;HTTP&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;initial&lt;/span&gt; &lt;span class="nv"&gt;delay&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt; &lt;span class="nv"&gt;seconds&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;fmp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;revision&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;history&lt;/span&gt;: &lt;span class="nv"&gt;Adding&lt;/span&gt; &lt;span class="nv"&gt;revision&lt;/span&gt; &lt;span class="nv"&gt;history&lt;/span&gt; &lt;span class="nv"&gt;limit&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;f8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;icon&lt;/span&gt;: &lt;span class="nv"&gt;Adding&lt;/span&gt; &lt;span class="nv"&gt;icon&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;deployment&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;f8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;icon&lt;/span&gt;: &lt;span class="nv"&gt;Adding&lt;/span&gt; &lt;span class="nv"&gt;icon&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;service&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;validating&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;classes&lt;/span&gt;\&lt;span class="nv"&gt;META&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;INF&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;\&lt;span class="nv"&gt;openshift&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;deploymentconfig&lt;/span&gt;.&lt;span class="nv"&gt;yml&lt;/span&gt; &lt;span class="nv"&gt;resource&lt;/span&gt;
[&lt;span class="nv"&gt;ERROR&lt;/span&gt;] &lt;span class="nv"&gt;Failed&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="nv"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;ConnectException&lt;/span&gt;: &lt;span class="nv"&gt;Connection&lt;/span&gt; &lt;span class="nv"&gt;timed&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;: &lt;span class="k"&gt;connect&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;DualStackPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;connect0&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Native&lt;/span&gt; &lt;span class="nv"&gt;Method&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;DualStackPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;socketConnect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DualStackPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;doConnect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;connectToAddress&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;206&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;188&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;PlainSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;PlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;172&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;SocksSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;SocksSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;392&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;Socket&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Socket&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;607&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;security&lt;/span&gt;.&lt;span class="nv"&gt;ssl&lt;/span&gt;.&lt;span class="nv"&gt;SSLSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;SSLSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;666&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;security&lt;/span&gt;.&lt;span class="nv"&gt;ssl&lt;/span&gt;.&lt;span class="nv"&gt;BaseSSLSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;BaseSSLSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;173&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;NetworkClient&lt;/span&gt;.&lt;span class="nv"&gt;doConnect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;NetworkClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpClient&lt;/span&gt;.&lt;span class="nv"&gt;openServer&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;463&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpClient&lt;/span&gt;.&lt;span class="nv"&gt;openServer&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;558&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;HttpsClient&lt;/span&gt;.&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;init&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpsClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;264&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;HttpsClient&lt;/span&gt;.&lt;span class="nv"&gt;New&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpsClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;367&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;getNewHttpClient&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;191&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;plainConnect0&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1162&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;plainConnect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1056&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;177&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;getInputStream0&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1570&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;getInputStream&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1498&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;HttpsURLConnectionImpl&lt;/span&gt;.&lt;span class="nv"&gt;getInputStream&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpsURLConnectionImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;268&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;URL&lt;/span&gt;.&lt;span class="nv"&gt;openStream&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;URL&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1067&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;com&lt;/span&gt;.&lt;span class="nv"&gt;networknt&lt;/span&gt;.&lt;span class="nv"&gt;schema&lt;/span&gt;.&lt;span class="nv"&gt;JsonSchemaFactory&lt;/span&gt;.&lt;span class="nv"&gt;getSchema&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;JsonSchemaFactory&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;core&lt;/span&gt;.&lt;span class="nv"&gt;util&lt;/span&gt;.&lt;span class="nv"&gt;validator&lt;/span&gt;.&lt;span class="nv"&gt;ResourceValidator&lt;/span&gt;.&lt;span class="nv"&gt;getJsonSchema&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ResourceValidator&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;156&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;core&lt;/span&gt;.&lt;span class="nv"&gt;util&lt;/span&gt;.&lt;span class="nv"&gt;validator&lt;/span&gt;.&lt;span class="nv"&gt;ResourceValidator&lt;/span&gt;.&lt;span class="nv"&gt;validate&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ResourceValidator&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;109&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;plugin&lt;/span&gt;.&lt;span class="nv"&gt;mojo&lt;/span&gt;.&lt;span class="nv"&gt;build&lt;/span&gt;.&lt;span class="nv"&gt;ResourceMojo&lt;/span&gt;.&lt;span class="nv"&gt;validateIfRequired&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ResourceMojo&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;286&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;plugin&lt;/span&gt;.&lt;span class="nv"&gt;mojo&lt;/span&gt;.&lt;span class="nv"&gt;build&lt;/span&gt;.&lt;span class="nv"&gt;ResourceMojo&lt;/span&gt;.&lt;span class="nv"&gt;executeInternal&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ResourceMojo&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;270&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;plugin&lt;/span&gt;.&lt;span class="nv"&gt;mojo&lt;/span&gt;.&lt;span class="nv"&gt;AbstractFabric8Mojo&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractFabric8Mojo&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;plugin&lt;/span&gt;.&lt;span class="nv"&gt;DefaultBuildPluginManager&lt;/span&gt;.&lt;span class="nv"&gt;executeMojo&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DefaultBuildPluginManager&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;137&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;210&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;156&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;executeForkedExecutions&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;355&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;156&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;LifecycleModuleBuilder&lt;/span&gt;.&lt;span class="nv"&gt;buildProject&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LifecycleModuleBuilder&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;117&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;LifecycleModuleBuilder&lt;/span&gt;.&lt;span class="nv"&gt;buildProject&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LifecycleModuleBuilder&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;builder&lt;/span&gt;.&lt;span class="nv"&gt;singlethreaded&lt;/span&gt;.&lt;span class="nv"&gt;SingleThreadedBuilder&lt;/span&gt;.&lt;span class="nv"&gt;build&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;SingleThreadedBuilder&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;LifecycleStarter&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LifecycleStarter&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;doExecute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;305&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;doExecute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;cli&lt;/span&gt;.&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;956&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;cli&lt;/span&gt;.&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;doMain&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;288&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;cli&lt;/span&gt;.&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;reflect&lt;/span&gt;.&lt;span class="nv"&gt;NativeMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;invoke0&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Native&lt;/span&gt; &lt;span class="nv"&gt;Method&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;reflect&lt;/span&gt;.&lt;span class="nv"&gt;NativeMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;NativeMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;reflect&lt;/span&gt;.&lt;span class="nv"&gt;DelegatingMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DelegatingMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;lang&lt;/span&gt;.&lt;span class="nv"&gt;reflect&lt;/span&gt;.&lt;span class="nv"&gt;Method&lt;/span&gt;.&lt;span class="nv"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Method&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;498&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;codehaus&lt;/span&gt;.&lt;span class="nv"&gt;plexus&lt;/span&gt;.&lt;span class="nv"&gt;classworlds&lt;/span&gt;.&lt;span class="nv"&gt;launcher&lt;/span&gt;.&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;launchEnhanced&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;282&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;codehaus&lt;/span&gt;.&lt;span class="nv"&gt;plexus&lt;/span&gt;.&lt;span class="nv"&gt;classworlds&lt;/span&gt;.&lt;span class="nv"&gt;launcher&lt;/span&gt;.&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;launch&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;225&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;codehaus&lt;/span&gt;.&lt;span class="nv"&gt;plexus&lt;/span&gt;.&lt;span class="nv"&gt;classworlds&lt;/span&gt;.&lt;span class="nv"&gt;launcher&lt;/span&gt;.&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;mainWithExitCode&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;406&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;codehaus&lt;/span&gt;.&lt;span class="nv"&gt;plexus&lt;/span&gt;.&lt;span class="nv"&gt;classworlds&lt;/span&gt;.&lt;span class="nv"&gt;launcher&lt;/span&gt;.&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;347&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
[&lt;span class="nv"&gt;WARNING&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;Failed&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;validate&lt;/span&gt; &lt;span class="nv"&gt;resources&lt;/span&gt;: &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;ConnectException&lt;/span&gt;: &lt;span class="nv"&gt;Connection&lt;/span&gt; &lt;span class="nv"&gt;timed&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;: &lt;span class="k"&gt;connect&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;validating&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;classes&lt;/span&gt;\&lt;span class="nv"&gt;META&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;INF&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;\&lt;span class="nv"&gt;kubernetes&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;deployment&lt;/span&gt;.&lt;span class="nv"&gt;yml&lt;/span&gt; &lt;span class="nv"&gt;resource&lt;/span&gt;
[&lt;span class="nv"&gt;ERROR&lt;/span&gt;] &lt;span class="nv"&gt;Failed&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="nv"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;ConnectException&lt;/span&gt;: &lt;span class="nv"&gt;Connection&lt;/span&gt; &lt;span class="nv"&gt;timed&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;: &lt;span class="k"&gt;connect&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;DualStackPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;connect0&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Native&lt;/span&gt; &lt;span class="nv"&gt;Method&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;DualStackPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;socketConnect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DualStackPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;doConnect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;connectToAddress&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;206&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;188&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;PlainSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;PlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;172&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;SocksSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;SocksSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;392&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;Socket&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Socket&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;607&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;security&lt;/span&gt;.&lt;span class="nv"&gt;ssl&lt;/span&gt;.&lt;span class="nv"&gt;SSLSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;SSLSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;666&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;security&lt;/span&gt;.&lt;span class="nv"&gt;ssl&lt;/span&gt;.&lt;span class="nv"&gt;BaseSSLSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;BaseSSLSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;173&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;NetworkClient&lt;/span&gt;.&lt;span class="nv"&gt;doConnect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;NetworkClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpClient&lt;/span&gt;.&lt;span class="nv"&gt;openServer&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;463&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpClient&lt;/span&gt;.&lt;span class="nv"&gt;openServer&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;558&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;HttpsClient&lt;/span&gt;.&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;init&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpsClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;264&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;HttpsClient&lt;/span&gt;.&lt;span class="nv"&gt;New&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpsClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;367&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;getNewHttpClient&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;191&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;plainConnect0&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1162&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;plainConnect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1056&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;177&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;getInputStream0&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1570&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;getInputStream&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1498&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;HttpsURLConnectionImpl&lt;/span&gt;.&lt;span class="nv"&gt;getInputStream&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpsURLConnectionImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;268&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;URL&lt;/span&gt;.&lt;span class="nv"&gt;openStream&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;URL&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1067&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;com&lt;/span&gt;.&lt;span class="nv"&gt;networknt&lt;/span&gt;.&lt;span class="nv"&gt;schema&lt;/span&gt;.&lt;span class="nv"&gt;JsonSchemaFactory&lt;/span&gt;.&lt;span class="nv"&gt;getSchema&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;JsonSchemaFactory&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;core&lt;/span&gt;.&lt;span class="nv"&gt;util&lt;/span&gt;.&lt;span class="nv"&gt;validator&lt;/span&gt;.&lt;span class="nv"&gt;ResourceValidator&lt;/span&gt;.&lt;span class="nv"&gt;getJsonSchema&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ResourceValidator&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;156&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;core&lt;/span&gt;.&lt;span class="nv"&gt;util&lt;/span&gt;.&lt;span class="nv"&gt;validator&lt;/span&gt;.&lt;span class="nv"&gt;ResourceValidator&lt;/span&gt;.&lt;span class="nv"&gt;validate&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ResourceValidator&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;109&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;plugin&lt;/span&gt;.&lt;span class="nv"&gt;mojo&lt;/span&gt;.&lt;span class="nv"&gt;build&lt;/span&gt;.&lt;span class="nv"&gt;ResourceMojo&lt;/span&gt;.&lt;span class="nv"&gt;validateIfRequired&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ResourceMojo&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;286&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;plugin&lt;/span&gt;.&lt;span class="nv"&gt;mojo&lt;/span&gt;.&lt;span class="nv"&gt;build&lt;/span&gt;.&lt;span class="nv"&gt;ResourceMojo&lt;/span&gt;.&lt;span class="nv"&gt;executeInternal&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ResourceMojo&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;276&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;plugin&lt;/span&gt;.&lt;span class="nv"&gt;mojo&lt;/span&gt;.&lt;span class="nv"&gt;AbstractFabric8Mojo&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractFabric8Mojo&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;plugin&lt;/span&gt;.&lt;span class="nv"&gt;DefaultBuildPluginManager&lt;/span&gt;.&lt;span class="nv"&gt;executeMojo&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DefaultBuildPluginManager&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;137&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;210&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;156&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;executeForkedExecutions&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;355&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;156&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;LifecycleModuleBuilder&lt;/span&gt;.&lt;span class="nv"&gt;buildProject&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LifecycleModuleBuilder&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;117&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;LifecycleModuleBuilder&lt;/span&gt;.&lt;span class="nv"&gt;buildProject&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LifecycleModuleBuilder&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;builder&lt;/span&gt;.&lt;span class="nv"&gt;singlethreaded&lt;/span&gt;.&lt;span class="nv"&gt;SingleThreadedBuilder&lt;/span&gt;.&lt;span class="nv"&gt;build&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;SingleThreadedBuilder&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;LifecycleStarter&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LifecycleStarter&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;doExecute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;305&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;doExecute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;cli&lt;/span&gt;.&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;956&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;cli&lt;/span&gt;.&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;doMain&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;288&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;cli&lt;/span&gt;.&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;reflect&lt;/span&gt;.&lt;span class="nv"&gt;NativeMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;invoke0&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Native&lt;/span&gt; &lt;span class="nv"&gt;Method&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;reflect&lt;/span&gt;.&lt;span class="nv"&gt;NativeMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;NativeMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;reflect&lt;/span&gt;.&lt;span class="nv"&gt;DelegatingMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DelegatingMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;lang&lt;/span&gt;.&lt;span class="nv"&gt;reflect&lt;/span&gt;.&lt;span class="nv"&gt;Method&lt;/span&gt;.&lt;span class="nv"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Method&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;498&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;codehaus&lt;/span&gt;.&lt;span class="nv"&gt;plexus&lt;/span&gt;.&lt;span class="nv"&gt;classworlds&lt;/span&gt;.&lt;span class="nv"&gt;launcher&lt;/span&gt;.&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;launchEnhanced&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;282&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;codehaus&lt;/span&gt;.&lt;span class="nv"&gt;plexus&lt;/span&gt;.&lt;span class="nv"&gt;classworlds&lt;/span&gt;.&lt;span class="nv"&gt;launcher&lt;/span&gt;.&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;launch&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;225&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;codehaus&lt;/span&gt;.&lt;span class="nv"&gt;plexus&lt;/span&gt;.&lt;span class="nv"&gt;classworlds&lt;/span&gt;.&lt;span class="nv"&gt;launcher&lt;/span&gt;.&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;mainWithExitCode&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;406&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;codehaus&lt;/span&gt;.&lt;span class="nv"&gt;plexus&lt;/span&gt;.&lt;span class="nv"&gt;classworlds&lt;/span&gt;.&lt;span class="nv"&gt;launcher&lt;/span&gt;.&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;347&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
[&lt;span class="nv"&gt;WARNING&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;Failed&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;validate&lt;/span&gt; &lt;span class="nv"&gt;resources&lt;/span&gt;: &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;ConnectException&lt;/span&gt;: &lt;span class="nv"&gt;Connection&lt;/span&gt; &lt;span class="nv"&gt;timed&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;: &lt;span class="k"&gt;connect&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="mi"&gt;6&lt;/span&gt;.&lt;span class="mi"&gt;1&lt;/span&gt;:&lt;span class="nv"&gt;compile&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;compile&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;airports&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Changes&lt;/span&gt; &lt;span class="nv"&gt;detected&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;recompiling&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;module&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Compiling&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="nv"&gt;source&lt;/span&gt; &lt;span class="nv"&gt;files&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;classes&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="mi"&gt;6&lt;/span&gt;:&lt;span class="nv"&gt;testResources&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;testResources&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;airports&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Using&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;UTF-8&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;encoding&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;copy&lt;/span&gt; &lt;span class="nv"&gt;filtered&lt;/span&gt; &lt;span class="nv"&gt;resources&lt;/span&gt;.
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;skip&lt;/span&gt; &lt;span class="nv"&gt;non&lt;/span&gt; &lt;span class="nv"&gt;existing&lt;/span&gt; &lt;span class="nv"&gt;resourceDirectory&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;src&lt;/span&gt;\&lt;span class="nv"&gt;test&lt;/span&gt;\&lt;span class="nv"&gt;resources&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="mi"&gt;6&lt;/span&gt;.&lt;span class="mi"&gt;1&lt;/span&gt;:&lt;span class="nv"&gt;testCompile&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;testCompile&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;airports&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;No&lt;/span&gt; &lt;span class="nv"&gt;sources&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;compile&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;surefire&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="mi"&gt;12&lt;/span&gt;.&lt;span class="mi"&gt;4&lt;/span&gt;:&lt;span class="nv"&gt;test&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;airports&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;No&lt;/span&gt; &lt;span class="nv"&gt;tests&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;run&lt;/span&gt;.
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="mi"&gt;4&lt;/span&gt;:&lt;span class="nv"&gt;jar&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;jar&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;airports&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Building&lt;/span&gt; &lt;span class="nv"&gt;jar&lt;/span&gt;: &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;.&lt;span class="nv"&gt;jar&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="mi"&gt;8&lt;/span&gt;.&lt;span class="nv"&gt;RELEASE&lt;/span&gt;:&lt;span class="nv"&gt;repackage&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;airports&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Attaching&lt;/span&gt; &lt;span class="nv"&gt;archive&lt;/span&gt;: &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;.&lt;span class="nv"&gt;jar&lt;/span&gt;, &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;classifier&lt;/span&gt;: &lt;span class="k"&gt;exec&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;fabric8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="mi"&gt;30&lt;/span&gt;:&lt;span class="nv"&gt;build&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;airports&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;Building&lt;/span&gt; &lt;span class="nv"&gt;Docker&lt;/span&gt; &lt;span class="nv"&gt;image&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;Kubernetes&lt;/span&gt; &lt;span class="nv"&gt;mode&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;Running&lt;/span&gt; &lt;span class="nv"&gt;generator&lt;/span&gt; &lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;: &lt;span class="nv"&gt;Using&lt;/span&gt; &lt;span class="nv"&gt;Docker&lt;/span&gt; &lt;span class="nv"&gt;image&lt;/span&gt; &lt;span class="nv"&gt;registry&lt;/span&gt;.&lt;span class="nv"&gt;access&lt;/span&gt;.&lt;span class="nv"&gt;redhat&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;redhat&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;openjdk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;openjdk18&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;openshift&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;base&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;builder&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Copying&lt;/span&gt; &lt;span class="nv"&gt;files&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;docker&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;\&lt;span class="nv"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;191114&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;101239&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0722&lt;/span&gt;\&lt;span class="nv"&gt;build&lt;/span&gt;\&lt;span class="nv"&gt;maven&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Building&lt;/span&gt; &lt;span class="nv"&gt;tar&lt;/span&gt;: &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;docker&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;\&lt;span class="nv"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;191114&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;101239&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0722&lt;/span&gt;\&lt;span class="nv"&gt;tmp&lt;/span&gt;\&lt;span class="nv"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;build&lt;/span&gt;.&lt;span class="nv"&gt;tar&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: [&lt;span class="nv"&gt;lambdaair&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;airports&lt;/span&gt;:&lt;span class="nv"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;191114&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;101239&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0722&lt;/span&gt;] &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;spring-boot&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;Created&lt;/span&gt; &lt;span class="nv"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;build&lt;/span&gt;.&lt;span class="nv"&gt;tar&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;142&lt;/span&gt; &lt;span class="nv"&gt;milliseconds&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: [&lt;span class="nv"&gt;lambdaair&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;airports&lt;/span&gt;:&lt;span class="nv"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;191114&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;101239&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0722&lt;/span&gt;] &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;spring-boot&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;Built&lt;/span&gt; &lt;span class="nv"&gt;image&lt;/span&gt; &lt;span class="nv"&gt;sha256&lt;/span&gt;:&lt;span class="nv"&gt;f13a7&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: [&lt;span class="nv"&gt;lambdaair&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;airports&lt;/span&gt;:&lt;span class="nv"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;191114&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;101239&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0722&lt;/span&gt;] &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;spring-boot&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;Tag&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;latest&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;install&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="mi"&gt;4&lt;/span&gt;:&lt;span class="nv"&gt;install&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;install&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;airports&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Installing&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;.&lt;span class="nv"&gt;jar&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;:\&lt;span class="nv"&gt;Users&lt;/span&gt;\&lt;span class="mi"&gt;8000619804&lt;/span&gt;\.&lt;span class="nv"&gt;m2&lt;/span&gt;\&lt;span class="nv"&gt;repository&lt;/span&gt;\&lt;span class="nv"&gt;com&lt;/span&gt;\&lt;span class="nv"&gt;redhat&lt;/span&gt;\&lt;span class="nv"&gt;refarch&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;\&lt;span class="nv"&gt;boot&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;\&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;.&lt;span class="nv"&gt;jar&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Installing&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;pom&lt;/span&gt;.&lt;span class="nv"&gt;xml&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;:\&lt;span class="nv"&gt;Users&lt;/span&gt;\&lt;span class="mi"&gt;8000619804&lt;/span&gt;\.&lt;span class="nv"&gt;m2&lt;/span&gt;\&lt;span class="nv"&gt;repository&lt;/span&gt;\&lt;span class="nv"&gt;com&lt;/span&gt;\&lt;span class="nv"&gt;redhat&lt;/span&gt;\&lt;span class="nv"&gt;refarch&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;\&lt;span class="nv"&gt;boot&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;\&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;.&lt;span class="nv"&gt;pom&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Installing&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;classes&lt;/span&gt;\&lt;span class="nv"&gt;META&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;INF&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;\&lt;span class="nv"&gt;openshift&lt;/span&gt;.&lt;span class="nv"&gt;yml&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;:\&lt;span class="nv"&gt;Users&lt;/span&gt;\&lt;span class="mi"&gt;8000619804&lt;/span&gt;\.&lt;span class="nv"&gt;m2&lt;/span&gt;\&lt;span class="nv"&gt;repository&lt;/span&gt;\&lt;span class="nv"&gt;com&lt;/span&gt;\&lt;span class="nv"&gt;redhat&lt;/span&gt;\&lt;span class="nv"&gt;refarch&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;\&lt;span class="nv"&gt;boot&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;\&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;openshift&lt;/span&gt;.&lt;span class="nv"&gt;yml&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Installing&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;classes&lt;/span&gt;\&lt;span class="nv"&gt;META&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;INF&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;\&lt;span class="nv"&gt;openshift&lt;/span&gt;.&lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;:\&lt;span class="nv"&gt;Users&lt;/span&gt;\&lt;span class="mi"&gt;8000619804&lt;/span&gt;\.&lt;span class="nv"&gt;m2&lt;/span&gt;\&lt;span class="nv"&gt;repository&lt;/span&gt;\&lt;span class="nv"&gt;com&lt;/span&gt;\&lt;span class="nv"&gt;redhat&lt;/span&gt;\&lt;span class="nv"&gt;refarch&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;\&lt;span class="nv"&gt;boot&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;\&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;openshift&lt;/span&gt;.&lt;span class="nv"&gt;json&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Installing&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;classes&lt;/span&gt;\&lt;span class="nv"&gt;META&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;INF&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;\&lt;span class="nv"&gt;kubernetes&lt;/span&gt;.&lt;span class="nv"&gt;yml&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;:\&lt;span class="nv"&gt;Users&lt;/span&gt;\&lt;span class="mi"&gt;8000619804&lt;/span&gt;\.&lt;span class="nv"&gt;m2&lt;/span&gt;\&lt;span class="nv"&gt;repository&lt;/span&gt;\&lt;span class="nv"&gt;com&lt;/span&gt;\&lt;span class="nv"&gt;redhat&lt;/span&gt;\&lt;span class="nv"&gt;refarch&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;\&lt;span class="nv"&gt;boot&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;\&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;kubernetes&lt;/span&gt;.&lt;span class="nv"&gt;yml&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Installing&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;classes&lt;/span&gt;\&lt;span class="nv"&gt;META&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;INF&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;\&lt;span class="nv"&gt;kubernetes&lt;/span&gt;.&lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;:\&lt;span class="nv"&gt;Users&lt;/span&gt;\&lt;span class="mi"&gt;8000619804&lt;/span&gt;\.&lt;span class="nv"&gt;m2&lt;/span&gt;\&lt;span class="nv"&gt;repository&lt;/span&gt;\&lt;span class="nv"&gt;com&lt;/span&gt;\&lt;span class="nv"&gt;redhat&lt;/span&gt;\&lt;span class="nv"&gt;refarch&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;\&lt;span class="nv"&gt;boot&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;\&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;kubernetes&lt;/span&gt;.&lt;span class="nv"&gt;json&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Installing&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;.&lt;span class="nv"&gt;jar&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;:\&lt;span class="nv"&gt;Users&lt;/span&gt;\&lt;span class="mi"&gt;8000619804&lt;/span&gt;\.&lt;span class="nv"&gt;m2&lt;/span&gt;\&lt;span class="nv"&gt;repository&lt;/span&gt;\&lt;span class="nv"&gt;com&lt;/span&gt;\&lt;span class="nv"&gt;redhat&lt;/span&gt;\&lt;span class="nv"&gt;refarch&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;\&lt;span class="nv"&gt;boot&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;\&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;\&lt;span class="nv"&gt;airports&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;.&lt;span class="nv"&gt;jar&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;fabric8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="mi"&gt;30&lt;/span&gt;:&lt;span class="nv"&gt;deploy&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;cli&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;install&lt;/span&gt; @ &lt;span class="nv"&gt;airports&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;fabric8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="mi"&gt;30&lt;/span&gt;:&lt;span class="nv"&gt;deploy&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;cli&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;airports&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;Using&lt;/span&gt; &lt;span class="nv"&gt;Kubernetes&lt;/span&gt; &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;https&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;api&lt;/span&gt;.&lt;span class="nv"&gt;cce&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;.&lt;span class="nv"&gt;ccic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt;.&lt;span class="nv"&gt;cn&lt;/span&gt;:&lt;span class="mi"&gt;6443&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;namespace&lt;/span&gt; &lt;span class="nv"&gt;lambdaair&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;manifest&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Airports&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;classes&lt;/span&gt;\&lt;span class="nv"&gt;META&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;INF&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;\&lt;span class="nv"&gt;kubernetes&lt;/span&gt;.&lt;span class="nv"&gt;yml&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Using&lt;/span&gt; &lt;span class="nv"&gt;project&lt;/span&gt;: &lt;span class="nv"&gt;lambdaair&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Updating&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;Service&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;kubernetes&lt;/span&gt;.&lt;span class="nv"&gt;yml&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Updated&lt;/span&gt; &lt;span class="nv"&gt;Service&lt;/span&gt;: \&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;\&lt;span class="nv"&gt;applyJson&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;service&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;airports&lt;/span&gt;.&lt;span class="nv"&gt;json&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Using&lt;/span&gt; &lt;span class="nv"&gt;project&lt;/span&gt;: &lt;span class="nv"&gt;lambdaair&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Updating&lt;/span&gt; &lt;span class="nv"&gt;Deployment&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;kubernetes&lt;/span&gt;.&lt;span class="nv"&gt;yml&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Updated&lt;/span&gt; &lt;span class="nv"&gt;Deployment&lt;/span&gt;: \&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;\&lt;span class="nv"&gt;applyJson&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;deployment&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;airports&lt;/span&gt;.&lt;span class="nv"&gt;json&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;HINT&lt;/span&gt;: &lt;span class="nv"&gt;Use&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;command&lt;/span&gt; `&lt;span class="nv"&gt;kubectl&lt;/span&gt; &lt;span class="nv"&gt;get&lt;/span&gt; &lt;span class="nv"&gt;pods&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;w&lt;/span&gt;` &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;watch&lt;/span&gt; &lt;span class="nv"&gt;your&lt;/span&gt; &lt;span class="nv"&gt;pods&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="nv"&gt;up&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;----------&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;com&lt;/span&gt;.&lt;span class="nv"&gt;redhat&lt;/span&gt;.&lt;span class="nv"&gt;refarch&lt;/span&gt;.&lt;span class="nv"&gt;spring&lt;/span&gt;.&lt;span class="nv"&gt;boot&lt;/span&gt;.&lt;span class="nv"&gt;lambdaair&lt;/span&gt;:&lt;span class="nv"&gt;flights&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;----------&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Building&lt;/span&gt; &lt;span class="nv"&gt;Lambda&lt;/span&gt; &lt;span class="nv"&gt;Air&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;                                   [&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;--------------------------------&lt;/span&gt;[ &lt;span class="nv"&gt;jar&lt;/span&gt; ]&lt;span class="o"&gt;---------------------------------&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="mi"&gt;5&lt;/span&gt;:&lt;span class="nv"&gt;clean&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;clean&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;flights&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Deleting&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;fabric8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="mi"&gt;30&lt;/span&gt;:&lt;span class="nv"&gt;deploy&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;cli&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;install&lt;/span&gt; @ &lt;span class="nv"&gt;flights&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="mi"&gt;6&lt;/span&gt;:&lt;span class="nv"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;resources&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;flights&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Using&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;UTF-8&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;encoding&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;copy&lt;/span&gt; &lt;span class="nv"&gt;filtered&lt;/span&gt; &lt;span class="nv"&gt;resources&lt;/span&gt;.
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Copying&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;resources&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;fabric8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="mi"&gt;30&lt;/span&gt;:&lt;span class="nv"&gt;resource&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;flights&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;Running&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;Kubernetes&lt;/span&gt; &lt;span class="nv"&gt;mode&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;Running&lt;/span&gt; &lt;span class="nv"&gt;generator&lt;/span&gt; &lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;: &lt;span class="nv"&gt;Using&lt;/span&gt; &lt;span class="nv"&gt;Docker&lt;/span&gt; &lt;span class="nv"&gt;image&lt;/span&gt; &lt;span class="nv"&gt;registry&lt;/span&gt;.&lt;span class="nv"&gt;access&lt;/span&gt;.&lt;span class="nv"&gt;redhat&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;redhat&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;openjdk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;openjdk18&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;openshift&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;base&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;builder&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;using&lt;/span&gt; &lt;span class="nv"&gt;resource&lt;/span&gt; &lt;span class="nv"&gt;templates&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;src&lt;/span&gt;\&lt;span class="nv"&gt;main&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;health&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;check&lt;/span&gt;: &lt;span class="nv"&gt;Adding&lt;/span&gt; &lt;span class="nv"&gt;readiness&lt;/span&gt; &lt;span class="nv"&gt;probe&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;port&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;, &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;/health&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;HTTP&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;initial&lt;/span&gt; &lt;span class="nv"&gt;delay&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="nv"&gt;seconds&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;health&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;check&lt;/span&gt;: &lt;span class="nv"&gt;Adding&lt;/span&gt; &lt;span class="nv"&gt;liveness&lt;/span&gt; &lt;span class="nv"&gt;probe&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;port&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;, &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;/health&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;HTTP&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;initial&lt;/span&gt; &lt;span class="nv"&gt;delay&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt; &lt;span class="nv"&gt;seconds&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;fmp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;revision&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;history&lt;/span&gt;: &lt;span class="nv"&gt;Adding&lt;/span&gt; &lt;span class="nv"&gt;revision&lt;/span&gt; &lt;span class="nv"&gt;history&lt;/span&gt; &lt;span class="nv"&gt;limit&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;f8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;icon&lt;/span&gt;: &lt;span class="nv"&gt;Adding&lt;/span&gt; &lt;span class="nv"&gt;icon&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;deployment&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;f8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;icon&lt;/span&gt;: &lt;span class="nv"&gt;Adding&lt;/span&gt; &lt;span class="nv"&gt;icon&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;service&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;validating&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;classes&lt;/span&gt;\&lt;span class="nv"&gt;META&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;INF&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;\&lt;span class="nv"&gt;openshift&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;deploymentconfig&lt;/span&gt;.&lt;span class="nv"&gt;yml&lt;/span&gt; &lt;span class="nv"&gt;resource&lt;/span&gt;
[&lt;span class="nv"&gt;ERROR&lt;/span&gt;] &lt;span class="nv"&gt;Failed&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="nv"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;ConnectException&lt;/span&gt;: &lt;span class="nv"&gt;Connection&lt;/span&gt; &lt;span class="nv"&gt;timed&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;: &lt;span class="k"&gt;connect&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;DualStackPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;connect0&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Native&lt;/span&gt; &lt;span class="nv"&gt;Method&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;DualStackPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;socketConnect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DualStackPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;doConnect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;connectToAddress&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;206&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;188&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;PlainSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;PlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;172&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;SocksSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;SocksSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;392&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;Socket&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Socket&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;607&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;security&lt;/span&gt;.&lt;span class="nv"&gt;ssl&lt;/span&gt;.&lt;span class="nv"&gt;SSLSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;SSLSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;666&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;security&lt;/span&gt;.&lt;span class="nv"&gt;ssl&lt;/span&gt;.&lt;span class="nv"&gt;BaseSSLSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;BaseSSLSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;173&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;NetworkClient&lt;/span&gt;.&lt;span class="nv"&gt;doConnect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;NetworkClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpClient&lt;/span&gt;.&lt;span class="nv"&gt;openServer&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;463&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpClient&lt;/span&gt;.&lt;span class="nv"&gt;openServer&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;558&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;HttpsClient&lt;/span&gt;.&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;init&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpsClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;264&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;HttpsClient&lt;/span&gt;.&lt;span class="nv"&gt;New&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpsClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;367&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;getNewHttpClient&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;191&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;plainConnect0&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1162&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;plainConnect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1056&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;177&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;getInputStream0&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1570&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;getInputStream&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1498&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;HttpsURLConnectionImpl&lt;/span&gt;.&lt;span class="nv"&gt;getInputStream&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpsURLConnectionImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;268&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;URL&lt;/span&gt;.&lt;span class="nv"&gt;openStream&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;URL&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1067&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;com&lt;/span&gt;.&lt;span class="nv"&gt;networknt&lt;/span&gt;.&lt;span class="nv"&gt;schema&lt;/span&gt;.&lt;span class="nv"&gt;JsonSchemaFactory&lt;/span&gt;.&lt;span class="nv"&gt;getSchema&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;JsonSchemaFactory&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;core&lt;/span&gt;.&lt;span class="nv"&gt;util&lt;/span&gt;.&lt;span class="nv"&gt;validator&lt;/span&gt;.&lt;span class="nv"&gt;ResourceValidator&lt;/span&gt;.&lt;span class="nv"&gt;getJsonSchema&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ResourceValidator&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;156&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;core&lt;/span&gt;.&lt;span class="nv"&gt;util&lt;/span&gt;.&lt;span class="nv"&gt;validator&lt;/span&gt;.&lt;span class="nv"&gt;ResourceValidator&lt;/span&gt;.&lt;span class="nv"&gt;validate&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ResourceValidator&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;109&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;plugin&lt;/span&gt;.&lt;span class="nv"&gt;mojo&lt;/span&gt;.&lt;span class="nv"&gt;build&lt;/span&gt;.&lt;span class="nv"&gt;ResourceMojo&lt;/span&gt;.&lt;span class="nv"&gt;validateIfRequired&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ResourceMojo&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;286&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;plugin&lt;/span&gt;.&lt;span class="nv"&gt;mojo&lt;/span&gt;.&lt;span class="nv"&gt;build&lt;/span&gt;.&lt;span class="nv"&gt;ResourceMojo&lt;/span&gt;.&lt;span class="nv"&gt;executeInternal&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ResourceMojo&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;270&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;plugin&lt;/span&gt;.&lt;span class="nv"&gt;mojo&lt;/span&gt;.&lt;span class="nv"&gt;AbstractFabric8Mojo&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractFabric8Mojo&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;plugin&lt;/span&gt;.&lt;span class="nv"&gt;DefaultBuildPluginManager&lt;/span&gt;.&lt;span class="nv"&gt;executeMojo&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DefaultBuildPluginManager&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;137&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;210&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;156&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;executeForkedExecutions&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;355&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;156&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;LifecycleModuleBuilder&lt;/span&gt;.&lt;span class="nv"&gt;buildProject&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LifecycleModuleBuilder&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;117&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;LifecycleModuleBuilder&lt;/span&gt;.&lt;span class="nv"&gt;buildProject&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LifecycleModuleBuilder&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;builder&lt;/span&gt;.&lt;span class="nv"&gt;singlethreaded&lt;/span&gt;.&lt;span class="nv"&gt;SingleThreadedBuilder&lt;/span&gt;.&lt;span class="nv"&gt;build&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;SingleThreadedBuilder&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;LifecycleStarter&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LifecycleStarter&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;doExecute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;305&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;doExecute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;cli&lt;/span&gt;.&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;956&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;cli&lt;/span&gt;.&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;doMain&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;288&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;cli&lt;/span&gt;.&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;reflect&lt;/span&gt;.&lt;span class="nv"&gt;NativeMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;invoke0&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Native&lt;/span&gt; &lt;span class="nv"&gt;Method&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;reflect&lt;/span&gt;.&lt;span class="nv"&gt;NativeMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;NativeMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;reflect&lt;/span&gt;.&lt;span class="nv"&gt;DelegatingMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DelegatingMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;lang&lt;/span&gt;.&lt;span class="nv"&gt;reflect&lt;/span&gt;.&lt;span class="nv"&gt;Method&lt;/span&gt;.&lt;span class="nv"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Method&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;498&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;codehaus&lt;/span&gt;.&lt;span class="nv"&gt;plexus&lt;/span&gt;.&lt;span class="nv"&gt;classworlds&lt;/span&gt;.&lt;span class="nv"&gt;launcher&lt;/span&gt;.&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;launchEnhanced&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;282&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;codehaus&lt;/span&gt;.&lt;span class="nv"&gt;plexus&lt;/span&gt;.&lt;span class="nv"&gt;classworlds&lt;/span&gt;.&lt;span class="nv"&gt;launcher&lt;/span&gt;.&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;launch&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;225&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;codehaus&lt;/span&gt;.&lt;span class="nv"&gt;plexus&lt;/span&gt;.&lt;span class="nv"&gt;classworlds&lt;/span&gt;.&lt;span class="nv"&gt;launcher&lt;/span&gt;.&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;mainWithExitCode&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;406&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;codehaus&lt;/span&gt;.&lt;span class="nv"&gt;plexus&lt;/span&gt;.&lt;span class="nv"&gt;classworlds&lt;/span&gt;.&lt;span class="nv"&gt;launcher&lt;/span&gt;.&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;347&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
[&lt;span class="nv"&gt;WARNING&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;Failed&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;validate&lt;/span&gt; &lt;span class="nv"&gt;resources&lt;/span&gt;: &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;ConnectException&lt;/span&gt;: &lt;span class="nv"&gt;Connection&lt;/span&gt; &lt;span class="nv"&gt;timed&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;: &lt;span class="k"&gt;connect&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;validating&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;classes&lt;/span&gt;\&lt;span class="nv"&gt;META&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;INF&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;\&lt;span class="nv"&gt;kubernetes&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;deployment&lt;/span&gt;.&lt;span class="nv"&gt;yml&lt;/span&gt; &lt;span class="nv"&gt;resource&lt;/span&gt;
[&lt;span class="nv"&gt;ERROR&lt;/span&gt;] &lt;span class="nv"&gt;Failed&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="nv"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;ConnectException&lt;/span&gt;: &lt;span class="nv"&gt;Connection&lt;/span&gt; &lt;span class="nv"&gt;timed&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;: &lt;span class="k"&gt;connect&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;DualStackPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;connect0&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Native&lt;/span&gt; &lt;span class="nv"&gt;Method&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;DualStackPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;socketConnect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DualStackPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;doConnect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;connectToAddress&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;206&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractPlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;188&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;PlainSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;PlainSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;172&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;SocksSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;SocksSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;392&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;Socket&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Socket&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;607&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;security&lt;/span&gt;.&lt;span class="nv"&gt;ssl&lt;/span&gt;.&lt;span class="nv"&gt;SSLSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;SSLSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;666&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;security&lt;/span&gt;.&lt;span class="nv"&gt;ssl&lt;/span&gt;.&lt;span class="nv"&gt;BaseSSLSocketImpl&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;BaseSSLSocketImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;173&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;NetworkClient&lt;/span&gt;.&lt;span class="nv"&gt;doConnect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;NetworkClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpClient&lt;/span&gt;.&lt;span class="nv"&gt;openServer&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;463&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpClient&lt;/span&gt;.&lt;span class="nv"&gt;openServer&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;558&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;HttpsClient&lt;/span&gt;.&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;init&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpsClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;264&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;HttpsClient&lt;/span&gt;.&lt;span class="nv"&gt;New&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpsClient&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;367&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;getNewHttpClient&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;191&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;plainConnect0&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1162&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;plainConnect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1056&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;177&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;getInputStream0&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1570&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;http&lt;/span&gt;.&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;getInputStream&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpURLConnection&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1498&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;www&lt;/span&gt;.&lt;span class="nv"&gt;protocol&lt;/span&gt;.&lt;span class="nv"&gt;https&lt;/span&gt;.&lt;span class="nv"&gt;HttpsURLConnectionImpl&lt;/span&gt;.&lt;span class="nv"&gt;getInputStream&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;HttpsURLConnectionImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;268&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;URL&lt;/span&gt;.&lt;span class="nv"&gt;openStream&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;URL&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;1067&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;com&lt;/span&gt;.&lt;span class="nv"&gt;networknt&lt;/span&gt;.&lt;span class="nv"&gt;schema&lt;/span&gt;.&lt;span class="nv"&gt;JsonSchemaFactory&lt;/span&gt;.&lt;span class="nv"&gt;getSchema&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;JsonSchemaFactory&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;core&lt;/span&gt;.&lt;span class="nv"&gt;util&lt;/span&gt;.&lt;span class="nv"&gt;validator&lt;/span&gt;.&lt;span class="nv"&gt;ResourceValidator&lt;/span&gt;.&lt;span class="nv"&gt;getJsonSchema&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ResourceValidator&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;156&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;core&lt;/span&gt;.&lt;span class="nv"&gt;util&lt;/span&gt;.&lt;span class="nv"&gt;validator&lt;/span&gt;.&lt;span class="nv"&gt;ResourceValidator&lt;/span&gt;.&lt;span class="nv"&gt;validate&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ResourceValidator&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;109&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;plugin&lt;/span&gt;.&lt;span class="nv"&gt;mojo&lt;/span&gt;.&lt;span class="nv"&gt;build&lt;/span&gt;.&lt;span class="nv"&gt;ResourceMojo&lt;/span&gt;.&lt;span class="nv"&gt;validateIfRequired&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ResourceMojo&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;286&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;plugin&lt;/span&gt;.&lt;span class="nv"&gt;mojo&lt;/span&gt;.&lt;span class="nv"&gt;build&lt;/span&gt;.&lt;span class="nv"&gt;ResourceMojo&lt;/span&gt;.&lt;span class="nv"&gt;executeInternal&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ResourceMojo&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;276&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;.&lt;span class="nv"&gt;fabric8&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;plugin&lt;/span&gt;.&lt;span class="nv"&gt;mojo&lt;/span&gt;.&lt;span class="nv"&gt;AbstractFabric8Mojo&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;AbstractFabric8Mojo&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;plugin&lt;/span&gt;.&lt;span class="nv"&gt;DefaultBuildPluginManager&lt;/span&gt;.&lt;span class="nv"&gt;executeMojo&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DefaultBuildPluginManager&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;137&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;210&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;156&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;executeForkedExecutions&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;355&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;156&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MojoExecutor&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;LifecycleModuleBuilder&lt;/span&gt;.&lt;span class="nv"&gt;buildProject&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LifecycleModuleBuilder&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;117&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;LifecycleModuleBuilder&lt;/span&gt;.&lt;span class="nv"&gt;buildProject&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LifecycleModuleBuilder&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;builder&lt;/span&gt;.&lt;span class="nv"&gt;singlethreaded&lt;/span&gt;.&lt;span class="nv"&gt;SingleThreadedBuilder&lt;/span&gt;.&lt;span class="nv"&gt;build&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;SingleThreadedBuilder&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;lifecycle&lt;/span&gt;.&lt;span class="nv"&gt;internal&lt;/span&gt;.&lt;span class="nv"&gt;LifecycleStarter&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LifecycleStarter&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;doExecute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;305&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;doExecute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DefaultMaven&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;cli&lt;/span&gt;.&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;956&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;cli&lt;/span&gt;.&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;doMain&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;288&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;apache&lt;/span&gt;.&lt;span class="nv"&gt;maven&lt;/span&gt;.&lt;span class="nv"&gt;cli&lt;/span&gt;.&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MavenCli&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;reflect&lt;/span&gt;.&lt;span class="nv"&gt;NativeMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;invoke0&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Native&lt;/span&gt; &lt;span class="nv"&gt;Method&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;reflect&lt;/span&gt;.&lt;span class="nv"&gt;NativeMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;NativeMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;sun&lt;/span&gt;.&lt;span class="nv"&gt;reflect&lt;/span&gt;.&lt;span class="nv"&gt;DelegatingMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;DelegatingMethodAccessorImpl&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;lang&lt;/span&gt;.&lt;span class="nv"&gt;reflect&lt;/span&gt;.&lt;span class="nv"&gt;Method&lt;/span&gt;.&lt;span class="nv"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Method&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;498&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;codehaus&lt;/span&gt;.&lt;span class="nv"&gt;plexus&lt;/span&gt;.&lt;span class="nv"&gt;classworlds&lt;/span&gt;.&lt;span class="nv"&gt;launcher&lt;/span&gt;.&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;launchEnhanced&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;282&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;codehaus&lt;/span&gt;.&lt;span class="nv"&gt;plexus&lt;/span&gt;.&lt;span class="nv"&gt;classworlds&lt;/span&gt;.&lt;span class="nv"&gt;launcher&lt;/span&gt;.&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;launch&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;225&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;codehaus&lt;/span&gt;.&lt;span class="nv"&gt;plexus&lt;/span&gt;.&lt;span class="nv"&gt;classworlds&lt;/span&gt;.&lt;span class="nv"&gt;launcher&lt;/span&gt;.&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;mainWithExitCode&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;406&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;.&lt;span class="nv"&gt;codehaus&lt;/span&gt;.&lt;span class="nv"&gt;plexus&lt;/span&gt;.&lt;span class="nv"&gt;classworlds&lt;/span&gt;.&lt;span class="nv"&gt;launcher&lt;/span&gt;.&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Launcher&lt;/span&gt;.&lt;span class="nv"&gt;java&lt;/span&gt;:&lt;span class="mi"&gt;347&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
[&lt;span class="nv"&gt;WARNING&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;Failed&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;validate&lt;/span&gt; &lt;span class="nv"&gt;resources&lt;/span&gt;: &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;net&lt;/span&gt;.&lt;span class="nv"&gt;ConnectException&lt;/span&gt;: &lt;span class="nv"&gt;Connection&lt;/span&gt; &lt;span class="nv"&gt;timed&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;: &lt;span class="k"&gt;connect&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="mi"&gt;6&lt;/span&gt;.&lt;span class="mi"&gt;1&lt;/span&gt;:&lt;span class="nv"&gt;compile&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;compile&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;flights&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Changes&lt;/span&gt; &lt;span class="nv"&gt;detected&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;recompiling&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;module&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Compiling&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="nv"&gt;source&lt;/span&gt; &lt;span class="nv"&gt;files&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;classes&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="mi"&gt;6&lt;/span&gt;:&lt;span class="nv"&gt;testResources&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;testResources&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;flights&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Using&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;UTF-8&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;encoding&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;copy&lt;/span&gt; &lt;span class="nv"&gt;filtered&lt;/span&gt; &lt;span class="nv"&gt;resources&lt;/span&gt;.
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;skip&lt;/span&gt; &lt;span class="nv"&gt;non&lt;/span&gt; &lt;span class="nv"&gt;existing&lt;/span&gt; &lt;span class="nv"&gt;resourceDirectory&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;src&lt;/span&gt;\&lt;span class="nv"&gt;test&lt;/span&gt;\&lt;span class="nv"&gt;resources&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="mi"&gt;6&lt;/span&gt;.&lt;span class="mi"&gt;1&lt;/span&gt;:&lt;span class="nv"&gt;testCompile&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;testCompile&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;flights&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;No&lt;/span&gt; &lt;span class="nv"&gt;sources&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;compile&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;surefire&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="mi"&gt;12&lt;/span&gt;.&lt;span class="mi"&gt;4&lt;/span&gt;:&lt;span class="nv"&gt;test&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;flights&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;No&lt;/span&gt; &lt;span class="nv"&gt;tests&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;run&lt;/span&gt;.
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="mi"&gt;4&lt;/span&gt;:&lt;span class="nv"&gt;jar&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;jar&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;flights&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Building&lt;/span&gt; &lt;span class="nv"&gt;jar&lt;/span&gt;: &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;.&lt;span class="nv"&gt;jar&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="mi"&gt;8&lt;/span&gt;.&lt;span class="nv"&gt;RELEASE&lt;/span&gt;:&lt;span class="nv"&gt;repackage&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;flights&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Attaching&lt;/span&gt; &lt;span class="nv"&gt;archive&lt;/span&gt;: &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;.&lt;span class="nv"&gt;jar&lt;/span&gt;, &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;classifier&lt;/span&gt;: &lt;span class="k"&gt;exec&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;fabric8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="mi"&gt;30&lt;/span&gt;:&lt;span class="nv"&gt;build&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;flights&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;Building&lt;/span&gt; &lt;span class="nv"&gt;Docker&lt;/span&gt; &lt;span class="nv"&gt;image&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;Kubernetes&lt;/span&gt; &lt;span class="nv"&gt;mode&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;Running&lt;/span&gt; &lt;span class="nv"&gt;generator&lt;/span&gt; &lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: &lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;: &lt;span class="nv"&gt;Using&lt;/span&gt; &lt;span class="nv"&gt;Docker&lt;/span&gt; &lt;span class="nv"&gt;image&lt;/span&gt; &lt;span class="nv"&gt;registry&lt;/span&gt;.&lt;span class="nv"&gt;access&lt;/span&gt;.&lt;span class="nv"&gt;redhat&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;redhat&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;openjdk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;openjdk18&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;openshift&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;base&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;builder&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Copying&lt;/span&gt; &lt;span class="nv"&gt;files&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;docker&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;\&lt;span class="nv"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;191114&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;101329&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0408&lt;/span&gt;\&lt;span class="nv"&gt;build&lt;/span&gt;\&lt;span class="nv"&gt;maven&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Building&lt;/span&gt; &lt;span class="nv"&gt;tar&lt;/span&gt;: &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;docker&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;\&lt;span class="nv"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;191114&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;101329&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0408&lt;/span&gt;\&lt;span class="nv"&gt;tmp&lt;/span&gt;\&lt;span class="nv"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;build&lt;/span&gt;.&lt;span class="nv"&gt;tar&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: [&lt;span class="nv"&gt;lambdaair&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;flights&lt;/span&gt;:&lt;span class="nv"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;191114&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;101329&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0408&lt;/span&gt;] &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;spring-boot&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;Created&lt;/span&gt; &lt;span class="nv"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;build&lt;/span&gt;.&lt;span class="nv"&gt;tar&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="nv"&gt;milliseconds&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: [&lt;span class="nv"&gt;lambdaair&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;flights&lt;/span&gt;:&lt;span class="nv"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;191114&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;101329&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0408&lt;/span&gt;] &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;spring-boot&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;Built&lt;/span&gt; &lt;span class="nv"&gt;image&lt;/span&gt; &lt;span class="nv"&gt;sha256&lt;/span&gt;:&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="nv"&gt;eaa&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;F8&lt;/span&gt;: [&lt;span class="nv"&gt;lambdaair&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;flights&lt;/span&gt;:&lt;span class="nv"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;191114&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;101329&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0408&lt;/span&gt;] &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;spring-boot&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;Tag&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;latest&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;]
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="nv"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;install&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;:&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="mi"&gt;4&lt;/span&gt;:&lt;span class="nv"&gt;install&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;install&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; @ &lt;span class="nv"&gt;flights&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Installing&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;.&lt;span class="nv"&gt;jar&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;:\&lt;span class="nv"&gt;Users&lt;/span&gt;\&lt;span class="mi"&gt;8000619804&lt;/span&gt;\.&lt;span class="nv"&gt;m2&lt;/span&gt;\&lt;span class="nv"&gt;repository&lt;/span&gt;\&lt;span class="nv"&gt;com&lt;/span&gt;\&lt;span class="nv"&gt;redhat&lt;/span&gt;\&lt;span class="nv"&gt;refarch&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;\&lt;span class="nv"&gt;boot&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;\&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;.&lt;span class="nv"&gt;jar&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Installing&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;pom&lt;/span&gt;.&lt;span class="nv"&gt;xml&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;:\&lt;span class="nv"&gt;Users&lt;/span&gt;\&lt;span class="mi"&gt;8000619804&lt;/span&gt;\.&lt;span class="nv"&gt;m2&lt;/span&gt;\&lt;span class="nv"&gt;repository&lt;/span&gt;\&lt;span class="nv"&gt;com&lt;/span&gt;\&lt;span class="nv"&gt;redhat&lt;/span&gt;\&lt;span class="nv"&gt;refarch&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;\&lt;span class="nv"&gt;boot&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;\&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;.&lt;span class="nv"&gt;pom&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Installing&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;classes&lt;/span&gt;\&lt;span class="nv"&gt;META&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;INF&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;\&lt;span class="nv"&gt;openshift&lt;/span&gt;.&lt;span class="nv"&gt;yml&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;:\&lt;span class="nv"&gt;Users&lt;/span&gt;\&lt;span class="mi"&gt;8000619804&lt;/span&gt;\.&lt;span class="nv"&gt;m2&lt;/span&gt;\&lt;span class="nv"&gt;repository&lt;/span&gt;\&lt;span class="nv"&gt;com&lt;/span&gt;\&lt;span class="nv"&gt;redhat&lt;/span&gt;\&lt;span class="nv"&gt;refarch&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;\&lt;span class="nv"&gt;boot&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;\&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;openshift&lt;/span&gt;.&lt;span class="nv"&gt;yml&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Installing&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;classes&lt;/span&gt;\&lt;span class="nv"&gt;META&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;INF&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;\&lt;span class="nv"&gt;openshift&lt;/span&gt;.&lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;:\&lt;span class="nv"&gt;Users&lt;/span&gt;\&lt;span class="mi"&gt;8000619804&lt;/span&gt;\.&lt;span class="nv"&gt;m2&lt;/span&gt;\&lt;span class="nv"&gt;repository&lt;/span&gt;\&lt;span class="nv"&gt;com&lt;/span&gt;\&lt;span class="nv"&gt;redhat&lt;/span&gt;\&lt;span class="nv"&gt;refarch&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;\&lt;span class="nv"&gt;boot&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;\&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;openshift&lt;/span&gt;.&lt;span class="nv"&gt;json&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Installing&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;classes&lt;/span&gt;\&lt;span class="nv"&gt;META&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;INF&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;\&lt;span class="nv"&gt;kubernetes&lt;/span&gt;.&lt;span class="nv"&gt;yml&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;:\&lt;span class="nv"&gt;Users&lt;/span&gt;\&lt;span class="mi"&gt;8000619804&lt;/span&gt;\.&lt;span class="nv"&gt;m2&lt;/span&gt;\&lt;span class="nv"&gt;repository&lt;/span&gt;\&lt;span class="nv"&gt;com&lt;/span&gt;\&lt;span class="nv"&gt;redhat&lt;/span&gt;\&lt;span class="nv"&gt;refarch&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;\&lt;span class="nv"&gt;boot&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;\&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;kubernetes&lt;/span&gt;.&lt;span class="nv"&gt;yml&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Installing&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;classes&lt;/span&gt;\&lt;span class="nv"&gt;META&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;INF&lt;/span&gt;\&lt;span class="nv"&gt;fabric8&lt;/span&gt;\&lt;span class="nv"&gt;kubernetes&lt;/span&gt;.&lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;:\&lt;span class="nv"&gt;Users&lt;/span&gt;\&lt;span class="mi"&gt;8000619804&lt;/span&gt;\.&lt;span class="nv"&gt;m2&lt;/span&gt;\&lt;span class="nv"&gt;repository&lt;/span&gt;\&lt;span class="nv"&gt;com&lt;/span&gt;\&lt;span class="nv"&gt;redhat&lt;/span&gt;\&lt;span class="nv"&gt;refarch&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;\&lt;span class="nv"&gt;boot&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;\&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;kubernetes&lt;/span&gt;.&lt;span class="nv"&gt;json&lt;/span&gt;
[&lt;span class="nv"&gt;INFO&lt;/span&gt;] &lt;span class="nv"&gt;Installing&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;:\&lt;span class="nv"&gt;Projects&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;msa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ocp&lt;/span&gt;\&lt;span class="nv"&gt;Flights&lt;/span&gt;\&lt;span class="nv"&gt;target&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;.&lt;span class="nv"&gt;jar&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;:\&lt;span class="nv"&gt;Users&lt;/span&gt;\&lt;span class="mi"&gt;8000619804&lt;/span&gt;\.&lt;span class="nv"&gt;m2&lt;/span&gt;\&lt;span class="nv"&gt;repository&lt;/span&gt;\&lt;span class="nv"&gt;com&lt;/span&gt;\&lt;span class="nv"&gt;redhat&lt;/span&gt;\&lt;span class="nv"&gt;refarch&lt;/span&gt;\&lt;span class="nv"&gt;spring&lt;/span&gt;\&lt;span class="nv"&gt;boot&lt;/span&gt;\&lt;span class="nv"&gt;lambdaair&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;\&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;\&lt;span class="nv"&gt;flights&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;.&lt;span class="nv"&gt;jar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一旦所有服务都被构建和部署，应该总共有8个运行的pod，包括之前的2个Zipkin pod，以及6个服务中的每一个新的pod:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc get pods
NAME                       READY     STATUS      RESTARTS   AGE
airports-1-72kng           &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          18m
flights-1-4xkfv            &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          15m
presentation-1-k2xlz       &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          10m
sales-1-fqxjd              &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          7m
salesv2-1-s1wq0            &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          5m
zipkin-1-k0dv6             &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          1h
zipkin-mysql-1-g44s7       &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          1h
zuul-1-2jkj0               &lt;span class="m"&gt;1&lt;/span&gt;/1       Running     &lt;span class="m"&gt;0&lt;/span&gt;          1m
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_3"&gt;小结&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;presentation&lt;/em&gt; 服务还创建一个Route。再次列出OpenShift项目中的路由:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc get routes
NAME           HOST/PORT                                    PATH      SERVICES       PORT      TERMINATION   WILDCARD
presentation   presentation-lambdaair.ocp.xxx.example.com             presentation   &lt;span class="m"&gt;8080&lt;/span&gt;                    None
zipkin         zipkin-lambdaair.ocp.xxx.example.com                   zipkin         &lt;span class="m"&gt;9411&lt;/span&gt;                    None
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用路由的URL从浏览器访问HTML应用程序，并验证它是否出现.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 15 Nov 2019 19:30:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-11-15:/spring-boot-on-k8s-4.html</guid><category>spring boot</category><category>k8s</category><category>openshift</category><category>最佳实践</category><category>devops</category></item><item><title>Spring Boot 微服务上容器平台的最佳实践 - 3</title><link>https://www.EWhisper.cn/spring-boot-on-k8s-3.html</link><description>&lt;p&gt;&lt;img alt="Spring+K8s" src="./images/spring_k8s.png"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今天开始第三篇, 主要介绍下 Zipkin + MySQL部署到容器平台上.&lt;/p&gt;
&lt;h3 id="_2"&gt;项目克隆&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/RHsyseng/spring-boot-msa-ocp"&gt;GitHub 仓库地址&lt;/a&gt; 源码在这里. 先下载下来.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/RHsyseng/spring-boot-msa-ocp.git LambdaAir
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后进入项目目录: &lt;code&gt;cd LambdaAir&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;几个前提&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;共享存储. 这个Demo 应用会用到NFS, K8S(或OpenShift)上得有NFS的PV, 且空间充足(至少5G). 共享存储用于: &lt;ol&gt;
&lt;li&gt;zpikin的mysql数据存储;&lt;/li&gt;
&lt;li&gt;zuul的动态proxy脚本挂载.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;K8S (或OpenShift) 得有充足的权限. 至少得拥有以下权限:&lt;ol&gt;
&lt;li&gt;创建&lt;em&gt;NameSpace&lt;/em&gt;(或OpenShift的&lt;em&gt;Project&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;创建&lt;em&gt;PVC&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;创建&lt;em&gt;Service&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;创建 &lt;em&gt;Deployment&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;创建 &lt;em&gt;Ingress&lt;/em&gt;(或OpenShift的 &lt;em&gt;Route&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;创建和挂载 &lt;em&gt;ConfigMap&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;创建&lt;em&gt;Secret&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="namespaceproject"&gt;创建 &lt;em&gt;NameSpace&lt;/em&gt;(或&lt;em&gt;Project&lt;/em&gt;)&lt;a class="headerlink" href="#namespaceproject" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc new-project lambdaair --display-name&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lambda Air&amp;quot;&lt;/span&gt; --description&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Spring Boot Microservices on Red Hat OpenShift Container Platform&amp;quot;&lt;/span&gt;
Now using project &lt;span class="s2"&gt;&amp;quot;lambdaair&amp;quot;&lt;/span&gt; on server &lt;span class="s2"&gt;&amp;quot;https://ocp-master1.xxx.example.com:8443&amp;quot;&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="zipkin"&gt;部署ZipKin&lt;a class="headerlink" href="#zipkin" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_4"&gt;概述&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;全部步骤拆分如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建&lt;em&gt;secret&lt;/em&gt; - 存储数据库账号密码等机要信息&lt;/li&gt;
&lt;li&gt;创建 &lt;em&gt;PVC&lt;/em&gt; - &lt;em&gt;zipkin-mysql&lt;/em&gt;, 用于申请存储资源, 存放mysql 持久化数据;&lt;/li&gt;
&lt;li&gt;创建 &lt;em&gt;configmap&lt;/em&gt; - &lt;em&gt;zipkin-mysql-cnf&lt;/em&gt;, 用于挂载mysql的配置;&lt;/li&gt;
&lt;li&gt;创建 &lt;em&gt;configmap&lt;/em&gt; - &lt;em&gt;zipkin-mysql-initdb&lt;/em&gt;, 用于挂载mysql 初始化脚本;&lt;/li&gt;
&lt;li&gt;创建 &lt;em&gt;deploymentconfig&lt;/em&gt; - &lt;em&gt;zipkin-mysql&lt;/em&gt;, 用于对&lt;em&gt;zipkin-mysql&lt;/em&gt; 的初始化, deployemnt及副本数进行管理.&lt;/li&gt;
&lt;li&gt;创建 &lt;em&gt;service&lt;/em&gt; - &lt;em&gt;zipkin-mysql&lt;/em&gt;, 用于在集群内提供 &lt;em&gt;zipkin的mysql&lt;/em&gt; 服务. zipkin通过这个service连接到mysql.&lt;/li&gt;
&lt;li&gt;创建 &lt;em&gt;deploymentconfig&lt;/em&gt; - &lt;em&gt;zipkin&lt;/em&gt;. 用于对&lt;em&gt;zipkin&lt;/em&gt;的build和deployment以及副本数等进行管理;&lt;/li&gt;
&lt;li&gt;创建 &lt;em&gt;service&lt;/em&gt; - &lt;em&gt;zipkin&lt;/em&gt;. 用于在集群内提供&lt;em&gt;zipkin&lt;/em&gt; 服务;&lt;/li&gt;
&lt;li&gt;创建 &lt;em&gt;route&lt;/em&gt; - &lt;em&gt;zipkin&lt;/em&gt; , 用于连接&lt;em&gt;service&lt;/em&gt; - &lt;em&gt;zipkin&lt;/em&gt;, 使得用户可以通过域名访问&lt;em&gt;zipkin&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="mysql"&gt;创建 MySQL 数据库&lt;a class="headerlink" href="#mysql" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;上面的步骤中, 与创建MySQL 数据库有关的步骤有1-6步. 说明如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建账号密码等信息;&lt;/li&gt;
&lt;li&gt;申请持久化存储;&lt;/li&gt;
&lt;li&gt;创建MySQL 配置;&lt;/li&gt;
&lt;li&gt;创建MySQL 初始化脚本;&lt;/li&gt;
&lt;li&gt;创建MySQL实例. 会用到&lt;ol&gt;
&lt;li&gt;账号密码&lt;/li&gt;
&lt;li&gt;持久化存储&lt;/li&gt;
&lt;li&gt;MySQL启动后会执行初始化脚本&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;创建MySQL服务, 供集群内(项目内)使用.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;创建 Secret&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;zipkin-mysql-secret.yml&lt;/code&gt;文件如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Secret&lt;/span&gt;
&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
  &lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lambdaair&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;  
&lt;span class="nt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;database-password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;your-password&lt;/span&gt;
  &lt;span class="nt"&gt;database-root-password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;root-password&lt;/span&gt;
  &lt;span class="nt"&gt;database-user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;normaluser&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用&lt;code&gt;oc&lt;/code&gt;或&lt;code&gt;kubectl&lt;/code&gt;创建:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 先切换到 lambdaair project(后续都在这个项目里, 不在赘述)&lt;/span&gt;
$ oc project lambdaair
&lt;span class="c1"&gt;# 创建 secret&lt;/span&gt;
$ oc create -f zipkin-mysql-secret.yml
&lt;span class="c1"&gt;# 查看创建结果&lt;/span&gt;
$ oc get secret 
NAME                       TYPE                                  DATA   AGE
zipkin-mysql               Opaque                                &lt;span class="m"&gt;3&lt;/span&gt;      2d5h
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;创建 PVC&lt;/h4&gt;
&lt;p&gt;Zipkin使用MySQL数据库进行存储，这反过来又需要创建一个OpenShift 共享存储。假定已经有了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc get pv
NAME                  CAPACITY   ACCESSMODES   RECLAIMPOLICY   STATUS      CLAIM                           REASON    AGE
zipkin-mysql-data     1Gi        RWO           Recycle         Available     1m
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;zipkin-mysql-pvc.yml&lt;/code&gt; 内容如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;PersistentVolumeClaim&lt;/span&gt;
&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
  &lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lambdaair&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;  
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;accessModes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ReadWriteOnce&lt;/span&gt;
  &lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1Gi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc create -f zipkin-mysql-pvc.yml
$ oc get pvc
NAME           STATUS   VOLUME              CAPACITY   ACCESS MODES   STORAGECLASS   AGE
zipkin-mysql   Bound    zipkin-mysql-data   1Gi        RWO                           2d5h
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;创建 ConfigMap&lt;/h4&gt;
&lt;h5&gt;创建 MySQL 配置的ConfigMap&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;zipkin-mysql-cnf.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ConfigMap&lt;/span&gt;
&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql-cnf&lt;/span&gt;
  &lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lambdaair&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;  
&lt;span class="nt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;custom.cnf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
    &lt;span class="no"&gt;[mysqld]&lt;/span&gt;
    &lt;span class="no"&gt;sql-mode=&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其实就是示范下, 没配置啥. 接下来创建:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc create -f zipkin-mysql-cnf.yml
$ oc get configmap
NAME                  DATA   AGE
zipkin-mysql-cnf      &lt;span class="m"&gt;1&lt;/span&gt;      2d5h
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;创建 MySQL 初始化脚本的ConfigMap&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;zipkin-mysql-initdb.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ConfigMap&lt;/span&gt;
&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql-initdb&lt;/span&gt;
  &lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lambdaair&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;  
&lt;span class="nt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;init.sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="no"&gt;CREATE TABLE IF NOT EXISTS zipkin_spans (&lt;/span&gt;
      &lt;span class="no"&gt;`trace_id` BIGINT NOT NULL,&lt;/span&gt;
      &lt;span class="no"&gt;`id` BIGINT NOT NULL,&lt;/span&gt;
      &lt;span class="no"&gt;`name` VARCHAR(255) NOT NULL,&lt;/span&gt;
      &lt;span class="no"&gt;`parent_id` BIGINT,&lt;/span&gt;
      &lt;span class="no"&gt;`debug` BIT(1),&lt;/span&gt;
      &lt;span class="no"&gt;`start_ts` BIGINT COMMENT &amp;#39;Span.timestamp(): epoch micros used for endTs query and to implement TTL&amp;#39;,&lt;/span&gt;
      &lt;span class="no"&gt;`duration` BIGINT COMMENT &amp;#39;Span.duration(): micros used for minDuration and maxDuration query&amp;#39;&lt;/span&gt;
    &lt;span class="no"&gt;) ENGINE=InnoDB ROW_FORMAT=COMPRESSED;&lt;/span&gt;


    &lt;span class="no"&gt;ALTER TABLE zipkin_spans ADD UNIQUE KEY(`trace_id`, `id`) COMMENT &amp;#39;ignore&lt;/span&gt;
    &lt;span class="no"&gt;insert on duplicate&amp;#39;;&lt;/span&gt;

    &lt;span class="no"&gt;ALTER TABLE zipkin_spans ADD INDEX(`trace_id`, `id`) COMMENT &amp;#39;for joining&lt;/span&gt;
    &lt;span class="no"&gt;with zipkin_annotations&amp;#39;;&lt;/span&gt;

    &lt;span class="no"&gt;ALTER TABLE zipkin_spans ADD INDEX(`trace_id`) COMMENT &amp;#39;for getTracesByIds&amp;#39;;&lt;/span&gt;

    &lt;span class="no"&gt;ALTER TABLE zipkin_spans ADD INDEX(`name`) COMMENT &amp;#39;for getTraces and&lt;/span&gt;
    &lt;span class="no"&gt;getSpanNames&amp;#39;;&lt;/span&gt;

    &lt;span class="no"&gt;ALTER TABLE zipkin_spans ADD INDEX(`start_ts`) COMMENT &amp;#39;for getTraces&lt;/span&gt;
    &lt;span class="no"&gt;ordering and range&amp;#39;;&lt;/span&gt;


    &lt;span class="no"&gt;CREATE TABLE IF NOT EXISTS zipkin_annotations (&lt;/span&gt;
      &lt;span class="no"&gt;`trace_id` BIGINT NOT NULL COMMENT &amp;#39;coincides with zipkin_spans.trace_id&amp;#39;,&lt;/span&gt;
      &lt;span class="no"&gt;`span_id` BIGINT NOT NULL COMMENT &amp;#39;coincides with zipkin_spans.id&amp;#39;,&lt;/span&gt;
      &lt;span class="no"&gt;`a_key` VARCHAR(255) NOT NULL COMMENT &amp;#39;BinaryAnnotation.key or Annotation.value if type == -1&amp;#39;,&lt;/span&gt;
      &lt;span class="no"&gt;`a_value` BLOB COMMENT &amp;#39;BinaryAnnotation.value(), which must be smaller than 64KB&amp;#39;,&lt;/span&gt;
      &lt;span class="no"&gt;`a_type` INT NOT NULL COMMENT &amp;#39;BinaryAnnotation.type() or -1 if Annotation&amp;#39;,&lt;/span&gt;
      &lt;span class="no"&gt;`a_timestamp` BIGINT COMMENT &amp;#39;Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp&amp;#39;,&lt;/span&gt;
      &lt;span class="no"&gt;`endpoint_ipv4` INT COMMENT &amp;#39;Null when Binary/Annotation.endpoint is null&amp;#39;,&lt;/span&gt;
      &lt;span class="no"&gt;`endpoint_ipv6` BINARY(16) COMMENT &amp;#39;Null when Binary/Annotation.endpoint is null, or no IPv6 address&amp;#39;,&lt;/span&gt;
      &lt;span class="no"&gt;`endpoint_port` SMALLINT COMMENT &amp;#39;Null when Binary/Annotation.endpoint is null&amp;#39;,&lt;/span&gt;
      &lt;span class="no"&gt;`endpoint_service_name` VARCHAR(255) COMMENT &amp;#39;Null when Binary/Annotation.endpoint is null&amp;#39;&lt;/span&gt;
    &lt;span class="no"&gt;) ENGINE=InnoDB ROW_FORMAT=COMPRESSED;&lt;/span&gt;


    &lt;span class="no"&gt;ALTER TABLE zipkin_annotations ADD UNIQUE KEY(`trace_id`, `span_id`,&lt;/span&gt;
    &lt;span class="no"&gt;`a_key`, `a_timestamp`) COMMENT &amp;#39;Ignore insert on duplicate&amp;#39;;&lt;/span&gt;

    &lt;span class="no"&gt;ALTER TABLE zipkin_annotations ADD INDEX(`trace_id`, `span_id`) COMMENT &amp;#39;for&lt;/span&gt;
    &lt;span class="no"&gt;joining with zipkin_spans&amp;#39;;&lt;/span&gt;

    &lt;span class="no"&gt;ALTER TABLE zipkin_annotations ADD INDEX(`trace_id`) COMMENT &amp;#39;for&lt;/span&gt;
    &lt;span class="no"&gt;getTraces/ByIds&amp;#39;;&lt;/span&gt;

    &lt;span class="no"&gt;ALTER TABLE zipkin_annotations ADD INDEX(`endpoint_service_name`) COMMENT&lt;/span&gt;
    &lt;span class="no"&gt;&amp;#39;for getTraces and getServiceNames&amp;#39;;&lt;/span&gt;

    &lt;span class="no"&gt;ALTER TABLE zipkin_annotations ADD INDEX(`a_type`) COMMENT &amp;#39;for getTraces&amp;#39;;&lt;/span&gt;

    &lt;span class="no"&gt;ALTER TABLE zipkin_annotations ADD INDEX(`a_key`) COMMENT &amp;#39;for getTraces&amp;#39;;&lt;/span&gt;


    &lt;span class="no"&gt;CREATE TABLE IF NOT EXISTS zipkin_dependencies (&lt;/span&gt;
      &lt;span class="no"&gt;`day` DATE NOT NULL,&lt;/span&gt;
      &lt;span class="no"&gt;`parent` VARCHAR(255) NOT NULL,&lt;/span&gt;
      &lt;span class="no"&gt;`child` VARCHAR(255) NOT NULL,&lt;/span&gt;
      &lt;span class="no"&gt;`call_count` BIGINT&lt;/span&gt;
    &lt;span class="no"&gt;) ENGINE=InnoDB ROW_FORMAT=COMPRESSED;&lt;/span&gt;


    &lt;span class="no"&gt;ALTER TABLE zipkin_dependencies ADD UNIQUE KEY(`day`, `parent`, `child`);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc create -f zipkin-mysql-initdb.yml
$ oc get configmap
NAME                  DATA   AGE
zipkin-mysql-cnf      &lt;span class="m"&gt;1&lt;/span&gt;      2d5h
zipkin-mysql-initdb   &lt;span class="m"&gt;1&lt;/span&gt;      2d5h
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;创建 MySQL的 DeploymentConfig&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;zipkin-mysql-deploymentconfig.yml&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.openshift.com/container-platform/4.2/applications/deployments/what-deployments-are.html#deployments-and-deploymentconfigs_what-deployments-are"&gt;&lt;code&gt;DeploymentConfig&lt;/code&gt;&lt;/a&gt; 这个resource是OpenShift特有的. 基于K8S的&lt;code&gt;ReplicationControllers&lt;/code&gt;, 增加了对软件开发和部署生命周期的扩展支持. 最简单的情况, &lt;code&gt;DeploymentConifg&lt;/code&gt;就是创建一个新的&lt;code&gt;ReplicationController&lt;/code&gt;并启动&lt;code&gt;pod&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;但是, 它确实增加了一些新功能, 提供了从镜像的现有部署过渡到新镜像的功能, 并且还定义了在创建&lt;code&gt;ReplicationController&lt;/code&gt;之前或之后运行的Hook. (mysql初始化sql就是利用这个功能)&lt;/p&gt;
&lt;p&gt;还提供以下功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DeploymentConfig，这是用于运行应用程序的模板。&lt;/li&gt;
&lt;li&gt;触发驱动自动部署以响应事件的触发器(trigger)。&lt;/li&gt;
&lt;li&gt;用户可定制的部署策略，以从先前版本过渡到新版本。策略在通常称为部署过程的Pod中运行。&lt;/li&gt;
&lt;li&gt;一组hooks（lifecycle hooks），用于在部署的生命周期中的不同点执行自定义行为。&lt;/li&gt;
&lt;li&gt;应用程序的版本控制，以便在部署失败的情况下手动或自动支持回滚。&lt;/li&gt;
&lt;li&gt;手动副本缩放和自动缩放。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;DeploymentConfig&lt;/span&gt;
&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apps.openshift.io/v1&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;replicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
  &lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
  &lt;span class="nt"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Recreate&lt;/span&gt;
    &lt;span class="nt"&gt;recreateParams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;failurePolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Abort&lt;/span&gt;
        &lt;span class="nt"&gt;execNewPod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;containerName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql&lt;/span&gt;
          &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/bin/sh&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;-c&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hostname &amp;amp;&amp;amp; sleep 10 &amp;amp;&amp;amp; /opt/rh/rh-mysql57/root/usr/bin/mysql -h $DATABASE_SERVICE_NAME -u $MYSQL_USER -D $MYSQL_DATABASE -p$MYSQL_PASSWORD -P 3306 &amp;lt; /docker-entrypoint-initdb.d/init.sql &amp;amp;&amp;amp; echo Initialized database&lt;/span&gt;
          &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;DATABASE_SERVICE_NAME&lt;/span&gt;
              &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
          &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql-init-script&lt;/span&gt;
  &lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
    &lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_USER&lt;/span&gt;
              &lt;span class="nt"&gt;valueFrom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nt"&gt;secretKeyRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                  &lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;database-user&lt;/span&gt;
                  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_PASSWORD&lt;/span&gt;
              &lt;span class="nt"&gt;valueFrom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nt"&gt;secretKeyRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                  &lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;database-password&lt;/span&gt;
                  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;
              &lt;span class="nt"&gt;valueFrom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nt"&gt;secretKeyRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                  &lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;database-root-password&lt;/span&gt;
                  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_DATABASE&lt;/span&gt;
              &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${MYSQL_DATABASE}&lt;/span&gt;
          &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
          &lt;span class="nt"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;IfNotPresent&lt;/span&gt;
          &lt;span class="nt"&gt;livenessProbe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;30&lt;/span&gt;
            &lt;span class="nt"&gt;tcpSocket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3306&lt;/span&gt;
            &lt;span class="nt"&gt;timeoutSeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql&lt;/span&gt;
          &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;containerPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3306&lt;/span&gt;
          &lt;span class="nt"&gt;readinessProbe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/bin/sh&lt;/span&gt;
                &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;-i&lt;/span&gt;
                &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;-c&lt;/span&gt;
                &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_PWD=&amp;quot;$MYSQL_PASSWORD&amp;quot; mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE&lt;/span&gt;
                  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;-e &amp;#39;SELECT 1&amp;#39;&lt;/span&gt;
            &lt;span class="nt"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5&lt;/span&gt;
            &lt;span class="nt"&gt;timeoutSeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
          &lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;limits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nt"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;512Mi&lt;/span&gt;
          &lt;span class="nt"&gt;volumeMounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;mountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/lib/mysql/data&lt;/span&gt;
              &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql-data&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;mountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/docker-entrypoint-initdb.d/&lt;/span&gt;
              &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql-init-script&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;mountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/mysql/conf.d/&lt;/span&gt;
              &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql-confd&lt;/span&gt;
      &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql-data&lt;/span&gt;
          &lt;span class="nt"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;claimName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;configMap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql-initdb&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql-init-script&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;configMap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql-cnf&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql-confd&lt;/span&gt;
  &lt;span class="nt"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;imageChangeParams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;automatic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
        &lt;span class="nt"&gt;containerNames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql&lt;/span&gt;
        &lt;span class="nt"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ImageStreamTag&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql:5.7&lt;/span&gt;
          &lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;openshift&lt;/span&gt;
      &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ImageChange&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ConfigChange&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个用到了RedHat提供的&lt;a href="https://github.com/sclorg/mysql-container/blob/master/5.7/README.md"&gt;&lt;code&gt;mysql:5.7&lt;/code&gt;&lt;/a&gt;的镜像.&lt;/p&gt;
&lt;p&gt;创建:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc create -f zipkin-mysql-deploymentconfig.yml
$ watch oc get pods
Every &lt;span class="m"&gt;2&lt;/span&gt;.0s: oc get pods                                                      
Fri Jul &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;02&lt;/span&gt;:04:15 &lt;span class="m"&gt;2017&lt;/span&gt;
NAME                    READY     STATUS              RESTARTS   AGE
zipkin-mysql-1-deploy   &lt;span class="m"&gt;1&lt;/span&gt;/1   Running             &lt;span class="m"&gt;0&lt;/span&gt;          2m
zipkin-mysql-1-tv2v1    &lt;span class="m"&gt;0&lt;/span&gt;/1   ContainerCreating   &lt;span class="m"&gt;0&lt;/span&gt;          1m
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成部署过程可能需要几分钟，此时应该有1个pod处于&lt;code&gt;Running&lt;/code&gt;状态&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc get pods
NAME                   READY     STATUS    RESTARTS   AGE
zipkin-mysql-1-g44s7   &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          4m
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;创建 MySQL 的 Service&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;zipkin-mysql-svc.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Service&lt;/span&gt;
&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
  &lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lambdaair&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql&lt;/span&gt;
      &lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3306&lt;/span&gt;
  &lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建并查看:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc create -f zipkin-mysql-svc.yml
$ oc get svc
NAME           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;    AGE
zipkin-mysql   ClusterIP   &lt;span class="m"&gt;172&lt;/span&gt;.30.241.12   &amp;lt;none&amp;gt;        &lt;span class="m"&gt;3306&lt;/span&gt;/TCP   2d7h
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样, zipkin就可以通过 service 来调用mysql了.&lt;/p&gt;
&lt;h3 id="zpikin"&gt;创建 Zpikin 应用实例并对外提供服务&lt;a class="headerlink" href="#zpikin" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;上面的步骤中, 与创建MySQL 数据库有关的步骤有7-9步. 说明如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建zipkin实例, 会链接到数据库. 这时候, 集群内外都无法访问该实例, 只能在容器内使用;&lt;/li&gt;
&lt;li&gt;创建zipkin service, 此时, zipkin可以供集群内使用.&lt;/li&gt;
&lt;li&gt;创建zipkin route, 连接到zipkin service, 此时, zipkin可以通过域名被用户访问到.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;创建 ZipKin的 DeploymentConfig&lt;/h4&gt;
&lt;p&gt;接下来就是重头戏了! 创建Zipkin的运行实例, 并连接数据库. &lt;code&gt;zpikin-deploymentconfig.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;DeploymentConfig&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;replicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
  &lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
  &lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
    &lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;STORAGE_PORT_9042_TCP_ADDR&lt;/span&gt;
              &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-cassandra:9411&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;STORAGE_PORT_3306_TCP_ADDR&lt;/span&gt;
              &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql:3306&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_USER&lt;/span&gt;
              &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;normaluser&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_PASS&lt;/span&gt;
              &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;your-password&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;STORAGE_TYPE&lt;/span&gt;
              &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;TRANSPORT_TYPE&lt;/span&gt;
              &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;http&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;KUBERNETES_NAMESPACE&lt;/span&gt;
              &lt;span class="nt"&gt;valueFrom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nt"&gt;fieldRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                  &lt;span class="nt"&gt;fieldPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata.namespace&lt;/span&gt;
          &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;openzipkin/zipkin:1.19.2&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin&lt;/span&gt;
          &lt;span class="nt"&gt;readinessProbe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;httpGet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/api/v1/services&lt;/span&gt;
              &lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;9411&lt;/span&gt;
            &lt;span class="nt"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5&lt;/span&gt;
          &lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;limits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nt"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;
              &lt;span class="nt"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1600Mi&amp;quot;&lt;/span&gt;
            &lt;span class="nt"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nt"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;200m&amp;quot;&lt;/span&gt;
              &lt;span class="nt"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;200Mi&amp;quot;&lt;/span&gt;
  &lt;span class="nt"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ConfigChange&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建并查看进度:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc create -f zpikin-deploymentconfig.yml
$ $ watch oc get pods
Every &lt;span class="m"&gt;2&lt;/span&gt;.0s: oc get pods                                                      
Fri Jul &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;02&lt;/span&gt;:04:15 &lt;span class="m"&gt;2017&lt;/span&gt;
NAME                    READY     STATUS              RESTARTS   AGE
zipkin-1-deploy         &lt;span class="m"&gt;1&lt;/span&gt;/1   Running             &lt;span class="m"&gt;0&lt;/span&gt;          2m
zipkin-1-sclgl          &lt;span class="m"&gt;0&lt;/span&gt;/1   Running             &lt;span class="m"&gt;0&lt;/span&gt;          2m
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可能要花费几分钟, 几分钟后再查看, 出于&lt;em&gt;Running&lt;/em&gt;状态显示如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc get pods
NAME                   READY     STATUS    RESTARTS   AGE
zipkin-1-k0dv6         &lt;span class="m"&gt;1&lt;/span&gt;/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          5m
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样实例就创建好了.&lt;/p&gt;
&lt;h4&gt;创建 Zpikin 的 Service&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;zipkin-svc.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Service&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
      &lt;span class="nt"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;TCP&lt;/span&gt;
      &lt;span class="nt"&gt;targetPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;9411&lt;/span&gt;
  &lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
  &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;LoadBalancer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建并查看:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc create -f zipkin-svc.yaml
$ oc get svc
NAME     TYPE           CLUSTER-IP       EXTERNAL-IP   PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;        AGE
zipkin   LoadBalancer   &lt;span class="m"&gt;172&lt;/span&gt;.30.140.146   &amp;lt;pending&amp;gt;     &lt;span class="m"&gt;80&lt;/span&gt;:32395/TCP   2d7h
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;容器内的端口是9411, service的对应端口是80. 类型是&lt;code&gt;LoadBalancer&lt;/code&gt;. 这里&lt;code&gt;Service&lt;/code&gt;就是提供了2个功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务注册和发现;&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;创建 Zipkin 的 Route&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;zpikin-route.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;route.openshift.io/v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Route&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin-mysql&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;targetPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;9411&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Service&lt;/span&gt;
    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zipkin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建并查看:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc create -f zpikin-route.yml
$ oc get route
NAME           HOST/PORT                                              PATH   SERVICES       PORT   TERMINATION   WILDCARD
zipkin         zipkin-lambdaair.apps.cce-test.ccic-net.com.cn                zipkin         &lt;span class="m"&gt;9411&lt;/span&gt;                 None
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用显示的URL从浏览器访问控制台，并验证其工作正常: &lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="zipkin console" src="images/1573808377299.png"&gt;&lt;/p&gt;
&lt;h2 id="_5"&gt;小结&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;至此, zipkin + mysql 部署完成. 完成后, 拓扑如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="zipkin 拓扑" src="images/1573808497291.png"&gt;&lt;/p&gt;
&lt;p&gt;mysql容器上只支持单节点. 如果上生产的话建议还是部署在容器外. zipkin的话, 就可以随意的扩展和调整, 点击如下的向上箭头, 加多少个pod都可以, 因为配置了Liveness 和Readiness Probe, K8S会在Readiness Probe探测ok后, 自动将Service的流量LoadBalance到后端的新增和现有的pod. 同时指向service的route实际上也是由后边的多个pod来承载. 更近一步, 可以通过配置HPA来自动根据CPU, 内存等阈值来自动扩缩容量. 这就是K8S的一大优势 -- &lt;strong&gt;一键秒级扩容, 甚至自动扩容!&lt;/strong&gt; &lt;img align="absmiddle" alt="💪" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4aa.png" title=":muscle:" width="20px"&gt;&lt;img align="absmiddle" alt="💪" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4aa.png" title=":muscle:" width="20px"&gt;&lt;img align="absmiddle" alt="💪" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4aa.png" title=":muscle:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1573808565527" src="images/1573808565527.png"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 15 Nov 2019 14:10:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-11-15:/spring-boot-on-k8s-3.html</guid><category>spring boot</category><category>k8s</category><category>openshift</category><category>最佳实践</category><category>devops</category></item><item><title>Spring Boot 微服务上容器平台的最佳实践 - 2</title><link>https://www.EWhisper.cn/spring-boot-on-k8s-2.html</link><description>&lt;p&gt;&lt;img alt="Spring+K8s" src="./images/spring_k8s.png"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今天开始第二篇, 主要介绍下 Demo 应用的架构.&lt;/p&gt;
&lt;p&gt;另外, 我要吃掉我之前写的第一篇了, 纠正如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 第一篇修订:&lt;/p&gt;
&lt;p&gt;这一次，相关的场景是这样的：&lt;/p&gt;
&lt;p&gt;Spring Cloud 微服务系统已经提前搞好了，并没有运行在容器平台上，而是直接运行在虚机上。这次就是结&lt;strong&gt;合Spring Boot的组件和K8S (OpenShift)的相关概念和优势&lt;/strong&gt;，将其迁移部署到容器平台上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="demo"&gt;Demo 架构&lt;a class="headerlink" href="#demo" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个Demo 架构演示了在微服务体系结构风格中构建的&lt;strong&gt;机票搜索系统&lt;/strong&gt;。每个单独的微服务都是作为REST服务实现的，它位于Spring Boot之上，带有一个嵌入式Tomcat服务器，部署在OpenShift镜像上，并支持OpenJDK。典型微服务的软件栈如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="软件栈" src="images/1573784455930.png"&gt;&lt;/p&gt;
&lt;p&gt;每个微服务实例在一个容器实例中运行，每个OpenShift pod有一个容器，每个Service 有一个容器。在其核心，用微服务体系结构风格构建的应用程序由许多相互调用的复制容器组成.&lt;/p&gt;
&lt;p&gt;&lt;img alt="容器软件栈" src="images/1573784609557.png"&gt;&lt;/p&gt;
&lt;p&gt;应用程序的核心功能是由微服务提供的，每个微服务承担一个单一的职责。有一个服务充当&lt;a href="http://microservices.io/patterns/apigateway.html"&gt;API网关&lt;/a&gt;，调用单个微服务并聚合响应，以便更容易地使用它。&lt;/p&gt;
&lt;p&gt;&lt;img alt="功能图" src="images/1573784683961.png"&gt;&lt;/p&gt;
&lt;p&gt;该架构还实现并扩展了Spring Sleuth和OpenZipkin的分布式跟踪(distributed tracing)功能。OpenZipkin作为一个单独的服务运行，使用一个MySQL数据库来持久化它的数据，应用程序中的每个服务都会调用Zipkin。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Zipkin 调用" src="images/1573784806810.png"&gt;&lt;/p&gt;
&lt;p&gt;最后，Demo 应用使用&lt;strong&gt;Zuul&lt;/strong&gt;作为边缘服务来提供静态和动态路由。结果是，所有服务调用实际上都被定向到Zuul，并由它适当地代理请求。这个Demo也会演示&lt;strong&gt;A/B测试&lt;/strong&gt; , 通过提供销售服务的另一个版本并在运行时决定将其用于哪一类客户。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Zuul Proxy" src="images/1573784937524.png"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;小结&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;应用架构&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;用户通过前端程序(presentation的页面进行访问, 访问的请求会调用API Gateway, 通过Zuul 作为代理路由到各个微服务: Flights, Airports, Sales. 同时请求的tracing信息会发送给zipkin.&lt;/p&gt;
&lt;p&gt;&lt;img alt="OpenShift 拓扑图" src="images/1573785143934.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用到的组件&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;结合上一篇文章来看, 具体如下:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Spring Boot 全家桶&lt;/th&gt;
&lt;th&gt;Spring Boot 全家桶&lt;/th&gt;
&lt;th&gt;K8S (OpenShift)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;客户端库&lt;/td&gt;
&lt;td&gt;Ribbon&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;服务注册&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;负载均衡&lt;/td&gt;
&lt;td&gt;Ribbon&lt;/td&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;断路器&lt;/td&gt;
&lt;td&gt;Hystrix&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;外部化配置&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ConfigMap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分布式 Tracing&lt;/td&gt;
&lt;td&gt;Sleuth/Zipkin&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;代理/路由&lt;/td&gt;
&lt;td&gt;Zuul&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 15 Nov 2019 10:30:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-11-15:/spring-boot-on-k8s-2.html</guid><category>spring boot</category><category>k8s</category><category>openshift</category><category>最佳实践</category><category>devops</category></item><item><title>Spring Boot 微服务上容器平台的最佳实践 - 1</title><link>https://www.EWhisper.cn/spring-boot-on-k8s-1.html</link><description>&lt;p&gt;&lt;img alt="Spring+K8s" src="./images/spring_k8s.png"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今天开始开新坑——把Spring Boot 微服务部署到容器平台（K8S，OpenShift）上！&lt;/p&gt;
&lt;p&gt;大概内容会包括这些：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spring Boot 全家桶（及其他替代品和K8S的替代品）&lt;/li&gt;
&lt;li&gt;示例程序参考架构&lt;/li&gt;
&lt;li&gt;创建环境&lt;/li&gt;
&lt;li&gt;设计和部署Spring Boot 微服务应用&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这一次，相关的场景是这样的：&lt;/p&gt;
&lt;p&gt;Spring Cloud 微服务系统已经提前搞好了，并没有运行在容器平台上，而是直接运行在虚机上。这次就是在结合Spring Boot的组件和OpenShift的相关概念和优势，将其迁移部署到容器平台上。&lt;/p&gt;
&lt;h2 id="spring-boot"&gt;Spring Boot 全家桶及替代品&lt;a class="headerlink" href="#spring-boot" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;替代品请关注K8S的相关替代品, 本次主要目的是结合Spring Boot的组件和OpenShift的相关概念和优势.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_2"&gt;框架&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本系列文章主要关注构建在Spring Boot框架之上的微服务体系结构。Spring Boot 框架可以使用各种版本的Tomcat、Jetty作为它的嵌入式servlet容器。本文只关注在嵌入式Tomcat Server上使用Spring Boot.&lt;/p&gt;
&lt;h3 id="_3"&gt;客户端库&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;虽然调用微服务通常是通过HTTP发送JSON或XML payload这样简单的事情，但是各种各样的考虑导致了专用客户端库的流行，特别是在Spring Boot环境中。这些库不仅提供与Spring Boot的集成，还提供与微服务体系结构中经常需要的许多其他工具和库的集成。&lt;/p&gt;
&lt;h4&gt;Ribbon&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/Netflix/ribbon"&gt;Ribbon&lt;/a&gt;是一个具有内置客户端负载均衡的进程间通信(RPC)库。主要的使用模型包括REST调用和各种序列化方案支持。&lt;/p&gt;
&lt;p&gt;这次的实例程序只使用Ribbon的最基本功能。因为Ribbon 就是Spring Boot框架全家桶的一员. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 替代品:&lt;/p&gt;
&lt;p&gt;客户端库替代品: &lt;a href="https://grpc.io/"&gt;gRPC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 Protocol Buffers协议. &lt;/p&gt;
&lt;p&gt;优势:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更好的性能和安全性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;劣势:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;牺牲了兼容性和工具支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="_4"&gt;服务注册&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;微服务体系架构通常意味着在私有、混合或公共云中对单个服务进行动态扩展，其中主机的数量和地址不能总是预先预测或静态配置。(说人话, 微服务经常会横向动态扩展.) 解决方案是使用服务注册中心作为发现每个服务的已部署实例的起点。这通常由客户端库或负载均衡层进行匹配，当发现实例不再存在时，该层会无缝地进行故障转移，并更新服务注册表查找的缓存。更进一步说，客户机库和服务注册中心之间的集成可以使查找和调用过程成为单个步骤，并且对开发人员是透明的。&lt;/p&gt;
&lt;p&gt;在现代云环境中，这种功能通常由平台提供(说人话: 这个应该由我K8S来做! 你框架做的太多了! &lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f602.png" title=":joy:" width="20px"&gt; ​)，而服务复制和扩展是一个核心特性。&lt;/p&gt;
&lt;p&gt;这次的示例构建在OpenShift之上，就用K8S的Service来做服务注册。 &lt;/p&gt;
&lt;h4&gt;Eureka&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/Netflix/eureka"&gt;Eureka&lt;/a&gt;是一种基于REST(REpresentational State Transfer)的服务，主要用于微服务中定位服务，以实现中间层服务器的负载平衡和故障转移。&lt;/p&gt;
&lt;p&gt;Ribbon和Eureka之间的&lt;a href="https://github.com/Netflix/ribbon/wiki/Programmers-Guide#integration-with-eureka"&gt;紧密集成&lt;/a&gt;允许在调用者使用Ribbon库时声明性地使用Eureka.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 替代品:&lt;/p&gt;
&lt;p&gt;服务注册替代品: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.consul.io/intro/index.html"&gt;Consul&lt;/a&gt; - 在Spring Cloud 中与Ribbon集成允许对在 Consul 上注册的服务进行透明和声明性查询。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zookeeper.apache.org/"&gt;ZooKeeper&lt;/a&gt; - Apache ZooKeeper是一个集中的服务，用于维护配置信息、命名、提供分布式同步和提供组服务. 同样，在Spring Cloud中ZooKeeper的支持以及与Ribbon的集成允许在调用之前声明性地查找服务实例。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;K8S Service&lt;/a&gt; - Kubernetes Service充当内部负载均衡。它标识一组复制的pod，以便代理它接收到的连接。可以在服务本身保持一致可用的情况下，向服务添加或从服务中删除额外的备份pod，从而使依赖于服务的任何东西都可以通过一致的地址引用它。与第三方服务注册中心不同，负责服务复制的平台可以随时提供服务副本的最新准确报告。服务抽象也是与底层平台本身一样可靠的关键平台组件。这意味着客户端不需要为服务注册中心本身的故障保留缓存和帐户。&lt;strong&gt;可以声明性地将Ribbon配置为使用OpenShift而不是服务注册中心，而不需要修改任何代码。&lt;/strong&gt; (说人话: 上容器平台后, K8S的Service还是值得一用的)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="_5"&gt;负载均衡&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;对于客户端对无状态服务的调用，高可用性(HA)意味着需要从服务注册中心查找服务，以及可用实例之间的负载平衡。前面提到的客户端库包括合并这两个步骤的功能，但是容器平台通过在 &lt;em&gt;Service&lt;/em&gt; 抽象概念中包含负载平衡功能，使得这两个操作变得多余。OpenShift提供一个单一地址，在这个地址中，调用将被负载平衡并重定向到适当的实例。(说人话: Spring Boot虽然提供了库, 但还是要写代码的; 容器平台直接提供Service, Service自动在实例间负载均衡. 对于开发来说, 就是只用配一个Service地址, 就可以负载均衡).&lt;/p&gt;
&lt;h4&gt;Ribbon&lt;/h4&gt;
&lt;p&gt;Ribbon 允许在声明的静态实例列表之间进行&lt;a href="https://github.com/Netflix/ribbon/wiki/Working-with-load-balancers"&gt;负载均衡&lt;/a&gt;，或者在注册表查找中发现服务的任意多个实例之间进行负载均衡。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 替代品:&lt;/p&gt;
&lt;p&gt;负载均衡替代品:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gRPC - &lt;a href="https://github.com/grpc/grpc/blob/master/doc/load-balancing.md"&gt;负载均衡能力介绍链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;K8S Service - OpenShift通过其 &lt;em&gt;Service&lt;/em&gt;的抽象概念提供&lt;a href="https://access.redhat.com/documentation/en-us/openshift_container_platform/3.7/html/architecture/core-concepts#services"&gt;负载均衡&lt;/a&gt;。Service 所公开的Cluster IP地址是提供服务的任何正在运行的副本pod之间的内部负载均衡。在OpenShift集群中，Service 名称解析为这个Cluster IP地址，并可用于负载均衡。这种只能在内部使用, 对于外部地址不能用.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="_6"&gt;断路器&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;微服务的高度分布式特性意味着远程调用失败的风险更高，因为此类远程调用的数量增加了。断路器模式可以通过隔离有问题的服务和避免破坏性超时来帮助避免这类故障的级联。&lt;/p&gt;
&lt;h4&gt;Hystrix&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/Netflix/Hystrix"&gt;Hystrix&lt;/a&gt;是一个延迟处理和故障转移功能库，旨在隔离远程系统、服务和第三方库的访问点，中止级联故障，并在不可避免的复杂分布式系统中启用弹性。&lt;/p&gt;
&lt;p&gt;Hystrix实现了断路器和 bulkhead 模式.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 替代品:&lt;/p&gt;
&lt;p&gt;暂无. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;service mesh算一个. 但是目前用的不多, 也不够稳定.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="_7"&gt;外部化配置&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;外部化配置管理解决方案可以为&lt;strong&gt;配置文件、命令行参数和环境变量&lt;/strong&gt;的典型组合提供一种优雅的替代方案，这些配置文件、命令行参数和环境变量用于使应用程序更加可移植，并减少对外部更改的响应。&lt;/p&gt;
&lt;h4&gt;Spring Cloud Config&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html"&gt;Spring Cloud Config&lt;/a&gt;为分布式系统中的外部化配置提供了服务器和客户端支持。有了Config Server，您就有了一个中心位置来管理跨所有环境的应用程序的外部属性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 替代品:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;K8S ConfigMaps - &lt;a href="https://access.redhat.com/documentation/en-us/openshift_container_platform/3.7/html/developer_guide/dev-guide-configmaps"&gt;ConfigMaps&lt;/a&gt;可以用来存储细粒度的信息，比如单个属性，也可以存储粗粒度的信息，比如整个配置文件或JSON blob。它们提供了将配置数据注入容器的机制，同时保持容器与容器平台无关。(个人体验: 目前还不是非常成熟, 比如版本追溯相关功能就没有. )&lt;/li&gt;
&lt;li&gt;Apollo - &lt;a href="https://github.com/ctripcorp/apollo"&gt;Apollo（阿波罗）&lt;/a&gt;是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="tracing"&gt;分布式 Tracing&lt;a class="headerlink" href="#tracing" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;尽管微服务体系结构有很多优点，但是&lt;strong&gt;很难分析和排除故障&lt;/strong&gt;。每个业务请求在不同的层上生成对各个服务的多个调用，以及在各个服务之间的多个调用。分布式 Tracing 将所有单独的服务调用绑定在一起，并通过惟一生成的ID将它们与业务请求关联起来。&lt;/p&gt;
&lt;h4&gt;Sleuth/Zipkin&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://cloud.spring.io/spring-cloud-sleuth/"&gt;Spring Cloud Sleuth&lt;/a&gt;为应用程序中请求点上的每个调用和 &lt;em&gt;span ID&lt;/em&gt;生成&lt;em&gt;trace ID&lt;/em&gt;。这些信息可以与日志框架集成，通过跟踪日志文件来帮助解决应用程序的故障，或者广播到&lt;a href="http://zipkin.io/"&gt;Zipkin&lt;/a&gt;服务器并存储分析和报告。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 替代品:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jaeger - &lt;a href="https://github.com/uber/jaeger"&gt;Jaeger&lt;/a&gt;的灵感来自于&lt;a href="https://research.google.com/pubs/pub36356.html"&gt;Dapper&lt;/a&gt;和&lt;a href="http://zipkin.io/"&gt;OpenZipkin&lt;/a&gt;，是一个完全符合云原生基金会(CNCF) &lt;em&gt;OpenTracing&lt;/em&gt;标准的开源分布式跟踪系统。它可以用于监视基于微服务的体系结构，并提供分布式上下文传播和事务监视，以及服务依赖性分析和性能/延迟优化。(关键字: CNCF 标准)&lt;/li&gt;
&lt;li&gt;Dynatrace - APM行业排行第一的商业产品, 贵, 但好用.&lt;/li&gt;
&lt;li&gt;pinpoint - 类似的开源分布式Tracing&lt;/li&gt;
&lt;li&gt;... - 这类产品还挺多的. Skywalking, New Relic, Appdynamics, Datadog...&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="_8"&gt;代理/路由&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在每个服务调用之前添加代理，可以在调用之前和之后应用各种 filters，以及微服务体系结构中的许多常见模式，比如A/B测试。静态和动态路由规则可以帮助选择所需的服务版本。&lt;/p&gt;
&lt;h4&gt;Zuul&lt;/h4&gt;
&lt;p&gt;Zuul是一种边缘服务，提供&lt;strong&gt;动态路由、监视、弹性、安全性&lt;/strong&gt;等。&lt;/p&gt;
&lt;p&gt;Zuul支持多种路由模型，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;映射到目的地的声明式URL模式，&lt;/li&gt;
&lt;li&gt;驻留在应用程序 archive之外并动态确定路由的groovy脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 替代品:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Istio - &lt;a href="https://istio.io/faq/"&gt;Istio&lt;/a&gt;是一个开放的独立于平台的service mesh，它提供流量管理、策略执行和遥测数据收集。Istio旨在管理微服务和应用程序之间的通信.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id="_9"&gt;小结&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;话不多说, 看表:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Spring Boot 全家桶&lt;/th&gt;
&lt;th&gt;Spring Boot 全家桶&lt;/th&gt;
&lt;th&gt;K8S上替代品&lt;/th&gt;
&lt;th&gt;其他替代品&lt;/th&gt;
&lt;th&gt;个人建议&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;客户端库&lt;/td&gt;
&lt;td&gt;Ribbon&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;gRPC&lt;/td&gt;
&lt;td&gt;Ribbon好用; gRPC性能好&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;服务注册&lt;/td&gt;
&lt;td&gt;Eureka&lt;/td&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;Consul和ZooKeeper&lt;/td&gt;
&lt;td&gt;Eureka挺好; 上容器Service亦可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;负载均衡&lt;/td&gt;
&lt;td&gt;Ribbon&lt;/td&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;gRPC&lt;/td&gt;
&lt;td&gt;Ribbon挺好; 上容器Service亦可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;断路器&lt;/td&gt;
&lt;td&gt;Hystrix&lt;/td&gt;
&lt;td&gt;~~Service Mesh~~算半个&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;Hystrix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;外部化配置&lt;/td&gt;
&lt;td&gt;Spring Cloud Config&lt;/td&gt;
&lt;td&gt;ConfigMap&lt;/td&gt;
&lt;td&gt;Apollo&lt;/td&gt;
&lt;td&gt;Spring Cloud Config够用就用; 否则推荐Apollo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分布式 Tracing&lt;/td&gt;
&lt;td&gt;Sleuth/Zipkin&lt;/td&gt;
&lt;td&gt;Jaeger&lt;/td&gt;
&lt;td&gt;Dynatrace; pinpoint...&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;代理/路由&lt;/td&gt;
&lt;td&gt;Zuul&lt;/td&gt;
&lt;td&gt;Istio&lt;/td&gt;
&lt;td&gt;略&lt;/td&gt;
&lt;td&gt;Zuul性能够用就用;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Mon, 11 Nov 2019 19:30:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-11-11:/spring-boot-on-k8s-1.html</guid><category>spring boot</category><category>k8s</category><category>openshift</category><category>最佳实践</category><category>devops</category></item><item><title>手把手教你在容器云平台上部署Java 应用</title><link>https://www.EWhisper.cn/deploy-java-app-on-openshift.html</link><description>&lt;p&gt;&lt;img alt="" src="./images/tomcat-docker.png"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这篇教程会使用 Tomcat + PostgreSQL 创建一个 &lt;strong&gt;待办清单&lt;/strong&gt; (todolist) 应用. 并部署到OpenShift上.以此来演示完整的java 应用上容器平台(OpenShift)的流程.&lt;/p&gt;
&lt;h3 id="_2"&gt;先决条件&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基本的Java 8和Tomcat知识&lt;/li&gt;
&lt;li&gt;OpenJDK 8, Tomcat 8, Maven的本地安装版本&lt;/li&gt;
&lt;li&gt;基本的Git知识&lt;/li&gt;
&lt;li&gt;OpenShift 4的运行实例&lt;/li&gt;
&lt;li&gt;确保OpenShift容器平台的实例正在运行并且可用。另外，请确保已安装CLI客户端&lt;code&gt;oc&lt;/code&gt;，并且可以从命令shell该命令，以便可以使用它通过账号和密码登录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;设置数据库&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Java 应用程序几乎总是与数据库一起使用。对于本地开发，请使用PostgreSQL数据库。(使用MySQL的过程是完全一样的, 只是安装的为MySQL或MariaDB).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装数据库: &lt;code&gt;$ sudo yum install -y postgresql postgresql-server postgresql-devel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;初始化数据库: &lt;code&gt;$ sudo postgresql-setup initdb&lt;/code&gt;. 此命令会创建&lt;code&gt;/var/lib/pgsql/data&lt;/code&gt;目录, 数据存在这个目录.&lt;/li&gt;
&lt;li&gt;启动数据库: &lt;code&gt;$ sudo systemctl start postgresql.service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;数据库启动后, 创建普通账户: &lt;code&gt;$ sudo -u postgres createuser -s jws&lt;/code&gt;. 请注意，创建的用户没有密码。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="java"&gt;写 Java 应用&lt;a class="headerlink" href="#java" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果要从头开始安装java和tomcat，则必须先安装OpenJDK 8 。然后，您可以继续编写应用程序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装 OpenJDK8: &lt;code&gt;$ sudo yum install java-1.8.0-openjdk-devel.x86_64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;验证java版本:&lt;code&gt;$ java -version&lt;/code&gt; 输出示例: &lt;code&gt;openjdk version "1.8.0_171&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下载JAVA IDE并安装配置, 如IDEA或Eclipse.&lt;a href="https://www.eclipse.org/downloads/"&gt;https://www.eclipse.org/downloads/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;从这个链接下载Tomcat 8 应用: &lt;a href="https://tomcat.apache.org/download-80.cgi"&gt;https://tomcat.apache.org/download-80.cgi&lt;/a&gt;. 然后解压即可: &lt;code&gt;tar -xvzf apache-tomcat-8.5.47.tar.gz -C /opt/&lt;/code&gt;. 那么Tomcat的Home目录就是: &lt;code&gt;/opt/apache-tomcat-8.5.47&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下载Maven并安装. &lt;a href="https://maven.apache.org/download.cgi"&gt;https://maven.apache.org/download.cgi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下载JDBC驱动.&lt;/li&gt;
&lt;li&gt;打开IDE新建一个JAVA工程 - &lt;code&gt;todolist-jdbc&lt;/code&gt;, 然后进行编码. 工程的结构如下: (源码链接: &lt;a href="https://dev.tencent.com/u/east4ming/p/openshift-quickstarts/git/tree/1.2/tomcat-jdbc"&gt;https://dev.tencent.com/u/east4ming/p/openshift-quickstarts/git/tree/1.2/tomcat-jdbc&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tree .
.
├── pom.xml
└── src
    └── main
        ├── java
        │   └── org
        │       └── openshift
        │           └── quickstarts
        │               └── tomcat
        │                   ├── dao
        │                   │   ├── JdbcTomcatDAO.java
        │                   │   └── TomcatDAO.java
        │                   ├── model
        │                   │   └── TomcatEntry.java
        │                   ├── service
        │                   │   └── TomcatService.java
        │                   └── servlet
        │                       └── MainServlet.java
        └── webapp
            ├── WEB-INF
            │   ├── index.html
            │   └── web.xml
            └── resources
                └── css
                    ├── bootstrap-theme.min.css
                    └── bootstrap.min.css
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="7"&gt;
&lt;li&gt;生成相关依赖项&lt;code&gt;pom.xml&lt;/code&gt;: 如JDBC和框架. 构建使用&lt;code&gt;maven&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;将数据库配置为JNDI资源, 简单示例如下: &lt;code&gt;/opt/apache-tomcat-8.5.47/conf/context.xml&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;Resource&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jboss/datasources/defaultDS&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;auth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Container&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;javax.sql.DataSource&amp;quot;&lt;/span&gt;
               &lt;span class="na"&gt;maxTotal=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;25&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;maxIdle=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;maxWaitMillis=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5000&amp;quot;&lt;/span&gt;
               &lt;span class="na"&gt;username=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;root&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;password=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mypassword&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;driverClassName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.postgresql.Driver&amp;quot;&lt;/span&gt;
               &lt;span class="na"&gt;url=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jdbc:postgresql://localhost/test&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="9"&gt;
&lt;li&gt;启动tomcat查看日志确定数据库是否已可以正常连接.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="index"&gt;创建 index 页面&lt;a class="headerlink" href="#index" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;概述如下, MVC模式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model: &lt;code&gt;TomcatEntry&lt;/code&gt;类, &lt;code&gt;getSummary()&lt;/code&gt;  &lt;code&gt;setSummary()&lt;/code&gt;等方法. 见&lt;a href="https://dev.tencent.com/u/east4ming/p/openshift-quickstarts/git/blob/1.2/tomcat-jdbc/src/main/java/org/openshift/quickstarts/tomcat/model/TomcatEntry.java"&gt;https://dev.tencent.com/u/east4ming/p/openshift-quickstarts/git/blob/1.2/tomcat-jdbc/src/main/java/org/openshift/quickstarts/tomcat/model/TomcatEntry.java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;View: &lt;code&gt;index.html&lt;/code&gt;. 包含对&lt;code&gt;Summary&lt;/code&gt; 的POST和GET http method. 见&lt;a href="https://dev.tencent.com/u/east4ming/p/openshift-quickstarts/git/blob/1.2/tomcat-jdbc/src/main/webapp/WEB-INF/index.html"&gt;https://dev.tencent.com/u/east4ming/p/openshift-quickstarts/git/blob/1.2/tomcat-jdbc/src/main/webapp/WEB-INF/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Controller: &lt;code&gt;MainServlet.java&lt;/code&gt;. 包含&lt;code&gt;MainServlet&lt;/code&gt;类, 包含&lt;code&gt;doPost()``doGet()&lt;/code&gt;等方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用IDE, 配置tomcat运行验证页面是否可用.&lt;/p&gt;
&lt;p&gt;通过访问&lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt; 来查看页面. 如果没有看到该页面，可以查看tomcat的输出日志。&lt;/p&gt;
&lt;h3 id="openshift"&gt;在 OpenShift 上配置应用&lt;a class="headerlink" href="#openshift" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;为了使您的应用程序与在OpenShift Container Platform中运行的PostgreSQL数据库服务通信，您必须编辑其中的写死的部分以使用环境变量。&lt;/p&gt;
&lt;p&gt;最终运行在OpenShift之上的代码和本地代码差别其实很小. 如果最初运行在本地或开发环境. 那么类似以下的代码就会写死, 作为对比, 如果是OpenShift, 则建议使用环境变量ENV:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pom.xml&lt;/code&gt;原始版本:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-surefire-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.1.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;skip&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/skip&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;pom.xml&lt;/code&gt; OpenShift版本: 善用变量 (详见&lt;code&gt;${}&lt;/code&gt;内的内容)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-surefire-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${version.surefire.plugin}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;skip&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/skip&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;JdbcTomcatDAO.java&lt;/code&gt;原始版本:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;DataSource&lt;/span&gt; &lt;span class="nf"&gt;lookupDataSource&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;initialContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;InitialContext&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataSource&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;initialContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lookup&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jboss/datasources/defaultDS&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NameNotFoundException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;envContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;initialContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lookup&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;java:comp/env&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Tomcat places datasources inside java:comp/env&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataSource&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;envContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lookup&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getenv&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DB_JNDI&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NamingException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RuntimeException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not look up datasource&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;JdbcTomcatDAO.java&lt;/code&gt; OpenShift版本: 善用环境变量 ENV (详见: &lt;code&gt;System.getenv&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;DataSource&lt;/span&gt; &lt;span class="nf"&gt;lookupDataSource&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;initialContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;InitialContext&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataSource&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;initialContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lookup&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getenv&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DB_JNDI&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NameNotFoundException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;envContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;initialContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lookup&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;java:comp/env&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Tomcat places datasources inside java:comp/env&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataSource&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;envContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lookup&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getenv&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DB_JNDI&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NamingException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RuntimeException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not look up datasource&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="git"&gt;使用 Git&lt;a class="headerlink" href="#git" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在OpenShift Container Platform中构建应用程序通常需要将源代码存储在git存储库中(建议)，因此如果尚未安装&lt;code&gt;git&lt;/code&gt;，则必须进行安装。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前提&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确保位于工程目录中;&lt;/li&gt;
&lt;li&gt;初始化代码并提交到git:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git init
$ git add .
$ git commit -m &lt;span class="s2"&gt;&amp;quot;initial commit&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;提交应用程序后，必须将其推送到远程存储库。如GitHub帐户，您可以在其中创建新的存储库。&lt;/li&gt;
&lt;li&gt;设置指向您的&lt;code&gt;git&lt;/code&gt;存储库的远程服务器：&lt;code&gt;$ git remote add origin git@github.com:&amp;lt;namespace/repository-name&amp;gt;.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将您的应用程序推送到远程git存储库。&lt;code&gt;$ git push&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="openshift_1"&gt;部署应用到 OpenShift&lt;a class="headerlink" href="#openshift_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;您可以将应用程序部署到OpenShift容器平台。&lt;/p&gt;
&lt;p&gt;在OpenShift上创建&lt;code&gt;java-app&lt;/code&gt;项目后，您将自动切换到新的项目namespace。&lt;/p&gt;
&lt;p&gt;在OpenShift Container Platform中部署应用程序涉及三个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从OpenShift容器平台的PostgreSQL 镜像创建数据库服务。&lt;/li&gt;
&lt;li&gt;从与数据库服务连接的OpenShift Container Platform的 &lt;code&gt;JBoss Web Server 3.1 Apache Tomcat 8 builder&lt;/code&gt; (REDHAT基于开源版tomcat做了部分定制, 可以和使用开源版tomcat一样使用它) 镜像(docker image)和java源代码创建java服务。&lt;/li&gt;
&lt;li&gt;为您的应用程序创建路由和域名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要部署 JAVA 应用程序，请为该应用程序创建一个新项目: &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc new-project java-app --description&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Todolist Java application&amp;quot;&lt;/span&gt; --display-name&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Todolist + JDBC JAVA Application&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_4"&gt;创建数据库服务&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;您的Java 应用程序需要正在运行的数据库服务。对于此服务，使用PostgeSQL数据库镜像来创建。&lt;/p&gt;
&lt;p&gt;要创建数据库服务，您将使用&lt;code&gt;oc new-app&lt;/code&gt;命令。对于此命令，您必须传递一些必要的环境变量，这些变量将在数据库容器内部使用。这些环境变量是设置数据库的用户名，密码和名称所必需的。您可以将这些环境变量的值更改为所需的任何值。变量如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;POSTGRESQL_DATABASE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POSTGRESQL_USER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POSTGRESQL_PASSWORD&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设置这些变量可确保：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在具有指定名称的数据库。&lt;/li&gt;
&lt;li&gt;存在具有指定名称的用户。&lt;/li&gt;
&lt;li&gt;用户可以用指定的JDBC配置访问指定的数据库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;步骤:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建数据库服务：&lt;code&gt;$ oc new-app postgresql -e POSTGRESQL_DATABASE=db_name -e POSTGRESQL_USER=username -e POSTGRESQL_PASSWORD=password&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;观察进度: &lt;code&gt;$ oc get pods --watch&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="java_1"&gt;创建 Java 服务&lt;a class="headerlink" href="#java_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;要将应用程序带入OpenShift容器平台，必须指定一个应用程序所在的存储库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建JAVA服务，并指定在创建数据库服务时设置的与数据库相关的环境变量：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc new-app path/to/source/code --name&lt;span class="o"&gt;=&lt;/span&gt;todolist-jdbc &lt;span class="se"&gt;\&lt;/span&gt;
-e &lt;span class="nv"&gt;POSTGRESQL_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;username -e &lt;span class="nv"&gt;POSTGRESQL_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;password -e &lt;span class="nv"&gt;POSTGRESQL_DATABASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;db_name -e &lt;span class="nv"&gt;DATABASE_SERVICE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;postgresql &lt;span class="se"&gt;\&lt;/span&gt;
-e &lt;span class="nv"&gt;DB_JNDI&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jboss/datasources/defaultDS&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;使用此命令，OpenShift Container Platform可以获取源代码，设置builder 以构建您的应用程序docker 镜像，并将新创建的镜像与指定的环境变量一起部署。该应用程序名为&lt;code&gt;todolist-jdbc&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;通过查看&lt;code&gt;todolist-jdbc&lt;/code&gt;的&lt;code&gt;DeploymentConfig&lt;/code&gt; 的JSON配置来验证是否已添加环境变量：&lt;code&gt;$ oc get dc todolist-jdbc -o json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;应该会看到下列内容:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;env&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: [&lt;/span&gt;
&lt;span class="s2"&gt;    {&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;POSTGRESQL_USER&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;value&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;username&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    },&lt;/span&gt;
&lt;span class="s2"&gt;    {&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;POSTGRESQL_PASSWORD&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;value&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;password&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    },&lt;/span&gt;
&lt;span class="s2"&gt;    {&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;POSTGRESQL_DATABASE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;value&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;db_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    },&lt;/span&gt;
&lt;span class="s2"&gt;    {&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;DATABASE_SERVICE_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;value&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;postgresql&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;
&lt;span class="s2"&gt;    {&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;DB_JNDI&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;value&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;jboss/datasources/defaultDS&amp;quot;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;],&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="5"&gt;
&lt;li&gt;检查构建过程：&lt;code&gt;$ oc logs -f build/todolist-jdbc-app-1&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;构建完成后，请查看OpenShift Container Platform中正在运行的Pod：&lt;code&gt;$ oc get pods&lt;/code&gt; . 您应该看到以&lt;code&gt;todolist-jdbc-&amp;lt;number&amp;gt;-&amp;lt;hash&amp;gt;&lt;/code&gt;开头的pod，这是您的应用程序在OpenShift Container Platform中运行。&lt;/li&gt;
&lt;li&gt;如果要在程序正常运行之前, 先运行数据库迁移脚本来初始化数据库. 有3方法:&lt;ol&gt;
&lt;li&gt;从pgsql中手动进行:&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;rsh&lt;/code&gt;命令进入到容器中: &lt;code&gt;$ oc rsh &amp;lt;PGSQL_POD_ID&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用pgsql客户端运行sql初始化脚本&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;可以创建个模板 - &lt;code&gt;template&lt;/code&gt;对象, 在其中添加部署前要执行的hook, 来自动触发. &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_5"&gt;创建应用的访问域名&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这样您可以公开服务以为您的应用程序创建路由。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要给服务提供外部可访问的域名（例如，使用OpenShift容器平台的router提供&lt;code&gt;todolist.apps.example.com&lt;/code&gt;）来公开该服务 。您需要输入以下内容来发布前端服务：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc expose service todolist-jdbc --hostname&lt;span class="o"&gt;=&lt;/span&gt;todolist.apps.example.com
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/2757.png" title=":exclamation:" width="20px"&gt; 注意:&lt;/p&gt;
&lt;p&gt;前提是&lt;code&gt;todolist.apps.example.com&lt;/code&gt;已经被解析到OpenShift集群的router上了. &lt;/p&gt;
&lt;p&gt;一般OpenShift管理员会配置泛域名&lt;code&gt;*.apps.example.com&lt;/code&gt; 都解析到OpenShift的router上.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_6"&gt;总结&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以上介绍了java 应用&lt;strong&gt;源代码部署&lt;/strong&gt;的方式. JAVA应用要部署在OpenShift上. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建议把JAVA应用放到Git上.  这样方便追踪.&lt;/li&gt;
&lt;li&gt;建议代码里不确定的内容使用环境变量ENV来进行获取和配置.&lt;/li&gt;
&lt;li&gt;数据库可以使用OpenShift自带的pgsql, MongoDB, Mysql容器镜像;&lt;/li&gt;
&lt;li&gt;与纯docker或纯k8s相比, 应用可以直接源代码+ openshift的tomcat8 builder镜像自动生成可用的镜像并部署. 因为:&lt;ol&gt;
&lt;li&gt;builder镜像内包含maven等builder工具. 它会将源码pull下来, maven编译为WAR包, 同时会根据传入的环境变量生成相关配置的xml文件. 再把war包放到指定目录下. &lt;/li&gt;
&lt;li&gt;然后生成新的镜像并部署.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oc new-app&lt;/code&gt;这个命令其实除了创建&lt;code&gt;deployment&lt;/code&gt;  &lt;code&gt;pod&lt;/code&gt;外, 一般还会根据基础镜像的&lt;code&gt;EXPOSE&lt;/code&gt; 自动创建相关&lt;code&gt;SERVICE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;最后要使外部可以访问该应用. 使用&lt;code&gt;oc expose service &amp;lt;service_name&amp;gt;&lt;/code&gt; 将应用发布到某个域名.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然, 其实上边这些步骤下来, 还是有些麻烦的. 另外还会有一些特殊情况无法使用这种方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果不方便提供或开放源码, 只能提供二进制包(如war包), 可以使用war包进行. 简单示例如下: &lt;code&gt;$ oc start-build billing-service --from-file=todolist.war&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果自己想通过Docker image方式提供, 可以这么做: &lt;code&gt;$ oc new-app -e MYSQL_USER=product -e MYSQL_PASSWORD=password --docker-image=172.30.182.75:5000/deploy-project/msa-product --name=product-service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果自己已经通过Jenkins实现了CI/CD自动化流程. 那么也可以结合起来来用. jenkins有openshift插件, 或者也可以在jenkins的slave节点上安装&lt;code&gt;oc&lt;/code&gt;客户端.&lt;/li&gt;
&lt;li&gt;最后, 最强大快捷而又为程序员所习惯的方法, 是通过&lt;code&gt;odo&lt;/code&gt; 工具. 这是OpenShift 4新发布的专门针对开发人员的 OpenShift 命令行. 使用方式和&lt;code&gt;git push&lt;/code&gt;非常像, 封装了很多程序员不太了解的容器和K8S的概念. 你要做的就是类似前面写的: init, commit, push就好了. (以后有时间详细说明下)&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 07 Nov 2019 18:30:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-11-07:/deploy-java-app-on-openshift.html</guid><category>java</category><category>openshift</category><category>最佳实践</category><category>devops</category></item><item><title>在K8S Volume中使用 subPath</title><link>https://www.EWhisper.cn/use-subpath-in-k8s.html</link><description>&lt;p&gt;&lt;img alt="" src="./images/kubernetes_logo.png"&gt;&lt;/p&gt;
&lt;h2 id="subpath"&gt;使用 subPath&lt;a class="headerlink" href="#subpath" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;有时，在单个 Pod 中共享卷以供多方使用是很有用的。 &lt;code&gt;volumeMounts.subPath&lt;/code&gt; 属性可用于指定所引用的卷内的子路径，而不是其根路径。&lt;/p&gt;
&lt;p&gt;下面是一个使用同一共享卷的、内含 LAMP 栈（Linux Apache Mysql PHP）的 Pod 的示例。 HTML 内容被映射到卷的 &lt;code&gt;html&lt;/code&gt; 文件夹，数据库将被存储在卷的 &lt;code&gt;mysql&lt;/code&gt; 文件夹中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Pod&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-lamp-site&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql&lt;/span&gt;
      &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql&lt;/span&gt;
      &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;
        &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;rootpasswd&amp;quot;&lt;/span&gt;
      &lt;span class="nt"&gt;volumeMounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;mountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/lib/mysql&lt;/span&gt;
        &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;site-data&lt;/span&gt;
        &lt;span class="nt"&gt;subPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;php&lt;/span&gt;
      &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;php:7.0-apache&lt;/span&gt;
      &lt;span class="nt"&gt;volumeMounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;mountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/www/html&lt;/span&gt;
        &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;site-data&lt;/span&gt;
        &lt;span class="nt"&gt;subPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;html&lt;/span&gt;
    &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;site-data&lt;/span&gt;
      &lt;span class="nt"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;claimName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-lamp-site-data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对上面的配置进行说明:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;volumeMounts&lt;/code&gt; 下面的&lt;code&gt;name&lt;/code&gt;, 就是分配给这个pod的volume的名字&lt;code&gt;site-data&lt;/code&gt;, mysql和php的html分别使用了它的子路径: &lt;code&gt;mysql&lt;/code&gt; 和&lt;code&gt;html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volumes&lt;/code&gt; 对于&lt;code&gt;site-data&lt;/code&gt;这个volume, 是通过PVC的形式提供的, PVC的name为: &lt;code&gt;my-lamp-site-data&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="subpath_1"&gt;使用带有扩展环境变量的 subPath&lt;a class="headerlink" href="#subpath_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;FEATURE STATE:&lt;/strong&gt; &lt;code&gt;Kubernetes v1.15&lt;/code&gt; &lt;a href="https://kubernetes.io/zh/docs/concepts/storage/#"&gt;feature-state-beta.txt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;subPathExpr&lt;/code&gt; 字段从 Downward API 环境变量构造 &lt;code&gt;subPath&lt;/code&gt; 目录名。 在使用此特性之前，必须启用 &lt;code&gt;VolumeSubpathEnvExpansion&lt;/code&gt; 功能开关。 &lt;code&gt;subPath&lt;/code&gt; 和 &lt;code&gt;subPathExpr&lt;/code&gt; 属性是互斥的。&lt;/p&gt;
&lt;p&gt;在这个示例中，Pod 基于 Downward API 中的 Pod 名称，使用 &lt;code&gt;subPathExpr&lt;/code&gt; 在 hostPath 卷 &lt;code&gt;/var/log/pods&lt;/code&gt; 中创建目录 &lt;code&gt;pod1&lt;/code&gt;。 主机目录 &lt;code&gt;/var/log/pods/pod1&lt;/code&gt; 挂载到了容器的 &lt;code&gt;/logs&lt;/code&gt; 中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Pod&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pod1&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;container1&lt;/span&gt;
    &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;POD_NAME&lt;/span&gt;
      &lt;span class="nt"&gt;valueFrom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;fieldRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
          &lt;span class="nt"&gt;fieldPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata.name&lt;/span&gt;
    &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;busybox&lt;/span&gt;
    &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;sh&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;while&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;[&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;];&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;do&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;echo&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hello&amp;#39;;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;sleep&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;10;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;done&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tee&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;/logs/hello.txt&amp;quot;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
    &lt;span class="nt"&gt;volumeMounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;workdir1&lt;/span&gt;
      &lt;span class="nt"&gt;mountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/logs&lt;/span&gt;
      &lt;span class="nt"&gt;subPathExpr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$(POD_NAME)&lt;/span&gt;
  &lt;span class="nt"&gt;restartPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Never&lt;/span&gt;
  &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;workdir1&lt;/span&gt;
    &lt;span class="nt"&gt;hostPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/log/pods&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;env中, 配置了&lt;code&gt;POD_NAME&lt;/code&gt;这个环境变量, 这个变量的值来自于&lt;code&gt;metadata.name&lt;/code&gt;, 即&lt;code&gt;pod1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subPathExpr: $(POD_NAME)&lt;/code&gt; 子路径为&lt;code&gt;$(POD_NAME)&lt;/code&gt;这个变量, 就是&lt;code&gt;pod1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;volume用的是&lt;code&gt;hostPath&lt;/code&gt;, 实际路径为:&lt;code&gt;/var/log/pods&lt;/code&gt;. 那么完整的path就是&lt;code&gt;/var/log/pods/pod1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_1"&gt;总结&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;subPath 还是挺实用的, 是个小功能, 但是确实能提交效率. 比如我昨天搭建的禅道的容器. 就是典型的LAMP: Linux + Apache + Mysql + PHP.&lt;/p&gt;
&lt;p&gt;这些组件中, &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Apache&lt;/code&gt;的&lt;code&gt;www/html&lt;/code&gt;需要挂载&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysql&lt;/code&gt;的数据库需要挂载&lt;/li&gt;
&lt;li&gt;&lt;code&gt;php&lt;/code&gt;的应用数据需要挂载&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果没用subPath, 那么我得这么操作: (以nfs为例)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nfs下手动创建3个子目录: &lt;code&gt;html&lt;/code&gt;  &lt;code&gt;mysql&lt;/code&gt; &lt;code&gt;php&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建3个PV, 分别为: &lt;code&gt;apache-volume&lt;/code&gt;  &lt;code&gt;mysql-volume&lt;/code&gt;  &lt;code&gt;php-volume&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;写3个PVC, 分别是: &lt;code&gt;apache-claim&lt;/code&gt; &lt;code&gt;mysql-claim&lt;/code&gt;  &lt;code&gt;php-claim&lt;/code&gt;. 而且2和3这两步最好一个pv+一个PVC来建. 避免bound乱了.&lt;/li&gt;
&lt;li&gt;再修改&lt;code&gt;Deployment&lt;/code&gt; 配置, 一个个挂载上去.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;△ 算下来,10步.&lt;/p&gt;
&lt;p&gt;用了subPath, 确实节省了工作量: (还是以nfs为例)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建1个PV, 为: &lt;code&gt;LAMP-volume&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建1个PVC, 为: &lt;code&gt;LAMP-claim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;再修改&lt;code&gt;Deployment&lt;/code&gt; 配置, 挂载一个PVC, 用subPath区分.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;△ 算下来, 3步.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 07 Nov 2019 16:20:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-11-07:/use-subpath-in-k8s.html</guid><category>k8s</category><category>最佳实践</category></item><item><title>批处理 有状态等应用类型在K8S上应该如何配置?</title><link>https://www.EWhisper.cn/choose-right-resources-on-k8s-based-your-app-type.html</link><description>&lt;p&gt;&lt;img alt="典型有状态应用-elastic" src="images/k8sandelastic.jpg"&gt;&lt;/p&gt;
&lt;p&gt;众所周知, Kubernetes(K8S)更适合运行&lt;strong&gt;无状态&lt;/strong&gt;应用, 但是除了无状态应用. 我们还会有很多其他应用类型, 如: 有状态应用, 批处理, 监控代理(每台主机上都得跑), 更复杂的应用(如:hadoop生态...). 那么这些应用可以在K8S上运行么? 如何配置?&lt;/p&gt;
&lt;p&gt;其实, K8S针对这些都有对应的不同的运行方式. 您要做的, 就是考虑您的应用程序类型会如何影响其运行方式.&lt;/p&gt;
&lt;p&gt;Kubernetes定义了适用于不同类型应用程序的不同类型的工作负载。要确定适合您的应用程序的工作负载，请根据如下思路来思考您的应用程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;是为了完成任务&lt;/strong&gt;。一个典型例子是一个应用程序，启动时会跑一批数据，并在批处理执行完成后退出。该应用程序可能会定期运行(如每月)。对于这种类型的应用程序，合适的Kubernetes (或OpenShift) 容器平台对象包括&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/"&gt;Jobs&lt;/a&gt;和&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/"&gt;CronJob&lt;/a&gt;  对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;长时间一直运行.&lt;/strong&gt; 对于长时间运行的应用程序，可以编写&lt;a href="https://access.redhat.com/documentation/en-us/openshift_container_platform/4.2/html-single/applications/#deployments-kube-deployments"&gt;Deployment&lt;/a&gt;或&lt;a href="https://access.redhat.com/documentation/en-us/openshift_container_platform/4.2/html-single/applications/#deployments-and-deploymentconfigs"&gt;DeploymentConfig&lt;/a&gt;。(当然啦, 最好是无状态的)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;要求高可用&lt;/strong&gt;. 如果您的应用程序需要高可用，那么您需要调整部署的数量以具有多个实例。&lt;code&gt;Deployment&lt;/code&gt;或&lt;code&gt;DeploymentConfig&lt;/code&gt;资源类型可以包括&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/"&gt;ReplicaSet&lt;/a&gt;。借助&lt;code&gt;ReplicaSet&lt;/code&gt;，Pod可以在多个节点上运行，以确保即使其中的一个或某几个程序中断，这个应用程序始终还是可用的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;需要在每个节点上运行&lt;/strong&gt;。某些类型的Kubernetes应用程序需要在群集中的每个主节点(master)或工作节点(worker)上运行。DNS和监控的应用程序是需要在每个节点上连续运行的应用程序的典型例子。您可以将这种类型的应用程序作为&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/"&gt;DaemonSet&lt;/a&gt;运行。您还可以基于节点标签(node labels)在部分符合条件的节点上运行DaemonSet。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;复杂的应用, 或需要全生命周期管理&lt;/strong&gt;。当您要移交应用程序以便其他运维人员可以很方便地使用它时，请考虑创建一个&lt;a href="https://coreos.com/operators/"&gt;Operator&lt;/a&gt; (类似HELM Charts, 区别是HELM只负责安装, Operator除了安装, 还多了全生命周期管理)。Operator 可让您构建智能的应用，因此它&lt;strong&gt;可以自动处理备份和升级之类的事情&lt;/strong&gt;。与Operator Lifecycle Manager(Operator 生命周期管理器, 简称:OLM)结合使用，集群管理者可以将Operator 暴露给特定的namespace，以便集群中的用户可以运行它们。示例有:&lt;/p&gt;
&lt;p&gt;&lt;img alt="OperatorHub" src="images/Operatorhub.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;weblogic 集群...&lt;/li&gt;
&lt;li&gt;redis 集群...&lt;/li&gt;
&lt;li&gt;elasticsearch 集群...&lt;/li&gt;
&lt;li&gt;Spark 集群...&lt;/li&gt;
&lt;li&gt;MongoDB的副本集, 分片集群...&lt;/li&gt;
&lt;li&gt;TiDB 集群...&lt;/li&gt;
&lt;li&gt;Prometheus&lt;/li&gt;
&lt;li&gt;Istio&lt;/li&gt;
&lt;li&gt;Kafka 集群...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;有身份或编号要求&lt;/strong&gt;。应用程序可能具有身份要求或编号要求。例如，您可能需要运行该应用程序的不多不少刚好三个实例, 并且实例命名为&lt;code&gt;0&lt;/code&gt;，&lt;code&gt;1&lt;/code&gt;和&lt;code&gt;2&lt;/code&gt;。那么&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/"&gt;StatefulSet&lt;/a&gt;是适合于这种应用。StatefulSet对于需要独立存储的应用程序（例如数据库和Zookeeper群集）最有用。总结起来, 就是有状态的应用就选择 StatefulSet .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;总结&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;应用类型&lt;/th&gt;
&lt;th&gt;K8S 资源类型&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Job、批处理&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Jobs&lt;/code&gt; &lt;code&gt;CronJob&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;长时间运行的无状态应用&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Deployment&lt;/code&gt; &lt;code&gt;DeploymentConfig&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DeploymentConfig&lt;/code&gt;是OpenShift特有的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;长时间运行的无状态应用- 高可用&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Deployment&lt;/code&gt;里加&lt;code&gt;ReplicaSet&lt;/code&gt;字段&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;需要在每个节点上运行的应用&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DaemonSet&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;复杂的应用, 或需要全生命周期管理的应用&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Operator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Helm Charts&lt;/code&gt;也适用于安装复杂应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;有状态应用&lt;/td&gt;
&lt;td&gt;&lt;code&gt;StatefulSet&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 23 Oct 2019 14:40:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-10-23:/choose-right-resources-on-k8s-based-your-app-type.html</guid><category>K8S</category><category>最佳实践</category><category>openshift</category><category>java</category></item><item><title>今天被前一个项目组埋的雷炸惨了!</title><link>https://www.EWhisper.cn/I-was-screwed-by-previous-project.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;分析处理经过&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;第一种可能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;第二种可能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;修复&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;总结&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_7"&gt;上个项目组的七宗罪&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;冷汗不止&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今天被前一个项目组埋的雷炸惨了! 事情是这样的:&lt;/p&gt;
&lt;p&gt;&lt;img alt="定时炸弹" src="./images/20191017183113.png"&gt;&lt;/p&gt;
&lt;p&gt;我今年接手了 K8S 平台的管理, 这套 K8S 平台是前一个项目组(某国际性开源商业公司...)实施的. 包括了一整套完整的 CI/CD 流水线.&lt;/p&gt;
&lt;p&gt;这套流水线中有用到SVN , 用作一个简易的制品库, 用来存放软件包, 后续的流水线会从SVN中拉取软件包并打成镜像更新.&lt;/p&gt;
&lt;p&gt;但是今天! 在使用这个流水线的一个系统开发向我反馈流水线运行报错了, 报错如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pipeline error" src="./images/pipeline_error.png"&gt;&lt;/p&gt;
&lt;p&gt;然后我登录到这个SVN仓库看了一眼, 惊出了一身冷汗! &lt;img align="absmiddle" alt="😱" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f631.png" title=":scream:" width="20px"&gt;&lt;img align="absmiddle" alt="😱" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f631.png" title=":scream:" width="20px"&gt;&lt;img align="absmiddle" alt="😱" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f631.png" title=":scream:" width="20px"&gt; -- SVN仓库&lt;strong&gt;空了！数据全没了！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这意味着：&lt;strong&gt;运行近2年, 所有使用这个流水线的业务系统历史发布包, 配置, 以及基础镜像相关的代码, 脚本全没了!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;分析处理经过&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果真是数据全丢的话问题太严重了! 我整个人真的是过了好久我才从这个打击中恢复过来. 第一个想法就是赶紧想办法恢复数据.&lt;/p&gt;
&lt;h3 id="_3"&gt;第一种可能&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;登录了SVN 服务器看了下, 10多个小时前重启过. 第一个想到的可能性就是: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享存储没挂载?&lt;/li&gt;
&lt;li&gt;主机迁移过?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;赶紧去找主机和存储组帮忙查了下. 结果如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该主机没有共享存储&lt;/li&gt;
&lt;li&gt;主机是克隆后的主机, 但是克隆前后数据没有发生过丢失&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;第二种可能&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;排除第一种可能性. 接下来就仔细先检查了下 SVN 服务器运行情况, 是&lt;strong&gt;服务自启动&lt;/strong&gt;的, 启动后进程如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/bin/svnserve --daemon --pid-file&lt;span class="o"&gt;=&lt;/span&gt;/run/svnserve/svnserve.pid -r /var/svn/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看了下&lt;code&gt;/var/svn&lt;/code&gt;, 空空如也, 所有历史数据都没有.&lt;/p&gt;
&lt;p&gt;这时注意到&lt;code&gt;/&lt;/code&gt; 目录磁盘有一定的使用量, 所以就想到了第二种可能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是不是SVN仓库位置不是默认的&lt;code&gt;/var/svn&lt;/code&gt;啊?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以使用&lt;code&gt;du -sh&lt;/code&gt;逐一查看各个目录,  还真有收获, 发现&lt;code&gt;root&lt;/code&gt;和 &lt;code&gt;/project&lt;/code&gt; 目录较大, 进一步查看排除&lt;code&gt;/root&lt;/code&gt;&lt;br&gt;
目录.&lt;/p&gt;
&lt;p&gt;再通过&lt;code&gt;history&lt;/code&gt; 查看历史命令, 发现 K8S 上一期项目组确实将 SVN 仓库放到了&lt;code&gt;/project&lt;/code&gt; 目录下.&lt;/p&gt;
&lt;p&gt;那这次自启动后为啥目录变了? 然后用&lt;code&gt;systemctl&lt;/code&gt;查看 &lt;code&gt;svnserve&lt;/code&gt;的参数, 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl cat svnserve.service
&lt;span class="c1"&gt;# /usr/lib/systemd/system/svnserve.service&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Subversion protocol daemon
&lt;span class="nv"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;syslog.target network.target

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;forking
&lt;span class="nv"&gt;EnvironmentFile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/sysconfig/svnserve
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/svnserve --daemon --pid-file&lt;span class="o"&gt;=&lt;/span&gt;/run/svnserve/svnserve.pid &lt;span class="nv"&gt;$OPTIONS&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个&lt;code&gt;svnserve.service&lt;/code&gt; 服务会调用&lt;code&gt;/etc/sysconfig/svnserve&lt;/code&gt; , 查看该文件配置:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /etc/sysconfig/svnserve
&lt;span class="c1"&gt;# 输出如下:&lt;/span&gt;
&lt;span class="nv"&gt;OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-r /var/svn/&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就是这个地雷&lt;img align="absmiddle" alt="💣" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4a3.png" title=":bomb:" width="20px"&gt;!!!  -- &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上个项目组, 安装了SVN(同时设置了自启动), 改了仓库位置, 却没有将修改后的仓库位置加入到启动参数中!!!&lt;/strong&gt; 导致主机重启后自动带起来的 SVN 仓库不对! &lt;img align="absmiddle" alt="😠" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f620.png" title=":angry:" width="20px"&gt;&lt;img align="absmiddle" alt="😠" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f620.png" title=":angry:" width="20px"&gt;&lt;img align="absmiddle" alt="😠" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f620.png" title=":angry:" width="20px"&gt;&lt;/p&gt;
&lt;h3 id="_5"&gt;修复&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;发现问题后, 修复起来就很简单了, 修改&lt;code&gt;/etc/sysconfig/svnserve&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-r /project/svn/&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后重启 &lt;code&gt;svnserve&lt;/code&gt;就好了.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl restart svnserve.service
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_6"&gt;总结&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_7"&gt;上个项目组的七宗罪&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;不敬畏客户的业务和环境! 没有站在客户角度去考虑周全.&lt;/li&gt;
&lt;li&gt;安装配置使用 SVN时, 过于随意和草率, 从没有考虑过主机重启的情况!&lt;/li&gt;
&lt;li&gt;SVN 安装过程, 未生成详细的过程文档和配置文档. &lt;/li&gt;
&lt;li&gt;SVN 安装后, 未生成详细的运维文档.&lt;/li&gt;
&lt;li&gt;交接期, 只交接了SVN 地址, SVN账号密码. 未进一步交接: 主机账号密码, SVN配置信息.&lt;/li&gt;
&lt;li&gt;项目经理, 对项目细节缺乏把控.&lt;/li&gt;
&lt;li&gt;由此展开, 可能还会埋有更多这样我尚不清楚, 但是与整个K8S 系统紧密相关的雷&lt;img align="absmiddle" alt="💣" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4a3.png" title=":bomb:" width="20px"&gt;. 它们可能散落在K8S 系统的各个角落甚至K8S 之外, 存在较大风险.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_8"&gt;冷汗不止&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;事后我仍然冷汗不止, 因为刚出现问题的第一时间, 我首先想到的是解决图片上的SVN 报错. 而解决的办法, 就是将错就错, 直接初始化一下, 然后用这个空的SVN 仓库... 当然, 如果这样, 那这个雷&lt;img align="absmiddle" alt="💣" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4a3.png" title=":bomb:" width="20px"&gt;, 相当于是我发现它炸了一个了, 我把剩下的熄灭后, 又埋下去了! 那下一次爆炸, 威力就不仅止于此了.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 17 Oct 2019 18:30:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-10-17:/I-was-screwed-by-previous-project.html</guid><category>devops</category><category>docker</category><category>git</category><category>k8s</category><category>openshift</category><category>问题分析</category><category>项目管理</category></item><item><title>在NGINX中根据用户真实IP进行限制</title><link>https://www.EWhisper.cn/deny-xff-ip-in-nginx.html</link><description>&lt;p&gt;&lt;img alt="NGINX LOGO" src="images/nginx-logo.png"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;需求&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;需要根据用户的真实IP进行限制, 但是NGINX前边还有个F5, 导致&lt;code&gt;deny&lt;/code&gt;指令不生效.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;阻止用户的真实IP&lt;strong&gt;不是&lt;/strong&gt;&lt;code&gt;192.168.14.*&lt;/code&gt;和&lt;code&gt;192.168.15.*&lt;/code&gt;的访问请求.&lt;/p&gt;
&lt;h2 id="_2"&gt;实现&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;关于&lt;code&gt;deny&lt;/code&gt;指令的使用, 请参见我的另一篇文章: &lt;a href="https://www.EWhisper.cn/nginx-handbook-2-1-control-access.html"&gt;NGINX 实战手册-安全-访问控制&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最简单的实现如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 前置条件:&lt;/p&gt;
&lt;p&gt;需要nginx前边的load balancer设备(如F5)开启&lt;code&gt;X-Forwarded-For&lt;/code&gt;支持.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;proxy_set_header&lt;/span&gt;   &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt;  &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt; &lt;span class="s"&gt;!~&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;192\.168\.1[45]&amp;quot;)&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;      
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;&lt;/code&gt; 获取请求头&lt;code&gt;X-Forwarded-For&lt;/code&gt;中的用户真实IP, 并附加到&lt;code&gt;$proxy_add_x_forwarded_for&lt;/code&gt;变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if...&lt;/code&gt; &lt;ul&gt;
&lt;li&gt;&lt;code&gt;(...)&lt;/code&gt; 变量&lt;code&gt;$proxy_add_x_forwarded_for&lt;/code&gt; 不匹配正则&lt;code&gt;192\.168\.1[45]&lt;/code&gt; (即&lt;code&gt;192.168.14.*&lt;/code&gt;和&lt;code&gt;192.168.15.*&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return 403&lt;/code&gt;, 如果上边的条件满足, 返回403&lt;/li&gt;
&lt;li&gt;即: 如果真实IP不是&lt;code&gt;192.168.14.*&lt;/code&gt;和&lt;code&gt;192.168.15.*&lt;/code&gt;, 返回403.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果有更复杂的需求, 可以参考这个示例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;HOST&lt;/span&gt; &lt;span class="nv"&gt;$http_host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_set_header&lt;/span&gt;   &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt;  &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_host&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;&amp;quot;yourdomain.hypernode.io:8443&amp;quot;)&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$block_me_now&lt;/span&gt; &lt;span class="s"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt; &lt;span class="s"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;YOURIP)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$block_me_now&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;${block_me_now}B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$block_me_now&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;AB)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="deny"&gt;为啥&lt;code&gt;deny&lt;/code&gt;配置不起作用?&lt;a class="headerlink" href="#deny" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="🤔" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f914.png" title=":thinking:" width="20px"&gt;疑问: 为啥以下的配置不起作用?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;allow&lt;/span&gt; &lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="s"&gt;.168.14.0/24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;allow&lt;/span&gt; &lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="s"&gt;.168.15.0/24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;deny&lt;/span&gt; &lt;span class="s"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据nginx官方文档, &lt;code&gt;deny&lt;/code&gt;指令是根据" client address"进行限制的.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 引用:&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ngx_http_access_module&lt;/code&gt; module allows limiting access to certain &lt;strong&gt;client addresses&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而" client address" 对应的变量是: &lt;code&gt;$remote_addr&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 引用:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$remote_addr&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;​    client address&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="🤔" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f914.png" title=":thinking:" width="20px"&gt;那么, 可不可以直接通过修改变量&lt;code&gt;$remote_addr&lt;/code&gt;, 然后通过配置&lt;code&gt;deny&lt;/code&gt;来实现? 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;proxy_set_header&lt;/span&gt;   &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt;  &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;allow&lt;/span&gt; &lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="s"&gt;.168.14.0/24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;allow&lt;/span&gt; &lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="s"&gt;.168.15.0/24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;deny&lt;/span&gt; &lt;span class="s"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;答案是&lt;/strong&gt;: 不可以.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解释如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于&lt;code&gt;$remote_addr&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;是nginx与客户端进行TCP连接过程中，获得的客户端真实地址. Remote Address 无法伪造，因为建立 TCP 连接需要三次握手，如果伪造了源 IP，无法建立 TCP 连接，更不会有后面的 HTTP 请求&lt;/p&gt;
&lt;p&gt;remote_addr代表客户端的IP，但它的值不是由客户端提供的，而是服务端根据客户端的ip指定的，当你的浏览器访问某个网站时，假设中间没有任何代理，那么网站的web服务器（Nginx，Apache等）就会把remote_addr设为你的机器IP，如果你用了某个代理(其实F5就是个反向代理)，那么你的浏览器会先访问这个代理，然后再由这个代理转发到网站，这样web服务器就会把remote_addr设为这台代理机器的IP。&lt;/p&gt;
&lt;p&gt;但是实际场景中，我们即使有代理，也需要将&lt;code&gt;$remote_addr&lt;/code&gt;设置为真实的用户IP，以便记录在日志当中，当然nginx是有这个功能，但是需要编译的时候添加--with-http_realip_module 这个模块，默认是没有安装的。(我也没有安装)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sat, 12 Oct 2019 17:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-10-12:/deny-xff-ip-in-nginx.html</guid><category>nginx</category><category>最佳实践</category></item><item><title>如何在Ansible中复制多个文件和目录</title><link>https://www.EWhisper.cn/how-to-copy-files-and-directories-in-ansible.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;将文件从本地计算机复制到远程服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;将目录从本地计算机复制到远程服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;在同一台远程计算机上的不同文件夹之间复制文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#with_items"&gt;使用with_items复制多个文件/目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;复制具有不同权限/目的地设置的多个文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pattern"&gt;复制与pattern（通配符）匹配的文件夹中的所有文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;复制之前在远程服务器中创建文件备份&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ad-hoc"&gt;使用临时(Ad-hoc)方法复制文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;将文件从远程计算机复制到本地计算机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#copy"&gt;使用 copy 模块写入文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#copy_1"&gt;copy 模块的返回值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;将查找到的文件复制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img alt="Ansible Logo" src="images/ansible_logo_black-1024x138.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;本文大部分内容为译文.&lt;/p&gt;
&lt;p&gt;原文地址: &lt;a href="http://www.mydailytutorials.com/how-to-copy-files-and-directories-in-ansible-using-copy-and-fetch-modules/"&gt;http://www.mydailytutorials.com/how-to-copy-files-and-directories-in-ansible-using-copy-and-fetch-modules/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks♪(･ω･)ﾉ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ansible 通过 &lt;em&gt;copy&lt;/em&gt; 和 &lt;em&gt;fetch&lt;/em&gt; 模块提供了基本的复制文件和目录的功能.&lt;/p&gt;
&lt;p&gt;您可以使用&lt;a href="http://docs.ansible.com/ansible/copy_module.html"&gt;&lt;em&gt;copy&lt;/em&gt; 模块&lt;/a&gt;将文件和文件夹从本地服务器复制到远程服务器，在远程服务器之间（仅文件）复制，更改文件的权限等。&lt;/p&gt;
&lt;p&gt;如果您需要在替换变量后复制文件，例如具有IP更改的配置文件，请改用&lt;a href="http://docs.ansible.com/ansible/template_module.html"&gt;&lt;em&gt;template&lt;/em&gt; 模块&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="_1"&gt;将文件从本地计算机复制到远程服务器&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;默认情况下，&lt;em&gt;copy&lt;/em&gt; 模块将检查本地计算机上 &lt;code&gt;src&lt;/code&gt; 参数中设置的文件。然后它将文件复制到目标路径中指定的远程计算机 &lt;code&gt;dest&lt;/code&gt; (目标)路径。下面的示例将当前用户（在本地计算机上）的主目录中的sample.txt文件复制到远程服务器上的&lt;code&gt;/tmp&lt;/code&gt;目录中。由于我们没有为文件指定任何权限，因此远程文件的默认权限设置为&lt;code&gt;-rw-rw-r–(0664)&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;blocks&lt;/span&gt;
  &lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Ansible copy file to remote server&lt;/span&gt;
    &lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;~/sample.txt&lt;/span&gt;
      &lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/tmp&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注1:&lt;/p&gt;
&lt;p&gt;如果该文件已存在于远程服务器上，并且和源文件的内容不同，则在运行任务时，将修改目标文件。您可以通过设置 &lt;code&gt;force&lt;/code&gt; 参数来控制它。默认设置为&lt;code&gt;yes&lt;/code&gt;。因此，它默认情况下会修改文件。如果您不希望在源文件不同的情况下修改文件，则可以将其设置为&lt;code&gt;no&lt;/code&gt;。仅当远程服务器上不存在该文件时，以下任务才会复制该文件。示例如下:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;blocks&lt;/span&gt;
  &lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Ansible copy file force&lt;/span&gt;
    &lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;~/sample.txt&lt;/span&gt;
      &lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/tmp&lt;/span&gt; 
      &lt;span class="nt"&gt;force&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;no&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注2:&lt;/p&gt;
&lt;p&gt;如果在本地计算机上找不到该文件，则Ansible将引发类似于以下的错误。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fatal: [remote-machine-1]: FAILED! =&amp;gt; {“changed”: false, “failed”: true, “msg”: “Unable to find ‘~/sample.txt’ in expected paths.”}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_2"&gt;将目录从本地计算机复制到远程服务器&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;您也可以使用Ansible &lt;em&gt;copy&lt;/em&gt; 模块复制文件夹/目录。如果&lt;code&gt;src&lt;/code&gt;路径是目录，则将以递归方式复制它。这意味着将复制整个目录。&lt;/p&gt;
&lt;p&gt;现在，有两个不同的变体。取决于是否在&lt;code&gt;src&lt;/code&gt;路径的末尾使用 &lt;code&gt;/&lt;/code&gt;字符。&lt;/p&gt;
&lt;p&gt;第一种方法将&lt;strong&gt;在远程服务器上创建一个目录&lt;/strong&gt;，其名称在&lt;code&gt;src&lt;/code&gt;参数中设置。然后它将复制源文件夹的内容并将其粘贴到该目录。 &lt;strong&gt;如果你想要这个行为，那么不要在src参数路径后加&lt;code&gt;/&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面的Ansible复制目录示例将首先在远程服务器的&lt;code&gt;/tmp&lt;/code&gt;中创建一个名为&lt;code&gt;copy_dir_ex&lt;/code&gt;的目录。查看&lt;code&gt;tmp&lt;/code&gt;文件夹中会有一个&lt;code&gt;copy_dir_ex&lt;/code&gt;文件夹。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blocks&lt;/span&gt;
  &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ansible&lt;/span&gt; &lt;span class="k"&gt;copy&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;
    &lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mdtutorials2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Documents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Ansible&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;copy_dir_ex&lt;/span&gt;
      &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mdtutorials2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Documents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Ansible&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;

&lt;span class="k"&gt;output&lt;/span&gt;
&lt;span class="c1"&gt;------&lt;/span&gt;
&lt;span class="n"&gt;Ansible&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Pro&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Ansible&lt;/span&gt; &lt;span class="n"&gt;mdtutorials2$&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;copy_dir_ex&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;file1&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;file2&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;file3&lt;/span&gt;
    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;tmp2&lt;/span&gt;
        &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;file4&lt;/span&gt;
        &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;file5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二种方法将仅将文件从源目录复制到远程服务器。它&lt;strong&gt;不会&lt;/strong&gt;在远程服务器上&lt;strong&gt;创建目录&lt;/strong&gt;。如果您想要这种行为，则&lt;strong&gt;在src参数中的路径之后输入&lt;code&gt;/&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在下面的示例中，&lt;code&gt;copy_dir_ex&lt;/code&gt;内部的文件将被复制到远程服务器的&lt;code&gt;/tmp&lt;/code&gt;文件夹中。如您所见，&lt;code&gt;src&lt;/code&gt;目录未在目标中创建。仅复制目录的内容。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blocks&lt;/span&gt;
  &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ansible&lt;/span&gt; &lt;span class="k"&gt;copy&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;
    &lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mdtutorials2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Documents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Ansible&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;copy_dir_ex&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
      &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mdtutorials2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Documents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Ansible&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;

&lt;span class="k"&gt;output&lt;/span&gt;
&lt;span class="c1"&gt;------&lt;/span&gt;
&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;file1&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;file2&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;file3&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;tmp2&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;file4&lt;/span&gt;
    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;file5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果需要设置远程目录的权限，可以使用  &lt;code&gt;directory_mode&lt;/code&gt;参数来进行设置。仅当远程计算机上不存在目录时，才设置权限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;您还可以设置目录的组和所有者。您应该将各自的名称赋值给&lt;code&gt;group&lt;/code&gt;和&lt;code&gt;owner&lt;/code&gt;的参数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id="_3"&gt;在同一台远程计算机上的不同文件夹之间复制文件&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;您还可以在远程服务器上的各个位置之间复制文件。您必须将&lt;code&gt;remote_src&lt;/code&gt;参数设置为&lt;code&gt;yes&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;以下示例将复制远程服务器的&lt;code&gt;/tmp&lt;/code&gt;目录中的 &lt;em&gt;hello6&lt;/em&gt; 文件，并将其粘贴到&lt;code&gt;/etc/&lt;/code&gt;目录中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;blocks&lt;/span&gt;
  &lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Ansible copy files remote to remote&lt;/span&gt;
    &lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/tmp/hello6&lt;/span&gt;
      &lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc&lt;/span&gt;
      &lt;span class="nt"&gt;remote_src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;从Ansible 2.2.1.0开始，不支持在远程服务器中复制目录。如果尝试，将出现以下错误:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fatal: [remote-machine-1]: FAILED! =&amp;gt; {"changed": false, "failed": true, "msg": "Remote copy does not support recursive copy of directory: /tmp/copy_dir_ex"}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="with_items"&gt;使用with_items复制多个文件/目录&lt;a class="headerlink" href="#with_items" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果要复制多个文件，则可以使用&lt;code&gt;with_items&lt;/code&gt;遍历它们。&lt;/p&gt;
&lt;p&gt;以下示例将复制 home 目录列表给出的多个文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;blocks&lt;/span&gt;
  &lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Ansible copy multiple files with_items&lt;/span&gt;
    &lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;~/{{item}}&lt;/span&gt;
      &lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/tmp&lt;/span&gt;
      &lt;span class="nt"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0774&lt;/span&gt;
    &lt;span class="nt"&gt;with_items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello1&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello2&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello3&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sub_folder/hello4&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_4"&gt;复制具有不同权限/目的地设置的多个文件&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在上述任务中，我们正在复制多个文件，但是所有文件都具有相同的权限和相同的目的地。但是有时我们想为不同的文件设置权限，或者每个文件的目标文件夹都不同。这可以通过与字典结构一起使用&lt;code&gt;with_items&lt;/code&gt;来实现。&lt;/p&gt;
&lt;p&gt;在以下任务中，我试图将3个文件复制到2个不同的文件夹中。此外，每个文件的文件权限也不同。我提供了一个字典结构，其中提到了每个文件的不同设置。&lt;/p&gt;
&lt;p&gt;从输出中可以看到，文件已复制到给定的文件夹，并且权限设置正确。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;all&lt;/span&gt;
  &lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Copy multiple files in Ansible with different permissions&lt;/span&gt;
    &lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;item.src&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
      &lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;item.dest&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
      &lt;span class="nt"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;item.mode&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;with_items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt; src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/mdtutorials2/test1&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/tmp/devops_system1&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0777&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt; src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/mdtutorials2/test2&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/tmp/devops_system2&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0707&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt; src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/mdtutorials2/test3&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/tmp2/devops_system3&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0575&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;output&lt;/span&gt;
&lt;span class="gh"&gt;======&lt;/span&gt;
mdtutorials2@system01:~$ ls -lrt /tmp
drwxrwxrwx 2 root          root          4096 Oct  9 14:28 devops_system1
drwx---rwx 2 root          root          4096 Oct  9 14:28 devops_system2

mdtutorials2@system01:~$ ls -lrt /tmp2
-r-xrwxr-x 1 root root 0 Oct  9 14:33 devops_system3
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="pattern"&gt;复制与pattern（通配符）匹配的文件夹中的所有文件&lt;a class="headerlink" href="#pattern" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果需要复制目录中与通配符匹配的所有文件，则可以使用&lt;code&gt;with_fileglob&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在以下示例中，将本地计算机/ tmp目录中所有以'hello'开头的文件复制到远程服务器。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;blocks&lt;/span&gt;
  &lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Ansible copy multiple files with wildcard matching.&lt;/span&gt;
    &lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;item&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
      &lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc&lt;/span&gt;
    &lt;span class="nt"&gt;with_fileglob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/tmp/hello*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_5"&gt;复制之前在远程服务器中创建文件备份&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;复制文件时，可能会发生错误。您可能会复制错误的文件，写入错误的内容等。这将造成很多麻烦。因此，如果在远程服务器上创建远程文件的备份将很有帮助。&lt;/p&gt;
&lt;p&gt;Ansible复制模块为此提供了一个&lt;code&gt;backup&lt;/code&gt;参数。如果远程文件存在且与复制的文件不同，则将创建一个新文件。新文件将通过附加时间戳和原始文件名来命名。备份参数的默认值为&lt;code&gt;no&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;例如，以下示例将在远程服务器的&lt;code&gt;/tmp&lt;/code&gt;目录中创建&lt;code&gt;helloworld.txt&lt;/code&gt;的备份。它将被命名为&lt;code&gt;helloworld.txt.8925.2019-10-12@14:53:13&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;blocks&lt;/span&gt;
  &lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ansible copy file backup example&lt;/span&gt;
    &lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;~/helloworld.txt&lt;/span&gt;
      &lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/tmp&lt;/span&gt;
      &lt;span class="nt"&gt;backup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="ad-hoc"&gt;使用临时(Ad-hoc)方法复制文件&lt;a class="headerlink" href="#ad-hoc" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以上大多数任务也可以以 Ad-hoc 方式完成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ansible blocks -m copy -a &lt;span class="s2"&gt;&amp;quot;src=~/sample.txt dest=/tmp&amp;quot;&lt;/span&gt; -i inventory.ini
ansible blocks -m copy -a &lt;span class="s2"&gt;&amp;quot;src=~/copy_dir_ex dest=/tmp&amp;quot;&lt;/span&gt; -i inventory.ini
ansible blocks -m copy -a &lt;span class="s2"&gt;&amp;quot;src=/tmp/hello6 dest=/tmp/hello7 remote_src=yes&amp;quot;&lt;/span&gt; -s -i inventory.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_6"&gt;将文件从远程计算机复制到本地计算机&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;您还可以将文件从远程服务器复制到本地计算机。这可以使用Ansible &lt;em&gt;fetch&lt;/em&gt;模块完成。当您要将某些日志文件从远程服务器复制到本地计算机时，这很有用。&lt;/p&gt;
&lt;p&gt;默认情况下，将在目标目录（本地计算机）中创建一个以您正在连接的每个主机命名的目录。提取的文件将被复制到此处。如果远程服务器上不存在该文件，则默认情况下不会引发任何错误。&lt;/p&gt;
&lt;p&gt;在以下示例中，我在 remote-server-1 上运行任务。该文件将被复制到 本地计算机的&lt;code&gt;/etc/remote-server-1/tmp&lt;/code&gt;目录中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;blocks&lt;/span&gt;
  &lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Ansible fetch files from remote server to the local machine using Ansible fetch module&lt;/span&gt;
    &lt;span class="nt"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/tmp/hello2&lt;/span&gt;
      &lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc&lt;/span&gt;
      &lt;span class="nt"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0774&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果您不希望出现这种情况，并且需要将文件直接复制到目标目录，则应使用&lt;code&gt;flat&lt;/code&gt;参数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;blocks&lt;/span&gt;
  &lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Ansible fetch directory example with flat parameter set&lt;/span&gt;
    &lt;span class="nt"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/tmp/hello2&lt;/span&gt;
      &lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/tmp/&lt;/span&gt;
      &lt;span class="nt"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0774&lt;/span&gt;
      &lt;span class="nt"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果您使用&lt;code&gt;flat&lt;/code&gt;参数，并且文件名不是唯一的，则每次获取文件时都会替换现有文件。&lt;/li&gt;
&lt;li&gt;如果您希望在源文件丢失的情况下引发错误，则将&lt;code&gt;fail_on_missing&lt;/code&gt;参数设置为&lt;code&gt;yes&lt;/code&gt;。如果远程文件不存在，以下示例将引发错误。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;blocks&lt;/span&gt;
  &lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Ansible fetch example with fail_on_missing set&lt;/span&gt;
    &lt;span class="nt"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/tmp/fetch.txt&lt;/span&gt;
      &lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/tmp/&lt;/span&gt;
      &lt;span class="nt"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0774&lt;/span&gt;
      &lt;span class="nt"&gt;fail_on_missing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;如果尝试将目标路径&lt;code&gt;dest&lt;/code&gt;设置为目录，请在路径末尾添加“&lt;code&gt;\&lt;/code&gt;。否则Ansible将运行该任务，就像目标路径&lt;code&gt;dest&lt;/code&gt;是一个文件一样, 并尝试替换它。您可能会收到以下错误: (&lt;strong&gt;只针对加参数&lt;code&gt;flat&lt;/code&gt;的情况&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fatal: [remote-machine-1]: FAILED! =&amp;gt; {“failed”: true, “msg”: “dest is an existing directory, use a trailing slash if you want to fetch src into that directory”}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="copy"&gt;使用 copy 模块写入文件&lt;a class="headerlink" href="#copy" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;您还可以使用Ansible &lt;em&gt;copy&lt;/em&gt; 模块中的&lt;code&gt;contents&lt;/code&gt;参数写入文件。以下示例将给&lt;code&gt;content&lt;/code&gt;参数提供的值写入check4.txt文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;all&lt;/span&gt;
  &lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Ansible write to a file example&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
        &lt;span class="no"&gt;Content parameter example.&lt;/span&gt;
        &lt;span class="no"&gt;Check4.txt will be created after this task is executed.&lt;/span&gt;
      &lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/Users/mdtutorials2/Documents/Ansible/check4.txt&lt;/span&gt;
      &lt;span class="nt"&gt;backup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="copy_1"&gt;copy 模块的返回值&lt;a class="headerlink" href="#copy_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;copy&lt;/em&gt; 模块为每个任务返回一些值。完整列表可在&lt;a href="http://docs.ansible.com/ansible/copy_module.html#return-values"&gt;Ansible文档中找到&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true,&lt;/span&gt; 
    &lt;span class="s"&gt;&amp;quot;checksum&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;98d8fb24e8b2c2cec9c5ae963bd65c3657f50b16&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;&amp;quot;dest&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/tmp/sample.txt&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;&amp;quot;gid&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0,&lt;/span&gt; 
    &lt;span class="s"&gt;&amp;quot;group&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;&amp;quot;md5sum&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ce83d23d6eb6bf079e1fc5c448ea9a9f&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;&amp;quot;mode&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0644&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;&amp;quot;size&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;13,&lt;/span&gt; 
    &lt;span class="s"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/mdtutorials2/.ansible/tmp/ansible-tmp-1489974916.02-178756727263160/source&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;&amp;quot;uid&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_7"&gt;将查找到的文件复制&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使用 &lt;em&gt;find&lt;/em&gt; 模块递归查找&lt;code&gt;/appl/scripts/inq&lt;/code&gt;下的所有符合&lt;code&gt;patterns="inq.Linux*"&lt;/code&gt;的文件, 并将这些文件赋值到&lt;code&gt;/usr/local/bin&lt;/code&gt; 目录.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lnx&lt;/span&gt;
  &lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;find&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;paths=&amp;quot;/appl/scripts/inq&amp;quot; recurse=yes patterns=&amp;quot;inq.Linux*&amp;quot;&lt;/span&gt;
      &lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file_to_copy&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;src={{ item.path }} dest=/usr/local/sbin/&lt;/span&gt;
      &lt;span class="nt"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;root&lt;/span&gt;
      &lt;span class="nt"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0775&lt;/span&gt;
      &lt;span class="nt"&gt;with_items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;files_to_copy.files&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;find&lt;/em&gt; 模块的返回值如下:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Returned&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;examined&lt;/strong&gt; 类型:integer&lt;/td&gt;
&lt;td&gt;success&lt;/td&gt;
&lt;td&gt;查找的文件系统对象数. &lt;strong&gt;示例&lt;/strong&gt;: 34&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;files&lt;/strong&gt; 类型: list&lt;/td&gt;
&lt;td&gt;success&lt;/td&gt;
&lt;td&gt;找到符合指定条件的所有匹配项 &lt;strong&gt;示例:&lt;/strong&gt;&lt;code&gt;[{'path': '/var/tmp/test1', 'mode': '0644', '...': '...', 'checksum': '16fac7be61a6e4591a33ef4b729c5c3302307523'}, {'path': '/var/tmp/test2', '...': '...'}]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;matched&lt;/strong&gt; 类型: integer&lt;/td&gt;
&lt;td&gt;success&lt;/td&gt;
&lt;td&gt;匹配数量 &lt;strong&gt;示例:&lt;/strong&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;具体解释:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;register: file_to_copy&lt;/code&gt; 所有返回值注册为&lt;code&gt;file_to_copy&lt;/code&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;files_to_copy.files&lt;/code&gt; 即找到的符合指定条件的所有匹配项 &lt;strong&gt;示例:&lt;/strong&gt;&lt;code&gt;[{'path': '/var/tmp/test1', 'mode': '0644', '...': '...', 'checksum': '16fac7be61a6e4591a33ef4b729c5c3302307523'}, {'path': '/var/tmp/test2', '...': '...'}]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;item.path&lt;/code&gt;: 具体的符合的文件路径, 即: &lt;code&gt;/var/tmp/test1&lt;/code&gt; &lt;code&gt;/var/tmp/test2&lt;/code&gt;...&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sat, 12 Oct 2019 15:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-10-12:/how-to-copy-files-and-directories-in-ansible.html</guid><category>python</category><category>devops</category><category>ansible</category><category>linux</category><category>译文</category></item><item><title>Ansible 新手指南 - 如何批量管理 NGINX</title><link>https://www.EWhisper.cn/how-to-manager-nginx-using-ansible.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;免密配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ansible"&gt;安装 Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ansible_1"&gt;使用 Ansible 模块&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ansible-doc"&gt;ansible-doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ansible_2"&gt;使用 Ansible 模块示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ansible-playbook"&gt;使用 Ansible Playbook&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#nginx"&gt;安装并启动NGINX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nginx_1"&gt;停止并卸载NGINX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nginx_2"&gt;配置NGINX 并重启&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ansible是自动化运维工具，基于Python开发，实现了批量系统配置、批量程序部署、批量运行命令等功能。Ansible是基于模块(module)和剧本(playbook)工作。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible Logo" src="images/ansible_logo_black-1024x138.png"&gt;&lt;/p&gt;
&lt;p&gt;接下来通过以下几个方面来演示 Ansible 的基本使用:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Linux 配置 SSH 免密&lt;/li&gt;
&lt;li&gt;安装 Ansible&lt;/li&gt;
&lt;li&gt;使用 Ansible 模块&lt;/li&gt;
&lt;li&gt;使用 Ansible Playbook&lt;ol&gt;
&lt;li&gt;安装并启动 NGINX&lt;/li&gt;
&lt;li&gt;停止并卸载 NGINX&lt;/li&gt;
&lt;li&gt;配置NGINX 并重启&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实验环境如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;管理端: (安装 Ansible)&lt;ol&gt;
&lt;li&gt;系统: Debian&lt;/li&gt;
&lt;li&gt;IP: 192.168.1.1&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;远程主机1和2:&lt;ol&gt;
&lt;li&gt;系统: Ubuntu&lt;/li&gt;
&lt;li&gt;IP: 192.168.1.106和192.168.1.107&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;为了方便演示, 以下命令都是基于&lt;code&gt;root&lt;/code&gt;用户&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_2"&gt;免密配置&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;即: 基于公钥的登陆&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 1. 创建密钥对(创建后默认位于 ~/.ssh)&lt;/span&gt;
ssh-keygen -t ed25519 -C &lt;span class="s2"&gt;&amp;quot;Login to nginx lab&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# 2. 使用 ssh-copy-id 命令安装公钥&lt;/span&gt;
ssh-copy-id -i /root/.ssh/id_ed25519 root@192.168.1.106
ssh-copy-id -i /root/.ssh/id_ed25519 root@192.168.1.107
&lt;span class="c1"&gt;# 3. 验证免密是否配置成功: (无需输入密码)&lt;/span&gt;
ssh root@192.168.1.106 -i /root/.ssh/id_ed25519
ssh root@192.168.1.107 -i /root/.ssh/id_ed25519
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;免密配置有多种情况会导致失败, 本文不一一列举详细失败原因. 如果失败查看远程主机的&lt;code&gt;/var/log/secure&lt;/code&gt; 日志.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="ansible"&gt;安装 Ansible&lt;a class="headerlink" href="#ansible" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;APT安装方式如下: (其他类似, 不一一列举)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt install -y ansible
&lt;span class="c1"&gt;# 验证&lt;/span&gt;
ansible --version
&lt;span class="c1"&gt;# 输出如下:&lt;/span&gt;
&lt;span class="c1"&gt;#ansible 2.2.1.0&lt;/span&gt;
&lt;span class="c1"&gt;#  config file = /etc/ansible/ansible.cfg&lt;/span&gt;
&lt;span class="c1"&gt;#  configured module search path = Default w/o overrides&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="ansible_1"&gt;使用 Ansible 模块&lt;a class="headerlink" href="#ansible_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 引用:&lt;/p&gt;
&lt;p&gt;Ansible附带了许多模块（module 称为“module library”），这些模块可以直接在远程主机上或通过playbooks执行。&lt;/p&gt;
&lt;p&gt;用户也可以编写自己的模块。这些模块可以控制系统资源，比如服务、包或文件（实际上是任何东西），或者处理执行系统命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先对&lt;code&gt;/etc/ansible/hosts&lt;/code&gt;做最基本配置:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[web]&lt;/span&gt;
&lt;span class="na"&gt;192.168.1.106&lt;/span&gt;
&lt;span class="na"&gt;192.168.1.107&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上文的web就是一个host group, 可以直接通过&lt;code&gt;web&lt;/code&gt;进行引用. &lt;/p&gt;
&lt;h3 id="ansible-doc"&gt;ansible-doc&lt;a class="headerlink" href="#ansible-doc" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;所有的模块的使用方法可以通过以下命令查询:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ansible-doc -s &amp;lt;module_name&amp;gt;
ansible-doc -s ping
&lt;span class="c1"&gt;# - name: Try to connect to host, verify a usable python and return `pong&amp;#39; on success.&lt;/span&gt;
&lt;span class="c1"&gt;#  action: ping&lt;/span&gt;
ansible-doc -s &lt;span class="nb"&gt;command&lt;/span&gt;
&lt;span class="c1"&gt;#- name: Executes a command on a remote node&lt;/span&gt;
&lt;span class="c1"&gt;#  action: command&lt;/span&gt;
&lt;span class="c1"&gt;#      chdir                  # cd into this directory before running the command&lt;/span&gt;
&lt;span class="c1"&gt;#      creates                # a filename or (since 2.0) glob pattern, when it already #exists, this step will *not* be run.&lt;/span&gt;
&lt;span class="c1"&gt;#      executable             # change the shell used to execute the command. Should be #an absolute path to the executable.&lt;/span&gt;
&lt;span class="c1"&gt;#      free_form=             # the command module takes a free form command to run.  #There is no parameter actually named &amp;#39;free form&amp;#39;. See the examples!&lt;/span&gt;
&lt;span class="c1"&gt;#      removes                # a filename or (since 2.0) glob pattern, when it does not #exist, this step will *not* be run.&lt;/span&gt;
&lt;span class="c1"&gt;#      warn                   # if command warnings are on in ansible.cfg, do not warn #about this particular line if set to no/false.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="ansible_2"&gt;使用 Ansible 模块示例&lt;a class="headerlink" href="#ansible_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;下面以 &lt;em&gt;command&lt;/em&gt;和&lt;em&gt;ping&lt;/em&gt; module为例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ansible web -a &lt;span class="s2"&gt;&amp;quot;pwd chdir=/tmp&amp;quot;&lt;/span&gt;
ansible web -m ping
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;ansible&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;pwd chdir=/tmp&amp;quot;&lt;/span&gt;
&lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;168&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;106&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;

&lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;168&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;107&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;

&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;ansible&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;ping&lt;/span&gt;
&lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;168&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;106&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;168&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;107&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;简单说明:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;web&lt;/code&gt;: 在&lt;code&gt;/etc/ansible/hosts&lt;/code&gt;中配置的 web 主机组. 包含本次实验的: 远程主机1和2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-a "pwd chdir=/tmp"&lt;/code&gt;: &lt;code&gt;-a MODULE_ARGS&lt;/code&gt; 模块的参数. &lt;ul&gt;
&lt;li&gt;参数格式为: &lt;code&gt;key=value&lt;/code&gt;.  如本例中的: &lt;code&gt;chdir=/tmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pwd&lt;/code&gt; 为shell命令.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-m ping&lt;/code&gt;: ansible命令参数 - 模块, 后跟模块名. (默认为 &lt;code&gt;command&lt;/code&gt;). &lt;code&gt;"pong"&lt;/code&gt; 表示ping成功, 返回不是&lt;code&gt;"pong"&lt;/code&gt;则连接异常.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ansible-playbook"&gt;使用 Ansible Playbook&lt;a class="headerlink" href="#ansible-playbook" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Playbook&lt;/strong&gt;(剧本)是使用ansible的一种完全不同的形式，非常强大。&lt;/p&gt;
&lt;p&gt;简单地说，playbook是一个非常简单的配置管理和多机部署系统的基础，不像任何已经存在的系统，它非常适合部署复杂的应用程序。&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://github.com/ansible/ansible-examples"&gt;ansible-examples&lt;/a&gt; git仓库中, 有一些完整的playbook具体展示了这些技术。建议可以看看。&lt;/p&gt;
&lt;h3 id="nginx"&gt;安装并启动NGINX&lt;a class="headerlink" href="#nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;创建安装并启动NGINX的 Ansible Playbook YAML文件: &lt;code&gt;vi nginx_install.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;web&lt;/span&gt;
  &lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
  &lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;install nginx&lt;/span&gt;
      &lt;span class="nt"&gt;apt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name=nginx state=latest&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;start nginx&lt;/span&gt;
      &lt;span class="nt"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;
          &lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;started&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;简单说明:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;- hosts: web&lt;/code&gt;: 该playbook首先说明应将其应用于inventory 资源中的&lt;code&gt;web&lt;/code&gt;主机。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;become: true&lt;/code&gt;: 告诉Ansible提升权限（如sudo）来执行此playbook中的所有任务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tasks&lt;/code&gt;: 定义实际&lt;strong&gt;tasks&lt;/strong&gt;(任务)的部分。第一个任务安装nginx，第二个任务是启动nginx.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ansible-playbook nginx_install.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLAY&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*******************************************************************************************************&lt;/span&gt;

&lt;span class="n"&gt;TASK&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Gathering&lt;/span&gt; &lt;span class="n"&gt;Facts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*******************************************************************************************&lt;/span&gt;
&lt;span class="nl"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;192.168.1.106&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nl"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;192.168.1.107&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;TASK&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ensure&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;latest&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*********************************************************************&lt;/span&gt;
&lt;span class="nl"&gt;changed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;192.168.1.106&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nl"&gt;changed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;192.168.1.107&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;PLAY&lt;/span&gt; &lt;span class="n"&gt;RECAP&lt;/span&gt; &lt;span class="o"&gt;*******************************************************************************************************&lt;/span&gt;
&lt;span class="mf"&gt;192.168.1.106&lt;/span&gt;              &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="n"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="n"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mf"&gt;192.168.1.107&lt;/span&gt;              &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="n"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="n"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这时NGINX已经安装并启动完毕.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;下面几个小章节的&lt;code&gt;ansible-playbook&lt;/code&gt; 执行结果类似, 就不一一贴出来了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="nginx_1"&gt;停止并卸载NGINX&lt;a class="headerlink" href="#nginx_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;创建停止并卸载NGINX的 Ansible Playbook YAML文件: &lt;code&gt;vi nginx_uninstall.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;web&lt;/span&gt;
  &lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;stop nginx&lt;/span&gt;
      &lt;span class="nt"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;
          &lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;stopped&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;uninstall nginx&lt;/span&gt;
      &lt;span class="nt"&gt;apt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name=nginx state=absent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再次执行并查看结果.&lt;/p&gt;
&lt;h3 id="nginx_2"&gt;配置NGINX 并重启&lt;a class="headerlink" href="#nginx_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;步骤如下:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个nginx conf的模板文件: &lt;code&gt;vi static_site.conf.tpl&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="s"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="s"&gt;[::]:80&lt;/span&gt; &lt;span class="s"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/usr/share/nginx/html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kn"&gt;index.html&lt;/span&gt; &lt;span class="s"&gt;index.htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;把以上文件放到&lt;code&gt;/etc/nginx/sites-available/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;/etc/nginx/sites-enabled/&lt;/code&gt;里创建个软链接指向该文件.&lt;/li&gt;
&lt;li&gt;创建一个&lt;code&gt;index.html&lt;/code&gt;页面: &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello ansible&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World Ansible&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Running on {{ inventory_hostname }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="5"&gt;
&lt;li&gt;重启NGINX.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;完整Ansible Playbook&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;整合之前的安装, 完整的Ansible Playbook 如下: &lt;code&gt;vi nginx.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;web&lt;/span&gt;
  &lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;src_root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/tmp&lt;/span&gt;
  &lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;install nginx&lt;/span&gt;
      &lt;span class="nt"&gt;apt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name=nginx state=latest&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;start nginx&lt;/span&gt;
      &lt;span class="nt"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;
          &lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;started&lt;/span&gt;
      &lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;copy nginx conf&lt;/span&gt;
      &lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;src_root&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/static_site.conf.tpl&lt;/span&gt;
        &lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/nginx/sites-available/static_site.conf&lt;/span&gt;
      &lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;create symlink&lt;/span&gt;
      &lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/nginx/sites-available/static_site.conf&lt;/span&gt;
        &lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/nginx/sites-enabled/000-default.conf&lt;/span&gt;
        &lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;link&lt;/span&gt;
      &lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;copy the html&lt;/span&gt;
      &lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;src_root&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/index.html&lt;/span&gt;
        &lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/usr/share/nginx/html/index.html&lt;/span&gt;
      &lt;span class="nt"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;restart nginx&lt;/span&gt;
  &lt;span class="nt"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;restart nginx&lt;/span&gt;
      &lt;span class="nt"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;
        &lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;restarted&lt;/span&gt;
      &lt;span class="nt"&gt;become&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再次执行并查看结果. 分别访问: &lt;a href="http://192.168.1.106/"&gt;http://192.168.1.106/&lt;/a&gt; 和 &amp;lt;&lt;a href="http://192.168.1.107/"&gt;http://192.168.1.107/&lt;/a&gt; 查看NGINX运行状态.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单说明:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;页面, 可以通过&lt;code&gt;{{ vars }}&lt;/code&gt; 来使用一些变量. 可以使用ansible已有的, 也可以使用后续自定义的. 本例中使用的&lt;code&gt;inventory_hostname&lt;/code&gt; 为ansible自带的变量.&lt;/p&gt;
&lt;p&gt;Ansible Playbook  - &lt;code&gt;nginx.yml&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vars&lt;/code&gt;: 定义变量，&lt;code&gt;src_root&lt;/code&gt;以后在任务中使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tasks&lt;/code&gt;: 分别为:&lt;ul&gt;
&lt;li&gt;安装&lt;/li&gt;
&lt;li&gt;启动&lt;/li&gt;
&lt;li&gt;复制NGINX配置文件&lt;/li&gt;
&lt;li&gt;创建软链接&lt;/li&gt;
&lt;li&gt;复制html文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nofity&lt;/code&gt;和&lt;code&gt;handlers&lt;/code&gt;: 用&lt;code&gt;notify&lt;/code&gt;触发一个在Ansible中称为&lt;strong&gt;处理程序&lt;/strong&gt; - &lt;code&gt;handler&lt;/code&gt;的事件，该事件将在下面用于重启nginx。&lt;code&gt;notify&lt;/code&gt;引发事件后，将触发相应的处理程序（&lt;code&gt;restart nginx&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;总结&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文通过批量管理NGINX这样一个实际案例, 介绍了Ansible的基本用法. 你可以在工作中使用类似的语法来创建属于你自己的剧本(playbook). &lt;img align="absmiddle" alt="😆" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f606.png" title=":laughing:" width="20px"&gt;&lt;img align="absmiddle" alt="😆" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f606.png" title=":laughing:" width="20px"&gt;&lt;img align="absmiddle" alt="😆" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f606.png" title=":laughing:" width="20px"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 08 Oct 2019 18:30:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-10-08:/how-to-manager-nginx-using-ansible.html</guid><category>python</category><category>devops</category><category>ansible</category><category>linux</category></item><item><title>Kubernetes 中分析调试网络流量的4种方式</title><link>https://www.EWhisper.cn/how-to-tcpdump-in-k8s.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-sidecar"&gt;方法一 - 使用 Sidecar&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#sidecar"&gt;Sidecar 前来救援!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sidecar_1"&gt;部署 Sidecar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;捕获和分析流量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#-netshoot"&gt;方法二 - 使用 netshoot&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;用途&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#network-namespaces-"&gt;Network Namespaces - 网络名称空间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;针对容器的用法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#kubernetes"&gt;针对 Kubernetes 的用法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;网络问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;被包含的包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#-network-namespace"&gt;方法三 - 利用Network Namespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-kubectl-ksniff"&gt;方法四 - 使用 kubectl 插件ksniff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#krew-kubectl"&gt;题外话: krew - kubectl 插件包管理器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ksniff"&gt;安装ksniff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;使用方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在当今世界, 分布式系统, 微服务/SOA架构遍地, 服务之间的许多交互和通信都不再是同一主机的不同线程或进程, 而是跨主机, 甚至跨网络区域. 那么一旦相关服务出现问题, 我们就会需要调试服务间的通讯, 主机间的网络...&lt;/p&gt;
&lt;p&gt;&lt;img alt="复杂的网络架构" src="images/smartscape-complex-environment-572-9c4b25ca16.png"&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes 中的应用出了问题, 往往需要进行网络抓包分析. 本文介绍了在 Kubernetes 中网络调试分析的4种方法.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 sidecar&lt;/li&gt;
&lt;li&gt;使用 &lt;a href="https://github.com/nicolaka/netshoot"&gt;netshoot&lt;/a&gt; - 一个 Docker + Kubernetes网络故障排除的瑞士军刀容器&lt;/li&gt;
&lt;li&gt;利用Network Namespace&lt;/li&gt;
&lt;li&gt;使用 kubectl 插件 - &lt;code&gt;ksniff&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="-sidecar"&gt;方法一 - 使用 Sidecar&lt;a class="headerlink" href="#-sidecar" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;本章节为译文, 原文链接: &lt;a href="https://developers.redhat.com/blog/2019/02/27/sidecars-analyze-debug-network-traffic-kubernetes-pod/"&gt;红帽开发者博客 - Using sidecars to analyze and debug network traffic in OpenShift and Kubernetes pods&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;By&lt;/strong&gt; &lt;a href="https://developers.redhat.com/blog/author/duncandoyle/"&gt;Duncan Doyle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;February 27, 2019&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;sidecar应用范围不仅仅止于此, 比如: APM监控的agent就可以通过这种方式来挂载. 详见我的另一篇博文: &lt;a href="https://www.EWhisper.cn/monitoring-docker-app-with-dynatrace.html"&gt;使用 Dynatrace AppMon 监控 Docker 应用&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在分布式计算、容器和微服务的世界中，服务之间的许多交互和通信都是通过RESTful api完成的。在开发这些api和服务之间的交互时，我经常需要调试服务之间的通信，特别是当事情看起来不像预期的那样工作时。&lt;/p&gt;
&lt;p&gt;在容器出现之前，我只需将服务部署到本地机器上，启动Wireshark，执行测试，并分析服务之间的HTTP通信。对我来说，这是一种快速分析软件中通信问题的简单而有效的方法。然而，这种调试方法在一个容器化的世界中并不适用。&lt;/p&gt;
&lt;p&gt;首先，容器很可能在您的机器无法直接访问的内部容器平台网络上运行。第二个问题是，按照容器设计最佳实践，容器只包含执行其任务所需的最小应用程序和库集。这意味着像tcpdump这样的工具通常在容器中不可用。这使得调试和分析容器之间的网络通信变得更加困难，从而使得调试微服务间的通信比在非容器环境中更加困难。本文展示了一种解决方案。&lt;/p&gt;
&lt;h3 id="sidecar"&gt;Sidecar 前来救援!&lt;a class="headerlink" href="#sidecar" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="sidecar" src="images/sidecar.jpg"&gt;&lt;/p&gt;
&lt;p&gt;在过去的几个月里，我尝试了各种方法来克服这个问题，最终形成了我将在本文中概述的方法。它是捕获Kubernetes/OpenShift pods之间的网络流量数据的简单方法，允许开发人员更好地分析和调试容器化应用程序中的通信问题，并更快、更有效地解决问题。&lt;/p&gt;
&lt;p&gt;我们将使用tcpdump捕获一个所谓的PCAP(packet capture)文件，该文件将包含pod的网络流量。然后可以将这个PCAP文件加载到Wireshark之类的工具中来分析流量，在本例中，分析在pod中运行的服务的RESTful通信。在本文中，我将使用Red Hat Process Automation Manager产品的KIE服务器(执行服务器)作为示例，但是这种方法应该适用于任何类型的容器化应用程序。&lt;/p&gt;
&lt;p&gt;要克服的第一个问题是Kubernetes pod中tcpdump命令的可用性。KIE服务器容器映像没有安装tcpdump。其次，容器不提供从Red Hat存储库安装tcpdump的实用程序。为了克服这个问题，我们使用了“sidecar容器”的概念。&lt;/p&gt;
&lt;h4&gt;Sidecar 概念&lt;/h4&gt;
&lt;p&gt;sidecar容器是与实际服务/应用程序运行在相同pod中的容器，能够为服务/应用程序提供附加功能。&lt;strong&gt;sidecar容器的一个例子是Istio的Envoy sidecar，它使pod成为服务网格的一部分&lt;/strong&gt;。在本例中，我们将部署一个sidecar容器，该容器提供tcpdump实用程序。由于&lt;strong&gt;pod中的多个容器共享相同的网络层&lt;/strong&gt;，所以我们可以使用sidecar来捕获进出KIE服务器的网络流量。&lt;/p&gt;
&lt;h3 id="sidecar_1"&gt;部署 Sidecar&lt;a class="headerlink" href="#sidecar_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在这个例子中，我部署了&lt;a href="https://github.com/jbossdemocentral/rhpam7-mortgage-demo"&gt;Red Hat Process Automation Manager 7 Mortgage Demo&lt;/a&gt;，它将在我的OpenShift namespace中创建两个pod。一个pod运行Business Central workbench，另一个pod是执行服务器的pod。这两个组件之间的通信是通过REST完成的，这是我们将要捕获的流量。&lt;/p&gt;
&lt;p&gt;&lt;img alt="OpenShift Namespace Overview" src="./images/Screenshot-2019-02-20-at-09.04.48.png"&gt;&lt;/p&gt;
&lt;p&gt;我们的目标是捕获KIE服务器pod上的网络流量，以便分析Business Central workbench 发送给KIE服务器的RESTful命令。要做到这一点，我们首先需要附加(attach)一个 sidecar 到KIE服务器的pod.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在Overview页面中，单击要分析的pod的名称。这将打开&lt;em&gt;部署配置(Deployment Config, 简称DC)&lt;/em&gt;页面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;em&gt;部署配置&lt;/em&gt;屏幕的右上角，单击Actions -&amp;gt; Edit YAML。这将打开DC 的YAML配置。&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" src="images/Screenshot-2019-02-20-at-09.08.55.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向下滚动，直到看到单词&lt;code&gt;containers&lt;/code&gt;。我们将添加一个额外的容器，安装了tcpdump的sidecar到pod中。直接在&lt;code&gt;containers&lt;/code&gt; 定义下添加以下YAML片段:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tcpdump&lt;/span&gt;
   &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;corfr/tcpdump&lt;/span&gt;
   &lt;span class="l l-Scalar l-Scalar-Plain"&gt;command&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/bin/sleep&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;infinity&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="img" src="images/Screenshot-2019-02-20-at-09.17.56.png"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;保存配置。这将部署一个新的pod，它现在由两个容器组成:一个容器包含KIE服务器，另一个容器包含我们的tcpdump工具，它将无限期地持续运行。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_2"&gt;捕获和分析流量&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;随着sidecar的部署和运行，我们现在可以开始捕获数据了。我尝试的方法之一是使用&lt;code&gt;oc rsh&lt;/code&gt;命令远程执行sidecar中的&lt;code&gt;tcpdump&lt;/code&gt;命令，将网络数据流输出到FIFO文件，并将数据直接导入Wireshark。由于各种原因，这种方法失败了。其中一个问题是，&lt;code&gt;tcpdump&lt;/code&gt;向&lt;code&gt;stderr&lt;/code&gt;发送信息消息，但是这些消息与&lt;code&gt;stdout&lt;/code&gt;在相同的流中, 并且是通过SSH接收，从而破坏了进入Wireshark的数据。&lt;/p&gt;
&lt;p&gt;我最后使用的方法是登录到sidecar容器，并在sidecar中运行&lt;code&gt;tcpdump&lt;/code&gt;命令来创建PCAP文件。当您捕获了足够的数据后，就可以停止捕获过程并将PCAP文件复制到您希望使用Wireshark进行网络流量分析的机器上。具体步骤如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在您的开发机器上，用&lt;code&gt;oc&lt;/code&gt; 客户端连接到OpenShift实例，并激活正确的项目(project, 即namespace)，运行&lt;code&gt;oc get pods&lt;/code&gt;命令来列出您的pods:&lt;/p&gt;
&lt;p&gt;&lt;img alt="oc get pods" src="images/Screenshot-2019-02-20-at-09.26.30.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用以下命令登录到我们的KIE服务器pod的tcpdump容器中:&lt;code&gt;oc rsh -c tcpdump rhpam7-mortgage-kieserver-2-zcpsn&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;tcpdump&lt;/code&gt;容器中，运行此命令以启动网络流量捕获过程: &lt;code&gt;tcpdump -s 0 -n -w /tmp/kieserver.pcap&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行要分析的网络流量的测试。在本例中，我将从Business Central workbench中启动一个业务流程，它将向KIE服务器发送一个RESTful请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;捕获足够的数据后，在&lt;code&gt;tcpdump&lt;/code&gt;容器中使用&lt;code&gt;Ctrl+C&lt;/code&gt;完成捕获过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回到本地机器。将PCAP文件从pod复制到本地机器: &lt;code&gt;oc cp -c tcpdump rhpam7-mortgage-kieserver-2-zcpsn:tmp/kieserver.pcap kieserver.pcap&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用Wireshark打开PCAP文件并分析网络流量。在这个例子中，我正在分析我的HTTP POST方法，它创建了Mortgage 进程的一个新实例:&lt;/p&gt;
&lt;p&gt;&lt;img alt="wireshark 分析" src="images/Screenshot-2019-02-20-at-09.45.47.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_3"&gt;总结&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在容器环境(如Kubernetes和/或OpenShift)中分析pod之间的网络通信可能比在非容器环境中更困难一些。然而，sidecar容器的概念为开发人员提供了一种简单的工具，可以将容器连同所需的开发工具和实用程序附加到微服务pod上。&lt;strong&gt;这避免了开发人员必须在应用程序容器映像本身中安装这些调试工具，从而保持容器的轻便和干净。&lt;/strong&gt;使用像&lt;code&gt;oc rsh&lt;/code&gt;和&lt;code&gt;oc cp&lt;/code&gt;这样的OpenShift工具，我展示了如何轻松地从pod捕获网络流量数据并将数据带到开发机器进行分析。&lt;/p&gt;
&lt;h2 id="-netshoot"&gt;方法二 - 使用 netshoot&lt;a class="headerlink" href="#-netshoot" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/nicolaka/netshoot"&gt;Netshoot&lt;/a&gt; - Docker + Kubernetes网络故障排除的瑞士军刀容器&lt;/p&gt;
&lt;p&gt;&lt;img alt="瑞士军刀" src="images/403141.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_4"&gt;用途&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Docker和Kubernetes网络故障排除变得复杂。通过正确理解Docker和Kubernetes网络的工作方式和正确的工具集，您可以排除故障并解决这些网络问题。netshoot容器有一组强大的网络troubleshoot工具，可以用来排除Docker网络问题。与这些工具一起出现的还有一组用例，展示了如何在真实场景中使用这个容器。&lt;/p&gt;
&lt;h3 id="network-namespaces-"&gt;Network Namespaces - 网络名称空间&lt;a class="headerlink" href="#network-namespaces-" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在开始使用这个工具之前，有一点很重要:网络名称空间。网络名称空间提供与网络相关的系统资源的隔离。Docker使用网络和其他类型的名称空间(&lt;code&gt;pid&lt;/code&gt;、&lt;code&gt;mount&lt;/code&gt;、&lt;code&gt;user&lt;/code&gt;...)为每个容器创建一个隔离的环境。从接口、路由到ip的所有内容都完全隔离在容器的网络名称空间中。&lt;/p&gt;
&lt;p&gt;Kubernetes也使用网络名称空间。&lt;strong&gt;Kubelets为每个pod创建一个网络名称空间，其中该pod中的所有容器共享相同的网络名称空间(eths、IP、tcp套接字……)。这是Docker容器和Kubernetes pod之间的关键区别。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;名称空间很酷的一点是您可以在它们之间进行切换。您可以输入不同容器的网络名称空间，使用甚至没有安装在该容器上的工具在其网络堆栈上执行一些故障排除。此外，netshoot可以通过使用主机的网络名称空间来对主机本身进行故障排除。这允许您在不直接在主机或应用程序包上安装任何新包的情况下执行任何故障排除。&lt;/p&gt;
&lt;h3 id="_5"&gt;针对容器的用法&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;容器的网络名称空间&lt;/strong&gt;:如果您的应用程序的容器存在网络问题，您可以像这样使用容器的网络名称空间启动netshoot: &lt;code&gt;$ docker run -it --net container:&amp;lt;container_name&amp;gt; nicolaka/netshoot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主机的网络名称空间&lt;/strong&gt;:如果您认为网络问题在于主机本身，那么可以使用该主机的网络名称空间启动netshoot。命令: &lt;code&gt;$ docker run -it --net host nicolaka/netshoot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络的网络名称空间&lt;/strong&gt;:如果要对Docker网络进行故障排除，可以使用&lt;code&gt;nsenter&lt;/code&gt;输入网络的名称空间。这将在下面的&lt;code&gt;nsenter&lt;/code&gt;部分进行解释。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="kubernetes"&gt;针对 Kubernetes 的用法&lt;a class="headerlink" href="#kubernetes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;:如果你想打开一个临时的容器来调试。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ kubectl run --generator=run-pod/v1 tmp-shell --rm -i --tty --image nicolaka/netshoot -- /bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果您想在主机的网络名称空间上spin up一个容器。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ kubectl run tmp-shell --generator=run-pod/v1 --rm -i --tty --overrides='{"spec": {"hostNetwork": true}}' --image nicolaka/netshoot -- /bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;同样的原理, &lt;code&gt;netshoot&lt;/code&gt;也可以通过sidecar的方式进行使用.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_6"&gt;网络问题&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;许多网络问题可能导致应用程序性能下降。其中一些问题可能与底层网络基础设施有关。其他问题可能与主机或Docker级别的配置错误有关。让我们来看看常见的网络问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;延迟(latency)&lt;/li&gt;
&lt;li&gt;路由(routing)&lt;/li&gt;
&lt;li&gt;DNS解析(DNS resolution)&lt;/li&gt;
&lt;li&gt;防火墙(firewall)&lt;/li&gt;
&lt;li&gt;不完整的ARP(incomplete ARPs)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决这些问题，&lt;code&gt;netshoot&lt;/code&gt;包含了一组强大的工具，如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img alt="netshoot 工具集" src="images/netshoot-all-tools.png"&gt;&lt;/p&gt;
&lt;h3 id="_7"&gt;被包含的包&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以下包被包含在&lt;code&gt;netshoot&lt;/code&gt;中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;apache2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;
&lt;span class="n"&gt;bash&lt;/span&gt;
&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;
&lt;span class="n"&gt;bird&lt;/span&gt;
&lt;span class="n"&gt;bridge&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;
&lt;span class="n"&gt;busybox&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;extras&lt;/span&gt;
&lt;span class="n"&gt;calicoctl&lt;/span&gt;
&lt;span class="n"&gt;conntrack&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;
&lt;span class="n"&gt;ctop&lt;/span&gt;
&lt;span class="n"&gt;curl&lt;/span&gt;
&lt;span class="n"&gt;dhcping&lt;/span&gt;
&lt;span class="n"&gt;drill&lt;/span&gt;
&lt;span class="n"&gt;ethtool&lt;/span&gt;
&lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="n"&gt;fping&lt;/span&gt;
&lt;span class="n"&gt;iftop&lt;/span&gt;
&lt;span class="n"&gt;iperf&lt;/span&gt;
&lt;span class="n"&gt;iproute2&lt;/span&gt;
&lt;span class="n"&gt;ipset&lt;/span&gt;
&lt;span class="n"&gt;iptables&lt;/span&gt;
&lt;span class="n"&gt;iptraf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ng&lt;/span&gt;
&lt;span class="n"&gt;iputils&lt;/span&gt;
&lt;span class="n"&gt;ipvsadm&lt;/span&gt;
&lt;span class="n"&gt;libc6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;compat&lt;/span&gt;
&lt;span class="n"&gt;liboping&lt;/span&gt;
&lt;span class="n"&gt;mtr&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;snmp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;
&lt;span class="n"&gt;netcat&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;openbsd&lt;/span&gt;
&lt;span class="n"&gt;netgen&lt;/span&gt;
&lt;span class="n"&gt;nftables&lt;/span&gt;
&lt;span class="n"&gt;ngrep&lt;/span&gt;
&lt;span class="n"&gt;nmap&lt;/span&gt;
&lt;span class="n"&gt;nmap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nping&lt;/span&gt;
&lt;span class="n"&gt;openssl&lt;/span&gt;
&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;crypto&lt;/span&gt;
&lt;span class="n"&gt;py2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;virtualenv&lt;/span&gt;
&lt;span class="n"&gt;python2&lt;/span&gt;
&lt;span class="n"&gt;scapy&lt;/span&gt;
&lt;span class="n"&gt;socat&lt;/span&gt;
&lt;span class="n"&gt;strace&lt;/span&gt;
&lt;span class="n"&gt;tcpdump&lt;/span&gt;
&lt;span class="n"&gt;tcptraceroute&lt;/span&gt;
&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;
&lt;span class="n"&gt;vim&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="-network-namespace"&gt;方法三 - 利用Network Namespace&lt;a class="headerlink" href="#-network-namespace" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;正如&lt;a href="#Network Namespaces - 网络名称空间"&gt;方法二中提到的Network Namespace&lt;/a&gt;概念, 实际上, 不同的容器, &lt;strong&gt;只是在宿主机上不同 namespace 运行的进程而已&lt;/strong&gt;. 因此要在不同的容器抓包可以简单地使用命令切换 network namespace 即可，可以使用在宿主机上的 &lt;code&gt;tcpdump&lt;/code&gt; 等应用进行抓包。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;前提条件: 宿主机上已安装&lt;code&gt;tcpdump&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参考链接: &lt;a href="https://ruofeng.me/2018/09/19/capture-packets-in-kubernetes/"&gt;在 k8s 中对指定 Pod 进行抓包&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体操作步骤如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查看指定 pod 运行在哪个宿主机上: &lt;code&gt;kubctl describe pod &amp;lt;pod&amp;gt; -n mservice&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获得容器的 pid: &lt;code&gt;docker inspect -f {{.State.Pid}} &amp;lt;container&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进入该容器的 network namespace: &lt;code&gt;nsenter --target &amp;lt;PID&amp;gt; -n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用宿主机的&lt;code&gt;tcpdump&lt;/code&gt; 抓包, 指定 eth0 网卡: &lt;code&gt;tcpdump -i eth0 tcp and port 80 -vvv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;或者直接抓包并导出到文件: &lt;code&gt;tcpdump -i eth0 -w /tmp/out.cap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;从远程 &lt;code&gt;scp&lt;/code&gt; 到本地: &lt;code&gt;scp ipaddr:/tmp/out.cap ./&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;之后在 Wireshark 中可以打开文件非常直观得查看过滤抓到的数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="-kubectl-ksniff"&gt;方法四 - 使用 kubectl 插件&lt;code&gt;ksniff&lt;/code&gt;&lt;a class="headerlink" href="#-kubectl-ksniff" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/eldadru/ksniff"&gt;Github: ksniff&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/2757.png" title=":exclamation:" width="20px"&gt; 注意:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ksniff还没有为生产做好准备，目前不建议为生产工作负载运行Ksniff。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="krew-kubectl"&gt;题外话: krew - kubectl 插件包管理器&lt;img align="absmiddle" alt="📦" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4e6.png" title=":package:" width="20px"&gt;&lt;a class="headerlink" href="#krew-kubectl" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;前提条件: kubectl v1.12或更高.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/kubernetes-sigs/krew/"&gt;Github: krew&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Krew是kubectl插件的包管理器。(后续会使用krew来安装&lt;code&gt;ksniff&lt;/code&gt;, 方便很多)&lt;/p&gt;
&lt;h4&gt;什么是 &lt;code&gt;krew&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📦" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4e6.png" title=":package:" width="20px"&gt; ​krew是一个使&lt;a href="https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/"&gt;kubectl插件&lt;/a&gt;易于使用的工具。krew帮助您发现插件，并在您的机器上安装和管理它们。它类似于apt、dnf或brew等工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对于 kubectl 用户&lt;/strong&gt;: krew帮助您以一致的方式查找、安装和管理kubectl插件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;krew 易于使用:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl krew search                 &lt;span class="c1"&gt;# show all plugins&lt;/span&gt;
kubectl krew install view-secret    &lt;span class="c1"&gt;# install a plugin named &amp;quot;view-secret&amp;quot;&lt;/span&gt;
kubectl view-secret                 &lt;span class="c1"&gt;# use the plugin&lt;/span&gt;
kubectl krew upgrade                &lt;span class="c1"&gt;# upgrade installed plugins&lt;/span&gt;
kubectl krew uninstall view-secret  &lt;span class="c1"&gt;# uninstall a plugin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;详细文档请参阅&lt;a href="https://github.com/kubernetes-sigs/krew/blob/master/docs/USER_GUIDE.md"&gt;用户指南&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;查看在krew上&lt;a href="http://sigs.k8s.io/krew-index/plugins.md"&gt;可用的kubectl插件列表&lt;/a&gt;，或者运行&lt;code&gt;kubectl krew search&lt;/code&gt;来发现可用的插件。&lt;/p&gt;
&lt;h4&gt;安装 krew&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Bash 和 ZSH&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确保&lt;code&gt;git&lt;/code&gt; 已安装;&lt;/li&gt;
&lt;li&gt;运行如下命令, 下载并安装&lt;code&gt;krew&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nb"&gt;set&lt;/span&gt; -x&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;mktemp -d&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  curl -fsSLO &lt;span class="s2"&gt;&amp;quot;https://github.com/kubernetes-sigs/krew/releases/download/v0.3.1/krew.{tar.gz,yaml}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  tar zxvf krew.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  ./krew-&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;uname &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s1"&gt;&amp;#39;[:upper:]&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[:lower:]&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;_amd64&amp;quot;&lt;/span&gt; install &lt;span class="se"&gt;\&lt;/span&gt;
    --manifest&lt;span class="o"&gt;=&lt;/span&gt;krew.yaml --archive&lt;span class="o"&gt;=&lt;/span&gt;krew.tar.gz
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;添加&lt;code&gt;$HOME/.krew/bin&lt;/code&gt; 目录到&lt;code&gt;PATH&lt;/code&gt;环境变量. 如下: &lt;code&gt;export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"&lt;/code&gt; 并重启下shell生效.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="ksniff"&gt;安装&lt;code&gt;ksniff&lt;/code&gt;&lt;a class="headerlink" href="#ksniff" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;通过&lt;code&gt;krew&lt;/code&gt;: &lt;code&gt;kubectl krew install sniff&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="_8"&gt;使用方法&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;kubectl&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;12&lt;/span&gt;:
&lt;span class="nv"&gt;kubectl&lt;/span&gt; &lt;span class="nv"&gt;plugin&lt;/span&gt; &lt;span class="nv"&gt;sniff&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;POD_NAME&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; [&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;NAMESPACE_NAME&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;] [&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;CONTAINER_NAME&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;] [&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;INTERFACE_NAME&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;] [&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;CAPTURE_FILTER&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;] [&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;o&lt;/span&gt; &lt;span class="nv"&gt;OUTPUT_FILE&lt;/span&gt;] [&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;l&lt;/span&gt; &lt;span class="nv"&gt;LOCAL_TCPDUMP_FILE&lt;/span&gt;] [&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="nv"&gt;REMOTE_TCPDUMP_FILE&lt;/span&gt;]

&lt;span class="nv"&gt;kubectl&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;12&lt;/span&gt;:
&lt;span class="nv"&gt;kubectl&lt;/span&gt; &lt;span class="nv"&gt;sniff&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;POD_NAME&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; [&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;NAMESPACE_NAME&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;] [&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;CONTAINER_NAME&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;] [&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;INTERFACE_NAME&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;] [&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;CAPTURE_FILTER&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;] [&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;o&lt;/span&gt; &lt;span class="nv"&gt;OUTPUT_FILE&lt;/span&gt;] [&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;l&lt;/span&gt; &lt;span class="nv"&gt;LOCAL_TCPDUMP_FILE&lt;/span&gt;] [&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="nv"&gt;REMOTE_TCPDUMP_FILE&lt;/span&gt;]

&lt;span class="nv"&gt;POD_NAME&lt;/span&gt;: &lt;span class="nv"&gt;Required&lt;/span&gt;. &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;kubernetes&lt;/span&gt; &lt;span class="nv"&gt;pod&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="nv"&gt;capture&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;s traffic.&lt;/span&gt;
&lt;span class="nv"&gt;NAMESPACE_NAME&lt;/span&gt;: &lt;span class="nv"&gt;Optional&lt;/span&gt;. &lt;span class="nv"&gt;Namespace&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;. &lt;span class="nv"&gt;used&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;specify&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;target&lt;/span&gt; &lt;span class="nv"&gt;namespace&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;operate&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt;.
&lt;span class="nv"&gt;CONTAINER_NAME&lt;/span&gt;: &lt;span class="nv"&gt;Optional&lt;/span&gt;. &lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="nv"&gt;omitted&lt;/span&gt;, &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;first&lt;/span&gt; &lt;span class="nv"&gt;container&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;pod&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="nv"&gt;chosen&lt;/span&gt;.
&lt;span class="nv"&gt;INTERFACE_NAME&lt;/span&gt;: &lt;span class="nv"&gt;Optional&lt;/span&gt;. &lt;span class="nv"&gt;Pod&lt;/span&gt; &lt;span class="nv"&gt;Interface&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;capture&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt;. &lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="nv"&gt;omited&lt;/span&gt;, &lt;span class="nv"&gt;all&lt;/span&gt; &lt;span class="nv"&gt;Pod&lt;/span&gt; &lt;span class="nv"&gt;interfaces&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="nv"&gt;captured&lt;/span&gt;.
&lt;span class="nv"&gt;CAPTURE_FILTER&lt;/span&gt;: &lt;span class="nv"&gt;Optional&lt;/span&gt;. &lt;span class="nv"&gt;specify&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;specific&lt;/span&gt; &lt;span class="nv"&gt;tcpdump&lt;/span&gt; &lt;span class="nv"&gt;capture&lt;/span&gt; &lt;span class="nv"&gt;filter&lt;/span&gt;. &lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="nv"&gt;omitted&lt;/span&gt; &lt;span class="nv"&gt;no&lt;/span&gt; &lt;span class="nv"&gt;filter&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="nv"&gt;used&lt;/span&gt;.
&lt;span class="nv"&gt;OUTPUT_FILE&lt;/span&gt;: &lt;span class="nv"&gt;Optional&lt;/span&gt;. &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;specified&lt;/span&gt;, &lt;span class="nv"&gt;ksniff&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="nv"&gt;redirect&lt;/span&gt; &lt;span class="nv"&gt;tcpdump&lt;/span&gt; &lt;span class="nv"&gt;output&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt; &lt;span class="nv"&gt;instead&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;wireshark&lt;/span&gt;.
&lt;span class="nv"&gt;LOCAL_TCPDUMP_FILE&lt;/span&gt;: &lt;span class="nv"&gt;Optional&lt;/span&gt;. &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;specified&lt;/span&gt;, &lt;span class="nv"&gt;ksniff&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="nv"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;this&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;tcpdump&lt;/span&gt; &lt;span class="nv"&gt;binary&lt;/span&gt;.
&lt;span class="nv"&gt;REMOTE_TCPDUMP_FILE&lt;/span&gt;: &lt;span class="nv"&gt;Optional&lt;/span&gt;. &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;specified&lt;/span&gt;, &lt;span class="nv"&gt;ksniff&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="nv"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;specified&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;remote&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;upload&lt;/span&gt; &lt;span class="nv"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;tcpdump&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;举例:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubectl sniff mypod -n myproject -o /tmp/mypod.pcap&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_9"&gt;总结&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了在容器或K8S中进行网络调试和分析, 本文列举了4种方法, 现在进行总结归纳:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 sidecar - sidecar 容器所在的&lt;strong&gt;pod中的多个容器共享相同的网络层&lt;/strong&gt;, 且sidecar容器可以包含&lt;code&gt;tcpdump&lt;/code&gt;等工具;&lt;/li&gt;
&lt;li&gt;利用Network Namespace -  不同的容器, &lt;strong&gt;只是在宿主机上不同 namespace 运行的进程而已&lt;/strong&gt;. 容器的网络也是如此.&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;netshoot&lt;/code&gt; - &lt;code&gt;netshoot&lt;/code&gt; 其实是包含一系列的常用网络分析调试工具集的容器, 真正的使用方法其实还是以上2种:&lt;ol&gt;
&lt;li&gt;通过 sidecar挂载&lt;/li&gt;
&lt;li&gt;利用Network Namespace分析调试&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;使用 kubectl 插件 - &lt;code&gt;ksniff&lt;/code&gt;. &lt;em&gt;个人猜想, 这个只是一个通过 kubectl 插件的封装, 底层原理应该还是 Network Namespace.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上这些方法, 有不同的前提条件和使用场景, 希望本文读完会让你的K8S调试技能有所提升. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 04 Oct 2019 14:50:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-10-04:/how-to-tcpdump-in-k8s.html</guid><category>k8s</category><category>openshift</category><category>containers</category><category>性能调优</category><category>网络</category><category>译文</category></item><item><title>如何在 OpenShift 中运行 Collabora Office</title><link>https://www.EWhisper.cn/how-to-run-container-with-su-in-openshift.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;前言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#collabora-office"&gt;Collabora Office 简介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#-"&gt;分析 - 需要哪些特权&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;需要的特权&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;解决方案&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#openshift-root"&gt;在 OpenShift 中启用容器的 ROOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#openshift-capabilities"&gt;在 OpenShift 中为容器提供其他 Capabilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;近期在尝试 office 文档在线编辑和预览的一些解决方案, 目前在使用Collabora Office, 但是&lt;a href="https://hub.docker.com/r/collabora/code"&gt;Collabora的docker镜像&lt;/a&gt;在OpenShift中运行不起来, 一直提示&lt;code&gt;Operation not permitted&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="collabora-office"&gt;Collabora Office 简介&lt;a class="headerlink" href="#collabora-office" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.collaboraoffice.com/"&gt;Collabora Office&lt;/a&gt; 提供强大的Office 套件, 使您能够访问文档、编写新内容并协同工作。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Collabora Office" src="./images/Collabora-Office.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以在自己的服务器上安装套件&lt;/li&gt;
&lt;li&gt;可以和其他应用（如：nextcloud owncloud等）或你自己的应用进行整合&lt;/li&gt;
&lt;li&gt;i18n级别的兼容性&lt;/li&gt;
&lt;li&gt;协同编辑&lt;/li&gt;
&lt;li&gt;可以完美融入进自己的解决方案&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="-"&gt;分析 - 需要哪些特权&lt;a class="headerlink" href="#-" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://hub.docker.com/r/collabora/code"&gt;Collabora的docker镜像&lt;/a&gt;在OpenShift中运行不起来, 一直提示&lt;code&gt;Operation not permitted&lt;/code&gt;. 其实原因权限不允许, 它需要做的一些操作在OpenShift中是被禁止的(出于企业级安全的考虑). 所以我们将它需要的权限一项一项加上就好了.&lt;/p&gt;
&lt;p&gt;要搞清楚它需要哪些权限, 我们可以看一下它的&lt;a href="https://github.com/CollaboraOnline/Docker-CODE"&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/a&gt;及其相关内容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ubuntu:16.04&lt;/span&gt;

&lt;span class="c"&gt;# Environment variables&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; domain localhost
&lt;span class="k"&gt;ENV&lt;/span&gt; LC_CTYPE en_US.UTF-8

&lt;span class="c"&gt;# Setup scripts for LibreOffice Online&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt; /scripts/install-libreoffice.sh /
&lt;span class="k"&gt;ADD&lt;/span&gt; /scripts/start-libreoffice.sh /
&lt;span class="k"&gt;RUN&lt;/span&gt; bash install-libreoffice.sh

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 9980&lt;/span&gt;

&lt;span class="c"&gt;# Entry point&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt; bash start-libreoffice.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;dockerfile&lt;/code&gt;中如上所示, 这个文件虽然简单, 但是我们可以得到2个信息:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有&lt;code&gt;USER&lt;/code&gt; 指令, 那么这个镜像可能是需要&lt;code&gt;root&lt;/code&gt;权限才能运行的.&lt;/li&gt;
&lt;li&gt;加入了2个脚本. 其中 &lt;code&gt;start-libreoffice.sh&lt;/code&gt;是在容器启动的时候运行的, 所以主要来看一下这个脚本的内容:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c1"&gt;# Fix domain name resolution from jails&lt;/span&gt;
cp /etc/resolv.conf /etc/hosts /opt/lool/systemplate/etc/

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DONT_GEN_SSL_CERT&lt;/span&gt;&lt;span class="p"&gt;-set&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; set&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="c1"&gt;# Generate new SSL certificate instead of using the default&lt;/span&gt;
mkdir -p /opt/ssl/
&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/ssl/
mkdir -p certs/ca
openssl genrsa -out certs/ca/root.key.pem &lt;span class="m"&gt;2048&lt;/span&gt;
openssl req -x509 -new -nodes -key certs/ca/root.key.pem -days &lt;span class="m"&gt;9131&lt;/span&gt; -out certs/ca/root.crt.pem -subj &lt;span class="s2"&gt;&amp;quot;/C=DE/ST=BW/L=Stuttgart/O=Dummy Authority/CN=Dummy Authority&amp;quot;&lt;/span&gt;
mkdir -p certs/&lt;span class="o"&gt;{&lt;/span&gt;servers,tmp&lt;span class="o"&gt;}&lt;/span&gt;
mkdir -p &lt;span class="s2"&gt;&amp;quot;certs/servers/localhost&amp;quot;&lt;/span&gt;
openssl genrsa -out &lt;span class="s2"&gt;&amp;quot;certs/servers/localhost/privkey.pem&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;2048&lt;/span&gt; -key &lt;span class="s2"&gt;&amp;quot;certs/servers/localhost/privkey.pem&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;cert_domain&lt;/span&gt;&lt;span class="p"&gt;-set&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; set&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
openssl req -key &lt;span class="s2"&gt;&amp;quot;certs/servers/localhost/privkey.pem&amp;quot;&lt;/span&gt; -new -sha256 -out &lt;span class="s2"&gt;&amp;quot;certs/tmp/localhost.csr.pem&amp;quot;&lt;/span&gt; -subj &lt;span class="s2"&gt;&amp;quot;/C=DE/ST=BW/L=Stuttgart/O=Dummy Authority/CN=localhost&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
openssl req -key &lt;span class="s2"&gt;&amp;quot;certs/servers/localhost/privkey.pem&amp;quot;&lt;/span&gt; -new -sha256 -out &lt;span class="s2"&gt;&amp;quot;certs/tmp/localhost.csr.pem&amp;quot;&lt;/span&gt; -subj &lt;span class="s2"&gt;&amp;quot;/C=DE/ST=BW/L=Stuttgart/O=Dummy Authority/CN=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;cert_domain&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
openssl x509 -req -in certs/tmp/localhost.csr.pem -CA certs/ca/root.crt.pem -CAkey certs/ca/root.key.pem -CAcreateserial -out certs/servers/localhost/cert.pem -days &lt;span class="m"&gt;9131&lt;/span&gt;
mv certs/servers/localhost/privkey.pem /etc/loolwsd/key.pem
mv certs/servers/localhost/cert.pem /etc/loolwsd/cert.pem
mv certs/ca/root.crt.pem /etc/loolwsd/ca-chain.cert.pem
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# Replace trusted host and set admin username and password&lt;/span&gt;
perl -pi -e &lt;span class="s2"&gt;&amp;quot;s/localhost&amp;lt;\/host&amp;gt;/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;domain&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;\/host&amp;gt;/g&amp;quot;&lt;/span&gt; /etc/loolwsd/loolwsd.xml
perl -pi -e &lt;span class="s2"&gt;&amp;quot;s/&amp;lt;username (.*)&amp;gt;.*&amp;lt;\/username&amp;gt;/&amp;lt;username \1&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;\/username&amp;gt;/&amp;quot;&lt;/span&gt; /etc/loolwsd/loolwsd.xml
perl -pi -e &lt;span class="s2"&gt;&amp;quot;s/&amp;lt;password (.*)&amp;gt;.*&amp;lt;\/password&amp;gt;/&amp;lt;password \1&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;\/password&amp;gt;/&amp;quot;&lt;/span&gt; /etc/loolwsd/loolwsd.xml
perl -pi -e &lt;span class="s2"&gt;&amp;quot;s/&amp;lt;server_name (.*)&amp;gt;.*&amp;lt;\/server_name&amp;gt;/&amp;lt;server_name \1&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;server_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;\/server_name&amp;gt;/&amp;quot;&lt;/span&gt; /etc/loolwsd/loolwsd.xml
perl -pi -e &lt;span class="s2"&gt;&amp;quot;s/&amp;lt;allowed_languages (.*)&amp;gt;.*&amp;lt;\/allowed_languages&amp;gt;/&amp;lt;allowed_languages \1&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;dictionaries&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;de_DE&lt;/span&gt;&lt;span class="p"&gt; en_GB en_US es_ES fr_FR it nl pt_BR pt_PT ru&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;\/allowed_languages&amp;gt;/&amp;quot;&lt;/span&gt; /etc/loolwsd/loolwsd.xml

&lt;span class="c1"&gt;# Restart when /etc/loolwsd/loolwsd.xml changes&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; -x /usr/bin/inotifywait -a /usr/bin/killall &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;
    /usr/bin/inotifywait -e modify /etc/loolwsd/loolwsd.xml
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ls -l /etc/loolwsd/loolwsd.xml&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; modified --&amp;gt; restarting&amp;quot;&lt;/span&gt;
    /usr/bin/killall -1 loolwsd
&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;

&lt;span class="c1"&gt;# Start loolwsd&lt;/span&gt;
su -c &lt;span class="s2"&gt;&amp;quot;/usr/bin/loolwsd --version --o:sys_template_path=/opt/lool/systemplate --o:lo_template_path=/opt/collaboraoffice6.0 --o:child_root_path=/opt/lool/child-roots --o:file_server_root_path=/usr/share/loolwsd &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;extra_params&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -s /bin/bash lool
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;仔细分析下脚本:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一句&lt;code&gt;cp /etc/resolv.conf /etc/hosts /opt/lool/systemplate/etc/&lt;/code&gt; 很明显就是需要&lt;code&gt;root&lt;/code&gt;权限的.&lt;/li&gt;
&lt;li&gt;之后会进行生成证书的操作&lt;/li&gt;
&lt;li&gt;然后会进行相关的变量替换操作&lt;/li&gt;
&lt;li&gt;接下来是当&lt;code&gt;/etc/loolwsd/loolwsd.xml&lt;/code&gt;这个配置文件发生变化时进行重启, 注意这边又来了好几个特权操作:&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/usr/bin/inotifywait&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/bin/killall&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;启动&lt;code&gt;loolwsd&lt;/code&gt; 又是一个特权操作: &lt;code&gt;su -c&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_2"&gt;需要的特权&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;初步总结一下需要的特权:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;root&lt;/code&gt; 用户&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inotifywait&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;killall&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;su -c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;解决方案&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="openshift-root"&gt;在 OpenShift 中启用容器的 ROOT&lt;a class="headerlink" href="#openshift-root" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.openshift.com/container-platform/3.9/admin_guide/manage_scc.html#enable-dockerhub-images-that-require-root"&gt;官方OpenShift文档: Enable Container Images that Require Root&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里就不详细的一步步介绍了, 具体步骤可以参考我的另一篇文章: &lt;a href="https://www.EWhisper.cn/deploy-app-with-openshift-in-enterprise-env.html"&gt;OpenShift企业测试环境应用部署实战&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有些容器镜像(如: &lt;code&gt;postgres&lt;/code&gt;和&lt;code&gt;redis&lt;/code&gt;和这次的&lt;code&gt;collabora&lt;/code&gt;)需要root权限, 并且对卷属于谁有明确期望. 对于这类镜像, 需要给其对应的service account(服务账户, 一种特殊账户, 用于系统执行某些操作)加上&lt;code&gt;anyuid&lt;/code&gt; SCC(Security Context Constraints: 安全上下文约束):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;oc adm policy add-scc-to-user anyuid system:serviceaccount:myproject:mysvcacct&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="openshift-capabilities"&gt;在 OpenShift 中为容器提供其他 Capabilities&lt;a class="headerlink" href="#openshift-capabilities" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;以下内容来自&lt;a href="https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities"&gt;Docker官方文档: Runtime privilege and Linux capabilities&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;默认情况下，Docker容器是“无特权的”(unprivileged)，例如，不能在Docker容器内运行Docker守护进程。这是因为在默认情况下，容器不允许访问任何设备，但是一个"privileged"(“特权”)容器可以访问所有设备。&lt;/p&gt;
&lt;p&gt;除了"privileged"之外，操作员还可以使用&lt;code&gt;--cap-add&lt;/code&gt;和&lt;code&gt;--cap-drop&lt;/code&gt;对capabilities(功能)进行细粒度控制。默认情况下，Docker有一个保留的默认capabilities列表。下表列出了Linux capabilities选项，这些选项是默认允许的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Capability Key&lt;/th&gt;
&lt;th align="left"&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SETPCAP&lt;/td&gt;
&lt;td align="left"&gt;修改进程的 capabilities.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;MKNOD&lt;/td&gt;
&lt;td align="left"&gt;通过mknod创建特殊(如设备)文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;AUDIT_WRITE&lt;/td&gt;
&lt;td align="left"&gt;将记录写入内核审计日志。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;CHOWN&lt;/td&gt;
&lt;td align="left"&gt;任意更改文件UID和GID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;NET_RAW&lt;/td&gt;
&lt;td align="left"&gt;使用RAW 和PACKET的 sockets.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;DAC_OVERRIDE&lt;/td&gt;
&lt;td align="left"&gt;绕过文件的读、写和执行权限检查。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;FOWNER&lt;/td&gt;
&lt;td align="left"&gt;Bypass permission checks on operations that normally require the file system UID of the process to match the UID of the file.对通常需要进程的文件系统UID与文件的UID匹配的操作进行绕过权限检查。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;FSETID&lt;/td&gt;
&lt;td align="left"&gt;Don’t clear set-user-ID and set-group-ID permission bits when a file is modified.当文件被修改时，不清除set-user-ID和set-group-ID权限位。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;KILL&lt;/td&gt;
&lt;td align="left"&gt;Bypass permission checks for sending signals.绕过发送信号的权限检查。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SETGID&lt;/td&gt;
&lt;td align="left"&gt;对进程GID进行任意操作; 向用户的命名空间中写入GID映射&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SETUID&lt;/td&gt;
&lt;td align="left"&gt;对进程UID进行任意操作; 向用户的命名空间中写入UID映射&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;NET_BIND_SERVICE&lt;/td&gt;
&lt;td align="left"&gt;为低于1024以下的端口绑定sockets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SYS_CHROOT&lt;/td&gt;
&lt;td align="left"&gt;使用chroot, 修改root目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SETFCAP&lt;/td&gt;
&lt;td align="left"&gt;为文件设置任意的capabilities.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下表显示了默认情况下未授予的功能，可以添加这些功能。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Capability Key&lt;/th&gt;
&lt;th align="left"&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SYS_MODULE&lt;/td&gt;
&lt;td align="left"&gt;加载和卸载内核modules.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SYS_RAWIO&lt;/td&gt;
&lt;td align="left"&gt;执行I/O port操作(iopl和ioperm).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SYS_PACCT&lt;/td&gt;
&lt;td align="left"&gt;使用 acct, 开启或关闭进程accounting&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SYS_ADMIN&lt;/td&gt;
&lt;td align="left"&gt;Perform a range of system administration operations. 执行一系列系统管理员操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SYS_NICE&lt;/td&gt;
&lt;td align="left"&gt;提高进程的nice value(nice， setpriority，并改变任意进程的nice value。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SYS_RESOURCE&lt;/td&gt;
&lt;td align="left"&gt;覆盖资源数限制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SYS_TIME&lt;/td&gt;
&lt;td align="left"&gt;设置系统时钟 (settimeofday, stime, adjtimex; 设置real-time (硬件) clock.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SYS_TTY_CONFIG&lt;/td&gt;
&lt;td align="left"&gt;使用vhangup ;在虚拟终端上使用各种特权ioctl操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;AUDIT_CONTROL&lt;/td&gt;
&lt;td align="left"&gt;启用和禁用内核审计;更改审计过滤规则;检索审计状态和过滤规则。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;MAC_ADMIN&lt;/td&gt;
&lt;td align="left"&gt;Allow MAC configuration or state changes. Implemented for the Smack LSM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;MAC_OVERRIDE&lt;/td&gt;
&lt;td align="left"&gt;Override Mandatory Access Control (MAC). Implemented for the Smack Linux Security Module (LSM).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;NET_ADMIN&lt;/td&gt;
&lt;td align="left"&gt;执行各种网络相关的操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SYSLOG&lt;/td&gt;
&lt;td align="left"&gt;执行privileged syslog操作.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;DAC_READ_SEARCH&lt;/td&gt;
&lt;td align="left"&gt;绕过文件读权限检查和目录读和执行权限检查。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;LINUX_IMMUTABLE&lt;/td&gt;
&lt;td align="left"&gt;Set the FS_APPEND_FL and FS_IMMUTABLE_FL i-node flags.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;NET_BROADCAST&lt;/td&gt;
&lt;td align="left"&gt;启用套接字广播，监听多播。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;IPC_LOCK&lt;/td&gt;
&lt;td align="left"&gt;锁内存 (mlock, mlockall, mmap, shmctl).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;IPC_OWNER&lt;/td&gt;
&lt;td align="left"&gt;对System V IPC对象上的操作进行绕过权限检查。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SYS_PTRACE&lt;/td&gt;
&lt;td align="left"&gt;使用ptrace跟踪任意进程。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SYS_BOOT&lt;/td&gt;
&lt;td align="left"&gt;使用reboot和kexec_load，重新启动并加载一个新的内核供以后执行。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;LEASE&lt;/td&gt;
&lt;td align="left"&gt;对任意文件建立租约(参见fcntl)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;WAKE_ALARM&lt;/td&gt;
&lt;td align="left"&gt;触发唤醒系统。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;BLOCK_SUSPEND&lt;/td&gt;
&lt;td align="left"&gt;使用可以阻止系统挂起的特性。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;更多参考资料见: &lt;a href="http://man7.org/linux/man-pages/man7/capabilities.7.html"&gt;capabilities(7) - Linux man page&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;以下内容来自&lt;a href="https://docs.openshift.com/container-platform/3.9/admin_guide/manage_scc.html#provide-additional-capabilities"&gt;OpenShift官方文档: Provide Additional Capabilities&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有时候, 镜像会需要Docker默认没有提供的capabilities(功能). 那么你可以在pod的描述文件 specification中请求这些额外的capabilities, 这些capabilities将根据SCC进行验证.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/2757.png" title=":exclamation:" width="20px"&gt; 注意:&lt;/p&gt;
&lt;p&gt;这允许镜像以提权后的功能运行，&lt;strong&gt;应该仅在必要时使用&lt;/strong&gt;。不应编辑默认的受限SCC以启用其他功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当与非根用户一起使用时，还必须确保使用&lt;code&gt;setcap&lt;/code&gt;命令为需要附加功能的文件授予capabilities。例如，在镜像的Dockerfile中:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setcap cap_net_raw,cap_net_admin+p /usr/bin/ping&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此外，如果Docker中默认提供了功能，则不需要修改pod specification来请求它。例如，&lt;code&gt;NET_RAW&lt;/code&gt;是默认提供的，应该已经在ping上设置了此功能，因此运行ping不需要特殊的步骤。&lt;/p&gt;
&lt;p&gt;要提供额外的功能:&lt;/p&gt;
&lt;p&gt;提供额外功能:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个新的SCC&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;allowedabilities&lt;/code&gt;字段添加允许的功能。&lt;/li&gt;
&lt;li&gt;创建pod时，在&lt;code&gt;securityContext.capabilities.add&lt;/code&gt;中添加请求该功能的字段。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;为Collabora 提供需要的Capabilities&lt;/h4&gt;
&lt;p&gt;针对这个Collabora镜像, 仔细分析后, 要快速解决, 其实在容器的spec中给它授予"privileged" 就可以了. &lt;strong&gt;注意: 之前关于root的权限是在&lt;code&gt;deployment&lt;/code&gt;下配置的. 这个是在&lt;code&gt;containers&lt;/code&gt;下配置的.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;具体配置如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="container spec cap" src="./images/container_spec_scc.png"&gt;&lt;/p&gt;
&lt;p&gt;说明如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;allowPrivilegeEscalation: true&lt;/code&gt; - 允许权限提升. 其实就是给了这个容器"privileged".&lt;/li&gt;
&lt;li&gt;用privileged的scc，需要相应的capabilities. 所以又添加了&lt;code&gt;MKNOD&lt;/code&gt;这个capability.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;总结&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在OpenShift中:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;容器需要root用户, 给它对应的deployment添加Service Account, 并添加&lt;code&gt;anyuid&lt;/code&gt;的SCC.&lt;/li&gt;
&lt;li&gt;容器需要其他capabilities, 简单的方式就是给它"privileged" 这个特权.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;最后顺便吐槽一下, SCC和linux capabilities实在是太难了, 对安全一知半解的我一脸懵逼. &lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f602.png" title=":joy:" width="20px"&gt;&lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f602.png" title=":joy:" width="20px"&gt;&lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f602.png" title=":joy:" width="20px"&gt;&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="太难了" src="./images/too-hard.jpg"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 03 Oct 2019 18:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-10-03:/how-to-run-container-with-su-in-openshift.html</guid><category>k8s</category><category>openshift</category><category>containers</category><category>安全</category></item><item><title>思考 - 从传统雪崩到K8S</title><link>https://www.EWhisper.cn/think-from-broken-to-k8s.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;字母表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#k8s"&gt;K8S的设计理念与分布式系统&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#api"&gt;API设计原则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;控制机制设计原则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;对传统雪崩故障的思考&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;应用视角&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;快速恢复&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;应用监控&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;信息准确性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;存储&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;总结和反思&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_10"&gt;反思一&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;反思二&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img alt="题图" src="./images/BDR1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;传统环境发生底层故障, 往往会产生雪崩般的效应, 需要人为干预涉及到各个环节, 而且MTTR长. 我一直在思考, 如何才能做的更好, 有哪些可以借鉴的先进经验.&lt;img align="absmiddle" alt="🤔" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f914.png" title=":thinking:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;最近一直在学习Kubernetes(以下简称为K8S), 越了解越感到谷歌的理念先进, K8S的博大精深. K8S是谷歌开源的容器集群编排管理系统, 是谷歌多年大规模容器管理技术 Borg 的开源版本, 主要功能包括:&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于容器的应用部署、维护和滚动升级&lt;/li&gt;
&lt;li&gt;负载均衡和地址发现&lt;/li&gt;
&lt;li&gt;跨机器和跨地区的集群调度&lt;/li&gt;
&lt;li&gt;自动伸缩&lt;/li&gt;
&lt;li&gt;无状态服务和有状态服务&lt;/li&gt;
&lt;li&gt;广发的 Volume 支持&lt;/li&gt;
&lt;li&gt;插件机制保证扩展性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;字母表&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;英文名&lt;/th&gt;
&lt;th&gt;中文名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;namespace&lt;/td&gt;
&lt;td&gt;命名空间&lt;/td&gt;
&lt;td&gt;K8S名词, 用作隔离.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;deployment&lt;/td&gt;
&lt;td&gt;部署&lt;/td&gt;
&lt;td&gt;K8S名词, 用作长期业务的管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;MTTR&lt;/td&gt;
&lt;td&gt;平均故障恢复时间&lt;/td&gt;
&lt;td&gt;越短越好&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Replication Controller&lt;/td&gt;
&lt;td&gt;复制控制器&lt;/td&gt;
&lt;td&gt;简称RC, 保证pod高可用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;POD&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;K8S集群运行部署应用或服务的最小单元, 可以是多容器的.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;LivenessProbe&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;探测应用是否处于健康状态. 不健康就删除重建该容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;ReadinessProbe&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;探测是否启动完成并处于正常服务状态.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Volume&lt;/td&gt;
&lt;td&gt;存储卷&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Service&lt;/td&gt;
&lt;td&gt;服务&lt;/td&gt;
&lt;td&gt;简称SVC, 为服务提供服务发现和负载均衡能力.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Ingress&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;提供外部访问&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="k8s"&gt;K8S的设计理念与分布式系统&lt;a class="headerlink" href="#k8s" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="api"&gt;API设计原则&lt;a class="headerlink" href="#api" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所有的API应该是&lt;strong&gt;声明式的&lt;/strong&gt;. 对于重复操作的效果更稳定. 同时这些名词也描述了用户期望得到的一个目标.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;控制机制设计原则&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;控制逻辑应该只依赖于&lt;strong&gt;当前状态&lt;/strong&gt;. 保证分布式系统的稳定可靠.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;假设任何错误的可能, 并作容错处理&lt;/strong&gt;. 在一个分布式系统中, 出现局部和临时错误是&lt;strong&gt;大概率事件&lt;/strong&gt;. 错误可能来自于物理系统故障, 外部系统故障也可能来自于系统自身, 因此要设计对任何可能错误的容错处理.&lt;/li&gt;
&lt;li&gt;每个模块都可以在出错后&lt;strong&gt;自动恢复&lt;/strong&gt;: 每个模块都要有自我修复的能力, 保证不会因为连接不到其他模块而自我崩溃. &lt;/li&gt;
&lt;li&gt;每个模块都可以在必要时优雅地&lt;strong&gt;降级&lt;/strong&gt;服务. 这是对系统鲁棒性的要求, 保证基本功能不会依赖高级功能.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;对传统雪崩故障的思考&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对于传统故障的思考, 也让我愈发觉得K8S的设计之精妙. 以下罗列一些自己的各中散乱的对比:&lt;/p&gt;
&lt;h3 id="_4"&gt;应用视角&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;现在都是以&lt;strong&gt;应用&lt;/strong&gt;为核心, 以&lt;strong&gt;用户体验&lt;/strong&gt;为核心. 那么出了故障后, 最重要的是如何做到从&lt;strong&gt;应用&lt;/strong&gt;角度来梳理、排查、快速回复和验证。&lt;/p&gt;
&lt;p&gt;而在K8S中, 是通过命名空间&lt;code&gt;namespace&lt;/code&gt;来提供隔离. 而我们也往往通过&lt;code&gt;namespace&lt;/code&gt;来拆分应用: 一个&lt;code&gt;namespace&lt;/code&gt;就是一个系统, 1个&lt;code&gt;deployment&lt;/code&gt;就是一个系统的应用. 通过进入到&lt;code&gt;namespace&lt;/code&gt;, 可以清楚地看到各项资源和应用的运行情况是否正常. 是否需要进行下一步操作.&lt;/p&gt;
&lt;h3 id="_5"&gt;快速恢复&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;当今, 出了故障, 最重要的指标就是: MTTR. MTTR越短, 故障对系统的影响越小, 对可用性(通常为x个9)的影响也越小.&lt;/p&gt;
&lt;p&gt;如何做到&lt;strong&gt;快速恢复&lt;/strong&gt;? 越自动化, 自我修复能力越强. 恢复越快. 很简单的道理: 如果这个恢复需要用到人, 而他/她正好在进行人生大事没法立即处理. 那么就快不了.&lt;/p&gt;
&lt;p&gt;而在K8S中, 关于快速恢复, 如&lt;a href="#控制机制设计原则"&gt;上文&lt;/a&gt;所述, K8S设计之初就考虑到了这一点. 另外, 为了做到部署在其上的应用的快速恢复, 至少有以下几项措施:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;部署在K8S上的应用(&lt;code&gt;deployment&lt;/code&gt;)刚开始会配置一个期望的副本数(通过&lt;code&gt;RC&lt;/code&gt;控制) – 出现故障导致副本数降低, &lt;code&gt;RC&lt;/code&gt;会自动启动运行新的POD副本以达到期望的副本数. 多于指定数目, RC就会杀死多余的pod副本. 即使指定数为1, RC也能发挥它的高可用, 保证永远有1个pod在运行. 如果在传统环境, 可能会发生: 少启动, 甚至多启动而导致的各中次生灾害.&lt;/li&gt;
&lt;li&gt;如果故障导致某几台主机不可用 - K8S会自动将这些主机上的pod调度到其他可用主机。而这个调度是无需干预, 无感知的.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_6"&gt;应用监控&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;关于应用监控, 拆开细说又是一个庞大的话题. 这里只讨论简单的实现.&lt;/p&gt;
&lt;p&gt;当今, 出了故障:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先, 我希望通过监控发现应用或服务是否可用?&lt;/li&gt;
&lt;li&gt;启动好之后, 我希望通过监控知道这些应用是否已经准备好对外提供服务.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;传统环境下, 运维人员或监控可能知道&lt;strong&gt;所有&lt;/strong&gt;应用或服务的可用性. 底层出故障:不清楚该系统, 该服务, 该节点是否不可用; 启动了之后, 不清楚该系统, 该服务, 该节点是否恢复正常.&lt;/p&gt;
&lt;p&gt;而在K8S中, 关于应用可用性监控. K8S提供了2个标准的Probe: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LivenessProbe&lt;/li&gt;
&lt;li&gt;ReadinessProbe&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个pod都会配置2个探针，Readiness和liveness。 以应用实例举例来说， liveness就是刚启动，端口监听了就是liveness；readiness就是实例为running状态， 应用的某个页面可以访问了就是readiness。以数据库举例来说, liveness就是端口已监听; readiness就是执行了&lt;code&gt;SELECT 1 FROM DUAL&lt;/code&gt;且返回正常. 为readiness流量才会分发进来。这就保证了基本的可用性检测全覆盖.&lt;/p&gt;
&lt;h3 id="_7"&gt;信息准确性&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;当今, 出了故障, 网络拉取了一个表, 主机拉取了一个表, 数据库拉取了一个表, 应用运维拉取了一个表. 结果这些表可能存在:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信息不准确(已经下线的还显示为运行中状态)&lt;/li&gt;
&lt;li&gt;关键信息对不上(主机的表里, 叫A系统; 应用运维的表里, 就叫&lt;code&gt;A'&lt;/code&gt;系统了.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而在K8S中,  通过K8S的一套完整的体系. 信息是这样进行维护的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Namespace – 对应系统&lt;/li&gt;
&lt;li&gt;Deployment – 对应具体应用或微服务&lt;/li&gt;
&lt;li&gt;Pod – 对应具体应用实例&lt;/li&gt;
&lt;li&gt;Volume – 对应存储卷.&lt;/li&gt;
&lt;li&gt;SVC – 对应内部负载均衡和服务发现&lt;/li&gt;
&lt;li&gt;Ingress – 对应外部访问URL&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与应用相关的每个资源都通过yaml定义, 并存储在K8S的etcd存储中. 保证信息环环相扣且无遗漏. 出现故障, 可以迅速分析:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整个系统是否正常;&lt;/li&gt;
&lt;li&gt;具体的某一个应用或微服务是否正常&lt;/li&gt;
&lt;li&gt;具体的应用实例是否正常&lt;/li&gt;
&lt;li&gt;具体的存储卷是否正常&lt;/li&gt;
&lt;li&gt;具体的内部负载均衡是否正常, 服务是否可以内部访问和分发&lt;/li&gt;
&lt;li&gt;对外服务URL是否正常&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_8"&gt;存储&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;当今, 假如发生存储故障, 可能会导致:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;OS卷异常;&lt;/li&gt;
&lt;li&gt;中间件/数据库卷异常, 进而服务异常;&lt;/li&gt;
&lt;li&gt;应用实例/微服务实例的日志存储卷\配置存储卷\持久化存储卷异常, 进而业务异常.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果上述的其中一项未修复, 那么整个系统对外服务还是不可用的. 还是需要深入排查和分析. 那么底层的类似存储故障就会如雪崩一般, 影响范围迅速扩散.&lt;/p&gt;
&lt;p&gt;而在K8S中, 具有以下2个概念:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Persistent Volume - 持久存储卷(PV)&lt;/li&gt;
&lt;li&gt;Persistent Volume Claim - 持久存储卷声明(PVC)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PV和PVC使得K8S集群具备了存储的逻辑抽象能力, 使得在配置pod的逻辑里可以忽略对实际后台存储技术的配置, 而把这项配置的工作交给PV的配制者, 即集群的管理者. PV是资源的提供者, 根据集群的基础设施变化而变化, 由K8S集群管理员配置; 而PVC是资源的使用者, 根据业务服务的需求变化而变化, 由K8S集群的使用者即服务的管理员来配置.&lt;/p&gt;
&lt;p&gt;这样, PV和PVC可以将pod和数据卷解耦, pod不需要知道确切的文件系统或者支持它的持久化引擎.&lt;/p&gt;
&lt;p&gt;在发生故障时, 首先可以通过查看PV状态, 知道存储故障的范围. 通过查看PVC状态, 知道存储故障对服务的影响范围. 如果存储故障无法快速恢复, 可以尝试将PVC解绑, 并绑定到另一个正常的PV上. &lt;/p&gt;
&lt;h2 id="_9"&gt;总结和反思&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_10"&gt;反思一&lt;a class="headerlink" href="#_10" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;通过以上的零散的思考, K8S的出现确实会给正在为到处救火的运维提供一个更好的解决方案. 虽然任何一项新技术的引入, 都会引入新的问题. 但是在如今分布式系统大行其道的今天, K8S确实值得引入.&lt;/p&gt;
&lt;h3 id="_11"&gt;反思二&lt;a class="headerlink" href="#_11" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;犹豫, 就会败北&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="只狼-死" src="./images/gamersky_01origin_01_201932317112C6.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上层应用已经发生巨大变化的今天, 底层技术也要果断跟进;&lt;/li&gt;
&lt;li&gt;如果还是"苦练功夫", 功夫练的再高, 也撑不过扳机扣动的霎那.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://www.infoq.cn/article/Kubernetes-handbook/"&gt;Kubernetes 指南&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 02 Oct 2019 15:30:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-10-02:/think-from-broken-to-k8s.html</guid><category>k8s</category><category>问题分析</category><category>可观察性</category><category>可用性</category><category>Observability</category><category>最佳实践</category></item><item><title>Kubernetes 疑难问题排查 - 10s 延迟</title><link>https://www.EWhisper.cn/analyze-k8s-difficult-problems-10s-delay.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;现象&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;背景概述&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;分析过程&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;第一阶段  抓包并分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;第二阶段  细化分析和排除阶段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;第三阶段  业务流程梳理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;第四阶段  定位&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;原因总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img alt="题图" src="./images/navigating-the-container-management-storm.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;现象&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首次通过&lt;strong&gt;单点登录系统(下称CAS)&lt;/strong&gt;访问&lt;strong&gt;需求系统&lt;/strong&gt;, 会等&lt;strong&gt;10s&lt;/strong&gt;才能进入到&lt;strong&gt;需求系统&lt;/strong&gt;的页面.&lt;/p&gt;
&lt;h3 id="_2"&gt;背景概述&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;单点登录系统&lt;/strong&gt;位于公司传统环境;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;需求系统&lt;/strong&gt;位于公司K8S容器平台(openshift)上;&lt;/li&gt;
&lt;li&gt;公司K8S容器平台位于公司私有云环境(网络为SDN);&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_3"&gt;分析过程&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;该问题比较复杂, 主要是在于网络架构的复杂. 正如&lt;a href="#背景概述"&gt;上文&lt;/a&gt;所述, 这两个系统的交互, 涉及到:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;传统网络架构&lt;/li&gt;
&lt;li&gt;私有云的SDN网络架构&lt;/li&gt;
&lt;li&gt;以及架构在私有云之上的OpenShift OVS(OpenVSwitch) SDN网络&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;举个简单的例子, 如果容器A要访问外部系统, 网络流应该是这样的:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;eth0&lt;/strong&gt;(容器A的网卡) → &lt;strong&gt;vethA&lt;/strong&gt; → &lt;strong&gt;br0&lt;/strong&gt;→ &lt;strong&gt;tun0&lt;/strong&gt; → (NAT) &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;→ (私有云网络) → (传统网络F5 -&amp;gt; 传统网络相关虚机)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;br0&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;连接到pod容器的OVS桥设备。OpenShift SDN还在这个桥上配置一组非子网特定的流规则。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tun0&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;OVS内部端口(br0上的端口2)。它被分配给集群子网网关地址，用于外部网络访问。OpenShift SDN配置netfilter和路由规则，允许从集群子网通过NAT访问外部网络。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NAT:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网络地址转换&lt;/p&gt;
&lt;p&gt;后边的私有云网络和传统环境网络不太熟, 所以就没有详细描述, 实际上网络节点也不少.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目前首先第一步要做的就是&lt;strong&gt;缩小范围&lt;/strong&gt; -- 尽可能的缩小怀疑点的范围. 方便进一步定位.&lt;/p&gt;
&lt;p&gt;具体操作步骤如下:&lt;/p&gt;
&lt;h3 id="_4"&gt;第一阶段  抓包并分析&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;经过初步分析，得到如下结论：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用户通过&lt;strong&gt;CAS&lt;/strong&gt;的页面点击&lt;strong&gt;需求系统&lt;/strong&gt;, 这时会带着Ticket跳转到&lt;strong&gt;需求系统&lt;/strong&gt;: &lt;code&gt;"GET http://itweb.cloud.example.com.cn/login.jsp?ticket=XX-1144737-F6gZZyxhe0IfKxBJS4zjuf9Csz4-cas2 HTTP/1.1"&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们首先通过Chrome的F12开发工具来进行查看，发现正是上边的这个请求耗时10s，且10s都是在&lt;code&gt;Waitting(TTFR)&lt;/code&gt; 如下图: (&lt;em&gt;TODO: 图太糊, 需要重新截一个&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="请求耗时10s" src="./images/chrome_f12_10s.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;
&lt;p&gt;以上请求是在&lt;strong&gt;需求系统&lt;/strong&gt;内进行处理, 且我们之前已经了解到未上容器之前不存在这个问题, 所以基本排除&lt;strong&gt;需求系统&lt;/strong&gt;应用问题的可能性. 那么就需要抓取&lt;strong&gt;需求系统&lt;/strong&gt;的APP所在容器(以下简称pod a)的网络包, 确定是不是网络问题.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过&lt;code&gt;tcpdump&lt;/code&gt;命令抓取pod a网卡的所有流量. 并且在这期间复现该问题.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过&lt;a href="https://www.wireshark.org/"&gt;&lt;strong&gt;WireShark&lt;/strong&gt;&lt;/a&gt;打开进行分析, 由于知道是上边的请求有问题, 所以专门看这个请求的TCP流. 结果如下:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="wireshark分析请求" src="./images/10s_delay_cap_1.png"&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;
&lt;p&gt;如上图标红处的时间, 可以明显的看到, pod a(IP为: 10.131.0.244)收到上述的请求后, 返回了http code 302, 然后进行TCP的3次握手. 然后就出问题了, &lt;code&gt;PSH+ACK&lt;/code&gt;的动作是在&lt;strong&gt;10s&lt;/strong&gt;后才发出的!!!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这一次, 根据源IP(pod A)和目的IP(可以理解为K8S Ingress 的tun0的IP), 初步判定是: &lt;strong&gt;容器 -&amp;gt; Ingress之间出现了10s的延迟.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;备注:&lt;/p&gt;
&lt;p&gt;关于K8S上网络抓包，后续会再写一篇文章: 《K8S上网络抓包的3种方式》. 敬请期待~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_5"&gt;第二阶段  细化分析和排除阶段&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;上一阶段, 初步确定了是:  &lt;strong&gt;容器 -&amp;gt; Ingress之间出现了10s的延迟.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么后续就计划对者之间的网络进一步的进行分析. 为此准备了2套方案:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;排除法, 由于pod A和Ingress不在同一台虚机上, 而这两台虚机之间的交互就会牵扯到: OpenShift的OVS网络以及私有云的SDN网络. 所以希望通过将pod A调度到Ingress所在的主机上, 观察结果来进行排除.&lt;ol&gt;
&lt;li&gt;如果调度到同一台主机后, 仍然存在该问题, 则排除&lt;strong&gt;私有云SDN&lt;/strong&gt;出问题的可能性;&lt;/li&gt;
&lt;li&gt;如果调度后问题解决, 那么就可能是: OpenShift的OVS网络或私有云的SDN网络的问题.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;细化分析. 之前只是简单抓了pod A的包. 后续计划将涉及到的所有网络节点进行抓包, 包括:&lt;ol&gt;
&lt;li&gt;pod A&lt;/li&gt;
&lt;li&gt;pod A所在主机&lt;/li&gt;
&lt;li&gt;私有云SDN相关网络设备&lt;/li&gt;
&lt;li&gt;Ingress所在主机&lt;/li&gt;
&lt;li&gt;Ingress pod&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是在这一阶段碰到了各种困难, 使得这2个方案都没有最终被执行.&lt;/p&gt;
&lt;p&gt;所以我们继续希望通过之前的那个网络包, 分析到更多细节, 我们从2个方面进行:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请网络组老师看一下这个网络包, 网络组老师的反馈是: &lt;strong&gt;基本断定是pod A的问题&lt;/strong&gt;, 不需要再抓其他包&lt;/li&gt;
&lt;li&gt;联系&lt;strong&gt;需求系统&lt;/strong&gt;和&lt;strong&gt;CAS&lt;/strong&gt;项目组老师, 进一步了解业务流程细节. 期望获取更多细节.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而这2个方面也取得了比较大的收获!&lt;/p&gt;
&lt;h3 id="_6"&gt;第三阶段  业务流程梳理&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;重点关注&lt;strong&gt;首次登录需求系统&lt;/strong&gt;这个业务流程.&lt;/p&gt;
&lt;p&gt;有的用户是先访问CAS, 登录CAS, 再通过CAS跳转进入需求系统;&lt;/p&gt;
&lt;p&gt;有的用户是先访问CAS, 不登陆, 通过CAS跳转到需求系统, 再反过来登录验证并进入需求系统;&lt;/p&gt;
&lt;p&gt;有的用户是直接访问需求系统, 跳转到单点登录, 登录认证后进入需求系统.&lt;/p&gt;
&lt;p&gt;有以上三种情况, 本质上都是一样的. 就是需求系统需要和CAS交互.&lt;/p&gt;
&lt;p&gt;下边选择一个最常用的流程做说明.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;用户访问并登录&lt;strong&gt;单点登录系统&lt;/strong&gt;;&lt;ol&gt;
&lt;li&gt;此时用户会获取到一个Ticket, 格式实例如下: &lt;code&gt;XX-1144737-F6gZZyxhe0IfKxBJS4zjuf9Csz4-&amp;lt;instancename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;这期间用户并不会访问&lt;strong&gt;需求系统&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;用户通过&lt;strong&gt;CAS&lt;/strong&gt;的页面点击&lt;strong&gt;需求系统&lt;/strong&gt;, 这时会带着Ticket跳转到&lt;strong&gt;需求系统&lt;/strong&gt;: &lt;code&gt;"GET http://itweb.cloud.example.com.cn/login.jsp?ticket=XX-1144737-F6gZZyxhe0IfKxBJS4zjuf9Csz4-cas2 HTTP/1.1"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;需求系统&lt;/strong&gt;收到该请求, 会回访&lt;strong&gt;CAS&lt;/strong&gt;验证: &lt;code&gt;“GET http://10.1.XX.XX:XXXX/casserver/serviceValidate?hostnameVerifier=org.jasig.cas.client.ssl.AnyHostnameVerifier&amp;amp;ticket= XX-1144737-F6gZZyxhe0IfKxBJS4zjuf9Csz4-cas2&amp;amp;encoding=UTF-8&amp;amp;service=http%3A%2F%2Fitweb.cloud.example.com.cn%2F”&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CAS&lt;/strong&gt;验证后返回结果给&lt;strong&gt;需求系统&lt;/strong&gt;:&lt;ol&gt;
&lt;li&gt;验证&lt;strong&gt;通过&lt;/strong&gt;, 正常登录, 进入&lt;strong&gt;需求系统&lt;/strong&gt;主页面;&lt;/li&gt;
&lt;li&gt;验证&lt;strong&gt;不通过&lt;/strong&gt;, 提示&lt;strong&gt;你无权访问该系统&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;项目组老师重点提到, 根据他们的日志来看, &lt;strong&gt;是第3步慢了10s.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="_7"&gt;第四阶段  定位&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;和网络组老师和项目组老师沟通受益颇多:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络组老师: &lt;strong&gt;基本断定是pod A的问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;项目组老师: &lt;strong&gt;是第3步(需求系统回访CAS验证)慢了10s.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们决定再次查看之前抓取的网络包, 仔细看一下CAS访问单点登录系统后, 网络上都发生了什么. 而这一次, 我们终于抓到了蛛丝马迹!&lt;/p&gt;
&lt;p&gt;这次不再关注某一个&lt;strong&gt;TCP流&lt;/strong&gt;, 而是关注接收到请求后, 都发生了什么.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;收到请求后, pod A要访问&lt;strong&gt;CAS&lt;/strong&gt; 10.1.XX.XX, 注意这一次: &lt;strong&gt;不是直接访问CAS的IP, 而是先做反向DNS解析!!!&lt;/strong&gt;如下图:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="要访问CAS" src="./images/10s_delay_cap_2.png"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;第一次反向DNS解析&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, DNS server没返回任何信息, &lt;strong&gt;5s超时&lt;/strong&gt;. (网络流比较长, 就不附图了, 反正接下来5s都没有看到DNS server有返回信息). 开始进行第二次反向DNS解析, 如下图:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="两次方向DNS解析" src="./images/10s_delay_cap_3.png"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;2次DNS反解析失败后, &lt;strong&gt;第三次就不做反向DNS解析了, 而是直接访问&lt;/strong&gt;, 并快速得到结果. 所以每次都是等待&lt;strong&gt;10s&lt;/strong&gt;才进入系统. 如下图:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="第三次直接访问" src="./images/10s_delay_cap_4.png"&gt;&lt;/p&gt;
&lt;h2 id="_8"&gt;原因总结&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;需求系统&lt;/strong&gt;访问&lt;strong&gt;单点登录&lt;/strong&gt;10.1.XX.XX:XXXX花了10s, 是因为那次请求会进行反向dns解析。结果解析2次不成功。dns一次解析超时是5s&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;… 第三次就不解析了直接访问. 所以就是每次等10s. &lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f602.png" title=":joy:" width="20px"&gt;&lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f602.png" title=":joy:" width="20px"&gt;&lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f602.png" title=":joy:" width="20px"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;其实应该不是&lt;strong&gt;需求系统&lt;/strong&gt;会做反向DNS解析, 而是它部署在WebLogic中间件上, WebLogic中间件会进行反向DNS解析.&lt;/p&gt;
&lt;p&gt;我之所以知道这个事情, 是因为有次某寿险公司有一次生产DNS出故障了, 排查的时候发现&lt;strong&gt;海量的反向DNS解析&lt;/strong&gt;来自weblogic.&lt;/p&gt;
&lt;p&gt;有时间可以再来一篇相关的内容.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_9"&gt;解决方案&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;尝试在需求系统启动项种加入禁止反向解析的参数, 测试不生效.&lt;/li&gt;
&lt;li&gt;Openshift每台节点都会启动一个dnsmasq进程用作集群内部dns处理, 将worker节点的dnsmasq加入如下配置并重启. 使得反向DNS解析成功. 则问题解决.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ptr-record=XX.XX.1.10.in-addr.arpa, 10.1.XX.XX
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_10"&gt;总结&lt;a class="headerlink" href="#_10" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;至此, 我们完整的梳理了&lt;strong&gt;需求系统首次登录要等10s&lt;/strong&gt;的问题, 分析过程信息量比较大, 牵涉的环节也比较多. 其实最后定位的原因, 也和K8S的网络, 私有云的网络灯新技术没啥关系. 问题还是老问题.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;强烈不建议将传统软件硬塞入容器内, 坑不止这一个; &lt;img align="absmiddle" alt="😭" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f62d.png" title=":sob:" width="20px"&gt;&lt;img align="absmiddle" alt="😭" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f62d.png" title=":sob:" width="20px"&gt;&lt;img align="absmiddle" alt="😭" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f62d.png" title=":sob:" width="20px"&gt;&lt;/li&gt;
&lt;li&gt;K8S采用后, 网络复杂性会大幅上升, 分析K8S上网络问题, 网络分析手段必不可少;&lt;/li&gt;
&lt;li&gt;分析问题过程中, &lt;em&gt;三人行, 必有我师焉&lt;/em&gt;, 多与其他老师交流沟通, 发散思维, 避免走入死胡同.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://docs.openshift.com/container-platform/3.9/architecture/networking/sdn.html#sdn-packet-flow"&gt;OpenShift docs: SDN Package Flow&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Reverse_DNS_lookup"&gt;wiki: Reverse DNS lookup&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;a href="https://www.linuxquestions.org/questions/linux-server-73/how-to-set-dns-timeout-on-dnsmasq-747341/"&gt;How to set dns timeout on dnsmasq&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 01 Oct 2019 18:30:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-10-01:/analyze-k8s-difficult-problems-10s-delay.html</guid><category>openshift</category><category>k8s</category><category>问题分析</category><category>性能调优</category></item><item><title>OpenShift上禅道升级方案</title><link>https://www.EWhisper.cn/update-zentao-where-deployed-on-openshift.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;备份&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;配置文件、代码和附件的备份&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;数据库的备份&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;升级&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#dockerfile"&gt;更新Dockerfile和镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#docker"&gt;上传并导入新的docker镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;新部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;执行升级程序&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;回顾和总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在&lt;a href="https://www.EWhisper.cn/deploy-app-with-openshift-in-enterprise-env.html"&gt;之前的文章&lt;/a&gt;中, 介绍了把禅道部署到企业测试环境的过程. 而这次是要对禅道进行一下升级, 其实严格说来不仅仅升级, 而是把: 开源版禅道11.5 升级为 企业版禅道3.3.  本文记录了升级的全过程.&lt;/p&gt;
&lt;p&gt;其实所有的升级中包含的最重要的是以下几步:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;备份&lt;/li&gt;
&lt;li&gt;升级&lt;/li&gt;
&lt;li&gt;验证&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_2"&gt;备份&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;其实可以一键自动化备份的. 位于禅道网页的: 后台 -&amp;gt; 数据 -&amp;gt; 开始备份&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_3"&gt;配置文件、代码和附件的备份&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;配置文件存放在zentao/config/my.php&lt;/li&gt;
&lt;li&gt;附件存放在zentao/www/data/目录下面。&lt;/li&gt;
&lt;li&gt;修改的代码也都放在zentao目录下面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此备份配置文件、代码和附件的方法就是将整个zentao目录备份即可。&lt;/p&gt;
&lt;p&gt;对于本次OpenShift, 操作如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 查看禅道pod运行的节点&lt;/span&gt;
oc project zentao  &lt;span class="c1"&gt;# 切换到zentao项目&lt;/span&gt;
oc get pod  &lt;span class="c1"&gt;# 查看zentao pod的name&lt;/span&gt;
oc describe pod &amp;lt;pod_name&amp;gt;  &lt;span class="c1"&gt;# 查看zentao 对应pod的详细信息&lt;/span&gt;
&lt;span class="c1"&gt;# 输出如下:&lt;/span&gt;
&lt;span class="c1"&gt;# Node:  xxxxx-node02.xxxxx.com.cn/10.X.X.X&lt;/span&gt;
&lt;span class="c1"&gt;# Mounts:&lt;/span&gt;
&lt;span class="c1"&gt;#  /app/zentaopms from zentao-volume-1 (rw)&lt;/span&gt;
&lt;span class="c1"&gt;#  /var/lib/mysql from zentao-volume-2 (rw)&lt;/span&gt;
&lt;span class="c1"&gt;# Volumes:&lt;/span&gt;
&lt;span class="c1"&gt;#  zentao-volume-1:&lt;/span&gt;
&lt;span class="c1"&gt;#    ClaimName: zentao-pms&lt;/span&gt;
&lt;span class="c1"&gt;#  zentao-volume-2:&lt;/span&gt;
&lt;span class="c1"&gt;#    ClaimName: zentao-mysql-pvc&lt;/span&gt;
oc get pvc
&lt;span class="c1"&gt;# 可以看到绑定的PV是: zentao-pms-volume 和zentao-mysql-volume&lt;/span&gt;
oc describe pv zentao-pms-volume zentao-mysql-volume
&lt;span class="c1"&gt;# 可以看到对应的共享存储:&lt;/span&gt;
&lt;span class="c1"&gt;# Server: 10.X.X.X&lt;/span&gt;
&lt;span class="c1"&gt;# Path: /vol/Thxxxxxx/zentao-pms&lt;/span&gt;
&lt;span class="c1"&gt;# Path: /vol/Thxxxxxx/zentao-mysql&lt;/span&gt;

&lt;span class="c1"&gt;# 在node2上执行:&lt;/span&gt;
df -h &lt;span class="p"&gt;|&lt;/span&gt; grep zentao
&lt;span class="c1"&gt;# 输出如下:&lt;/span&gt;
&lt;span class="c1"&gt;# 10.X.X.X://vol/Thxxxxxx/zentao-pms  50G  3.0G  48G  6%  /var/lib/origin/openshift.local.volumes/pods/6340...-...-97cd/volumes/kubernetes.io~nfs/zentao-pms-volume&lt;/span&gt;
&lt;span class="c1"&gt;# 10.X.X.X://vol/Thxxxxxx/zentao-mysql  50G  3.0G  48G  6%  /var/lib/origin/openshift.local.volumes/pods/6340...-...-97cd/volumes/kubernetes.io~nfs/zentao-mysql-volume&lt;/span&gt;
&lt;span class="c1"&gt;# 备份&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /var/lib/origin/openshift.local.volumes/pods/6340...-...-97cd/volumes/kubernetes.io~nfs/zentao-pms-volume
tar -cvzf /root/zentao-pms-volume.tgz ./zentao-pms-volume/
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_4"&gt;数据库的备份&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以使用mysql提供的管理工具，将数据库导出： &lt;code&gt;mysqldump -u xxx -p zentao &amp;gt; zentao.sql&lt;/code&gt;，其中的user换成实际的用户。&lt;/p&gt;
&lt;h2 id="_5"&gt;升级&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="dockerfile"&gt;更新Dockerfile和镜像&lt;a class="headerlink" href="#dockerfile" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dockerfile更新如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ubuntu:16.04&lt;/span&gt;
&lt;span class="k"&gt;MAINTAINER&lt;/span&gt;&lt;span class="s"&gt; yidong &amp;lt;yidong@cnezsoft.com&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y apache2 mariadb-server php php-curl php-gd php-ldap php-mbstring php-mcrypt php-mysql php-xml php-zip php-cli php-json curl unzip libapache2-mod-php locales

&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en_US.UTF8&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;LANG=\&amp;quot;en_US.UTF-8\&amp;quot;\nLANGUAGE=\&amp;quot;en_US:en\&amp;quot;&amp;quot;&lt;/span&gt; &amp;gt; /etc/default/locale &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; locale-gen en_US.UTF-8

&lt;span class="k"&gt;RUN&lt;/span&gt; mkdir -p /app/zentaopms
&lt;span class="k"&gt;COPY&lt;/span&gt; docker-entrypoint.sh /app
&lt;span class="c"&gt;#RUN random=`date +%s`; curl http://cdn.zentaopm.com/latest/zentao.zip?rand=$random -o /var/www/zentao.zip&lt;/span&gt;
&lt;span class="c"&gt;#RUN cd /var/www/ &amp;amp;&amp;amp; unzip -q zentao.zip &amp;amp;&amp;amp; rm zentao.zip&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; ./zentaopms/ /var/www/zentaopms/
&lt;span class="k"&gt;RUN&lt;/span&gt; a2enmod rewrite

&lt;span class="k"&gt;RUN&lt;/span&gt; rm -rf /etc/apache2/sites-enabled/000-default.conf /var/lib/mysql/*
&lt;span class="k"&gt;RUN&lt;/span&gt; sed -i &lt;span class="s1"&gt;&amp;#39;1i ServerName 127.0.0.1&amp;#39;&lt;/span&gt; /etc/apache2/apache2.conf
&lt;span class="k"&gt;COPY&lt;/span&gt; config/apache.conf /etc/apache2/sites-enabled/000-default.conf
&lt;span class="k"&gt;COPY&lt;/span&gt; config/ioncube_loader_lin_7.0.so /usr/lib/php/20151012/ioncube_loader_lin_7.0.so
&lt;span class="k"&gt;COPY&lt;/span&gt; config/00-ioncube.ini /etc/php/7.0/apache2/conf.d/
&lt;span class="k"&gt;COPY&lt;/span&gt; config/00-ioncube.ini /etc/php/7.0/cli/conf.d/

&lt;span class="k"&gt;VOLUME&lt;/span&gt;&lt;span class="s"&gt; /app/zentaopms /var/lib/mysql&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/app/docker-entrypoint.sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;企业版3.3的包和对应的试用license, 禅道的技术支持已经提供给我了.&lt;/p&gt;
&lt;p&gt;我解压后统一放到了&lt;code&gt;./zentaopms/&lt;/code&gt; 下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用&lt;code&gt;Dockerfile&lt;/code&gt; 构建docker镜像并测试:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; docker_zentao
docker build -t zentao:3.3-ent .

&lt;span class="c1"&gt;# 测试&lt;/span&gt;
docker run --name zentao-ent-test -p &lt;span class="m"&gt;8000&lt;/span&gt;:80 -e &lt;span class="nv"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;123456&lt;/span&gt; -d zentao:3.3-ent  &lt;span class="c1"&gt;# 后台运行该docker容器&lt;/span&gt;
docker ps  &lt;span class="c1"&gt;# 查看容器是否正常运行, 有无crash&lt;/span&gt;
docker stop zentao-ent-test  &lt;span class="c1"&gt;# 测试完毕, 停止该容器&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将镜像导出为tar包:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker save -o docker_zentao.tar zentao
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="docker"&gt;上传并导入新的docker镜像&lt;a class="headerlink" href="#docker" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;先ftp传上去. 然后执行如下命令:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker load -i docker_ent_zentao.tar
docker push txocp-registry.example.com/ewhisper/zentao:3.3-ent
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;无法连接外网, 且内网没有足够多的常用基础镜像好难受啊! &lt;img align="absmiddle" alt="😭" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f62d.png" title=":sob:" width="20px"&gt;&lt;img align="absmiddle" alt="😭" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f62d.png" title=":sob:" width="20px"&gt;&lt;img align="absmiddle" alt="😭" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f62d.png" title=":sob:" width="20px"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_6"&gt;新部署&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 注意:&lt;/p&gt;
&lt;p&gt;因为该禅道docker镜像包括数据库组件: mysql. 为有状态. 无法平滑升级或启动多个.&lt;/p&gt;
&lt;p&gt;所以升级前一定要注意升级策略要是: &lt;code&gt;Recreate&lt;/code&gt;而不能是其他.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Strategy:  Recreate&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本次升级使用到了OpenShift的ImageStream功能. 该功能是多个镜像的链式组合. ImageStream只是个元数据, 不包含镜像.&lt;/p&gt;
&lt;p&gt;升级前, 我们已经确认, 禅道该APP的触发自动部署的策略为: ImageStream为&lt;code&gt;zentao&lt;/code&gt;的最新版本, 镜像发生了变化就自动触发部署. 如下:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Triggers:  Image(zentao@latest, auto=true), Config&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们通过如下设置更新ImageStream:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;其实最简单就是将上边的镜像直接push为最新, 即: &lt;code&gt;docker push txocp-registry.example.com/ewhisper/zentao:latest&lt;/code&gt;, 一检测到镜像发生变化就会自动部署. 但是考虑到禅道的2个镜像: 开源版11.5和 企业版3.3 不是这么简单的关系. 所以为了考虑回滚方便, 并没有用这种方式.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc tag zentao:latest zentao:11.5  &lt;span class="c1"&gt;# 将之前的开源11.5镜像标记为: 11.5(之前由于只有这一个镜像, 就直接用了latest标签)&lt;/span&gt;
oc tag txocp-registry.example.com/ewhisper/zentao:3.3-ent zentao:3.3-ent --insecure&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;  &lt;span class="c1"&gt;# 将商业版3.3镜像标记为ImageStream中的一个新标签: zentao:3.3-ent. `--insecure=true` 是因为测试镜像库没有用https&lt;/span&gt;
oc tag zentao:3.3-ent zentao:latest  &lt;span class="c1"&gt;# 将商业版3.3镜像标记为最新&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这时ImageStream的信息如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="ImageStream" src="./images/zentao_openshift_update_4.png"&gt;&lt;/p&gt;
&lt;p&gt;此时, 由于latest镜像发生变化, 会自动触发新一次的部署, 相关的Events如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Deployment Events" src="./images/zentao_openshift_update_5.png"&gt;&lt;/p&gt;
&lt;h3 id="_7"&gt;执行升级程序&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;接下来就是&lt;strong&gt;禅道&lt;/strong&gt; 升级企业版的步骤了, 具体参见禅道官方文档 - &lt;a href="https://www.zentao.net/book/zentaobizhelp/282.html"&gt;开源版升级到企业版&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;访问升级URL: 我本地访问禅道的地址是 &lt;a href="http://127.0.0.1:81/zentao"&gt;http://127.0.0.1:81/zentao&lt;/a&gt;，那么浏览器输入  &lt;a href="http://127.0.0.1:81/zentao/upgrade.php"&gt;http://127.0.0.1:81/zentao/upgrade.php&lt;/a&gt;，即可进入升级步骤。&lt;/li&gt;
&lt;li&gt;请根据提示创建ok.txt 文件。创建完成后，请点击 继续更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="ok" src="./images/zentao_openshift_update_2.png"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;一步一步按照提升进行, 最后会提示要&lt;strong&gt;创建索引&lt;/strong&gt;, 如下图:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="创建索引" src="./images/zentao_openshift_update_3.png"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;至此升级完成, 登录进行功能和数据完整性验证. (这一步很重要, 但是我就不详细说明了. ) &lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="企业版信息" src="./images/zentao_openshift_update_6.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 注意:&lt;/p&gt;
&lt;p&gt;升级成功后&lt;strong&gt;千万不要&lt;/strong&gt;直接进入首页并按照首页提示操作, 本人血的教训!!! 谨记!!! 如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="升级后首页提示" src="./images/zentao_openshift_update_1.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_8"&gt;回顾和总结&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;其实回顾一下过程, 虽然很复杂, 但这种复杂是企业环境的网络复杂导致的, 是可以后续进一步优化的. 包括:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;备份: 创建并使用一键自动化备份脚本. (其实禅道本身有的, 位于: 后台 -&amp;gt; 数据 -&amp;gt; 开始备份)&lt;/li&gt;
&lt;li&gt;代码升级并编译为镜像: 其实&lt;strong&gt;升级&lt;/strong&gt;那一章节可以大幅度缩减的, 理想情况是:&lt;ol&gt;
&lt;li&gt;代码放在git上, git上代码更新到需要部署的版本; (开发的精力完全专注于创造性工作)&lt;/li&gt;
&lt;li&gt;配置OpenShift的webhook, 触发自动构建新镜像并push到镜像库;&lt;/li&gt;
&lt;li&gt;镜像库检测到镜像发生变化, 触发自动部署&lt;/li&gt;
&lt;li&gt;升级完成.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;要做到上边说的这么美好, 还有以下地方要改进:&lt;ol&gt;
&lt;li&gt;测试环境连接外网, 或测试环境有一个可以定期同步常用镜像的镜像库.&lt;/li&gt;
&lt;li&gt;开发的电脑要安装docker和OpenShift CLI 工具&lt;code&gt;oc&lt;/code&gt; , 并且可以直接访问 测试镜像库和测试OpenShift.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果可以做到, 那么理想中的情况就是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发只管创造性的工作(写代码), 其他全部通过预置条件自动触发, 完全不需要人工干预.&lt;/li&gt;
&lt;li&gt;运维只负责第一次上线的相关脚本编写, 资源分配, 以及容器平台, 监控告警平台等的开发.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="😍" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f60d.png" title=":heart_eyes:" width="20px"&gt;&lt;img align="absmiddle" alt="😍" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f60d.png" title=":heart_eyes:" width="20px"&gt;&lt;img align="absmiddle" alt="😍" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f60d.png" title=":heart_eyes:" width="20px"&gt;想想都醉了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Mon, 29 Jul 2019 18:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-07-29:/update-zentao-where-deployed-on-openshift.html</guid><category>项目管理</category><category>openshift</category><category>docker</category></item><item><title>容器最佳实践</title><link>https://www.EWhisper.cn/container-best-practices.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;概述&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;翻译对照表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;通用容器镜像指南&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#label-maintainer"&gt;使用 LABEL maintainer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;复用镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tags"&gt;保持标签 TAGS 的兼容性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;避免多个进程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exec"&gt;在封装脚本中使用 EXEC 指令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;清除临时文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;按正确的顺序放置指令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;标记重要端口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;设置环境变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;避免默认密码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sshd"&gt;禁用SSHD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#volumes"&gt;将 VOLUMES 用于持久数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#root"&gt;使用非root用户运行容器进程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;使用多阶段构建创建精益且生产就绪的镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;禁止在容器中存储机密信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tmp"&gt;避免将文件放入/tmp中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#alpine-linux"&gt;~~使用 Alpine Linux基础镜像(不建议采纳)~~&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#red-hat"&gt;使用Red Hat 官方基础镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dockerignore"&gt;使用.dockerignore排除无关文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_13"&gt;不要安装不必要的包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_14"&gt;解耦应用程序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_15"&gt;对多行参数进行排序&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#java"&gt;JAVA 容器镜像指南&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ide"&gt;IDE插件推荐&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_16"&gt;设置内存限制相关参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gc"&gt;设置GC策略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#java_1"&gt;JAVA启动阶段调优&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#java_2"&gt;JAVA容器全局建议资源请求和资源限制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#nginx"&gt;NGINX 容器镜像指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python"&gt;Python 容器镜像指南&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ide_1"&gt;IDE插件推荐&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_17"&gt;建议配置的环境变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_18"&gt;安装数据库驱动包的方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#openshift"&gt;Openshift 容器平台特定指南&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#s2i"&gt;启用源到映像（S2I）功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#id"&gt;支持任意用户ID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#service"&gt;使用服务 SERVICE 进行镜像间通信&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_19"&gt;提供公共库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_20"&gt;使用环境变量进行配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_21"&gt;考虑集群方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_22"&gt;记录日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#livenessreadiness"&gt;LIVENESS活性探针和READINESS 就绪探针&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-template"&gt;模板 - TEMPLATE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_23"&gt;在镜像中包括元数据&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_24"&gt;参考链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;学习制作镜像的最佳实践。&lt;/p&gt;
&lt;p&gt;这篇文章主要是翻译自OpenShift关于镜像的最佳实践, 同时结合我看到的其他关于镜像最佳实践的文章, 以及我日常工作中的体会总结出来的. 包括通用的容器最佳实践, java, nginx, python容器最佳实践以及OpenShift上容器最佳实践. 最佳实践的目的一方面是为了提升DevOps效率, 另一方面是为了提高安全性. 希望对各位有所帮助.&lt;/p&gt;
&lt;p&gt;在创建要在Docker, Kubernetes, 或者Openshift容器平台上运行的容器镜像时，作为一名镜像作者和维护者，需要考虑许多最佳实践，以确保为这些镜像的使用者提供良好的体验。因为镜像是不可变的并按原样使用，下面的指导原则有助于确保您的镜像是高度可复用的，并且易于在Docker, Kubernetes 或 Openshift容器平台上使用。&lt;/p&gt;
&lt;h3 id="_2"&gt;翻译对照表&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;英文&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;tag&lt;/td&gt;
&lt;td&gt;标签&lt;/td&gt;
&lt;td&gt;docker镜像版本标签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image&lt;/td&gt;
&lt;td&gt;镜像&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;container&lt;/td&gt;
&lt;td&gt;容器&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pod&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Kubernetes的最小托管单位, 一般为一个容器, 也可以为多个容器.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;namespace&lt;/td&gt;
&lt;td&gt;命名空间&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image layer&lt;/td&gt;
&lt;td&gt;镜像层&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;metadata&lt;/td&gt;
&lt;td&gt;元数据&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;node&lt;/td&gt;
&lt;td&gt;节点&lt;/td&gt;
&lt;td&gt;Kubernetes 概念, 指主机.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OpenShift Container Platform&lt;/td&gt;
&lt;td&gt;OpenShift容器平台&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SOURCE-TO-IMAGE&lt;/td&gt;
&lt;td&gt;源到镜像&lt;/td&gt;
&lt;td&gt;OpenShift容器平台的专有CI/CD方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;root group&lt;/td&gt;
&lt;td&gt;根组&lt;/td&gt;
&lt;td&gt;*NIX的概念&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service account&lt;/td&gt;
&lt;td&gt;服务帐户&lt;/td&gt;
&lt;td&gt;Kubernetes或 OpenShift的概念&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;security context constraint&lt;/td&gt;
&lt;td&gt;安全上下文约束&lt;/td&gt;
&lt;td&gt;OpenShift容器平台的概念&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service&lt;/td&gt;
&lt;td&gt;服务&lt;/td&gt;
&lt;td&gt;Kubernetes 概念&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image registry&lt;/td&gt;
&lt;td&gt;镜像注册表&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;heap&lt;/td&gt;
&lt;td&gt;堆&lt;/td&gt;
&lt;td&gt;一种JVM内存类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;out-of-memory&lt;/td&gt;
&lt;td&gt;内存不足&lt;/td&gt;
&lt;td&gt;JVM报错&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;liveness probe&lt;/td&gt;
&lt;td&gt;活性探针&lt;/td&gt;
&lt;td&gt;Kubernetes 概念 - 用于检查容器状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readiness probe&lt;/td&gt;
&lt;td&gt;就绪探针&lt;/td&gt;
&lt;td&gt;Kubernetes 概念 - 用于检查容器状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;template&lt;/td&gt;
&lt;td&gt;模板&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;label&lt;/td&gt;
&lt;td&gt;标签&lt;/td&gt;
&lt;td&gt;dockerfile概念&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;quota&lt;/td&gt;
&lt;td&gt;配额&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_3"&gt;通用容器镜像指南&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通常，在创建容器镜像时，以下准则普遍适用，并且与是否在OpenShift Container Platform上使用镜像无关。&lt;/p&gt;
&lt;h3 id="label-maintainer"&gt;使用 &lt;code&gt;LABEL maintainer&lt;/code&gt;&lt;a class="headerlink" href="#label-maintainer" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;LABEL maintainer&lt;/code&gt;指令设置镜像的author字段。如果您的用户有问题，这对于向他们提供电子邮件联系非常有用。&lt;/p&gt;
&lt;h3 id="_4"&gt;复用镜像&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;只要有可能，我们建议您使用&lt;code&gt;FROM&lt;/code&gt;语句将镜像基于适当的上游镜像。这可确保您的镜像在更新时可以轻松从上游映像中获取安全修复程序，而不必直接更新依赖项。&lt;/p&gt;
&lt;p&gt;此外，在&lt;code&gt;FROM&lt;/code&gt;指令中使用标签 tag（例如 &lt;code&gt;rhel:rhel7&lt;/code&gt;），使用户能够清楚地了解镜像所基于的上游镜像版本。&lt;/p&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; &lt;strong&gt;禁止&lt;/strong&gt;使用&lt;code&gt;latest&lt;/code&gt; tag以确保您的镜像不会受到&lt;code&gt;latest&lt;/code&gt;上游镜像版本的重大更改的影响。&lt;/p&gt;
&lt;h3 id="tags"&gt;保持标签 TAGS 的兼容性&lt;a class="headerlink" href="#tags" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给自己的镜像打标签时，我们建议您尝试在标签内保持向后兼容性。例如，如果您提供一个名为&lt;code&gt;foo&lt;/code&gt;的镜像，并且它当前为1.0版，那么您可以提供一个&lt;code&gt;foo:v1&lt;/code&gt;标签。当您更新镜像时，只要它继续与原始镜像兼容，就可以继续标记新图像为&lt;code&gt;foo:v1&lt;/code&gt;，并且该标记的下游消费者将能够在不中断的情况下获得更新。&lt;/p&gt;
&lt;p&gt;如果您稍后发布了不兼容的更新，那么您应该切换到一个新标签，例如&lt;code&gt;foo:v2&lt;/code&gt;。这允许下游消费者可以按照自身意愿升级到新版本，但不会被新的不兼容镜像无意中破坏。但是任何使用&lt;code&gt;foo:latest&lt;/code&gt;的下游消费者都会承担引入不兼容更改的风险。&lt;/p&gt;
&lt;h3 id="_5"&gt;避免多个进程&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我们建议您&lt;strong&gt;不要&lt;/strong&gt;在一个容器内启动多个服务，例如数据库和sshd。这是不必要的，因为容器是轻量级的，可以很容易地链接在一起以协调多个进程。Kubernetes和Openshift容器平台允许您通过将相关镜像分组到单个pod中，轻松地对它们进行集中和共同管理。&lt;/p&gt;
&lt;p&gt;这个托管单位(指pod)确保单位内的容器间共享网络名称空间和通信存储。更新的干扰也较小。单进程的信号处理流程也更清晰，因为您不必管理路由信号到生成的进程。&lt;/p&gt;
&lt;h3 id="exec"&gt;在封装脚本中使用 &lt;code&gt;EXEC&lt;/code&gt; 指令&lt;a class="headerlink" href="#exec" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;许多镜像在为正在运行的软件启动进程之前使用封装脚本进行一些设置。如果您的镜像使用这样的脚本，那么该脚本应该使用&lt;code&gt;exec&lt;/code&gt;，以便用软件替换该脚本的进程。如果不使用&lt;code&gt;exec&lt;/code&gt;，那么容器运行时发送的信号将转到封装脚本，而不是软件的进程。这不是你想要的，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="发送信号问题" src="./images/bash_signal.png"&gt;&lt;/p&gt;
&lt;p&gt;假设您有一个封装脚本来启动某个服务器的进程。启动容器（例如，使用&lt;code&gt;docker run -i&lt;/code&gt;），它运行封装脚本，然后启动进程。现在假设您希望使用&lt;code&gt;ctrl+c&lt;/code&gt;终止容器。如果封装脚本使用&lt;code&gt;exec&lt;/code&gt;启动服务器进程，docker将向服务器进程发送&lt;em&gt;sigint&lt;/em&gt;，并且一切都将按预期工作。如果您没有在封装脚本中使用&lt;code&gt;exec&lt;/code&gt;，docker会将&lt;em&gt;sigint&lt;/em&gt;发送到封装脚本的进程，并且您的服务器进程将像什么都没有发生一样继续运行。&lt;/p&gt;
&lt;p&gt;还要注意，当在容器中运行时，您的进程作为&lt;strong&gt;pid 1&lt;/strong&gt;运行。这意味着，如果主进程终止，整个容器将停止，从而杀死您可能从&lt;strong&gt;PID 1&lt;/strong&gt;进程启动的任何子进程。&lt;/p&gt;
&lt;p&gt;有关其他含义，请参阅 &lt;a href="http://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/"&gt;“Docker和PID 1 zombie收获问题”&lt;/a&gt;博客文章。另请参阅&lt;a href="https://felipec.wordpress.com/2013/11/04/init/"&gt;“揭开init系统（PID 1）的神秘面纱”&lt;/a&gt;博客文章，深入了解PID 1和&lt;strong&gt;init&lt;/strong&gt; 系统。&lt;/p&gt;
&lt;h3 id="_6"&gt;清除临时文件&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;应删除在生成过程中创建的&lt;strong&gt;所有临时文件&lt;/strong&gt;。这还包括使用&lt;code&gt;ADD&lt;/code&gt;指令添加的任何文件。例如，👍 我们强烈建议您在执行&lt;code&gt;yum install&lt;/code&gt;操作之后运行&lt;code&gt;yum clean&lt;/code&gt;命令。&lt;/p&gt;
&lt;p&gt;通过如下创建&lt;code&gt;RUN&lt;/code&gt;语句，可以防止&lt;code&gt;yum&lt;/code&gt;缓存存储在镜像层中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; yum -y install mypackage &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yum -y install myotherpackage &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yum clean all -y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;请注意，如果您改为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; yum -y install mypackage
&lt;span class="k"&gt;RUN&lt;/span&gt; yum -y install myotherpackage &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yum clean all -y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么，第一个&lt;code&gt;yum&lt;/code&gt;调用会在该层中留下额外的文件，并且在稍后运行&lt;code&gt;yum clean&lt;/code&gt;操作时，无法删除这些文件。额外的文件在最终镜像中不可见，但它们存在于底层中。&lt;/p&gt;
&lt;p&gt;当前容器生成过程不允许在较新的层中运行命令，以缩小在较早的层中删除某些内容时图像所使用的空间。这意味着，如果在后面的层中执行rm命令，尽管文件是隐藏的，但它不会减少要下载的镜像的总体大小。因此，与&lt;code&gt;yum clean&lt;/code&gt;示例一样，最好在可能的情况下，使用创建文件的相同命令删除文件，这样它们就不会被写入某个层。&lt;/p&gt;
&lt;p&gt;此外，在一条&lt;code&gt;RUN&lt;/code&gt;语句中执行多个命令可以减少镜像中的层数，从而缩短下载和提取时间。&lt;/p&gt;
&lt;p&gt;apt-get例子如下: (最后通过&lt;code&gt;rm -rf /var/lib/apt/lists/*&lt;/code&gt;删除)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y &lt;span class="se"&gt;\&lt;/span&gt;
    aufs-tools &lt;span class="se"&gt;\&lt;/span&gt;
    automake &lt;span class="se"&gt;\&lt;/span&gt;
    build-essential &lt;span class="se"&gt;\&lt;/span&gt;
    curl &lt;span class="se"&gt;\&lt;/span&gt;
    dpkg-sig &lt;span class="se"&gt;\&lt;/span&gt;
    libcap-dev &lt;span class="se"&gt;\&lt;/span&gt;
    libsqlite3-dev &lt;span class="se"&gt;\&lt;/span&gt;
    mercurial &lt;span class="se"&gt;\&lt;/span&gt;
    reprepro &lt;span class="se"&gt;\&lt;/span&gt;
    ruby1.9.1 &lt;span class="se"&gt;\&lt;/span&gt;
    ruby1.9.1-dev &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;s3cmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1.* &lt;span class="se"&gt;\&lt;/span&gt;
 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf /var/lib/apt/lists/*
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;RUN&lt;/code&gt;、&lt;code&gt;COPY&lt;/code&gt;和&lt;code&gt;ADD&lt;/code&gt;步骤将创建层。&lt;/li&gt;
&lt;li&gt;每个层包含与前一层的差异项。&lt;/li&gt;
&lt;li&gt;图层会增加最终镜像的大小。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 提示:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将相关命令（&lt;code&gt;yum install&lt;/code&gt;）放入同一&lt;code&gt;RUN&lt;/code&gt;步骤。&lt;/li&gt;
&lt;li&gt;在同一&lt;code&gt;RUN&lt;/code&gt;步骤中删除创建的文件。&lt;/li&gt;
&lt;li&gt;避免使用&lt;code&gt;apt-get upgrade&lt;/code&gt;或&lt;code&gt;yum upgrade all&lt;/code&gt;，因为它将所有包升级到最新版本.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id="_7"&gt;按正确的顺序放置指令&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;容器构建器读取&lt;code&gt;dockerfile&lt;/code&gt;并从上到下运行指令。成功执行的每一条指令都会创建一个层，在下次构建此镜像或另一个镜像时可以重用该层。在Dockerfile的顶部放置很少更改的指令非常重要。这样做可以确保同一图像的下一个构建速度非常快，因为上层更改不会使缓存失效。&lt;/p&gt;
&lt;p&gt;例如，如果您正在处理一个&lt;code&gt;dockerfile&lt;/code&gt;，其中包含一个用于安装正在迭代的文件的&lt;code&gt;ADD&lt;/code&gt;指令，以及一个用于&lt;code&gt;yum install&lt;/code&gt;包的&lt;code&gt;RUN&lt;/code&gt;指令，那么最好将&lt;code&gt;ADD&lt;/code&gt;命令放在最后：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; foo&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; yum -y install mypackage &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yum clean all -y
&lt;span class="k"&gt;ADD&lt;/span&gt; myfile /test/myfile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样，每次编辑&lt;em&gt;myfile&lt;/em&gt;并重新运行&lt;code&gt;`docker build&lt;/code&gt;时，系统都会为&lt;code&gt;yum&lt;/code&gt;命令重用缓存层，并且只为&lt;code&gt;ADD&lt;/code&gt;操作生成新层。&lt;/p&gt;
&lt;p&gt;如果相反，您将dockerfile编写为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; foo&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt; myfile /test/myfile
&lt;span class="k"&gt;RUN&lt;/span&gt; yum -y install mypackage &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yum clean all -y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后，每次更改&lt;em&gt;myfile&lt;/em&gt;和再次运行&lt;code&gt;docker build&lt;/code&gt;时，&lt;code&gt;ADD&lt;/code&gt;操作都会使运行层缓存失效，因此必须重新运行&lt;code&gt;yum&lt;/code&gt;操作。&lt;/p&gt;
&lt;h3 id="_8"&gt;标记重要端口&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;EXPOSE&lt;/code&gt;指令使容器中的端口对主机系统和其他容器可用。虽然可以指定使用&lt;code&gt;docker run -p&lt;/code&gt;调用公开端口，但在&lt;code&gt;dockerfile&lt;/code&gt;中使用&lt;code&gt;EXPOSE&lt;/code&gt;指令可以通过显式声明软件需要运行的端口，使人和软件更容易使用您的镜像：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;暴露的端口将显示在与从您的镜像创建的容器相关联的&lt;code&gt;docker ps&lt;/code&gt;下。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker inspect&lt;/code&gt;返回的镜像的元数据中也将存在暴露的端口。&lt;/li&gt;
&lt;li&gt;当您将一个容器链接到另一个容器时，暴露的端口将被链接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_9"&gt;设置环境变量&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="👍" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f44d.png" title=":+1:" width="20px"&gt; 使用&lt;code&gt;ENV&lt;/code&gt;指令设置环境变量是很好的实践。一个例子是设置项目的版本。这使得人们在不查看&lt;code&gt;dockerfile&lt;/code&gt;的情况下很容易找到版本。另一个例子是在系统上公布一条可以被另一个进程使用的路径，比如&lt;code&gt;JAVA_HOME&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="_10"&gt;避免默认密码&lt;a class="headerlink" href="#_10" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 最好&lt;strong&gt;避免设置默认密码&lt;/strong&gt;。许多人会扩展镜像，忘记删除或更改默认密码。如果为生产中的用户分配了一个众所周知的密码，这可能会导致安全问题。&lt;img align="absmiddle" alt="👍" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f44d.png" title=":+1:" width="20px"&gt; &lt;strong&gt;应该使用环境变量来配置密码&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果确实选择设置默认密码，请确保在容器启动时显示适当的警告消息。消息应该通知用户默认密码的值，并解释如何更改它，例如设置什么环境变量。&lt;/p&gt;
&lt;h3 id="sshd"&gt;禁用SSHD&lt;a class="headerlink" href="#sshd" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 禁止在镜像中运行sshd。可以使用&lt;code&gt;docker exec&lt;/code&gt;命令访问本地主机上运行的容器。或者，可以使用&lt;code&gt;oc exec&lt;/code&gt;命令或&lt;code&gt;oc rsh&lt;/code&gt;命令来访问在Openshift容器平台集群上运行的容器。在您的镜像中安装和运行sshd会遭受潜在攻击, 需要额外的安全补丁修复。&lt;/p&gt;
&lt;h3 id="volumes"&gt;将 VOLUMES 用于持久数据&lt;a class="headerlink" href="#volumes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;镜像应使用&lt;a href="https://docs.docker.com/reference/builder/#volume"&gt;卷&lt;/a&gt;来存储持久数据。这样，Kubernetes或OpenShift Container Platform将网络存储挂载到运行容器的节点，如果容器移动到新节点，则存储将重新连接到该节点。通过将卷用于所有持久存储需求，即使重新启动或移动容器，也会保留内容。如果您的镜像将数据写入容器内的任意位置，则可能不会保留该内容。&lt;/p&gt;
&lt;p&gt;所有需要保存的数据，即使在容器被销毁后，也必须写入卷。容器引擎支持容器的&lt;code&gt;readonly&lt;/code&gt;标志，可用于严格执行有关不将数据写入容器中的临时存储的良好实践。现在围绕这个功能设计您的镜像将使以后更容易利用它。&lt;/p&gt;
&lt;p&gt;此外，在&lt;em&gt;Dockerfile&lt;/em&gt;中显式定义卷使镜像的消费者很容易理解在运行镜像时必须定义哪些卷。&lt;/p&gt;
&lt;p&gt;有关如何在Openshift容器平台中使用卷的更多信息，请参阅 &lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/"&gt;Kubernetes documentation&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❕" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2755.png" title=":grey_exclamation:" width="20px"&gt; 注意:&lt;/p&gt;
&lt;p&gt;即使使用持久卷，镜像的每个实例都有自己的卷，并且文件系统在实例之间不共享。这意味着卷不能用于共享集群中的状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="root"&gt;使用非root用户运行容器进程&lt;a class="headerlink" href="#root" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;默认情况下，Docker用容器内部的root运行容器进程。这是一个糟糕的做法，因为如果攻击者设法突破容器，他们可以获得对Docker主机的root权限。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 注意:&lt;/p&gt;
&lt;p&gt;如果您是容器中的root，那么您将是主机上的root。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_11"&gt;使用多阶段构建创建精益且生产就绪的镜像&lt;a class="headerlink" href="#_11" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;利用&lt;a href="https://docs.docker.com/develop/develop-images/multistage-build/"&gt;多阶段构建&lt;/a&gt;来创建一个用于构建工件的临时镜像，该工件将被复制到生产镜像上。临时构建镜像将与与该映像关联的原始文件、文件夹和依赖项一起丢弃。&lt;/p&gt;
&lt;p&gt;这会产生了一个精益，生产就绪的镜像。&lt;/p&gt;
&lt;p&gt;一个用例是使用非Alpine基础镜像来安装需要编译的依赖项。然后可以将wheel文件复制到最终镜像。&lt;/p&gt;
&lt;p&gt;Python 示例如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.6 as base&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; requirements.txt /
&lt;span class="k"&gt;RUN&lt;/span&gt; pip wheel --no-cache-dir --no-deps --wheel-dir /wheels -r requirements.txt

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.6-alpine&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; --from&lt;span class="o"&gt;=&lt;/span&gt;base /wheels /wheels
&lt;span class="k"&gt;COPY&lt;/span&gt; --from&lt;span class="o"&gt;=&lt;/span&gt;base requirements.txt .
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install --no-cache /wheels/* # flask, gunicorn, pycrypto
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; . /app
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用前大小: 705MB, 使用后大小: 103MB&lt;/p&gt;
&lt;h3 id="_12"&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 禁止在容器中存储机密信息&lt;a class="headerlink" href="#_12" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;禁止在容器中存储机密信息, 包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;敏感信息。&lt;/li&gt;
&lt;li&gt;数据库凭据、&lt;/li&gt;
&lt;li&gt;ssh密钥、&lt;/li&gt;
&lt;li&gt;用户名和密码、&lt;/li&gt;
&lt;li&gt;api令牌等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上信息可以通过: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境变量 ENV  传递&lt;/li&gt;
&lt;li&gt;卷VOLUME 挂载&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tmp"&gt;避免将文件放入&lt;code&gt;/tmp&lt;/code&gt;中&lt;a class="headerlink" href="#tmp" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;对于一些软件(如: python的gunicorn), 会将某些缓存信息或心跳检测信息写入&lt;code&gt;/tmp&lt;/code&gt;中, 这对&lt;code&gt;/tmp&lt;/code&gt;的读写性能有较高要求, 如果&lt;code&gt;/tmp&lt;/code&gt;挂载的是普通磁盘, 可能导致严重的性能问题.&lt;/p&gt;
&lt;p&gt;在某些Linux发行版中，&lt;code&gt;/tmp&lt;/code&gt;通过&lt;code&gt;tmpfs&lt;/code&gt;文件系统存储在内存中。但是，Docker容器默认情况下没有&lt;code&gt;/tmp&lt;/code&gt;打开&lt;code&gt;tmpfs&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run --rm -it ubuntu:18.04 df
Filesystem       1K-blocks     Used Available Use% Mounted on
overlay           &lt;span class="m"&gt;31263648&lt;/span&gt; &lt;span class="m"&gt;25656756&lt;/span&gt;   &lt;span class="m"&gt;3995732&lt;/span&gt;  &lt;span class="m"&gt;87&lt;/span&gt;% /
tmpfs                &lt;span class="m"&gt;65536&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;65536&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;% /dev
tmpfs              &lt;span class="m"&gt;4026608&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;4026608&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;% /sys/fs/cgroup
/dev/mapper/root  &lt;span class="m"&gt;31263648&lt;/span&gt; &lt;span class="m"&gt;25656756&lt;/span&gt;   &lt;span class="m"&gt;3995732&lt;/span&gt;  &lt;span class="m"&gt;87&lt;/span&gt;% /etc/hosts
shm                  &lt;span class="m"&gt;65536&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;65536&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;% /dev/shm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如您所见，&lt;code&gt;/tmp&lt;/code&gt;正在使用标准的Docker overlay文件系统：它由普通的块设备或计算机正在使用的硬盘驱动器支持。这可能导致性能问题 .&lt;/p&gt;
&lt;p&gt;针对这类软件, 通用的解决方案是将其临时文件存储在其他地方。特别是，如果你看上面你会看到&lt;code&gt;/dev/shm&lt;/code&gt;使用&lt;code&gt;shm&lt;/code&gt;文件系统共享内存和内存文件系统。&lt;strong&gt;所以你需要做的就是使用/dev/shm而不是/tmp&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="alpine-linux"&gt;~~使用 Alpine Linux基础镜像(不建议采纳)~~&lt;a class="headerlink" href="#alpine-linux" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用基于&lt;a href="https://hub.docker.com/_/alpine/"&gt;Alpine Linux&lt;/a&gt;的镜像，因为它们只提供您需要的包。生成的图像将更小。&lt;/p&gt;
&lt;p&gt;收益有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;减少了主机成本，因为使用的磁盘空间更少&lt;/li&gt;
&lt;li&gt;更快的构建、下载和运行时间&lt;/li&gt;
&lt;li&gt;更安全（因为包和库更少）&lt;/li&gt;
&lt;li&gt;更快的部署&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.6-alpine&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; requirements.txt /
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install -r /requirements.txt  # flask and gunicorn
&lt;span class="k"&gt;COPY&lt;/span&gt; . /app
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用前大小: 702MB, 使用后大小: 102MB&lt;/p&gt;
&lt;h3 id="red-hat"&gt;使用Red Hat 官方基础镜像&lt;a class="headerlink" href="#red-hat" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;上边一条其实我觉得这是不好的建议。我已经看到了使用Alpine Linux的人们报告的一大堆问题，因为它建立在musl libc之上，而不是大多数Linux发行版使用的GNU libc（glibc）。问题范围从日期时间格式的错误到由于较小的堆栈导致的崩溃。&lt;/p&gt;
&lt;p&gt;公平地说，许多或大部分问题已得到解决，但是在生产中调试自己的错误已经足够糟糕了，为什么要增加更多的潜力以获得更小的图像呢？&lt;/p&gt;
&lt;p&gt;因此，我建议使用基于RedHat官方的镜像。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://access.redhat.com/containers/#/explore"&gt;&lt;strong&gt;Red Hat Container Catalog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="dockerignore"&gt;使用&lt;code&gt;.dockerignore&lt;/code&gt;排除无关文件&lt;a class="headerlink" href="#dockerignore" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;要排除与构建无关的文件（不重构源存储库），请使用&lt;code&gt;.dockerignore&lt;/code&gt;文件。此文件支持与&lt;code&gt;.gitignore&lt;/code&gt;文件类似的排除模式。具体请参阅 &lt;a href="https://docs.docker.com/engine/reference/builder/#dockerignore-file"&gt;.dockerignore文件&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id="_13"&gt;不要安装不必要的包&lt;a class="headerlink" href="#_13" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;为了降低复杂性，依赖性，文件大小和构建时间，请避免安装额外的或不必要的软件包，因为它们可能“很好”。例如，您不需要在数据库映像中包含文本编辑器。&lt;/p&gt;
&lt;h3 id="_14"&gt;解耦应用程序&lt;a class="headerlink" href="#_14" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;每个容器应该只有一个进程。将应用程序分离到多个容器中可以更容易地水平扩展和重用容器。例如，Web应用程序堆栈可能包含三个独立的容器，每个容器都有自己独特的映像，以分离的方式管理Web应用程序，数据库和内存缓存。&lt;/p&gt;
&lt;p&gt;将每个容器限制为一个进程是一个很好的经验法则，但它不是一个硬性规则。例如，不仅可以&lt;a href="https://docs.docker.com/engine/reference/run/#specify-an-init-process"&gt;使用init进程生成&lt;/a&gt;容器 ，而且某些程序可能会自行生成其他进程。例如，&lt;a href="http://www.celeryproject.org/"&gt;Celery&lt;/a&gt;可以生成多个工作进程，&lt;a href="https://httpd.apache.org/"&gt;Apache&lt;/a&gt;可以为每个请求创建一个进程。&lt;/p&gt;
&lt;p&gt;使用您的最佳判断，尽可能保持容器清洁和模块化。如果容器彼此依赖，则可以使用&lt;a href="https://docs.docker.com/engine/userguide/networking/"&gt;Docker容器网络&lt;/a&gt; 来确保这些容器可以进行通信。&lt;/p&gt;
&lt;h3 id="_15"&gt;对多行参数进行排序&lt;a class="headerlink" href="#_15" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;只要有可能，通过按字母顺序排序多行参数来缓解以后的更改。这有助于避免重复包并使列表更容易更新。这也使PR更容易阅读和审查。在反斜杠（&lt;code&gt;\&lt;/code&gt;）之前添加空格也有帮助。&lt;/p&gt;
&lt;p&gt;下面是来自一个示例&lt;a href="https://github.com/docker-library/buildpack-deps"&gt;&lt;code&gt;buildpack-deps&lt;/code&gt;图像&lt;/a&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y &lt;span class="se"&gt;\&lt;/span&gt;
  bzr &lt;span class="se"&gt;\&lt;/span&gt;
  cvs &lt;span class="se"&gt;\&lt;/span&gt;
  git &lt;span class="se"&gt;\&lt;/span&gt;
  mercurial &lt;span class="se"&gt;\&lt;/span&gt;
  subversion
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="java"&gt;JAVA 容器镜像指南&lt;a class="headerlink" href="#java" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="ide"&gt;IDE插件推荐&lt;a class="headerlink" href="#ide" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;idea - 转到“首选项”、“插件”、“安装JetBrains插件…”，搜索“Docker”并单击“安装”&lt;/li&gt;
&lt;li&gt;Eclipse - &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch07-intellij.adoc"&gt;Docker and IntelliJ IDEA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch07-eclipse.adoc#Docker_Eclipse"&gt;Docker and Eclipse&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_16"&gt;设置内存限制相关参数&lt;a class="headerlink" href="#_16" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;指定&lt;code&gt;-Xmx=1g&lt;/code&gt;将告诉JVM分配一个1GB堆。它并没有告诉JVM将其整个内存使用量限制为1GB。还会有卡card tables、代码缓存code cache和各种其他堆外数据结构。用于指定总内存使用量的参数是&lt;code&gt;-XX:MaxRAM&lt;/code&gt;。请注意，使用&lt;code&gt;-XX:MaxRam=500m&lt;/code&gt;时，堆将大约为250MB。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jvm在历史上查找&lt;code&gt;/proc&lt;/code&gt;以确定有多少可用内存，然后根据该值设置其堆大小。不幸的是，像docker这样的容器在&lt;code&gt;/proc&lt;/code&gt;中不提供特定于容器的信息。红帽2017年已经提出了一个补丁，它已经被上游接受，提供了一个&lt;code&gt;-XX:+UseCGroupMemoryLimitForHeap&lt;/code&gt;命令行参数，它告诉jvm查找&lt;code&gt;/sys/fs/cgroup/memory/memory.limit_in_bytes&lt;/code&gt;，以确定有多少可用内存。如果这个补丁在运行的OpenJDK版本中不可用，可以通过显式设置&lt;code&gt;-XX:MaxRAM=n&lt;/code&gt;来模拟它。&lt;/p&gt;
&lt;p&gt;总结, 设置内存限制相关参数:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;openjdk 8 新版本, 添加: &lt;code&gt;-XX:+UseCGroupMemoryLimitForHeap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果没有上边的参数, 设置:&lt;code&gt;-XX:MaxRAM=n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;建议设置JVM Heap约为 memory limit的80%&lt;/li&gt;
&lt;li&gt;建议设置JVM MaxRAM接近memory limit&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="gc"&gt;设置GC策略&lt;a class="headerlink" href="#gc" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;OpenJDK8中有一个补丁，它将使用cgroup可用的信息来计算适当数量的并行GC线程。但是，如果这个补丁在您的OpenJDK版本中不可用，那么您最终可能会得到8个并行GC线程，并且容器中只有2个CPU。解决方法是显式指定并行GC线程的数量。&lt;code&gt;-XX:ParallelGCThreads=2&lt;/code&gt; 。~~如果您的容器中限定只有一个CPU，我强烈建议您使用&lt;code&gt;-XX:+UseSerialGC&lt;/code&gt;运行，并完全避免并行GC。~~&lt;/p&gt;
&lt;h3 id="java_1"&gt;JAVA启动阶段调优&lt;a class="headerlink" href="#java_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;JAVA程序都有一个启动阶段，它需要大量的堆，但会进入一个安静的循环阶段，在这个阶段它不需要太多。&lt;/p&gt;
&lt;p&gt;对于串行GC策略, 你可以要求它更具侵略性. &lt;code&gt;-XX:MinHeapFreeRatio=20&lt;/code&gt;(当堆占用率大于80%时，此值默认增大。)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;XX:MaxHeapFreeRatio=40&lt;/code&gt;(堆占用率小于60%时收缩)&lt;/p&gt;
&lt;p&gt;对于并行 - parallel GC策略, 推荐如下配置:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="java_2"&gt;JAVA容器全局建议资源请求和资源限制&lt;a class="headerlink" href="#java_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;JAVA程序都有一个启动阶段，启动阶段也会大量消耗CPU, CPU使用越多, 启动阶段越短.&lt;br&gt;
下面是一个表，总结了不同CPU限制下的spring boot 示例应用启动时间(在millicore中):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;500m — 80 seconds&lt;/li&gt;
&lt;li&gt;1000m — 35 seconds&lt;/li&gt;
&lt;li&gt;1500m — 22 seconds&lt;/li&gt;
&lt;li&gt;2500m — 17 seconds&lt;/li&gt;
&lt;li&gt;3000m — 12 seconds&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据以上情况, 容器平台管理员考虑对JAVA容器做如下限制:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用CPU requests, 不设置cpu limit (Kubernetes功能)&lt;/li&gt;
&lt;li&gt;使用memory limit等于memory request&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1024Mi&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;500m&amp;quot;&lt;/span&gt;
  &lt;span class="nt"&gt;limits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1024Mi&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="nginx"&gt;NGINX 容器镜像指南&lt;a class="headerlink" href="#nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果您直接在基础硬件或虚拟机上运行NGINX，通常需要一个NGINX实例来使用所有可用的CPU。由于NGINX是多进程模式，通常你会启动多个worker processes，每个工作进程都是不同的进程，以便利用所有CPU。&lt;/p&gt;
&lt;p&gt;但是，在容器中运行时，通常会在通过运行更多容器来扩展的环境中。Kubernetes：所有这些都隐藏了硬件，并期望通过缩放多个容器来利用多个CPU。&lt;/p&gt;
&lt;p&gt;因此，&lt;img align="absmiddle" alt="👍" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f44d.png" title=":+1:" width="20px"&gt;建议只需一个或两个工作进程即可开始使用NGINX。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;worker_processes&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# 或auto或2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="python"&gt;Python 容器镜像指南&lt;a class="headerlink" href="#python" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;示例如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# pull official base image&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.7-alpine&lt;/span&gt;

&lt;span class="c"&gt;# set work directory&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="c"&gt;# set environment variables&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; PYTHONDONTWRITEBYTECODE &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; PYTHONUNBUFFERED &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; DEBUG &lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="c"&gt;# install psycopg2&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; apk update &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add --virtual build-deps gcc python3-dev musl-dev &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add postgresql-dev &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; pip install psycopg2 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk del build-deps

&lt;span class="c"&gt;# install dependencies&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; ./requirements.txt .
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install -r requirements.txt

&lt;span class="c"&gt;# copy project&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; . .

&lt;span class="c"&gt;# add and run as non-root user&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; adduser -D myuser
&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; myuser&lt;/span&gt;

&lt;span class="c"&gt;# run gunicorn&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt; gunicorn hello_django.wsgi:application --bind &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:&lt;span class="nv"&gt;$PORT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;△ 示例Dockerfile&lt;/p&gt;
&lt;h3 id="ide_1"&gt;IDE插件推荐&lt;a class="headerlink" href="#ide_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PyCharm - 同Idea&lt;/li&gt;
&lt;li&gt;VSCode - &lt;strong&gt;Visual Studio Code Remote - Containers&lt;/strong&gt; 插件 &lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/remote/containers"&gt;Developing inside a Container&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_17"&gt;建议配置的环境变量&lt;a class="headerlink" href="#_17" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# set environment variables&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; PYTHONDONTWRITEBYTECODE &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; PYTHONUNBUFFERED &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; DEBUG &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;&lt;code&gt;PYTHONDONTWRITEBYTECODE&lt;/code&gt;: 防止python将pyc文件写入硬盘&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PYTHONUNBUFFERED&lt;/code&gt;: 防止python缓冲stdout和stderr&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEBUG&lt;/code&gt;: 方便根据环境类型的不同(测试/生产)调整是否开启debug&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_18"&gt;安装数据库驱动包的方法&lt;a class="headerlink" href="#_18" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以postgredb的驱动psycopg2为例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# install psycopg2&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; apk update &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add --virtual build-deps gcc python3-dev musl-dev &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add postgresql-dev &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; pip install psycopg2 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk del build-deps
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="openshift"&gt;Openshift 容器平台特定指南&lt;a class="headerlink" href="#openshift" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下是创建专门用于Openshift容器平台的容器镜像时适用的准则。&lt;/p&gt;
&lt;h3 id="s2i"&gt;启用源到映像（S2I）功能&lt;a class="headerlink" href="#s2i" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;对于打算运行由第三方提供的应用程序代码的镜像，例如为运行开发人员提供的java代码而设计的java镜像，您可以使您的镜像与&lt;a href="https://github.com/openshift/source-to-image"&gt;源到映像（S2I）&lt;/a&gt;构建工具一起工作。&lt;/p&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="👍" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f44d.png" title=":+1:" width="20px"&gt; S2I 是一个框架，它使得编写&lt;strong&gt;以应用程序源代码为输入&lt;/strong&gt;的镜像和生成&lt;strong&gt;以运行组合应用程序为输出的新镜像&lt;/strong&gt;变得容易。&lt;/p&gt;
&lt;p&gt;例如，这个&lt;a href="https://github.com/sclorg/s2i-python-container"&gt;python镜像&lt;/a&gt;定义了用于构建各种版本的python应用程序的s2i脚本。&lt;/p&gt;
&lt;h3 id&gt;支持任意用户ID&lt;a class="headerlink" href="#id" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;默认情况下，openshift容器平台使用任意分配的用户ID运行容器。这提供了额外的安全性，防止因容器引擎漏洞而逃逸容器的进程，从而在主机节点上获取更高级的权限。&lt;/p&gt;
&lt;p&gt;对于支持以任意用户身份运行的镜像，可以由镜像中的进程写入的目录和文件应归根组所有，并由该组读/写。要执行的文件还应具有组执行权限。&lt;/p&gt;
&lt;p&gt;将以下内容添加到Dockerfile将设置目录和文件权限，以允许根组中的用户在生成的镜像中访问它们：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; chgrp -R &lt;span class="m"&gt;0&lt;/span&gt; /some/directory &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    chmod -R &lt;span class="nv"&gt;g&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u /some/directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为容器用户始终是根组的成员，所以容器用户可以读写这些文件。根组没有任何特殊权限（与根用户不同），因此这种安排不存在安全问题。此外，&lt;strong&gt;在容器中运行的进程不能监听特权端口（低于1024的端口）&lt;/strong&gt;，因为它们不是作为特权用户运行的。&lt;/p&gt;
&lt;p&gt;因为容器的用户ID是动态生成的，所以在&lt;code&gt;/etc/passwd&lt;/code&gt;中不会有关联的条目。这可能会给希望能够查找其用户ID的应用程序带来问题。解决此问题的一种方法是使用容器的用户ID动态创建一个&lt;code&gt;passwd&lt;/code&gt;文件条目，作为镜像的启动脚本的一部分。这就是Dockerfile可能包含的内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; chmod &lt;span class="nv"&gt;g&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;u /etc/passwd
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;uid_entrypoint&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; 1001&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中&lt;code&gt;uid_entrypoint&lt;/code&gt;包含：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; ! whoami &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&amp;gt; /dev/null&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -w /etc/passwd &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;USER_NAME&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:x:&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;id -u&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;:0:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;USER_NAME&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; user:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:/sbin/nologin&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/passwd
  &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有关此的完整示例，请参见&lt;a href="https://github.com/RHsyseng/container-rhel-examples/blob/master/starter-arbitrary-uid/Dockerfile"&gt;此dockerfile&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最后，&lt;strong&gt;dockerfile中的最终&lt;code&gt;USER&lt;/code&gt;声明应该指定用户ID（数值），而不是用户名&lt;/strong&gt;。这允许openshift容器平台验证镜像试图使用的权限，并阻止运行试图作为root运行的镜像，因为作为特权用户运行容器会暴露潜在的安全漏洞。如果镜像未指定用户，则它从父映像继承&lt;code&gt;USER&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 注意:&lt;/p&gt;
&lt;p&gt;如果您的S2I镜像不包含带有数字用户的&lt;code&gt;USER&lt;/code&gt;声明，则默认情况下，构建将失败。为了允许使用命名用户或root（0）用户在Openshift容器平台中构建映像，可以添加项目的builder服务帐户（&lt;code&gt;system:serviceaccount:&amp;lt;your-project&amp;gt;:builder&lt;/code&gt;）添加到特权安全上下文约束（scc）。或者，您可以允许所有镜像作为任何用户运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="service"&gt;使用服务 SERVICE 进行镜像间通信&lt;a class="headerlink" href="#service" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;对于您的镜像需要与另一个镜像提供的服务通信的情况，例如需要访问数据库镜像以存储和检索数据的Web前端镜像，您的镜像应该使用Openshift容器平台的服务 - service。服务 - service为访问提供一个静态端点，该端点不会随着容器的停止、启动或移动而更改。此外，服务还为请求提供负载平衡。&lt;/p&gt;
&lt;h3 id="_19"&gt;提供公共库&lt;a class="headerlink" href="#_19" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;对于打算运行由第三方提供的应用程序代码的镜像，请确保您的镜像包含平台的常用库。特别是，为与平台一起使用的公共数据库提供数据库驱动程序。例如，如果您正在创建Java框架镜像，则为MySQL和PostgreSQL提供JDBC驱动程序。这样做可以防止在应用程序装配期间下载公共依赖项，从而加快应用程序镜像的构建。它还简化了应用程序开发人员所需的工作，以确保满足其所有依赖项。&lt;/p&gt;
&lt;h3 id="_20"&gt;使用环境变量进行配置&lt;a class="headerlink" href="#_20" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;您的镜像的用户应该能够配置它，而不必根据您的镜像创建下游镜像。这意味着运行时配置应该使用环境变量来处理。对于一个简单的配置，正在运行的进程可以直接使用环境变量。对于更复杂的配置或不支持此配置的运行时，通过定义在启动期间处理的模板配置文件来配置运行时。在此处理过程中，可以将使用环境变量提供的值替换到配置文件中，或者用于决定在配置文件中设置哪些选项。&lt;/p&gt;
&lt;p&gt;另外&lt;strong&gt;建议使用环境变量将证书和密钥等机密信息传递到容器中&lt;/strong&gt;。这样可以确保机密值不会最终提交到镜像中并泄漏到容器镜像注册表中。&lt;/p&gt;
&lt;p&gt;提供环境变量允许镜像的使用者自定义行为，如数据库设置、密码和性能调整，而不必在镜像上引入新的层。相反，它们可以在定义POD时简单地定义环境变量值，并在不重建镜像的情况下更改这些设置。&lt;/p&gt;
&lt;p&gt;对于非常复杂的场景，也可以使用运行时挂载到容器中的卷来提供配置。但是，如果您选择这样做，则必须确保当不存在所需的卷或配置时，镜像在启动时提供清晰的错误消息。&lt;/p&gt;
&lt;p&gt;此主题与在&lt;a href="#使用服务 SERVICE 进行镜像间通信"&gt;使用服务 SERVICE 进行镜像间通信&lt;/a&gt;相关，例如，应根据提供服务 - service 端点信息的环境变量定义数据源。这允许应用程序在不修改应用程序镜像的情况下动态使用Openshift容器平台环境中定义的数据源服务 - service。&lt;/p&gt;
&lt;p&gt;此外，应该通过检查容器的&lt;strong&gt;cgroups&lt;/strong&gt;设置来进行相应调整。这允许镜像将自己调到可用内存、CPU和其他资源。例如，基于Java的镜像应该根据&lt;strong&gt;cgroup&lt;/strong&gt;最大内存参数来调整它们的堆 - heap，以确保它们不超过限制并获得内存不足out-of-memory的错误。&lt;/p&gt;
&lt;p&gt;有关如何管理容器中的cgroup配额的详细信息，请参阅以下参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blog article - &lt;a href="https://goldmann.pl/blog/2014/09/11/resource-management-in-docker"&gt;Resource management in Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker documentation - &lt;a href="https://docs.docker.com/engine/admin/runmetrics/"&gt;Runtime Metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Blog article - &lt;a href="http://fabiokung.com/2014/03/13/memory-inside-linux-containers"&gt;Memory inside Linux containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_21"&gt;考虑集群方案&lt;a class="headerlink" href="#_21" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;您必须完全理解运行镜像的多个实例意味着什么。在最简单的情况下，服务的负载平衡功能处理将流量路由到镜像的所有实例。但是，许多框架必须共享信息才能执行领导人选举或故障转移状态；例如，在会话复制中。&lt;/p&gt;
&lt;p&gt;考虑在Openshift容器平台中运行时，您的实例如何完成此通信。虽然pod可以直接相互通信，但只要pod启动、停止或移动，它们的IP地址就会发生变化。因此，集群方案必须是动态的。&lt;/p&gt;
&lt;h3 id="_22"&gt;记录日志&lt;a class="headerlink" href="#_22" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="👍" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f44d.png" title=":+1:" width="20px"&gt; 最好将&lt;strong&gt;所有日志发送到标准输出&lt;/strong&gt;。Openshift容器平台从容器中收集标准输出，并将其发送到集中日志记录服务(ELK技术栈)，在那里可以查看。如果必须分隔日志内容，请在输出前面加上适当的关键字，这样可以筛选消息。&lt;/p&gt;
&lt;p&gt;如果您的镜像记录日志到一个文件中，那么用户必须使用手动操作来输入正在运行的容器并检索或查看日志文件。&lt;/p&gt;
&lt;h3 id="livenessreadiness"&gt;LIVENESS活性探针和READINESS 就绪探针&lt;a class="headerlink" href="#livenessreadiness" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;记录可用于镜像的活性和就绪探针示例。这些探针将允许用户部署您的镜像，并确保在未就绪之前不会将流量路由到容器，并且如果进程进入不健康状态，将重新启动容器。&lt;/p&gt;
&lt;h3 id="-template"&gt;模板 - TEMPLATE&lt;a class="headerlink" href="#-template" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;考虑为镜像提供一个示例模板。模板将为用户提供一种简单的方法，使您可以使用有用的配置快速部署图像。为了完整性，您的模板应该包括您用镜像记录的活性和就绪探针。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;额外资源&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/docker-overview/"&gt;Docker basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/reference/builder/"&gt;Dockerfile reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.projectatomic.io/docs/docker-image-author-guidance"&gt;Project Atomic Guidance for Container Image Authors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_23"&gt;在镜像中包括元数据&lt;a class="headerlink" href="#_23" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;定义镜像元数据有助于Openshift容器平台更好地使用容器镜像，允许Openshift容器平台为使用您的镜像的开发人员创建更好的体验。例如，您可以添加元数据来提供镜像的有用描述，或者对其他可能需要的镜像提供建议。&lt;/p&gt;
&lt;p&gt;您可以使用&lt;code&gt;dockerfile&lt;/code&gt;中的&lt;code&gt;label&lt;/code&gt;指令来定义镜像元数据。标签 - label类似于环境变量，因为它们是附加到镜像或容器的键值对。标签不同于环境变量，因为它们对正在运行的应用程序不可见，但是可以用于快速查找镜像和容器。&lt;/p&gt;
&lt;p&gt;标签名称通常应具有名称空间。应相应地设置名称空间，以反映将要拾取标签并使用它们的项目。对于openshift容器平台，命名空间应设置为&lt;code&gt;io.openshift&lt;/code&gt;，对于kubernetes，命名空间为&lt;code&gt;io.k8s&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;有关格式的详细信息，请参阅&lt;a href="https://docs.docker.com/engine/userguide/labels-custom-metadata"&gt;Docker自定义元数据文档&lt;/a&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Variable&lt;/th&gt;
&lt;th align="left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;io.openshift.tags&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;此标签 - label包含以逗号分隔字符串值列表表示的标签 - tag列表。标签 - tag是将容器镜像分类为广泛功能区域的方法。标签帮助用户界面和生成工具在应用程序创建过程中建议相关的容器图像。&lt;code&gt;LABEL io.openshift.tags   mongodb,mongodb24,nosql&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;io.openshift.wants&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;指定生成工具和用户界面可能用于提供相关建议的标签列表，需要具有给定标记的容器镜像。例如，如果容器镜像需要mysql和redis，而您没有带有redis标签的容器镜像，那么UI可能建议您将此镜像添加到部署中。&lt;code&gt;LABEL io.openshift.wants   mongodb,redis&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;io.k8s.description&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;此标签可用于向容器镜像使用者提供有关此镜像提供的服务或功能的更详细信息。然后，UI可以将此描述与容器镜像名称一起使用，以向最终用户提供更人性化的信息。&lt;code&gt;LABEL io.k8s.description The MySQL 5.5 Server with master-slave replication support&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;io.openshift.non-scalable&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;镜像可能使用此变量来表示它不支持缩放。然后，用户界面将此信息传达给该图像的消费者。不可伸缩基本上意味着副本的值最初不应设置为大于1。&lt;code&gt;LABEL io.openshift.non-scalable     true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;io.openshift.min-memory&lt;/code&gt; 和&lt;code&gt;io.openshift.min-cpu&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;此标签建议容器镜像可能需要多少资源才能正常工作。用户界面可能会警告用户部署此容器映像可能会超出其用户配额。这些值必须与kubernetes数量兼容。&lt;code&gt;LABEL io.openshift.min-memory 8Gi&lt;/code&gt;      &lt;code&gt;LABEL io.openshift.min-cpu 4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;△ OpenShift 容器平台支持的元数据&lt;/p&gt;
&lt;h2 id="_24"&gt;参考链接&lt;a class="headerlink" href="#_24" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OpenShift Container Platform Docs - &lt;a href="https://docs.openshift.com/container-platform/latest/openshift_images/create-images.html"&gt;Creating images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker documentation - &lt;a href="https://docs.docker.com/articles/dockerfile_best-practices/"&gt;Best practices for writing Dockerfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Project Atomic documentation - &lt;a href="http://www.projectatomic.io/docs/docker-image-author-guidance/"&gt;Guidance for Container Image Authors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/"&gt;“Docker和PID 1 zombie reaping问题”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://felipec.wordpress.com/2013/11/04/init/"&gt;“揭开init系统（PID 1）的神秘面纱”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GITHUB - &lt;a href="https://github.com/sclorg/s2i-python-container"&gt;sclorg/s2i-python-container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Blog article - &lt;a href="https://goldmann.pl/blog/2014/09/11/resource-management-in-docker"&gt;Resource management in Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker documentation - &lt;a href="https://docs.docker.com/engine/admin/runmetrics/"&gt;Runtime Metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Blog article - &lt;a href="http://fabiokung.com/2014/03/13/memory-inside-linux-containers"&gt;Memory inside Linux containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker documentation - &lt;a href="https://docs.docker.com/engine/docker-overview/"&gt;Docker basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker documentation - &lt;a href="https://docs.docker.com/engine/reference/builder/"&gt;Dockerfile reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker documentation - &lt;a href="https://docs.docker.com/engine/userguide/labels-custom-metadata"&gt;自定义元数据&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;testdriven.io - &lt;a href="https://testdriven.io/blog/deploying-django-to-heroku-with-docker/?utm_source=realpython"&gt;Deploying Django to Heroku With Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;testdriven.io - &lt;a href="https://testdriven.io/blog/dockerizing-django-with-postgres-gunicorn-and-nginx/"&gt;Dockerizing Django with Postgres, Gunicorn, and Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dockercon-2018 - &lt;a href="https://mherman.org/presentations/dockercon-2018/"&gt;Docker for Python Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker documentation - &lt;a href="https://docs.docker.com/develop/develop-images/multistage-build/"&gt;多阶段构建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Red Hat Developer - &lt;a href="https://developers.redhat.com/blog/2017/04/04/openjdk-and-containers/"&gt;OpenJDK and Containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/faun/java-application-optimization-on-kubernetes-on-the-example-of-a-spring-boot-microservice-cf3737a2219c"&gt;Java Application Optimization on Kubernetes on the Example of a Spring Boot Microservice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python Speed - &lt;a href="https://pythonspeed.com/articles/pipenv-docker/"&gt;Faster Docker builds with pipenv, poetry, or pip-tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python Speed - &lt;a href="https://pythonspeed.com/articles/gunicorn-in-docker/"&gt;Configuring Gunicorn for Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker documentation - &lt;a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch07-eclipse.adoc#Docker_Eclipse"&gt;Docker and Eclipse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker documentation - &lt;a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch07-intellij.adoc#Docker_IntelliJ"&gt;Docker and IntelliJ IDEA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/remote/containers"&gt;Developing inside a Container&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 25 Jul 2019 17:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-07-25:/container-best-practices.html</guid><category>python</category><category>java</category><category>openshift</category><category>docker</category><category>最佳实践</category><category>k8s</category><category>containers</category></item><item><title>抓取系统中的任何方法的参数值</title><link>https://www.EWhisper.cn/capture-any-method-param-value.html</link><description>&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynatrace 也可以抓取运行的系统中的任何方法的参数值. 抓取这个, 一方面是该参数值可能会表明一些关键信息(如: 机构代码, 保单号, 入参传参...), 便于针对性分析问题; 另一方面也可以对业务相关的参数抓取后进行整合分析, 如实时保单金额总数...&lt;/p&gt;
&lt;h2 id="_2"&gt;具体步骤&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;📓 备注:&lt;/p&gt;
&lt;p&gt;可以参考上一篇文章链接 &lt;a href="https://www.EWhisper.cn/howto-monitor-nonHTTP-or-batchjob-application.html"&gt;非HTTP应用或批处理应用如何进行全链路监控&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要抓取指定方法的参数, 首先肯定知道方法是什么; &lt;/p&gt;
&lt;p&gt;然后将该方法添加到Dynatrace 的传感器规则. 如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/dt_edit_method_rule_2.png"&gt;&lt;/p&gt;
&lt;p&gt;如上图, Dynatrace会自动获取到该方法有6个参数, 前三个参数是String类型, 第4个是double, 后边2个是string类型. 如果要捕获哪一个参数, 就勾选第二列&lt;strong&gt;Capture&lt;/strong&gt; 的勾选框就可以了. &lt;/p&gt;
&lt;p&gt;勾选确定后, 还是热部署或者重启生效.&lt;/p&gt;
&lt;p&gt;假如第四个参数是保单金额, 那么每一笔事务, 就能直接在Dynatrace 上看到该笔事务的保单金额了. &lt;/p&gt;
&lt;p&gt;最终效果如下:&lt;/p&gt;
&lt;p&gt;这是一个在线旅游网站的demo. 可以实时获取到该笔事务&lt;code&gt;BookingService&lt;/code&gt; 方法的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信用卡号;&lt;/li&gt;
&lt;li&gt;邮箱;&lt;/li&gt;
&lt;li&gt;预定金额;&lt;/li&gt;
&lt;li&gt;出发地&lt;/li&gt;
&lt;li&gt;目的地&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="./images/dt-method-parms.jpg"&gt;&lt;/p&gt;
&lt;p&gt;就是这么简单. &lt;img align="absmiddle" alt="😸" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f638.png" title=":smile_cat:" width="20px"&gt;&lt;img align="absmiddle" alt="😸" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f638.png" title=":smile_cat:" width="20px"&gt;&lt;img align="absmiddle" alt="😸" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f638.png" title=":smile_cat:" width="20px"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 03 Jul 2019 22:48:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-07-03:/capture-any-method-param-value.html</guid><category>Dynatrace</category><category>Observability</category><category>最佳实践</category></item><item><title>非HTTP应用或批处理应用如何进行全链路监控</title><link>https://www.EWhisper.cn/howto-monitor-nonHTTP-or-batchjob-application.html</link><description>&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在近期的应用性能问题分析中, 有时候会发现业务异常, 但是却无法在APM监控中找到相关的请求, 这可能是由于请求并非HTTP请求, 而可能是批处理或其他非HTTP请求导致的. 因此无法监控分析. &lt;/p&gt;
&lt;p&gt;另外, 有些时候, 我们想要了解这类应用的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP解析 处理性能;&lt;/li&gt;
&lt;li&gt;批处理中SQL性能...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么就需要对非HTTP应用或批处理应用如何进行全链路监控. 下面介绍如何实现.&lt;/p&gt;
&lt;h2 id="_2"&gt;具体实现&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;接下来具体是通过Dynatrace AppMon 来实现对非HTTP应用或批处理应用的全链路监控.&lt;/p&gt;
&lt;p&gt;监控前后的效果对比如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/monitor-nonHTTP-APP-before-after.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未监控之前: 看不到一条事务&lt;/li&gt;
&lt;li&gt;监控后: 事务数巨细无遗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体的实现是利用了Dynatrace的&lt;strong&gt;Entry Points&lt;/strong&gt;(入口点)功能.&lt;/p&gt;
&lt;h3 id="_3"&gt;入口点概念&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个 &lt;em&gt;entry point&lt;/em&gt; 就是一个新的PurePath(Dynatrace 里的名词, 可以理解为一条事务)的开始. 通过适当的配置, 放置一个适当位置的, 活动的sensor(传感器, Dynatrace监控的微探针)来实现. 对于基本用户, 自带的Sensor Packs(传感器包) (如: Servlet, WebService, ASP.NET... 它通过这些实现对HTTP协议请求的监控)就已经够用了.&lt;/p&gt;
&lt;h3 id="_4"&gt;具体实现步骤&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果一个事务没有被抓取到(比如: mule的tcp请求, 批处理..), 那么就需要以下操作步骤:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;(可选)做CPU采样, 找到&lt;em&gt;入口点&lt;/em&gt; 方法&lt;/li&gt;
&lt;li&gt;配置指定方法的传感器&lt;/li&gt;
&lt;li&gt;将传感器设置为: &lt;strong&gt;活动并且启动PurePaths&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;热部署或重启Agent生效&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;找到入口点方法&lt;/h4&gt;
&lt;p&gt;如果你是一名开发, 且对你要监控的程序的 &lt;em&gt;入口点&lt;/em&gt; 方法了如指掌, 那么只需要提供这个方法的完整名称就可以了. 比如: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP请求的入口点可能是这样的: &lt;code&gt;com.xxxx.ap26.getaway.transport.tcp.protocol.AbstractTcpHeader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Batch Job的入口点可能是这样的: &lt;code&gt;org.*spring*framework.batch.thread.run&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你不清楚&lt;em&gt;入口点&lt;/em&gt;方法, 可以通过&lt;strong&gt;CPU采样&lt;/strong&gt;的方式进行分析. &lt;/p&gt;
&lt;p&gt;CPU采样可以分析当前运行的的Java或 .NET程序的线程堆栈, 并找出是否一某一个方法长时间运行或被频繁调用.&lt;/p&gt;
&lt;p&gt;分析流程如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;点击Dynatrace上的&lt;strong&gt;CPU 采样仪表图&lt;/strong&gt;. 如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="CPU 采样仪表图" src="images/dt_cpu_sampling_dashlet_1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后选择你要监控的应用Agent, 点击确定进行采样. 大约2分钟后停止采样. &lt;/p&gt;
&lt;p&gt;&lt;img alt="启动CPU采样" src="./images/dt_cpu_sampling_dashlet_2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;采样完成后, 对样本进行分析. 如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="采样分析" src="./images/dt_cpu_sampling_dashlet_3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如上图, 分析起来其实挺简单. 我们要找的 &lt;em&gt;入口点&lt;/em&gt; 方法一般满足这么几个条件:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;位于线程栈的较底层, 但是肯定在线程启动方法(如: &lt;code&gt;Thread.run&lt;/code&gt;)之后&lt;/li&gt;
&lt;li&gt;被频繁调用(如果是tcp请求这类的话) &lt;/li&gt;
&lt;li&gt;整个线程执行时间较长或CPU时间较长 (如批处理, 或tcp处理报文)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据以上条件, 我们会找到那个 &lt;em&gt;入口点方法&lt;/em&gt;, 这个方法应该和大神开发给出来的是一样的, 比如就是: &lt;code&gt;com.xxxx.ap26.getaway.transport.tcp.protocol.AbstractTcpHeader&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;配置该方法的传感器&lt;/h4&gt;
&lt;p&gt;找到该方法后, 直接在上图里选中该方法, 点击右键, 会弹出一系列菜单, 选择: &lt;strong&gt;添加这个方法为传感器&lt;/strong&gt;. 然后会弹出如下对话框:&lt;/p&gt;
&lt;p&gt;&lt;img alt="编辑方法规则" src="./images/dt_edit_method_rule.png"&gt;&lt;/p&gt;
&lt;h4&gt;将传感器设置为: 活动并且启动PurePaths&lt;/h4&gt;
&lt;p&gt;还是上图, 勾选红框中的: &lt;strong&gt;Allow to start PurePaths from this method (Entry Point)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;配置好之后点击确定. &lt;/p&gt;
&lt;p&gt;那么生效后, 就会对该方法进行字节码注入, 并且, 只要捕获到该方法, 就会认为该方法是一条事务的&lt;em&gt;入口点&lt;/em&gt;, 后续该事务可能会:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用其他任何方法&lt;/li&gt;
&lt;li&gt;调用Web Service&lt;/li&gt;
&lt;li&gt;执行SQL&lt;/li&gt;
&lt;li&gt;抛出 Exception&lt;/li&gt;
&lt;li&gt;输出 Error log&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都会被完整的记录, 记录响应时间, 成功/失败, 相关参数, web service 请求, sql语句, 异常堆栈, log日志...应有尽有.&lt;/p&gt;
&lt;h4&gt;热部署或重启Agent生效&lt;/h4&gt;
&lt;p&gt;当然, 还是要使刚刚添加的方法监控规则生效才会有一切. 要使之生效, 有2种办法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dynatrace Agent  热部署 (SUN JDK 1.6+)&lt;/li&gt;
&lt;li&gt;重启Dynatrace Agent (IBM JDK 6)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_5"&gt;效果&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;生效前, 可能看不到一条事务; 生效后, 可以看到每一条事务的细节. &lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;如下图所示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/mule-for-N-success-request.png"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 03 Jul 2019 19:45:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-07-03:/howto-monitor-nonHTTP-or-batchjob-application.html</guid><category>Dynatrace</category><category>Observability</category><category>最佳实践</category></item><item><title>MULE 无法接收TCP报文问题分析</title><link>https://www.EWhisper.cn/mule-cannot-receive-TCP-messages-problem-analysis.html</link><description>&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;近期某使用mule的项目在与N公司联调时发现对方的请求存在严重延迟. 请求是基于TCP协议的. 通过一步步分析, 最终定位到问题的根源并解决. 也通过本文对整个过程进行下梳理和总结.&lt;/p&gt;
&lt;h2 id="_2"&gt;问题描述&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我是6月24日突然被拉进一个微信群的. 当时的情况是: 该项目碰到一个棘手的问题, 开发找不到问题根源, 已经联系过主机和网络, 也没有什么进展.&lt;/p&gt;
&lt;h3 id="_3"&gt;开发的详细描述&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 问题详细描述:&lt;/p&gt;
&lt;p&gt;近期我们在与N公司渠道端进行联调，对方通过专线接入(TCP协议传输)，访问我方的内部联调环境。在联调过程中，我们发现对方的请求，存在很严重的延迟现象，经常性的出现超时，或者间隔十几分钟后，我方才收到对方请求。严重影响了联调。能否帮忙看看，是哪里有问题导致的？&lt;/p&gt;
&lt;p&gt;经多次跟踪，均未找到问题，目前&lt;strong&gt;mule-for-N公司的应用程序&lt;/strong&gt;(部署在8110端口)已经完全参照&lt;strong&gt;已上线渠道&lt;/strong&gt;(部署在6040端口)的应用代码格式编写。但是重新联调时，渠道方反馈一直超时read timed out，联系网络组重新进行抓包确认，服务器是正常接收渠道方请求，但是应用程序这边却需要在十几二十分钟之后才能接收到渠道请求，所以请老师帮忙看下，能否配合检测下从xx机器缓存字段接收区分发到应用服务端口之间的状态情况。&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_4"&gt;问题分析流程&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;要分析问题, 最重要的是2件事:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;尽可能多的细节&lt;/strong&gt;. 并且在这些细节中, 分清楚:&lt;ol&gt;
&lt;li&gt;哪些是&lt;strong&gt;既定事实&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;哪些是&lt;strong&gt;阐述者自己的判断&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对任何事情都保持怀疑&lt;/strong&gt;. 哪怕是:&lt;ol&gt;
&lt;li&gt;既定事实.  或&lt;/li&gt;
&lt;li&gt;你认为所有人都绝不可能犯的简单错误&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_5"&gt;问题梳理&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="Ⓜ" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/24c2.png" title=":m:" width="20px"&gt; 再次回顾一下&lt;a href="#开发的详细描述"&gt;开发的详细描述&lt;/a&gt;, 事实有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;专线接入&lt;/li&gt;
&lt;li&gt;TCP协议传输&lt;/li&gt;
&lt;li&gt;请求经常性的出现超时&lt;/li&gt;
&lt;li&gt;渠道方反馈一直超时read timed out&lt;/li&gt;
&lt;li&gt;服务器是正常接收渠道方请求&lt;/li&gt;
&lt;li&gt;换另一个mule(6040) app, 应用可以立马收到. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="Ⓜ" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/24c2.png" title=":m:" width="20px"&gt;开发自己的判断是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可能是网络问题&lt;/li&gt;
&lt;li&gt;可能是所在的机器缓存字段接收区分发到应用服务端口之间可能有问题. (主机问题)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-624"&gt;第一天 - 6月24日&lt;a class="headerlink" href="#-624" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;主机网络情况了解&lt;/h4&gt;
&lt;p&gt;当前的情况是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;网络组已经抓包了, 基本可以确定不是网络问题. (但是证据不够强有力)&lt;/li&gt;
&lt;li&gt;主机组无法自证所谓的: &lt;em&gt;所在的机器缓存字段接收区分发到应用服务端口之间的状态&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前一天是梳理好开发的描述, 主机和网络组也做了些测试分析, 今天首先要做的就是询问他们的测试分析情况.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 主机和网络组的反馈:&lt;/p&gt;
&lt;p&gt;"我从服务器抓包 能正常接收到对方的包, 但是应用不能及时收到" &lt;/p&gt;
&lt;p&gt;"服务器上面抓包，显示收到报文了, 也回复ack了. 是&lt;strong&gt;实时&lt;/strong&gt;收到的."&lt;/p&gt;
&lt;p&gt;"他换了6040端口，应用可以立马收到. 8110端口就有问题, 服务器上能收到，就是他应用收不到"&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对以上的描述梳理后, 事实没有更新, 但我自己&lt;strong&gt;基本上断定问题和主机/网络无关, 而应该是应用的问题&lt;/strong&gt;. 新增判断:&lt;/p&gt;
&lt;p&gt;Ⓜ️主机网络的判断也是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可能是应用问题.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么接下来就是尽可能的&lt;strong&gt;增加应用的可观察性&lt;/strong&gt;了, 发生问题期间, metrics指标肯定没问题, 日志也找不到问题. 那么这时候就只能用到&lt;strong&gt;APM监控&lt;/strong&gt;了.&lt;/p&gt;
&lt;h4&gt;装应用监控&lt;/h4&gt;
&lt;p&gt;这边有个小插曲, 我也大致描述一下吧.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;APM监控&lt;/strong&gt;, 我这边有2套:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开源APM - pinpoint&lt;/li&gt;
&lt;li&gt;商业APM - Dynatrace AppMon&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先装pinpoint, 装完pinpoint agent重启后, 发现拿不到请求数据. 拿不到数据2个原因:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mule 这个组件比较特殊, 没有对应的插件;&lt;/li&gt;
&lt;li&gt;报文直接走的4层TCP协议, pinpoint无法抓到4层TCP.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以最后还是安装Dynatrace了监控.&lt;/p&gt;
&lt;h3 id="-625"&gt;第二天 - 6月25日&lt;a class="headerlink" href="#-625" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Dynatrace已监控, 经过配置后(默认也抓不到, 因为&lt;strong&gt;入口点&lt;/strong&gt;不是常用的应用传输协议. 另外后续会有另一篇文章介绍如何进行这些高阶监控配置)可以看到mule的所有&lt;strong&gt;Transaction&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生效后再进行联调, 发现情况: &lt;strong&gt;mule-forN公司&lt;/strong&gt;应用 &lt;strong&gt;立马&lt;/strong&gt;就可以接收到报文的, 只是接收了之后处理必超时. 其实这里就可以断定不是主机和网络的问题了. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="请求超时" src="./images/mule-for-N-timeout.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初步怀疑是"接收报文"的方法可能有问题. 问开发, 开发不知道是哪个方法. 个人根据方法树判断, 可能是: &lt;code&gt;com.xxxx.ap26.gateway.transport.tcp.protocol.TcpHeaderProtocol.readFully(byte[], int, int)&lt;/code&gt; (翻到结论可以发现, 我个人判断的并不是完全准确), 针对这个方法进行更细粒度监控. (加入sensor, 抓取第三个参数&lt;code&gt;int&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加入后, 发现会调用4次, 前3次都很快, 第4次超时. 第四次&lt;code&gt;int&lt;/code&gt;是&lt;strong&gt;416&lt;/strong&gt;报文长度. 但是这个却执行了近500s. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="调用超时" src="./images/mule-for-N-failed-request.png"&gt;&lt;/p&gt;
&lt;p&gt;作为对比, 正常的请求是这样的:&lt;/p&gt;
&lt;p&gt;&lt;img alt="正常的请求" src="./images/mule-for-N-success-request.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;第二天初步结论&lt;/h4&gt;
&lt;p&gt;第二天主要是配监控和联调. 目前得到的初步结论有: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;N公司发过来的, 不论是发到mule-forN公司 8110端口还是已上线渠道6040端口, 都是450-500s 超时. 一直在socketRead读取数据. (也是通过监控看到的, 所以之前的&lt;a href="#问题梳理"&gt;事实&lt;/a&gt;: &lt;em&gt;换另一个mule(6040) app, 应用可以立马收到&lt;/em&gt; 并不是事实. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;肯定不是网络和主机的问题&lt;/strong&gt;. 因为mule已经收到了.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;肯定是应用的问题&lt;/strong&gt;. 因为mule在处理且在开发自己写的代码处超时了. (具体见上图)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此, 我的怀疑点有3:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;怀疑&lt;strong&gt;报文传输处理过程出错&lt;/strong&gt;: 看一下报文传输或者处理过程中是不是出现问题了, 报文长度416, 但是读取了480多s还在读取. &lt;/li&gt;
&lt;li&gt;怀疑&lt;strong&gt;编码问题&lt;/strong&gt;: 我还是觉得可能跟报文的编码格式问题有关系. 建议对一下报文的编码格式. (这个怀疑后来验证不成立)&lt;/li&gt;
&lt;li&gt;怀疑开发的&lt;strong&gt;TCP相关方法实现问题&lt;/strong&gt;: &lt;code&gt;com.xxxx.ap26.gateway.transport.tcp.protocol.TcpHeaderProtocol.readFully(java.io.InputStream, byte[], int, int)&lt;/code&gt;  这个方法实现可能有问题 (这个怀疑其实后面也被证明不正确)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-628"&gt;第五天 - 6月28日&lt;a class="headerlink" href="#-628" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;因为我不是开发, 我最终只能将怀疑范围缩小到应用相关的3点. 我这边根据监控和判断, 给出了我的建议和后续的调查方向. 开发老师也是不负众望, 最终定位到了问题的根源. &lt;/p&gt;
&lt;h4&gt;问题根因详细说明&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 开发老师的根因详细说明:&lt;/p&gt;
&lt;p&gt;问题定位到了，mule的一个getway方法对渠道请求做TCP解析后再把消息转给mule-forN公司 8110端口，现在是接收到渠道416个字符，但是重新read的时候只read到400个字符，剩余16个read不到，然后就一直在等待状态(&lt;em&gt;等待&lt;/em&gt;不准确, 其实是IO状态, 停留的方法为&lt;code&gt;java.net.SocketInputStream.socketRead0&lt;/code&gt;)了，从readfully方法里出不来.&lt;/p&gt;
&lt;p&gt;真正有问题的, 实际上是 &lt;code&gt;com.xxxx.ap26.gateway.transport.tcp.protocol.TcpHeaderProtocol.readFully(java.io.InputStream, byte[], int, int)&lt;/code&gt;的上一个方法, 做&lt;strong&gt;TCP解析&lt;/strong&gt;的方法: &lt;code&gt;com.xxxx.ap26.getaway.transport.tcp.protocol.AbstractTcpHeader&lt;/code&gt;. (&lt;code&gt;xxx.TcpHeaderProtocol.readFully&lt;/code&gt; 方法读取tcp, 读取tcp之前&lt;code&gt;xxx.tcp.protocol.AbstractTcpHeader&lt;/code&gt; 做解析)&lt;/p&gt;
&lt;p&gt;就卡在&lt;code&gt;int readLen = inputStream.read(buffer,bytesOffset,remain);&lt;/code&gt;这么一行代码上，  buffer是每次读取字节数，比如1024，bytesOffset是字节起始索引，remain是需要读取的字节数。&lt;/p&gt;
&lt;p&gt;检测渠道传进来的报文，是416个字节，&lt;code&gt;remain=416&lt;/code&gt;，但是read的结果是&lt;code&gt;readLen=400&lt;/code&gt;，少了16个字节，他会循环再读，读不到就一直卡在这了&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_6"&gt;根因及解决办法&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_7"&gt;&lt;img align="absmiddle" alt="🐛" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f41b.png" title=":bug:" width="20px"&gt; 根因:&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;确实是TCP相关方法实现的问题, 解析TCP的方法有问题, 导致报文处理过程出错, 从而导致报文处理超时&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="_8"&gt;&lt;img align="absmiddle" alt="✔" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2714.png" title=":heavy_check_mark:" width="20px"&gt; 解决办法&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 开发反馈的解决办法:&lt;/p&gt;
&lt;p&gt;解决了，换了种方式，&lt;code&gt;tcpheader&lt;/code&gt;是我们自己封装的，现在不用它了，直接用原生TCP对象解析.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_9"&gt;感悟和结论&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;现在已经9012年了, 网络出问题的概率很小. 碰到问题, 请不要把网络列为第一怀疑点, 这个会带偏分析方向;&lt;/li&gt;
&lt;li&gt;出问题, 自己代码问题概率最大, 其次才是: 框架, java源代码, 主机, 网络...  所以首先要做的应该是增加自己应用的可观察性.&lt;/li&gt;
&lt;li&gt;开发如何增加代码的可观察性? &lt;ol&gt;
&lt;li&gt;做threaddump和cpu采样&lt;/li&gt;
&lt;li&gt;加debug日志&lt;/li&gt;
&lt;li&gt;做trace分析. &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;APM监控真是个分析问题的神器, 像这种既不是常用软件(如tomcat, nginx...), 又不是通用协议(如: HTTP/ web service...)的情况, APM还是能追根溯源. 顺便还能帮助主机网络组老师自证清白. &lt;img align="absmiddle" alt="😜" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f61c.png" title=":stuck_out_tongue_winking_eye:" width="20px"&gt;&lt;img align="absmiddle" alt="😜" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f61c.png" title=":stuck_out_tongue_winking_eye:" width="20px"&gt;&lt;img align="absmiddle" alt="😜" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f61c.png" title=":stuck_out_tongue_winking_eye:" width="20px"&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 02 Jul 2019 18:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-07-02:/mule-cannot-receive-TCP-messages-problem-analysis.html</guid><category>java</category><category>Dynatrace</category><category>问题分析</category><category>Observability</category></item><item><title>我的个人博客启用CDN啦:tada:</title><link>https://www.EWhisper.cn/my-blog-start-using-cdn.html</link><description>&lt;p&gt;2019年6月28日起, 我的个人博客 - https://www.EWhisper.cn 正式启用CDN了! &lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;数据流向&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;之前的数据流量如下:&lt;/p&gt;
&lt;p&gt;用户 -&amp;gt; 域名 -&amp;gt; DNS -&amp;gt; 腾讯云主机外网IP -&amp;gt; 腾讯云主机内网IP -&amp;gt; &lt;strong&gt;Docker SDN端口映射&lt;/strong&gt;(443指向docker的443, 80之下那个docker的80) -&amp;gt; Docker的NGINX容器的 80和443端口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在加了一层CDN, 如下:&lt;/p&gt;
&lt;p&gt;用户 -&amp;gt; 域名 -&amp;gt; &lt;strong&gt;CDN&lt;/strong&gt; -&amp;gt; DNS -&amp;gt; 腾讯云主机外网IP -&amp;gt; 腾讯云主机内网IP -&amp;gt; &lt;strong&gt;Docker SDN端口映射&lt;/strong&gt;(443指向docker的443, 80之下那个docker的80) -&amp;gt; Docker的NGINX容器的 80和443端口&lt;/p&gt;
&lt;p&gt;&lt;img alt="加了CDN的网络拓扑" src="./images/my-blog-cdn-tuopu.png"&gt;&lt;/p&gt;
&lt;h2 id="cdn"&gt;为什么需要CDN&lt;a class="headerlink" href="#cdn" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;CDN: 中文名 内容分发网络.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_2"&gt;痛点&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我现在的云主机只有5M带宽, 有时就一个人访问页面, 也会触发带宽告警. 如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="腾讯云带宽告警" src="./images/bandwidth-alarm.png"&gt;&lt;/p&gt;
&lt;p&gt;这是因为我的有些文章, 图片太多, 一次性加载就会导致5M带宽瞬间占满.&lt;/p&gt;
&lt;p&gt;另外, 由于我购买的是一台上海的腾讯云主机, 那么其他地域或者宽带访问我的网站有时候会比较慢.&lt;/p&gt;
&lt;h3 id="cdn_1"&gt;CDN作用&lt;a class="headerlink" href="#cdn_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CDN通常用于以下4个场景:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态资源存储(如图片等. 我是这个场景.)&lt;/li&gt;
&lt;li&gt;超大文件分发(如安装包等)&lt;/li&gt;
&lt;li&gt;视频点播&lt;/li&gt;
&lt;li&gt;视频直播&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将网站内容发布到最接近用户的边缘节点，使网民可就近取得所需内容，提高网民访问的响应速度和成功率，同时能够保护源站。解决由于地域、带宽、运营商接入等问题带来的访问延迟高问题，有效帮助站点提升访问速度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问加速: 我的网站全站都是静态页面, 可以实现静态资源全站加速.&lt;/li&gt;
&lt;li&gt;节流: 用户大部分访问直接可以通过CDN获取, 我的云主机可以节流.&lt;/li&gt;
&lt;li&gt;数据监控/分析: 现在CDN往往也会对全网数据进行加农, 提供带宽流量 请求次数等全景数据报表及分析.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="cdn_2"&gt;如何配置CDN&lt;a class="headerlink" href="#cdn_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;此处以百度云CDN为例, 其他CDN要填写的内容大同小异.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="cdn_3"&gt;开通CDN服务.&lt;a class="headerlink" href="#cdn_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我使用的是&lt;a href="https://cloud.baidu.com/product/cdn.html"&gt;百度的CDN&lt;/a&gt;. 开通很简单, 就是注册账号, 实名认证, 开通...&lt;/p&gt;
&lt;h3 id="cdn_4"&gt;接入CDN服务&lt;a class="headerlink" href="#cdn_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在CDN控制台，点击“域名管理”，进入“添加新域名”页面。&lt;/p&gt;
&lt;p&gt;&lt;img alt="使用cdn-1" src="./images/use-cdn-1.png"&gt;&lt;/p&gt;
&lt;p&gt;需要填写的关键信息: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业务分类(图片小文件加速); &lt;/li&gt;
&lt;li&gt;我的博客域名(&lt;www.ewhisper.cn&gt;);&lt;/li&gt;
&lt;li&gt;源站类型: IP地址(因为就1台机器, IP地址不变); &lt;/li&gt;
&lt;li&gt;主源站地址: 我的云主机公网IP.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击“下一步”，进入“缓存过期配置”页面。(默认配置就好; 或者把你知道的静态目录和静态文件全缓存了)&lt;/p&gt;
&lt;p&gt;&lt;img alt="配置cdn-2" src="./images/use-cdn-2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(选填)填写配置信息，根据实际需求，您可在此步骤完成“缓存过期时间”、“缓存key计算策略”、“防盗链”、“安全防护”和“视频拖拽”的设置，接入CDN时您可以选择缺省配置，完成接入后，可以在控制台进行配置与修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确认配置无误后请点击“下一步”，页面提示“添加成功”。您可以点击“管理控制台”进行绑定CNAME、域名管理、刷新缓存和资源监控等操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(选填)因为我启用了全站HTTPS和HSTS, 所以必须配置HTTPS, 配置如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="配置cdn-3" src="./images/use-cdn-3.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;证书选择: 把申请的证书公钥和私钥导入即可.&lt;/li&gt;
&lt;li&gt;HTTP转换为HTTPS: 301跳转. (永久重定向)&lt;/li&gt;
&lt;li&gt;回源协议: HTTPS (因为我云主机的nginx开启了HSTS功能, 所以回源就选择HTTPS)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你在CDN页面, 会看到你的CDN的CNAME域名, 记下来. 如我的:&lt;www.ewhisper.cn.a.bdydns.com&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在云DNS解析页面, 暂停或删除A记录, 增加CNAME记录, 如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="修改DNS解析" src="./images/use-cdn-5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看CDN域名的状态, 就是&lt;em&gt;运行中&lt;/em&gt;. 如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="cdn状态" src="./images/use-cdn-4.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;至此, CDN启用成功. 可以尝试访问页面的静态资源, 会发现响应速度是有所提升.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="cdn_5"&gt;如何判断CDN是否缓存成功了?&lt;a class="headerlink" href="#cdn_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;如果您想要得知访问页面是否缓存，可以使用F12，开发者工具，查看您访问页面的静态资源的源IP，在CDN工具中查看下是否为cdn节点IP，若是就是走的CDN，另外如果消息头中有Age，那么就说明被缓存了.&lt;/li&gt;
&lt;li&gt;查看消息头中有如下内容:&lt;code&gt;Ohc-Cache-HIT:&lt;/code&gt; 应该也是缓存成功了(我猜的&lt;img align="absmiddle" alt="😛" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f61b.png" title=":stuck_out_tongue:" width="20px"&gt;)&lt;/li&gt;
&lt;li&gt;或者是看响应头信息中&lt;code&gt;X-Cache&lt;/code&gt; 字段, 显示&lt;code&gt;HIT&lt;/code&gt;, 就是命中了.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_3"&gt;结语&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;启用CDN后, 首屏加载时间明显加快, 用户体验明显得到提升. 快来试一下吧 &lt;img align="absmiddle" alt="😄" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f604.png" title=":smile:" width="20px"&gt;&lt;img align="absmiddle" alt="😄" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f604.png" title=":smile:" width="20px"&gt;&lt;img align="absmiddle" alt="😄" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f604.png" title=":smile:" width="20px"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 28 Jun 2019 19:30:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-28:/my-blog-start-using-cdn.html</guid><category>腾讯云</category><category>云</category><category>nginx</category><category>cdn</category></item><item><title>NGINX 学习笔记-Gzip压缩-`ngx_http_gunzip_module`</title><link>https://www.EWhisper.cn/nginx-notebook-3-3-gunzip-module.html</link><description>&lt;h2 id="3-ngx_http_gunzip_module"&gt;3 ngx_http_gunzip_module&lt;a class="headerlink" href="#3-ngx_http_gunzip_module" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果客户端本身不支持解压Gzip, 就需要Nginx服务器在向其发送数据前先将该数据解压. 这些压缩数据可能来自于后端服务器压缩产生或Nginx服务器预压缩产生.&lt;/p&gt;
&lt;p&gt;该模块不是默认构建的，应该使用 &lt;code&gt;--with-http_gunzip_module&lt;/code&gt; 配置参数启用。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 23 Jun 2019 17:08:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-23:/nginx-notebook-3-3-gunzip-module.html</guid><category>nginx</category><category>最佳实践</category></item><item><title>NGINX 学习笔记-Gzip压缩-Gzip压缩功能的使用</title><link>https://www.EWhisper.cn/nginx-notebook-3-4-gzip-howto.html</link><description>&lt;h2 id="4-gzip"&gt;4 Gzip压缩功能的使用&lt;a class="headerlink" href="#4-gzip" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="gzip"&gt;Gzip压缩功能综合配置示例&lt;a class="headerlink" href="#gzip" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;gzip&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_min_length&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_buffers&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="mi"&gt;4k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_comp_level&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_types&lt;/span&gt; &lt;span class="s"&gt;text/plain&lt;/span&gt; &lt;span class="s"&gt;application/x-javascript&lt;/span&gt; &lt;span class="s"&gt;text/css&lt;/span&gt; &lt;span class="s"&gt;application/xml&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_vary&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gunzip_static&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="gzip-ie6"&gt;Gzip 压缩功能与IE6浏览器运行脚本的兼容问题&lt;a class="headerlink" href="#gzip-ie6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;gzip_disable&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;MSIE&lt;/span&gt; &lt;span class="s"&gt;[1-6]\.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="nginxgzip"&gt;Nginx与其他服务器交互时产生的Gzip压缩功能相关问题&lt;a class="headerlink" href="#nginxgzip" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;两类问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多层服务器同时开启Gzip压缩功能导致;&lt;/li&gt;
&lt;li&gt;多层服务器之间对Gzip压缩功能支持能力不同导致.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Nginx与后端服务器(如Tomcat)同时开启Gzip压缩功能对JavaScript脚本进行压缩, 在大多数浏览器中刷新页面会导致脚本运行发生异常, 唯一可以运行的浏览器是Chrome.&lt;/p&gt;
&lt;p&gt;解决办法:&lt;strong&gt;对于包含多层服务器的系统来说, Nginx服务器作为前端服务器如果开启了Gzip压缩功能, 后端服务器最好就不要再开启了.&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 23 Jun 2019 17:08:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-23:/nginx-notebook-3-4-gzip-howto.html</guid><category>nginx</category><category>最佳实践</category></item><item><title>NGINX 学习笔记-Gzip压缩-`ngx_http_gzip_static_module`</title><link>https://www.EWhisper.cn/nginx-notebook-3-2-gzip-static-module.html</link><description>&lt;h2 id="2-ngx_http_gzip_static_module"&gt;2 ngx_http_gzip_static_module&lt;a class="headerlink" href="#2-ngx_http_gzip_static_module" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;该模块不是默认构建的，它应该使用 &lt;code&gt;--with-http_gzip_static_module&lt;/code&gt; 配置参数启用。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 23 Jun 2019 17:05:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-23:/nginx-notebook-3-2-gzip-static-module.html</guid><category>nginx</category><category>最佳实践</category></item><item><title>NGINX 学习笔记-高级配置-事件驱动模型相关的配置指令</title><link>https://www.EWhisper.cn/nginx-notebook-2-4-events-directives.html</link><description>&lt;h2 id="4"&gt;4 事件驱动模型相关的配置指令&lt;a class="headerlink" href="#4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;use&lt;/code&gt;(指定事件驱动模型)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;worker_connections&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用于设置Nginx服务器的&lt;strong&gt;每个工作进程&lt;/strong&gt;允许同时连接客户端的最大数量(包括前端用户连接也包括其他连接)&lt;/p&gt;
&lt;p&gt;Nginx服务器允许同时连接的客户端最大数量 &lt;code&gt;Client = worker_processes * worker_connections / 2&lt;/code&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;&lt;code&gt;worker_rlimit_sigpending&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;事件驱动模型rtsig可以保存的最大信号数.&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;&lt;code&gt;devpoll_changes&lt;/code&gt; &lt;code&gt;devpoll_events&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用于设置在&lt;code&gt;/dev/poll&lt;/code&gt;事件驱动模式下Nginx服务器与内核之间传递事件的数量.前者设置传递给内核的事件数量, 后者设置从内核获取的事件数量.&lt;/p&gt;
&lt;p&gt;默认值为32&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;&lt;code&gt;kqueue_changes&lt;/code&gt; 和 &lt;code&gt;kqueue_events&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;kqueue事件模型下. 默认值均为512&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;&lt;code&gt;epoll_events&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;epoll事件模型下, 从Nginx到内核, 从内核到Nginx相等. 默认值为512.&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;&lt;code&gt;rtsig_signo&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;rtsig模式. 默认第一个信号设置为SIGRTMIN+10&lt;/p&gt;
&lt;ol start="8"&gt;
&lt;li&gt;&lt;code&gt;rtsig_overflow_*&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;备注:&lt;/p&gt;
&lt;p&gt;现在的Linux发行版一般推荐使用&lt;code&gt;epoll&lt;/code&gt;事件驱动模型&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 23 Jun 2019 16:33:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-23:/nginx-notebook-2-4-events-directives.html</guid><category>nginx</category><category>最佳实践</category></item><item><title>NGINX 学习笔记-Gzip压缩-`ngx_http_gzip_module`</title><link>https://www.EWhisper.cn/nginx-notebook-3-1-gzip-module.html</link><description>&lt;p&gt;本系列文章主要讨论与gzip 压缩相关的Nginx 指令.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相关模块: &lt;code&gt;ngx_http_gzip_module ngx_http_gzip_static_module ngx_http_gunzip_module&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="1-ngx_http_gzip_module"&gt;1 ngx_http_gzip_module&lt;a class="headerlink" href="#1-ngx_http_gzip_module" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;gzip on | off&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gzip_buffers&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用于设置Gzip压缩文件使用缓存空间的大小.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gzip_buffers number size;    # number 缓存空间个数; size 每个空间大小&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;默认&lt;em&gt;number × size&lt;/em&gt; 为128. size的值推荐取系统内存页一页的大小, 为4KB 或者8KB. 即&lt;code&gt;gzip_buffers 32 4k | 16 8k&lt;/code&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;&lt;code&gt;gzip_comp_level&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;设定Gzip压缩程度, 包括1到9. 1压缩程度最低, 9最高. 默认为1.&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;&lt;code&gt;gzip_disable&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;备注&lt;/p&gt;
&lt;p&gt;针对不同种类客户端发起的请求, 可以选择性地开启和关闭gzip功能.&lt;/p&gt;
&lt;p&gt;PC端：&lt;/p&gt;
&lt;p&gt;safari 5.1 – MAC&lt;/p&gt;
&lt;p&gt;User-Agent:Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 &amp;gt; (KHTML, like Gecko) Version/5.1 Safari/534.50&lt;/p&gt;
&lt;p&gt;safari 5.1 – Windows&lt;/p&gt;
&lt;p&gt;User-Agent:Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, &amp;gt; like Gecko) Version/5.1 Safari/534.50&lt;/p&gt;
&lt;p&gt;IE 9.0&lt;/p&gt;
&lt;p&gt;User-Agent:Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;&lt;/p&gt;
&lt;p&gt;IE 8.0&lt;/p&gt;
&lt;p&gt;User-Agent:Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)&lt;/p&gt;
&lt;p&gt;IE 7.0&lt;/p&gt;
&lt;p&gt;User-Agent:Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&lt;/p&gt;
&lt;p&gt;IE 6.0&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)&lt;/p&gt;
&lt;p&gt;Firefox 4.0.1 – MAC&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 &amp;gt; Firefox/4.0.1&lt;/p&gt;
&lt;p&gt;Firefox 4.0.1 – Windows&lt;/p&gt;
&lt;p&gt;User-Agent:Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&lt;/p&gt;
&lt;p&gt;Opera 11.11 – MAC&lt;/p&gt;
&lt;p&gt;User-Agent:Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/&amp;gt; 11.11&lt;/p&gt;
&lt;p&gt;Opera 11.11 – Windows&lt;/p&gt;
&lt;p&gt;User-Agent:Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11&lt;/p&gt;
&lt;p&gt;Chrome 17.0 – MAC&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, &amp;gt; like Gecko) Chrome/17.0.963.56 Safari/535.11&lt;/p&gt;
&lt;p&gt;傲游（Maxthon）&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0)&lt;/p&gt;
&lt;p&gt;腾讯TT&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; TencentTraveler 4.0)&lt;/p&gt;
&lt;p&gt;世界之窗（The World） 2.x&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)&lt;/p&gt;
&lt;p&gt;世界之窗（The World） 3.x&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; The World)&lt;/p&gt;
&lt;p&gt;搜狗浏览器 1.x&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SE 2.X &amp;gt; MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0)&lt;/p&gt;
&lt;p&gt;360浏览器&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&lt;/p&gt;
&lt;p&gt;Avant&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Avant Browser)&lt;/p&gt;
&lt;p&gt;Green Browser&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)&lt;/p&gt;
&lt;p&gt;移动设备端：&lt;/p&gt;
&lt;p&gt;safari iOS 4.33 – iPhone&lt;/p&gt;
&lt;p&gt;User-Agent:Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) &amp;gt; AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5&lt;/p&gt;
&lt;p&gt;safari iOS 4.33 – iPod Touch&lt;/p&gt;
&lt;p&gt;User-Agent:Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/&amp;gt; 533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5&lt;/p&gt;
&lt;p&gt;safari iOS 4.33 – iPad&lt;/p&gt;
&lt;p&gt;User-Agent:Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/&amp;gt; 533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5&lt;/p&gt;
&lt;p&gt;Android N1&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) &amp;gt; AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&lt;/p&gt;
&lt;p&gt;Android QQ浏览器 For android&lt;/p&gt;
&lt;p&gt;User-Agent: MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/&amp;gt; GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/&amp;gt; 533.1&lt;/p&gt;
&lt;p&gt;Android Opera Mobile&lt;/p&gt;
&lt;p&gt;User-Agent: Opera/9.80 (Android 2.3.4; Linux; Opera Mobi/build-1107180945; U; en-GB) &amp;gt; Presto/2.8.149 Version/11.10&lt;/p&gt;
&lt;p&gt;Android Pad Moto Xoom&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) AppleWebKit/&amp;gt; 534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13&lt;/p&gt;
&lt;p&gt;BlackBerry&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, &amp;gt; like Gecko) Version/6.0.0.337 Mobile Safari/534.1+&lt;/p&gt;
&lt;p&gt;WebOS HP Touchpad&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 &amp;gt; (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0&lt;/p&gt;
&lt;p&gt;Nokia N97&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/&amp;gt; MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124&lt;/p&gt;
&lt;p&gt;Windows Phone Mango&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; &amp;gt; IEMobile/9.0; HTC; Titan)&lt;/p&gt;
&lt;p&gt;UC无&lt;/p&gt;
&lt;p&gt;User-Agent: UCWEB7.0.2.37/28/999&lt;/p&gt;
&lt;p&gt;UC标准&lt;/p&gt;
&lt;p&gt;User-Agent: NOKIA5700/ UCWEB7.0.2.37/28/999&lt;/p&gt;
&lt;p&gt;UCOpenwave&lt;/p&gt;
&lt;p&gt;User-Agent: Openwave/ UCWEB7.0.2.37/28/999&lt;/p&gt;
&lt;p&gt;UC Opera&lt;/p&gt;
&lt;p&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gzip_disable MSIE [4-6]\.&lt;/code&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;&lt;code&gt;gzip_http_version&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;gzip_http_version 1.0 | 1.1&lt;/code&gt; 默认设置为1.1版本.即只有客户端使用1.1及以上版本的HTTP协议时, 才使用Gzip功能. 一般使用默认值.&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;&lt;code&gt;gzip_min_length&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果压缩很小的数据, 可能出现越压缩数据量越大的情况. 因此根据响应页面的大小, 选择性地开启或者关闭Gzip功能. 该指令设置页面的字节数. &lt;strong&gt;响应页面的大小通过HTTP响应头部中的Content-Length指令获取, 但是如果使用了Chunk 编码动态压缩, Content-Length或不存在或被忽略, 该指令不起作用&lt;/strong&gt;. 默认设置为20. 设置为0时统统压缩. 建议该值为&lt;strong&gt;1KB或以上&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gzip_min_length 1024&lt;/code&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;&lt;code&gt;gzip_proxied&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该指令在使用Nginx服务器的反向代理功能时有效, 前提是在后端服务器返回的响应页头部中, Requests 部分包含用于通知代理服务器的Via头域.  主要用于设置Nginx服务器是否对后端服务器返回的结果进行Gzip压缩.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Syntax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;gzip_proxied&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;expired&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;no_last_modified&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;no_etag&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="o"&gt;...;&lt;/span&gt;
&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;gzip_proxied&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;off 关闭, 默认设置;&lt;/li&gt;
&lt;li&gt;expired 当后端服务器响应页头部包含用于支持响应数据过期事件的expired头域时, 启用Gzip.&lt;/li&gt;
&lt;li&gt;no-cache 当后端包含Cache-Control头域, 且其指令值为no-cache时, 启用.&lt;/li&gt;
&lt;li&gt;no-store 当后端包含Cache-Control头域, 且其指令值为no-store时, 启用.&lt;/li&gt;
&lt;li&gt;private 当后端包含Cache-Control头域, 且其指令值为private时, 启用.&lt;/li&gt;
&lt;li&gt;no_last_modified 当后端服务器响应头不包含用于指明需要获取数据最后修改时间的Last-Modified 域时, 启用.&lt;/li&gt;
&lt;li&gt;no_etag 不包含ETag时, 启用.&lt;/li&gt;
&lt;li&gt;auth 包含Authorization, 启用&lt;/li&gt;
&lt;li&gt;any 无条件启用压缩.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="8"&gt;
&lt;li&gt;&lt;code&gt;gzip_types&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据响应页的MIME类型选择性地开启Gzip压缩功能.  默认为text/html. 还可以取'*', 表示对所有MIME类型进行Gzip压缩. 推荐设置:(通常文本/图片/js都可以压缩)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gzip_types       text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;&lt;/code&gt;&lt;/p&gt;
&lt;ol start="9"&gt;
&lt;li&gt;&lt;code&gt;gzip_vary&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;默认为off. 推荐开启. 开启后的效果实在响应头部添加了Accept-Encoding: gzip, 这对于本身不支持Gzip压缩的客户端浏览器是有用的.&lt;/p&gt;
&lt;p&gt;也可以通过add_header达到相同的效果:&lt;code&gt;add_header Vary Accept-Encoding gzip;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;:heavy_exclamation_mark: 该指令在使用过程中存在bug, 会导致IE4及以上的浏览器的数据缓存功能失效.&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 23 Jun 2019 16:33:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-23:/nginx-notebook-3-1-gzip-module.html</guid><category>nginx</category><category>最佳实践</category></item><item><title>NGINX 学习笔记-高级配置-与网络连接相关的指令</title><link>https://www.EWhisper.cn/nginx-notebook-2-3-network-directives.html</link><description>&lt;h2 id="3"&gt;3 与网络连接相关的配置指令&lt;a class="headerlink" href="#3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;keepalive_timeout&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;keepalive_timeout 60 50;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Nginx服务器与客户端连接保持活动的时间为60s, 60s后服务器与客户端断开连接; 使用Keep-Alive 消息头保持与客户端某些浏览器(如火狐)的连接时间为50s, 50s后浏览器主动与服务器断开连接.&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;send_timeout&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;设置Nginx服务器响应客户端的超时时间, 这个超时时间仅针对两个客户端和服务器之间建立连接后, 某次活动之间的时间. 如果这个时间后客户端没有任何活动, Nginx服务器将会关闭连接. 此指令的设置需要考虑服务器访问数量和网络状况等方面.&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;client_header_buffer_size&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;设置Nginx服务器允许的客户端请求头部的缓冲区大小, 默认为1KB. 此指令的赋值可以根据系统分页大小来设置. 分页大小可以通过下列命令获得:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getconf PAGESIZE&lt;/code&gt; (一般为4k)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nginx 400类错误, 有很大一部分情况是客户端的请求头部过大造成的. 请求头部过大, 通常是客户端cookie中写入了较大的值引起的.&lt;/p&gt;
&lt;p&gt;适当增大此指令的赋值, 可以改善该问题.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;推荐配置:(与系统分页大小相同)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;client_header_buffer_size 4k;&lt;/code&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;multi_accept&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Nginx服务器是否尽可能多地接收客户端的网络连接请求. 默认为off.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 23 Jun 2019 16:27:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-23:/nginx-notebook-2-3-network-directives.html</guid><category>nginx</category><category>最佳实践</category></item><item><title>NGINX 学习笔记-高级配置-针对CPU的调优指令</title><link>https://www.EWhisper.cn/nginx-notebook-2-2-cpu-tuning.html</link><description>&lt;h2 id="2-cpu"&gt;2 针对CPU的优化指令&lt;a class="headerlink" href="#2-cpu" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;worker_processes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最好是赋值为机器CPU的倍数.&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;worker_cpu_affinity&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;默认的&lt;code&gt;auto&lt;/code&gt;就行.&lt;br&gt;
&lt;code&gt;worker_cpu_affinity 0001 0010 0100 1000;&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 23 Jun 2019 16:22:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-23:/nginx-notebook-2-2-cpu-tuning.html</guid><category>nginx</category><category>最佳实践</category></item><item><title>NGINX 学习笔记-高级配置-IPv4 的内核7个参数的配置优化</title><link>https://www.EWhisper.cn/nginx-notebook-2-1-kernel-tuning.html</link><description>&lt;h2 id="1-ipv4-7"&gt;1 IPv4 的内核7个参数的配置优化&lt;a class="headerlink" href="#1-ipv4-7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux 内核参数. 可以将这些内核参数值追加到Linux的/etc/sysctl.conf文件中.并使用下列命令生效:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# /sbin/sysctl -p&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;net.core.netdev_max_backlog&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;表示当每个网络接口接收数据包的速率比内核处理这些包的速率快时, 允许发送到队列的数据包的最大数目. 一般默认为128. Nginx定义的NGX_LISTEN_BACKLOG 默认为511. 将该参数调整为:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;net.core.netdev_max_backlog = 262144&lt;/code&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;net.core.somaxconn&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用于调节系统同时发起的TCP连接数, 一般默认为128. 在存在高并发的情况下, 该默认值较小, 可能导致链接超时或重传问题, 可以根据实际需要结合并发请求数来调节此值. 如:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;net.core.somaxconn = 262144&lt;/code&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;net.ipv4.tcp_max_orphans&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用于设定系统中最多允许存在多少TCP套接字不被关联到任何一个用户文件句柄上. 如果超过这个数字, 没有与用户文件句柄关联的TCP套接字将立即被复位, 同时给出警告信息. 这个限制只是为了防止简单的DoS攻击. 一般在系统内存充足的情况下, 可以增大该值:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;net.ipv4.tcp_max_orphans = 262144&lt;/code&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;net.ipv4.tcp_max_syn_backlog&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用于记录尚未收到客户端确认信息的连接请求的最大值. 对于128MB内存的系统, 默认值为1024. 在系统内存充足的情况下, 可以增大该值.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;net.ipv4.tcp_max_syn_backlog = 262144&lt;/code&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;net.ipv4.tcp_timestamps&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用于设置时间戳, 可以避免序列号的卷绕. 在一个1Gb/s的链路上, 遇到以前用过的序列号的概率很大. 当此值为0时, 禁用对于TCP时间戳的支持. 在默认情况下, TCP会接受这种"异常"的数据包. 建议将其关闭.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;net.ipv4.tcp_timestamps = 0&lt;/code&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;net.ipv4.tcp_synack_retries&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用于设置内核放弃TCP连接之前向客户端发送SYN+ACK包的数量.一般赋值为1, 即内核放弃连接之前发送一次SYN+ACK包.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;net.ipv4.tcp_synack_retries = 1&lt;/code&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;net.ipv4.tcp_syn_retries&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;net.ipv4.tcp_syn_retries = 1&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 23 Jun 2019 16:15:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-23:/nginx-notebook-2-1-kernel-tuning.html</guid><category>nginx</category><category>最佳实践</category></item><item><title>NGINX 学习笔记-安装部署-服务器基础配置示例</title><link>https://www.EWhisper.cn/nginx-notebook-1-4-nginx-conf-example.html</link><description>&lt;h2 id="4-nginx"&gt;4 Nginx服务器基础配置示例&lt;a class="headerlink" href="#4-nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#### 全局块 开始 #####&lt;/span&gt;
&lt;span class="k"&gt;user&lt;/span&gt; &lt;span class="s"&gt;nobody&lt;/span&gt; &lt;span class="s"&gt;nobody&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;# 配置允许运行Nginx服务器的用户和用户组&lt;/span&gt;

&lt;span class="k"&gt;worker_processes&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;# 配置允许Nginx进程生成的worker process数&lt;/span&gt;

&lt;span class="k"&gt;error_log&lt;/span&gt; &lt;span class="s"&gt;logs/error.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;# Nginx错误日志输出目录&lt;/span&gt;

&lt;span class="k"&gt;pid&lt;/span&gt; &lt;span class="s"&gt;nginx.pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;# 配置Nginx服务器运行时的pid文件存放路径和名称&lt;/span&gt;
&lt;span class="c1"&gt;#### 全局块 结束 #####&lt;/span&gt;

&lt;span class="c1"&gt;#### events块 开始 ####&lt;/span&gt;
&lt;span class="k"&gt;events&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;user&lt;/span&gt; &lt;span class="s"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;# 配置事件驱动模型&lt;/span&gt;
    &lt;span class="kn"&gt;worker_connections&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;# 配置最大连接数&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;#### events块 结束 ####&lt;/span&gt;

&lt;span class="c1"&gt;#### http块 开始 ####&lt;/span&gt;
&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;mime.types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;# 定义MIME-Type&lt;/span&gt;

    &lt;span class="kn"&gt;default_type&lt;/span&gt; &lt;span class="s"&gt;application/octet-stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;sendfile&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;# 配置允许使用sendfile方式传输&lt;/span&gt;

    &lt;span class="kn"&gt;keepalive_timeout&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;# 配置连接超时时间&lt;/span&gt;

    &lt;span class="kn"&gt;log_format&lt;/span&gt; &lt;span class="s"&gt;access.log&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$remote_addr-[$time_local]-&amp;quot;$request&amp;quot;-&amp;quot;$http_user_agent&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;# 配置请求处理日志的格式&lt;/span&gt;

    &lt;span class="c1"&gt;#### server块 开始 ####&lt;/span&gt;
    &lt;span class="c1"&gt;## 配置虚拟主机myServer1&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;8081&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;# 配置监听端口和主机名称&lt;/span&gt;
        &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;myServer1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/myweb/server1/log/access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;# 配置请求处理日志存放路径&lt;/span&gt;
        &lt;span class="kn"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="s"&gt;/404.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;# 配置错误页面&lt;/span&gt;
        &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/server1/location1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;# 配置处理/server1/location1请求的location&lt;/span&gt;
            &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/myweb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.svr1-loc1.htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/server1/location2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;# 配置处理/server1/location1请求的location&lt;/span&gt;
            &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/myweb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.svr1-loc2.htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;## 配置虚拟主机 myServer2&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;8082&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="s"&gt;.168.1.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/myweb/server2/log/access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="s"&gt;/404.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/server2/location1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/myweb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.svr2-loc1.htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/svr2/loc2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/myweb/server2/location2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;# 对location的URI进行更改&lt;/span&gt;
          &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.svr2-loc2.htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/404.html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;# 配置错误页面转向&lt;/span&gt;
            &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/myweb/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="s"&gt;.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;#### server 块 结束 ####&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;#### http块 结束 ####&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置后的目录结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;myweb
    404.html
    server1
        location1
            index.svr1-loc1.htm
        location2
            index.svr1-loc2.htm
        log
            access.log
    server2
        location1
            index.svr2-loc1.htm
        location2
            index.svr2-loc2.htm
        log
            access.log
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 23 Jun 2019 16:07:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-23:/nginx-notebook-1-4-nginx-conf-example.html</guid><category>nginx</category><category>最佳实践</category></item><item><title>NGINX 学习笔记-安装部署-基础配置</title><link>https://www.EWhisper.cn/nginx-notebook-1-3-basic-config.html</link><description>&lt;h2 id="3-nginx"&gt;3 Nginx 基础配置&lt;a class="headerlink" href="#3-nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#user  nobody;&lt;/span&gt;
&lt;span class="k"&gt;worker_processes&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                        &lt;span class="c1"&gt;# 全局块&lt;/span&gt;

&lt;span class="c1"&gt;#error_log  logs/error.log;&lt;/span&gt;
&lt;span class="c1"&gt;#error_log  logs/error.log  notice;&lt;/span&gt;
&lt;span class="c1"&gt;#error_log  logs/error.log  info;&lt;/span&gt;

&lt;span class="c1"&gt;#pid        logs/nginx.pid;&lt;/span&gt;

&lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                    &lt;span class="c1"&gt;# events块&lt;/span&gt;
    &lt;span class="kn"&gt;worker_connections&lt;/span&gt;  &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                        &lt;span class="c1"&gt;# http块&lt;/span&gt;
    &lt;span class="kn"&gt;include&lt;/span&gt;       &lt;span class="s"&gt;mime.types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="c1"&gt;# 引用mime.types这个文件&lt;/span&gt;

    &lt;span class="kn"&gt;default_type&lt;/span&gt;  &lt;span class="s"&gt;application/octet-stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;#log_format  main  &amp;#39;$remote_addr - $remote_user [$time_local] &amp;quot;$request&amp;quot; &amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;#                  &amp;#39;$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; &amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;#                  &amp;#39;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;&amp;#39;;&lt;/span&gt;
    &lt;span class="c1"&gt;#access_log  logs/access.log  main;&lt;/span&gt;

    &lt;span class="kn"&gt;sendfile&lt;/span&gt;        &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;#tcp_nopush     on;&lt;/span&gt;
    &lt;span class="c1"&gt;#keepalive_timeout  0;&lt;/span&gt;
    &lt;span class="kn"&gt;keepalive_timeout&lt;/span&gt;  &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# nginx允许的客户端请求头部的缓冲区大小&lt;/span&gt;
    &lt;span class="kn"&gt;client_header_buffer_size&lt;/span&gt; &lt;span class="mi"&gt;4k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;#gzip  on;&lt;/span&gt;
    &lt;span class="c1"&gt;# proxy buffer&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_buffers&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;4k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_buffer_size&lt;/span&gt; &lt;span class="mi"&gt;4k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_temp_file_write_size&lt;/span&gt; &lt;span class="mi"&gt;4k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_temp_path&lt;/span&gt; &lt;span class="s"&gt;proxy_temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;# proxy cache&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_cache_path&lt;/span&gt; &lt;span class="s"&gt;NGINX_cache/&lt;/span&gt; &lt;span class="s"&gt;keys_zone=cache_all:10m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# 128.236.160.5 CONF&lt;/span&gt;
    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;conf.d/128_236_160_5.conf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;#server {                                # server块&lt;/span&gt;
    &lt;span class="c1"&gt;#   listen       80;&lt;/span&gt;
    &lt;span class="c1"&gt;#   server_name  localhost;&lt;/span&gt;
    &lt;span class="c1"&gt;#   charset koi8-r;&lt;/span&gt;
    &lt;span class="c1"&gt;#   access_log  logs/host.access.log  main;&lt;/span&gt;

    &lt;span class="c1"&gt;#   location / {                        # location块&lt;/span&gt;
    &lt;span class="c1"&gt;#        root   html;&lt;/span&gt;
    &lt;span class="c1"&gt;#        index  index.html index.htm;&lt;/span&gt;
    &lt;span class="c1"&gt;#   }&lt;/span&gt;

        &lt;span class="c1"&gt;#error_page  404              /404.html;&lt;/span&gt;
        &lt;span class="c1"&gt;# redirect server error pages to the static page /50x.html&lt;/span&gt;
    &lt;span class="c1"&gt;#    error_page   500 502 503 504  /50x.html;&lt;/span&gt;
    &lt;span class="c1"&gt;#    location = /50x.html {&lt;/span&gt;
    &lt;span class="c1"&gt;#        root   html;&lt;/span&gt;
    &lt;span class="c1"&gt;#    }&lt;/span&gt;

        &lt;span class="c1"&gt;# proxy the PHP scripts to Apache listening on 127.0.0.1:80&lt;/span&gt;
        &lt;span class="c1"&gt;#location ~ \.php$ {&lt;/span&gt;
        &lt;span class="c1"&gt;#    proxy_pass   http://127.0.0.1;&lt;/span&gt;
        &lt;span class="c1"&gt;#}&lt;/span&gt;

        &lt;span class="c1"&gt;# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000&lt;/span&gt;
        &lt;span class="c1"&gt;#location ~ \.php$ {&lt;/span&gt;
        &lt;span class="c1"&gt;#    root           html;&lt;/span&gt;
        &lt;span class="c1"&gt;#    fastcgi_pass   127.0.0.1:9000;&lt;/span&gt;
        &lt;span class="c1"&gt;#    fastcgi_index  index.php;&lt;/span&gt;
        &lt;span class="c1"&gt;#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;&lt;/span&gt;
        &lt;span class="c1"&gt;#    include        fastcgi_params;&lt;/span&gt;
        &lt;span class="c1"&gt;#}&lt;/span&gt;

        &lt;span class="c1"&gt;# deny access to .htaccess files, if Apache&amp;#39;s document root&lt;/span&gt;
        &lt;span class="c1"&gt;# concurs with nginx&amp;#39;s one&lt;/span&gt;
        &lt;span class="c1"&gt;#location ~ /\.ht {&lt;/span&gt;
        &lt;span class="c1"&gt;#    deny  all;&lt;/span&gt;
        &lt;span class="c1"&gt;#}&lt;/span&gt;
    &lt;span class="c1"&gt;#}&lt;/span&gt;

    &lt;span class="c1"&gt;# another virtual host using mix of IP-, name-, and port-based configuration&lt;/span&gt;
    &lt;span class="c1"&gt;#server {&lt;/span&gt;
    &lt;span class="c1"&gt;#    listen       8000;&lt;/span&gt;
    &lt;span class="c1"&gt;#    listen       somename:8080;&lt;/span&gt;
    &lt;span class="c1"&gt;#    server_name  somename  alias  another.alias;&lt;/span&gt;

    &lt;span class="c1"&gt;#    location / {&lt;/span&gt;
    &lt;span class="c1"&gt;#        root   html;&lt;/span&gt;
    &lt;span class="c1"&gt;#        index  index.html index.htm;&lt;/span&gt;
    &lt;span class="c1"&gt;#    }&lt;/span&gt;
    &lt;span class="c1"&gt;#}&lt;/span&gt;

    &lt;span class="c1"&gt;# HTTPS server&lt;/span&gt;
    &lt;span class="c1"&gt;#server {&lt;/span&gt;
    &lt;span class="c1"&gt;#    listen       443 ssl;&lt;/span&gt;
    &lt;span class="c1"&gt;#    server_name  localhost;&lt;/span&gt;
    &lt;span class="c1"&gt;#    ssl_certificate      cert.pem;&lt;/span&gt;
    &lt;span class="c1"&gt;#    ssl_certificate_key  cert.key;&lt;/span&gt;
    &lt;span class="c1"&gt;#    ssl_session_cache    shared:SSL:1m;&lt;/span&gt;
    &lt;span class="c1"&gt;#    ssl_session_timeout  5m;&lt;/span&gt;
    &lt;span class="c1"&gt;#    ssl_ciphers  HIGH:!aNULL:!MD5;&lt;/span&gt;
    &lt;span class="c1"&gt;#    ssl_prefer_server_ciphers  on;&lt;/span&gt;

    &lt;span class="c1"&gt;#    location / {&lt;/span&gt;
    &lt;span class="c1"&gt;#        root   html;&lt;/span&gt;
    &lt;span class="c1"&gt;#        index  index.html index.htm;&lt;/span&gt;
    &lt;span class="c1"&gt;#    }&lt;/span&gt;
    &lt;span class="c1"&gt;#}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;如果某个指令在两个不同层级的块中同时出现,则采用&lt;strong&gt;就近原则&lt;/strong&gt;,即以较低层级块中的配置为准.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;错误日志&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;日志级别由低到高分为debug(需要在编译时使用--with-debug开启debug)、info、notice、warn、error、critical、alert、emerg。&lt;/p&gt;
&lt;h3 id="_2"&gt;引入配置文件&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;include file&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;事件驱动模型&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;use method&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;method内容有:select, poll, kqueue, epoll, rtsig, &lt;code&gt;/dev/poll&lt;/code&gt;, eventport&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_4"&gt;自定义服务日志&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;log_format&lt;/span&gt; &lt;span class="s"&gt;exampleLog&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$remote_addr&lt;/span&gt; &lt;span class="s"&gt;-&lt;/span&gt; &lt;span class="s"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$time_local]&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$status&lt;/span&gt; &lt;span class="nv"&gt;$body_bytes_sent&lt;/span&gt; &lt;span class="nv"&gt;$http_referer&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$http_user_agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://nginx.org/en/docs/varindex.html"&gt;Nginx内置变量&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_5"&gt;基于名称的虚拟主机配置&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;server_name myserver.com www.myserver.com;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;server_name *.myserver.com www.myserver.*;&lt;/code&gt;  (通配符'*'只能用于三段字符串的首段或尾段)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;server_name ~^www\d+\.myserver\.com$;&lt;/code&gt;  ("~"为使用正则的标记)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;匹配优先度&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对于匹配方式不同的,按照以下优先级:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;准确匹配 server_name&lt;/li&gt;
&lt;li&gt;通配符在开始时匹配 server_name成功&lt;/li&gt;
&lt;li&gt;通配符在结尾时匹配 server_name成功&lt;/li&gt;
&lt;li&gt;正则表达式匹配server_name成功&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果server_name处于同一优先级的匹配方式多次匹配成功,则首次匹配成功的虚拟主机处理请求&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="location"&gt;配置location&lt;a class="headerlink" href="#location" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Syntax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;~*&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;^~&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="err"&gt;—&lt;/span&gt;

&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;标识含义:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt; 用于&lt;strong&gt;标准uri&lt;/strong&gt;前,要求请求字符串与uri&lt;strong&gt;严格匹配&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt; 用于表示uri包含&lt;strong&gt;正则表达式&lt;/strong&gt;, 并且&lt;strong&gt;区分大小写&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~*&lt;/code&gt; 用于表示uri包含&lt;strong&gt;正则表达式&lt;/strong&gt;, 并且&lt;strong&gt;不区分大小写&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^~&lt;/code&gt; 用于&lt;strong&gt;标准uri&lt;/strong&gt;前, 要求Nginx服务器找到标识uri和请求字符串匹配度最高的location后, 立即使用此location处理请求, 而不再使用location块中的正则uri和请求字符串做匹配.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_6"&gt;配置请求的根目录&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/data/&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/locationtest1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当location块接收到&lt;code&gt;/data/index.htm&lt;/code&gt; 的请求时, 将在&lt;code&gt;/locationtest1/data/&lt;/code&gt; 目录下找到index.htm 响应请求.&lt;/p&gt;
&lt;h3 id="alias"&gt;alias指令&lt;a class="headerlink" href="#alias" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;^/data/(.+\.(htm|html))$&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/locationtest1/other/&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当收到&lt;code&gt;/data/index.htm&lt;/code&gt;时, 匹配成功, 之后根据alias指令的配置, 将到 &lt;code&gt;/locationtest1/other&lt;/code&gt; 目录下找到对应请求. 可以看到, 通过alias指令的配置, 跟路径已经从&lt;code&gt;/data&lt;/code&gt; 更改为 &lt;code&gt;/locationtest1/other&lt;/code&gt; 了.&lt;/p&gt;
&lt;h3 id="_7"&gt;设置网站默认首页&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;^/data/(.+)/web/$&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.&lt;/span&gt;&lt;span class="nv"&gt;$1.html&lt;/span&gt; &lt;span class="s"&gt;index.my1.html&lt;/span&gt; &lt;span class="s"&gt;index.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当location块接收到&lt;code&gt;/data/locationtest/web/&lt;/code&gt; 时, 匹配成功, 它首先将预置变量$1置为&lt;em&gt;locationtest&lt;/em&gt;, 然后在&lt;code&gt;/data/locationtest/web/&lt;/code&gt; 路径下按照index的配置次序依次寻找 index.locationtest.html index.my1.html 和 index.html , 首先找到哪个页面, 就使用哪个页面响应请求.&lt;/p&gt;
&lt;h3 id="_8"&gt;错误页面&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一般来说,HTTP &lt;strong&gt;2XX 代表请求正常完成&lt;/strong&gt;, &lt;strong&gt;3XX 代表网站重定向&lt;/strong&gt;, &lt;strong&gt;4XX代表客户端出现错误&lt;/strong&gt;, &lt;strong&gt;5XX代表服务器端出现错误&lt;/strong&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HTTP消息&lt;/th&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;已移动&lt;/td&gt;
&lt;td&gt;301&lt;/td&gt;
&lt;td&gt;请求的数据具有新的位置, 并且更改是&lt;strong&gt;永久&lt;/strong&gt;的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;已找到&lt;/td&gt;
&lt;td&gt;302&lt;/td&gt;
&lt;td&gt;请求的数据&lt;strong&gt;临时&lt;/strong&gt;具有不同的URI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;请参阅其他&lt;/td&gt;
&lt;td&gt;303&lt;/td&gt;
&lt;td&gt;可在另一URI下找到对请求的响应, 并且应使用GET方法检索此响应&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;未修改&lt;/td&gt;
&lt;td&gt;304&lt;/td&gt;
&lt;td&gt;未按预期修改文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用代理&lt;/td&gt;
&lt;td&gt;305&lt;/td&gt;
&lt;td&gt;必须通过位置字段中提供的代理来访问请求的资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;未使用&lt;/td&gt;
&lt;td&gt;306&lt;/td&gt;
&lt;td&gt;不再使用, 但保留此代码以便将来使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;无法找到网页&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;可以连接到Web服务器, 但是由于Web地址(URL) 的问题, 无法找到网页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网站拒绝显示此网页&lt;/td&gt;
&lt;td&gt;403&lt;/td&gt;
&lt;td&gt;可以连接到网站, 但没有显示网页的权限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;无法找到网页&lt;/td&gt;
&lt;td&gt;404&lt;/td&gt;
&lt;td&gt;可以连接到网站, 但找不到网页. 导致此错误的原因有时可能是该网页暂时不可用或网页已被删除.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网站无法显示该页面&lt;/td&gt;
&lt;td&gt;405&lt;/td&gt;
&lt;td&gt;可以连接到网站, 但网页内容无法下载到用户的计算机. 这通常是由网页编写方式问题引起的.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;无法读取此网页格式&lt;/td&gt;
&lt;td&gt;406&lt;/td&gt;
&lt;td&gt;能够从网站接收信息, 但不能识别其格式, 因而无法正确地显示消息.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;该网站太忙, 无法显示此网页&lt;/td&gt;
&lt;td&gt;408 409&lt;/td&gt;
&lt;td&gt;服务器显示该网页的时间太长, 或对同一网页的请求太多&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网页不复存在&lt;/td&gt;
&lt;td&gt;410&lt;/td&gt;
&lt;td&gt;可以连接到网站, 但无法找到网页. 与404不同, 此错误是永久性的, 而且由网站管理员打开&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网站无法显示该页面&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;正在访问的网站出现了服务器问题. 该问题阻止了此网页的显示. 常见的原因是网站正在维护或使用脚本的交互式网站上的程序出错.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;未执行&lt;/td&gt;
&lt;td&gt;501&lt;/td&gt;
&lt;td&gt;没有将正在访问的网站设置为显示浏览器所请求的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;不支持的版本&lt;/td&gt;
&lt;td&gt;505&lt;/td&gt;
&lt;td&gt;该网站不支持浏览器用于请求网页的HTTP协议(如HTTP/1.1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Syntax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;error_page&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="o"&gt;[=[&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="err"&gt;—&lt;/span&gt;
&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;             &lt;span class="s"&gt;/404.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="mi"&gt;502&lt;/span&gt; &lt;span class="mi"&gt;503&lt;/span&gt; &lt;span class="mi"&gt;504&lt;/span&gt; &lt;span class="s"&gt;/50x.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="s"&gt;/empty.gif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;#If an error response is processed by a proxied server or a FastCGI/uwsgi/SCGI server, and the server may return different response codes (e.g., 200, 302, 401 or 404), it is possible to respond with the code it returns:&lt;/span&gt;
&lt;span class="k"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/404.php&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;#If there is no need to change URI and method during internal redirection it is possible to pass error processing into a named location:&lt;/span&gt;
&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@fallback&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;@fallback&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://backend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;#It is also possible to use URL redirects for error processing:&lt;/span&gt;
&lt;span class="k"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;      &lt;span class="s"&gt;http://example.com/forbidden.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt; &lt;span class="s"&gt;http://example.com/notfound.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="ipnginx"&gt;基于IP配置Nginx的访问权限&lt;a class="headerlink" href="#ipnginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;deny&lt;/span&gt;  &lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="s"&gt;.168.1.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;allow&lt;/span&gt; &lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="s"&gt;.168.1.0/24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;allow&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="s"&gt;.1.1.0/16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;allow&lt;/span&gt; &lt;span class="n"&gt;2001&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="s"&gt;db8::/32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;deny&lt;/span&gt;  &lt;span class="s"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Syntax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;allow&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;CIDR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;unix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="err"&gt;—&lt;/span&gt;
&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limit_except&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;address: 客户端IP, 不支持同时设置多个.如果有多个IP需要设置, 需要重复使用allow指令.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nginx配置在解析的过程中, 遇到deny指令或者allow指令是按照顺序对当前客户端的连接进行访问权限检查的. 如果遇到匹配的设置时, 则停止继续向下搜索相关配置.&lt;/p&gt;
&lt;h3 id="nginx"&gt;基于密码的Nginx访问权限&lt;a class="headerlink" href="#nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Syntax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;auth_basic&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;auth_basic&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limit_except&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Syntax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;auth_basic_user_file&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="err"&gt;—&lt;/span&gt;
&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limit_except&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;明文密码格式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;## comment
name1:password1
name2:password2:comment
name3:password3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;加密密码可以使用&lt;code&gt;crypt()&lt;/code&gt; 函数进行密码加密的格式, 在Linux平台上可以使用 &lt;code&gt;htpasswd&lt;/code&gt; 命令生成. 在PHP和Perl等语言中, 也提供&lt;code&gt;crypt()&lt;/code&gt;函数. 使用htpasswd命令的一个示例为:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;htpasswd -c -d /nginx/conf/pass_file username&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;运行后输入密码即可.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 23 Jun 2019 15:30:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-23:/nginx-notebook-1-3-basic-config.html</guid><category>nginx</category><category>最佳实践</category></item><item><title>NGINX 学习笔记-安装部署-启停控制</title><link>https://www.EWhisper.cn/nginx-notebook-1-2-start-stop.html</link><description>&lt;h2 id="nginx"&gt;Nginx启停控制&lt;a class="headerlink" href="#nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nginx -t&lt;/code&gt; 检查Nginx服务器配置文件是否有语法错误&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nginx&lt;/code&gt; 启动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nginx -s stop&lt;/code&gt; 停止&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nginx -s reload&lt;/code&gt;  或 &lt;code&gt;kill HUP `/Nginx/logs/nginx.pid`&lt;/code&gt;  平滑重启&lt;/li&gt;
&lt;li&gt;平滑升级: 先执行&lt;code&gt;kill USR2 `/Nginx/logs/nginx.pid`&lt;/code&gt;实现Nginx服务的平滑升级; 再使用&lt;code&gt;kill WINCH `/Nginx/logs/nginx.pid`&lt;/code&gt;平滑停止旧服务信号&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 23 Jun 2019 15:25:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-23:/nginx-notebook-1-2-start-stop.html</guid><category>nginx</category><category>最佳实践</category></item><item><title>NGINX 学习笔记-安装部署-基本配置</title><link>https://www.EWhisper.cn/nginx-notebook-1-1-basic-config.html</link><description>&lt;h1 id="_1"&gt;基本配置&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="_2"&gt;依赖&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCC编译器&lt;/li&gt;
&lt;li&gt;Automake工具&lt;/li&gt;
&lt;li&gt;pcre库(支持rewrite模块)&lt;/li&gt;
&lt;li&gt;zlib库(支持gzip模块)&lt;/li&gt;
&lt;li&gt;openssl库(支持ssl模块)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;参考指令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yum -y install gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_3"&gt;目录结构&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="nginx"&gt;nginx解压后软件包&lt;a class="headerlink" href="#nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;src&lt;/strong&gt;: 源代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;man&lt;/strong&gt;: 帮助文件(可以通过&lt;code&gt;man nginx&lt;/code&gt;查看)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;html&lt;/strong&gt;: html文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;conf&lt;/strong&gt;: 配置文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;auto&lt;/strong&gt;: 脚本文件,和configure&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;configure&lt;/strong&gt;: 自动脚本程序&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;备注:&lt;/p&gt;
&lt;p&gt;configure 2项工作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查环境,根据环境检查结果生成C代码;&lt;/li&gt;
&lt;li&gt;生成编译代码需要的Makefile文件.&lt;br&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id="nginx_1"&gt;nginx服务器软件目录&lt;a class="headerlink" href="#nginx_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;conf&lt;/strong&gt;: Nginx的所有配置文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;html&lt;/strong&gt;: Nginx服务器在运行过程中调用的一些html网页文件.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;logs&lt;/strong&gt;: 日志&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sbin&lt;/strong&gt;: nginx一个文件,即启动的主程序&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;可以在html目录下自定义一些网页文件,并在配置文件中配置发生什么情况时转到相应的文件&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="configure"&gt;configure 脚本支持的常用选项&lt;a class="headerlink" href="#configure" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--prefix=&amp;lt;path&amp;gt;  指定安装路径,默认/usr/local/nginx

--user=&amp;lt;user&amp;gt;  未指定,默认nobody

--with-debug  启用Nginx的调试日志

--add-module=&amp;lt;path&amp;gt;  声明第三方模块的路径,用以编译刀Nginx服务器中

--with-poll_module  声明启用poll模块.poll模块是信号处理的一种方法.

--with-http_ssl_module  启用HTTP的ssl模块.

--with-http_stub_status_module  启用Server Status页.默认不启用

--http-proxy-temp-path=&amp;lt;path&amp;gt;  指定存放HTTP代理临时文件的路径

--without-http  声明禁用HTTP Server

--with-pcre=&amp;lt;dir&amp;gt;  指定pcre库源代码的路径.这样可以在**编译Nginx源代码的同时编译pcre库**,不需要提前安装pcre库

--with-zilb=&amp;lt;dir&amp;gt;  指定zlib库源代码的路径.同pcre

--with-openssl=&amp;lt;dir&amp;gt;  指定OpenSSL库源代码的路径.
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;清除上次编译的遗留文件 &lt;code&gt;make clean&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./configure

    --sbin-path&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/nginx/nginx

    --conf-path&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/nginx/nginx.conf

    --pid-path&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/nginx/nginx.pid

    --with-http_ssl_module

    --with-pcre&lt;span class="o"&gt;=&lt;/span&gt;../pcre-8.40

    --with-zlib&lt;span class="o"&gt;=&lt;/span&gt;../zlib-1.2.11
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 23 Jun 2019 15:10:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-23:/nginx-notebook-1-1-basic-config.html</guid><category>nginx</category><category>最佳实践</category></item><item><title>NGINX 实战手册-运维-实用运维Tips和总结</title><link>https://www.EWhisper.cn/nginx-handbook-3-11-operation-best-practices.html</link><description>&lt;h2 id="311-tips"&gt;3.11 实用运维Tips和总结&lt;a class="headerlink" href="#311-tips" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="3110"&gt;3.11.0 介绍&lt;a class="headerlink" href="#3110" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;最后章节会包括使用运维tips和本书的总结. 通过这三个大部分, 我们讨论了与运维工程师有关的很多想法和概念. 然而, 我认为再多讲一点会有助于理解的更加全面. 在本章, 我会确保你的配置文件干净和简洁, 以及如何调试配置文件.&lt;/p&gt;
&lt;h3 id="3111-includes"&gt;3.11.1 使用 Includes 来缩减配置&lt;a class="headerlink" href="#3111-includes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要清理大量的配置文件来保证你的配置文件以模块化的配置集分组.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;include&lt;/code&gt;指令来引用配置文件, 目录或通配符:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;config.d/compression.conf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;sites-enabled/*.conf&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;讨论&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="3112"&gt;3.11.2 调试配置&lt;a class="headerlink" href="#3112" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;从NGINX server , 你得到的非预期的结果.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;调试配置, 记住以下建议:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NGINX进程请求查找最匹配的规则.&lt;/li&gt;
&lt;li&gt;你可以打开调试日志. 对于调试日志, 你需要确保你的NGINX包配置了&lt;code&gt;--with-debug&lt;/code&gt; flag. 大部分常见包都有; 但是如果你构建你自己的包, 或在运行一个最小化的包, 你可能至少需要再次仔细检查. 一旦你确定了你有debug, 你可以设置&lt;code&gt;error_log&lt;/code&gt;指令的日志级别为&lt;code&gt;debug&lt;/code&gt;: &lt;code&gt;error_log /var/log/nginx/error.log debug;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;你可以为特定的连接启用调试. &lt;code&gt;debug_connection&lt;/code&gt;指令在&lt;code&gt;events&lt;/code&gt;上下文是合法的, 使用IP或CIDR range作为参数. 该指令可以声明多次来添加多个要调试的IP地址或CIDR ranges. 这在生产环境, 但是调试所有连接会导致性能下降的情况下, 调试一个问题会很有用&lt;/li&gt;
&lt;li&gt;你可以调试特定的virtual servers. 因为&lt;code&gt;error_log&lt;/code&gt;在&lt;code&gt;main&lt;/code&gt; &lt;code&gt;http&lt;/code&gt; &lt;code&gt;mail&lt;/code&gt; &lt;code&gt;stream&lt;/code&gt; &lt;code&gt;server&lt;/code&gt; 和&lt;code&gt;location&lt;/code&gt;上下文都有效. 你可以在你需要调试的上下文设置&lt;code&gt;debug&lt;/code&gt;日志级别.&lt;/li&gt;
&lt;li&gt;你可以启用core dumps, 来从中获取backtraces. Core dumps可以通过操作系统启用, 或通过NGINX配置文件.&lt;/li&gt;
&lt;li&gt;你可以使用&lt;code&gt;rewrite_log&lt;/code&gt;记录rewrite 声明的日志: &lt;code&gt;rewrite_log on;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;NGINX能做很多神奇的配置, 但是也有性能下降的风险. 调试时, 确保你知道如何通过你的配置来追踪你的请求; 如果有问题, 增加调试日志级别来帮助分析. debug日志时相当详细, 找出NGINX对你的请求做了什么以及你的配置在哪儿出错了很有帮助.&lt;/p&gt;
&lt;h4&gt;参见&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://bit.ly/2crNKVM"&gt;NGINX如何处理请求&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/2iQYNsZ"&gt;管理员调试向导&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/2j96jAH"&gt;Rewrite log&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="3113"&gt;3.11.3 总结&lt;a class="headerlink" href="#3113" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这本书的三个部分集中于高性能负载均衡, 安全, 以及部署和维护NGINX和NGINX Plus servers. 这本书展示了NGINX应用交付平台的一些最强大的功能. NGINX会继续开发神奇的功能, 保持赛道领先.&lt;/p&gt;
&lt;p&gt;这本书展示了很多"简短食谱", 允许你对指令和模块(这些让NGINX成为当今网络之心)有更好的理解. NGINX server不仅仅是web server, 不仅仅时反向代理, 而是一个完整的应用交付平台, 完全有能力通过认证, 并在未来环境中使用.  请知悉.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 20:39:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-handbook-3-11-operation-best-practices.html</guid><category>nginx</category><category>devops</category><category>译文</category><category>最佳实践</category></item><item><title>NGINX 实战手册-运维-使用`split_clients`进行A-B测试</title><link>https://www.EWhisper.cn/nginx-handbook-3-7-ab-test.html</link><description>&lt;h2 id="37-split_clientsa-b"&gt;3.7 使用&lt;code&gt;split_clients&lt;/code&gt;进行A-B测试&lt;a class="headerlink" href="#37-split_clientsa-b" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="370"&gt;3.7.0 介绍&lt;a class="headerlink" href="#370" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;NGINX有一个叫做&lt;code&gt;split_clients&lt;/code&gt;的模块, 允许你来系统地给予某一个变量key来拆分用户. NGINX通过使用轻量的哈希算法来哈希一个给定的字符串来拆分用户. 然后数学地通过百分比拆分, 映射预定义的值到一个变量, 这个值可以用来改变服务器的响应。&lt;/p&gt;
&lt;h3 id="371-ab"&gt;3.7.1 A/B 测试&lt;a class="headerlink" href="#371-ab" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要拆分两个或更多版本的文件或程序的用户来测试接受度.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;split_clients&lt;/code&gt;模块来直接为你的客户端设置不同的upstream pool:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;split_clients&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;${remote_addr}AAA&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$variant&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;20.0%&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;backendv2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;*&lt;/span&gt;        &lt;span class="s"&gt;&amp;quot;backendv1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;split_clients&lt;/code&gt;指令哈希由你提供的字符串作为第一个参数, 并且将散列的百分比提供映射一个变量的值作为第二个参数提供。第三个参数是一个包含key-value对的对象, key是百分比权重, 值是要被分配的值. key可以是一个百分比或一个星号. 星号就是剩下的百分比. 变量&lt;code&gt;$variant&lt;/code&gt;的值将是20%的客户端IP是&lt;code&gt;backendv2&lt;/code&gt;, 剩下的80%是&lt;code&gt;backendv1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;在本例中, &lt;code&gt;backendv1&lt;/code&gt;和&lt;code&gt;backendv2&lt;/code&gt;代表upstream server池, 可以被用于&lt;code&gt;proxy_pass&lt;/code&gt;指令, 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://&lt;/span&gt;&lt;span class="nv"&gt;$variant&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用变量&lt;code&gt;$variant&lt;/code&gt;, 我们的流量会被分为2个不同的应用server池.&lt;/p&gt;
&lt;p&gt;另一个案例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kn"&gt;split_clients&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;${remote_addr}AAA&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$variant&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kn"&gt;0.5%&lt;/span&gt;               &lt;span class="s"&gt;.one&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="kn"&gt;2.0%&lt;/span&gt;               &lt;span class="s"&gt;.two&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                   &lt;span class="kn"&gt;*&lt;/span&gt;                  &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index&lt;/span&gt;&lt;span class="nv"&gt;${variant}.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;A/B测试的类型很有用, 如测试不同类型的市场和前端功能的电商网站转化率. 对于应用, 使用金丝雀发布很常见. 这种部署中, 流量被缓慢地切换到新的版本. 拆分不同应用版本的客户端是很有用的, 当回滚新版本的代码, 限制因为一个错误导致的爆炸半径. 不论是因为什么原因要拆分两个不同应用集的客户端, NGINX通过使用&lt;code&gt;split_client&lt;/code&gt;模块都能很容易实现.&lt;/p&gt;
&lt;h4&gt;参见&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://bit.ly/2jsdkw4"&gt;split_client documentation&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 20:39:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-handbook-3-7-ab-test.html</guid><category>nginx</category><category>devops</category><category>译文</category><category>最佳实践</category></item><item><title>NGINX 实战手册-运维-使用GeoIP模块通过IP地址定位用户</title><link>https://www.EWhisper.cn/nginx-handbook-3-8-use-geoip-to-get-users-location.html</link><description>&lt;h2 id="38-geoipip"&gt;3.8 使用GeoIP模块通过IP地址定位用户&lt;a class="headerlink" href="#38-geoipip" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="380"&gt;3.8.0 介绍&lt;a class="headerlink" href="#380" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;跟踪, 分析, 和利用你的应用或度量的客户端的位置信息可以帮助你加深对客户的理解. 有很多方法获取你的客户的位置信息, NGINX通过使用GeoIP模块和几个指令很容易地定位他们. 该模块让基于客户位置信息记录位置, 控制访问, 或者基于客户位置做决定变得很容易.  它也允许客户的位置信息被内部查找只要请求被传输到upstream应用, 而不需要再进行查找. 该NGINX模块默认不安装, 可以从源码静态编译, 动态导入, 或通过在Ubuntu安装&lt;code&gt;nginx-full&lt;/code&gt;或&lt;code&gt;nginx-extras&lt;/code&gt;来安装. 在RHEL发行版, 如CentOS, 你可以安装&lt;code&gt;nginx-mod-http-geoip&lt;/code&gt;包并通过&lt;code&gt;load_module&lt;/code&gt;动态导入. 本章会覆盖&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导入GeoIP动态模块,&lt;/li&gt;
&lt;li&gt;安装GeoIP数据库,&lt;/li&gt;
&lt;li&gt;该模块可用的内建变量,&lt;/li&gt;
&lt;li&gt;控制访问,&lt;/li&gt;
&lt;li&gt;和代理一起使用.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="381-geoip"&gt;3.8.1 使用GeoIP模块和数据库&lt;a class="headerlink" href="#381-geoip" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要安装GeoIP数据库, 并启用在NGINX的内建命令, 来记录和告诉你的应用你的客户端的地理位置.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;下载GeoIP国家和城市数据库, 并unzip它们:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# mkdir /etc/nginx/geoip&lt;/span&gt;
&lt;span class="c1"&gt;# cd /etc/nginx/geoip&lt;/span&gt;
&lt;span class="c1"&gt;# wget &amp;quot;http://geolite.maxmind.com/\&lt;/span&gt;
download/geoip/database/GeoLiteCountry/GeoIP.dat.gz&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;# gunzip GeoIP.dat.gz&lt;/span&gt;
&lt;span class="s2"&gt;# wget &amp;quot;&lt;/span&gt;http://geolite.maxmind.com/&lt;span class="se"&gt;\&lt;/span&gt;
download/geoip/database/GeoLiteCity.dat.gz&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;# gunzip GeoLiteCity.dat.gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些命令在&lt;em&gt;/etc/nginx&lt;/em&gt;下创建一个&lt;em&gt;geoip&lt;/em&gt;目录, 跳转到新目录, 并下载和解压包.&lt;/p&gt;
&lt;p&gt;通过在本地磁盘上的 国家和城市的GeoIP数据库, 我们可以构建NGINX GeoIP模块并使用它们来暴露出给予客户端IP地址的内建指令:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;load_module&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib64/nginx/modules/ngx_http_geoip_module.so&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;geoip_country&lt;/span&gt; &lt;span class="s"&gt;/etc/nginx/geoip/GeoIP.dat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;geoip_city&lt;/span&gt; &lt;span class="s"&gt;/etc/nginx/geoip/GeoLiteCity.dat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;geoip_country&lt;/code&gt;指令指定到&lt;em&gt;GeoIP.dat&lt;/em&gt;文件的路径, &lt;em&gt;GeoIP.dat&lt;/em&gt;包含IP地址到国家代码的映射, 只能在HTTP上下文中使用.&lt;/p&gt;
&lt;h3 id="_1"&gt;讨论&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;模块的&lt;code&gt;geoip_country&lt;/code&gt;和&lt;code&gt;geoip_city&lt;/code&gt;暴露一系列可用变量. &lt;code&gt;geoip_country&lt;/code&gt;指令允许你去本你的客户的国家. 这些变量包括&lt;code&gt;$geoip_country_code&lt;/code&gt;, &lt;code&gt;geoip_country_code3&lt;/code&gt;和&lt;code&gt;geoip_country_name&lt;/code&gt;. 国家代码变量返回一个2位国家字母. &lt;code&gt;geoip_country_code3&lt;/code&gt;返回3位国家字母. 国家名变量返回国家的全名.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;geoip_city&lt;/code&gt;指令也会启用几个变量. 和&lt;code&gt;geoip_country&lt;/code&gt;类似. 有&lt;code&gt;$geoip_city_country_code&lt;/code&gt; &lt;code&gt;geoip_city_country_code3&lt;/code&gt; &lt;code&gt;geoip_city_contry_name&lt;/code&gt;. 其他变量有&lt;code&gt;$geoip_city&lt;/code&gt; &lt;code&gt;$geoip_city_continent_code&lt;/code&gt; &lt;code&gt;$geoip_latitude&lt;/code&gt; &lt;code&gt;$geoip_longitude&lt;/code&gt;和&lt;code&gt;$geoip_postal_code&lt;/code&gt;. &lt;code&gt;$geoip_region&lt;/code&gt; &lt;code&gt;$geoip_region_name&lt;/code&gt;描述区域, 领域, 州, 省, 联邦政府地等. 区域是一个两字符代码, 区域名是全名. &lt;code&gt;geoip_area_code&lt;/code&gt;, 只在美国有效, 返回3位数字电话区域码.&lt;/p&gt;
&lt;p&gt;通过这些变量, 你能够记录你的客户端的信息. 你可以选择传递信息到你的应用作为一个header或变量, 或使用NGINX来以特定方式route流量.&lt;/p&gt;
&lt;h4&gt;参见&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/maxmind/geoipupdate"&gt;GeoIP 升级&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="382"&gt;3.8.2 基于国家限制访问&lt;a class="headerlink" href="#382" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;根据合约或应用需求, 你需要限制来自特定国家的访问.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;映射你想要屏蔽或允许的国家代码到一个变量&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;load_module&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;/usr/lib64/nginx/modules/ngx_http_geoip_module.so&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;map&lt;/span&gt; &lt;span class="nv"&gt;$geoip_country_code&lt;/span&gt; &lt;span class="nv"&gt;$country_access&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;&amp;quot;US&amp;quot;&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;&amp;quot;RU&amp;quot;&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;default&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kn"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个映射会设置新的变量&lt;code&gt;$country_access&lt;/code&gt;为1或0. 如果客户端IP地址来自美国或俄罗斯, 变量会被设置为0, 其他国家会设置为1.&lt;/p&gt;
&lt;p&gt;然后, 在&lt;code&gt;server&lt;/code&gt;快, 使用&lt;code&gt;if&lt;/code&gt;声明来拒绝不是来自美国和俄罗斯的用户访问:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$country_access&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kn"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当条件判断为True时, 会返回403 未认证. 否则正常访问.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;这是一个简短的例子, 来说明如何允许特定国家访问. 这个例子可以被扩展, 以符合你的需要.&lt;/p&gt;
&lt;h3 id="383"&gt;3.8.3 找到源客户端&lt;a class="headerlink" href="#383" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要找到客户源IP, 因为在NGINX server前边有代理.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;geoip_proxy&lt;/code&gt;指令来定义你的代理IP地址范围, &lt;code&gt;geoip_proxy_recursive&lt;/code&gt;指令来查找源IP:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;load_module&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib64/nginx/modules/ngx_http_geoip_module.so&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;geoip_country&lt;/span&gt; &lt;span class="s"&gt;/etc/nginx/geoip/GeoIP.dat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;geoip_city&lt;/span&gt; &lt;span class="s"&gt;/etc/nginx/geoip/GeoLiteCity.dat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;geoip_proxy&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="s"&gt;.0.16.0/26&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;geoip_proxy_recursive&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;geoip_proxy&lt;/code&gt;指令定义我们的代理服务器的CIDR范围, 指示NGINX利用&lt;code&gt;X-Forwarded-For&lt;/code&gt;头来查找客户端IP地址. &lt;code&gt;geoip_proxy_recursive&lt;/code&gt;指令指示NGINX来递归地查找上个知道的客户端IP的&lt;code&gt;X-Forwarded-For&lt;/code&gt; header.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;你可能会发现你在NGINX前边使用了代理, NGINX会选择代理的IP地址而不是客户端的. 对于这种情况你可以使用&lt;code&gt;geoip_proxy&lt;/code&gt;指令来指示在给定的范围内, NGINX使用&lt;code&gt;X-Forwarded-For&lt;/code&gt; header. &lt;code&gt;geoip_proxy&lt;/code&gt;指令配置一个地址或CIDR范围. 当NGINX前边有多个代理, 可以使用&lt;code&gt;geoip_proxy_recursive&lt;/code&gt;指令来递归地查找&lt;code&gt;X-Forwarded-For&lt;/code&gt;指令, 来找到源客户端. 你可能会在如在NGINX前边使用AWS ELB, 谷歌的负载均衡, 或Azure的负载均衡时用到这些.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 20:39:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-handbook-3-8-use-geoip-to-get-users-location.html</guid><category>nginx</category><category>devops</category><category>译文</category><category>最佳实践</category></item><item><title>NGINX 实战手册-运维-自动化</title><link>https://www.EWhisper.cn/nginx-handbook-3-6-automatation.html</link><description>&lt;h2 id="36"&gt;3.6 自动化&lt;a class="headerlink" href="#36" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="360"&gt;3.6.0 介绍&lt;a class="headerlink" href="#360" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;有很多方式来自动化NGINX和NGINX Plus的配置文件, 如: 使用配置管理工具或定时任务来从模板配置文件配置. 随着动态环境的增加, 自动化配置的需求变得更急需. 在上一章, 我们确信NGINX配置文件被配置后需要reload.在本章, 我们会讨论更进一步的使用NGINX Plus API和&lt;strong&gt;Consul Template&lt;/strong&gt;的实时(on-the-fly)NGINX配置文件重配置.&lt;/p&gt;
&lt;h3 id="361-nginx-plus"&gt;3.6.1 使用NGINX Plus自动化&lt;a class="headerlink" href="#361-nginx-plus" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要为动态环境重实时配置NGINX Plus的load balance.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;使用NGINX Plus API来重配置NGINX Plus upstream 池:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl &lt;span class="s1"&gt;&amp;#39;http://nginx.local/upstream_conf?\&lt;/span&gt;
&lt;span class="s1"&gt;  add=&amp;amp;upstream=backend&amp;amp;server=10.0.0.42:8080&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;curl&lt;/code&gt;调用到NGINX Plus的请求, 请求一个把一个新的server加到&lt;code&gt;backend&lt;/code&gt; upstream配置.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;更多第一次安装的细节见 3.8 章节, NGINX Plus提供一个API来重新实时配置NGINX Plus. NGINX Plus API允许从upstream 池中添加和移除server, 同时draining 连接. 你可以使用该API来自动化NGINX Plus的应用服务器的创建和释放的配置.&lt;/p&gt;
&lt;h3 id="362-consul-templating"&gt;3.6.2 使用Consul Templating 自动化配置&lt;a class="headerlink" href="#362-consul-templating" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要自动化NGINX配置来通过使用Consul在环境中做出变更.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;consul-template&lt;/code&gt; daemon和一个模板文件来模板化NGINX配置文件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;upstream backend { &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;range&lt;/span&gt; &lt;span class="nv"&gt;service&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;app.backend&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    server &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;.Address&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;end&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个例子是Consul模板文件的一个upstream配置块模板. 这个模板会遍历在Consul上标记为&lt;code&gt;app.backend&lt;/code&gt;的节点. 对于Consul上的每个节点, 这个模板会使用那个节点的IP地址产生一条server指令.&lt;/p&gt;
&lt;p&gt;这个&lt;code&gt;consul-template&lt;/code&gt; daemon通过命令行运行, 可以被用于在每次配置文件被模板化变更后reload NGINX:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# consul-template -consul consul.example.internal -template \&lt;/span&gt;
template:/etc/nginx/conf.d/upstream.conf:&lt;span class="s2"&gt;&amp;quot;nginx -s reload&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该指令指示&lt;code&gt;consul-template&lt;/code&gt; daemon 来连接到一个位于&lt;code&gt;consul.example.internal&lt;/code&gt;的Consul 集群, 并使用在当前工作目录的名为&lt;code&gt;template&lt;/code&gt;的文件来模板化该文件, 并输出生成的内容到&lt;code&gt;/etc/nginx/conf.d/upstream.conf&lt;/code&gt;中, 然后在每次模板化文件变更时reload NGINX. &lt;code&gt;-template&lt;/code&gt; 标志接受一个字符串,包括: 模板文件,输出位置,和运行模板过程后执行的命令; 这3个变量以冒号分隔. 如果运行的命令由空格, 确保使用双引号包裹. &lt;code&gt;-consul&lt;/code&gt;标志指示要连接的Consul集群.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;Consul是一个强大的服务发现工具和配置仓库. Consul以key-value 对以类似目录的结构存储节点信息, 允许restful API交互.Consul也在每个客户端上提供一个DNS界面, 允许进行连接到集群的节点的域名查找. 一个单独的, 利用Consul集群的项目是&lt;code&gt;consul-template&lt;/code&gt; daemon; 这个工具模板化在Consul 节点, 服务或 key-value对的文件变化. 这让Consul成为一个自动化NGINX的非常强大的选择. 使用&lt;code&gt;consul-template&lt;/code&gt;你也可以指示该daemon在模板替换变更后来运行一个命令. 通过这样, 可以reload NGINX配置, 并允许NGINX配置在环境中生效. 通过Consul, 你可以在每个客户端上设置健康检查来检查关注的服务的监控状况. 通过失败检测, 你能够通过模板化你的NGINX配置来只给健康的主机发送流量.&lt;/p&gt;
&lt;h4&gt;参见&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.consul.io/"&gt;Consul home page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/2iosmkV"&gt;Introduction to Consul Template&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/hashicorp/consul-template"&gt;Consul template GitHub&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 20:33:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-handbook-3-6-automatation.html</guid><category>nginx</category><category>devops</category><category>译文</category><category>最佳实践</category></item><item><title>NGINX 实战手册-运维-前言和介绍</title><link>https://www.EWhisper.cn/nginx-handbook-3-0-foreword.html</link><description>&lt;h2 id="30"&gt;3.0 前言和介绍&lt;a class="headerlink" href="#30" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在NGINX CookBook的第一部分, 主题是负载均衡和缓存. 第二部分是NGINX的安全功能, 如认证和加密. 第三部分集中于NGINX的运维问你, 包括部署, 性能调优和解决问题.&lt;/p&gt;
&lt;p&gt;在这部分, 你会看到基于三个大型公有云的NGINX部署实践: Amazon Web Services(AWS), Google Cloud Platform(GCP), 和微软Azure, 包括如何自动化在AWS上部署. 如果你计划使用Docker, 也有相关内容.&lt;/p&gt;
&lt;p&gt;安装也会深入讨论使用Puppet, Chef, Ansible和SaltStack的自动化配置管理. 也介绍了使用NGINX Plus API来实施重配置, 使用Consul进行服务发现和模版配置.&lt;/p&gt;
&lt;p&gt;默认情况下, 大部分系统配置是基于兼容性而不是性能. 然后你要根据你的特定需求进行性能调优. 在本书中, 你会找到在保持兼容性的前提下, 详细的最大化NGINX性能的方法.&lt;/p&gt;
&lt;p&gt;当我碰到部署问题, 我首先会看日志文件, 是很多调试信息的来源. NGINX有维护详细的, 高度配置化的日志来帮助你定位问题. 本书中包含NGINX日志的详细内容.&lt;/p&gt;
&lt;p&gt;它会帮助你安装, 监控, 维护NGINX应用交付平台.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 20:28:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-handbook-3-0-foreword.html</guid><category>nginx</category><category>devops</category><category>译文</category><category>最佳实践</category></item><item><title>NGINX 实战手册-运维-在Docker 上部署</title><link>https://www.EWhisper.cn/nginx-handbook-3-4-nginx-docker.html</link><description>&lt;h2 id="34-docker"&gt;3.4 在Docker上部署&lt;a class="headerlink" href="#34-docker" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="340"&gt;3.4.0 介绍&lt;a class="headerlink" href="#340" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Docker是个开源项目, 会自动把Linux应用部署到软件容器中. Docker提供一个额外的抽象层, 在linux上自动化操作系统级别的虚拟化. 容器化环境已经对生产世界造成了巨大的变革. Docker和其他容器平台允许快速, 可靠, 跨平台的应用部署. 本章中, 我们会讨论NGINX官方NGINX Dockerjingxiang,创建你自己的Docker文件来运行NGINX, 在NGINX中使用环境变量, 通用Docker实践.&lt;/p&gt;
&lt;h3 id="341-nginx"&gt;3.4.1 使用NGINX镜像快速运行&lt;a class="headerlink" href="#341-nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要使用Docker Hub中的NGINX镜像快速启动和运行.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker pull nginx:latest
$ docker run -it -p &lt;span class="m"&gt;80&lt;/span&gt;:80 -v &lt;span class="nv"&gt;$PWD&lt;/span&gt;/nginx-conf:/etc/nginx &lt;span class="se"&gt;\&lt;/span&gt;
                                   nginx:latest
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;NGINX已经在Docker Hub上制作了一个官方Docker镜像. 官方Docker镜像很容易在Docker中启动和快速运行. 在本节中我们通过2个命令就能启动和运行NGINX 容器. 官方镜像是基于Debian Jessie Docker镜像. 但是你也可以选择基于Alpine Linux构建的官方镜像. 这些官方镜像的Dockerfile和源码可以在GitHub中找到.&lt;/p&gt;
&lt;h4&gt;参见&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://hub.docker.com/_/nginx/"&gt;Official NGINX Docker image, NGINX&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/nginxinc/docker-nginx/"&gt;Docker repo on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="342-nginx-dockerfile"&gt;3.4.2 创建一个NGINX Dockerfile&lt;a class="headerlink" href="#342-nginx-dockerfile" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要创建一个NGINX Dockerfile, 用Dockerfile创建Docker镜像.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;CMD&lt;/code&gt;来在镜像实例化为容器时启动NGINX. 你需要在前台运行NGINX. 要这么做, 需要启动NGINX使用&lt;code&gt;-g "daemon off;"&lt;/code&gt;或增加&lt;code&gt;daemon off;&lt;/code&gt;到配置. 本例中稍后使用&lt;code&gt;daemon off;&lt;/code&gt;加到main context. 你也想调节你的access日志输出到&lt;code&gt;/dev/stdout&lt;/code&gt;, 错误日志输出到&lt;code&gt;/dev/stderr&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; centos:7&lt;/span&gt;
&lt;span class="c"&gt;# Install epel repo to get nginx and install nginx&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; yum -y install epel-release &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    yum -y install nginx
&lt;span class="c"&gt;# add local configuration files into the image&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt; /nginx-conf /etc/nginx
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 80 443&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;目录结构如下所示:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── Dockerfile
└── nginx-conf
    ├── conf.d
    │   └── default.conf
    ├── fastcgi.conf
    ├── fastcgi_params
    ├── koi-utf
    ├── koi-win
    ├── mime.types
    ├── nginx.conf
    ├── scgi_params
    ├── uwsgi_params
    └── win-utf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在本例中, 我选择直接吧nginx-conf目录下所有我的NGINX配置都添加到Dockerfile中.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;当你需要完全控制包的安装和升级, 你会发现创建自己的Dockerfile很有用. 常见操作是保存在你自己的镜像仓库中, 这样你会知道你的基础镜像在上生产之前是可靠的, 经过团队测试的.&lt;/p&gt;
&lt;h3 id="343-nginx-plus"&gt;3.4.3 构建NGINX Plus镜像&lt;a class="headerlink" href="#343-nginx-plus" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="344-nginx"&gt;3.4.4 在NGINX中使用环境变量&lt;a class="headerlink" href="#344-nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;为了在不同的环境中使用相同的容器镜像, 你需要在NGINX配置文件中使用环境变量.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;ngx_http_perl_module&lt;/code&gt;来从你的环境的NGINX中设置变量.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;daemon&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;env&lt;/span&gt; &lt;span class="s"&gt;APP_DNS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="n"&gt;/usr/share/nginx/modules/*.conf&lt;/span&gt;;
&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="s"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;perl_set&lt;/span&gt; &lt;span class="nv"&gt;$upstream_app&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;sub&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$ENV{&amp;quot;APP_DNS&amp;quot;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="kn"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;...&lt;/span&gt;
    &lt;span class="s"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;https://&lt;/span&gt;&lt;span class="nv"&gt;$upstream_app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要使用&lt;code&gt;perl_set&lt;/code&gt;, 你必须安装&lt;code&gt;ngx_http_perl_module&lt;/code&gt;; 你可以通过动态模块加载或从源码静态构建. NGINX默认从环境中擦除环境变量; 你需要在&lt;code&gt;env&lt;/code&gt;指令中声明任何你不想移除的变量. &lt;code&gt;perl_set&lt;/code&gt;指令有2个参数: 你想要设置的变量名和渲染结果的perl字符串.&lt;/p&gt;
&lt;p&gt;下面是一个Dockerfile, 会动态加载&lt;code&gt;ngx_http_perl_module&lt;/code&gt;, 从包管理工具安装该模块. 当从CentOS的包管理中安装模块, 他们被放在&lt;code&gt;/usr/lib64/nginx/modules/&lt;/code&gt;目录, 配置文件会动态加载在&lt;code&gt;/usr/share/nginx/modules/&lt;/code&gt;目录的模块. 这就是为什么上面的配置块中, 要包含完整的路径.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; centos:7&lt;/span&gt;
&lt;span class="c"&gt;# Install epel repo to get nginx and install nginx&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; yum -y install epel-release &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    yum -y install nginx nginx-mod-http-perl
&lt;span class="c"&gt;# add local configuration files into the image&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt; /nginx-conf /etc/nginx
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 80 443&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;当使用Docker, 典型实践就是利用环境变量来修改容器操作的方式. 你可以在NGINX配置文件中使用环境变量, 这样NGINX可以用于多个, 不同的环境.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 20:28:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-handbook-3-4-nginx-docker.html</guid><category>nginx</category><category>devops</category><category>译文</category><category>最佳实践</category><category>docker</category></item><item><title>NGINX 实战手册-运维-使用Puppet/Chef/Ansible/SaltStack部署</title><link>https://www.EWhisper.cn/nginx-handbook-3-5-nginx-autoconf-tools.html</link><description>&lt;h2 id="35-puppetchefansiblesaltstack"&gt;3.5 使用Puppet/Chef/Ansible/SaltStack&lt;a class="headerlink" href="#35-puppetchefansiblesaltstack" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="350"&gt;3.5.0 介绍&lt;a class="headerlink" href="#350" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在云的时代, 配置管理工具是无价之宝. 大规模web应用的工程师无法通过代码手把手配置servers, 但是使用其中任何一个配置管理工具都可以做到. 配置管理工具允许工程师一次写入配置和代码到很多有相同配置的server, 通过使用一种可重复, 可测试, 模块化的方式. 本章讨论几个流行的配置管理工具, 以及如何使用他们安装NIGINX和从模版创建一个基本配置. 这些例子非常基础, 但是展示了如何通过每个平台来启动NGINX.&lt;/p&gt;
&lt;h3 id="351-puppet"&gt;3.5.1 使用Puppet安装&lt;a class="headerlink" href="#351-puppet" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要通过Puppet安装和配置NGINX, 以代码形式管理NGINX配置, 并确认你的其他Puppet配置.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;创建一个模块, 用于安装NGINX, 管理你需要的文件, 确保NGINX在运行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;installed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,}&lt;/span&gt;
    &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;hasrestart&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;restart&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/etc/init.d/nginx reload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nginx.conf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/etc/nginx/nginx.conf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Package&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nginx&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;notify&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Service&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nginx&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nginx/templates/nginx.conf.erb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0644&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该模块使用包管理工具来确保NGINX被安装. 也会确保NGINX在启动时在运行和可用. 该配置通知Puppet, 该服务有重启命令, 通过&lt;code&gt;hasrestart&lt;/code&gt;指令, 并且我们用NGINX reload命令覆盖&lt;code&gt;restart&lt;/code&gt;命令. 它通过内置Ruby(ERB)模版语言来管理和模板化&lt;code&gt;nginx.conf&lt;/code&gt;文件. 文件的模板化会发生在NGINX包被安装之后(通过&lt;code&gt;require&lt;/code&gt;指令). 但是, 它会通过&lt;code&gt;notify&lt;/code&gt;指令通知NGINX服务来reload. 该模版化配置文件没有包括. 另外, 它可以简单安装一个默认的NGINX配置文件, 或是使用内置Ruby(ERB)或内置Puppet(EPP)模版语言的循环和变量替换.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;Puppet是基于Ruby语言的配置管理工具. 模块被构建进一个特定域的语言, 并通过定义给定server配置的manifest文件调用. Puppet可以用主从或masterless模式运行. 使用Puppet, manifest运行在master上, 然后发到slave上. 这很重要, 因为它确保slave只是被交付对它有用的配置, 对其他server的其他配置是不会给这个slave的. Puppet有很多非常高级的公用模块. 通过这些模块, 会在配置上帮助你飞起. 在GitHub上来自voxpupuli的公共NGINX模块会为你模板化NGINX配置.&lt;/p&gt;
&lt;h4&gt;参见&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://docs.puppet.com/"&gt;Puppet documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/2jfgpm4"&gt;Puppet package documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/2jMq2cx"&gt;Puppet service documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/2jMz4q3"&gt;Puppet file documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/2isqAlP"&gt;Puppet templating documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/2jMspMn"&gt;Voxpupuli NGINX module&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="352-chef"&gt;3.5.2 使用Chef安装&lt;a class="headerlink" href="#352-chef" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="353-ansible"&gt;3.5.3 使用Ansible安装&lt;a class="headerlink" href="#353-ansible" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要使用Ansible来安装和配置NGINX, 以代码形式管理NGINX配置, 并确认你的其他Ansible配置.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;创建一个安装NGINX和管理&lt;em&gt;nginx.conf&lt;/em&gt;文件playbook. 下列是一个示例的任务文件.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;NGINX | Installing NGINX&lt;/span&gt;
  &lt;span class="nt"&gt;package&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name=nginx state=present&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;NGINX | Starting NGINX&lt;/span&gt;
  &lt;span class="nt"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;
    &lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;started&lt;/span&gt;
    &lt;span class="nt"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Copy nginx configuration in place.&lt;/span&gt;
  &lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx.conf.j2&lt;/span&gt;
    &lt;span class="nt"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/etc/nginx/nginx.conf&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;root&lt;/span&gt;
    &lt;span class="nt"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;root&lt;/span&gt;
    &lt;span class="nt"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0644&lt;/span&gt;
  &lt;span class="nt"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;reload nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;package&lt;/code&gt;块安装NGINX. &lt;code&gt;service&lt;/code&gt;块确保NGINX在启动时被启动和可用. &lt;code&gt;template&lt;/code&gt;块模板化一个&lt;em&gt;Jinja2&lt;/em&gt;文件, 并把结果以root用户和组放到&lt;code&gt;/etc/nginx.conf&lt;/code&gt;中. 该模版块也设置&lt;em&gt;mode&lt;/em&gt;为644, 并通知nginx服务reload. 模板化配置文件没有包含在内. 但是, 可以通过默认的NGINX配置文件来简单, 或者通过Jinja2模版语言的循环和变量替换生成很复杂的模版.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;Ansible是用Python编写的广泛使用的强大配置管理工具. 任务配置使用YAML, 使用Jinja2模版语言生成文件模版. Ansible提供一个有master的叫做Ansible Tower的订阅版. 但是, 它经常用于本地机器或构建服务器直接到客户端或者使用masterless模式. Ansible打包SSH到它的server并运行配置. 和其他配置工具类似, 有很多社区提供的公共roles, Ansible把它叫做Ansible Galaxy. 你可以找到可以用于你的playbook的非常复杂的roles.&lt;/p&gt;
&lt;h4&gt;参见&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://docs.ansible.com/"&gt;Ansible documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/2jfiwGv"&gt;Ansible packages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/2jMGF7E"&gt;Ansible service&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/2j8j526"&gt;Ansible template&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://galaxy.ansible.com/"&gt;Ansible Galaxy&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="354-saltstack"&gt;3.5.4 使用SaltStack安装&lt;a class="headerlink" href="#354-saltstack" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要使用SaltStack来安装和配置NGINX, 以代码形式管理NGINX配置, 并确认你的其他SaltStack配置.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;pkg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;installed&lt;/span&gt;
  &lt;span class="nt"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;running&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/nginx/nginx.conf&lt;/span&gt;

&lt;span class="nt"&gt;/etc/nginx/nginx.conf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;managed&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt://path/to/nginx.conf&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;root&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;root&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jinja&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;644&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;pkg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 20:28:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-handbook-3-5-nginx-autoconf-tools.html</guid><category>nginx</category><category>devops</category><category>译文</category><category>最佳实践</category></item><item><title>NGINX 实战手册-安全-实用安全技巧</title><link>https://www.EWhisper.cn/nginx-handbook-2-10-security-tips.html</link><description>&lt;h2 id="210"&gt;2.10 实用安全技巧&lt;a class="headerlink" href="#210" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="2100"&gt;2.10.0 介绍&lt;a class="headerlink" href="#2100" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;安全是分层的, 就像一个洋葱, 你的安全模型确实要被多层加固. 在这部分, 我们介绍许多不同的方法来确保web应用程序NGINX和NGINX Plus. 很多的这些安全方法可以用来加固安全. 下面是一些实用的安全提示,以确保您的用户在使用HTTPS和告诉NGINX满足一个或多个安全方法。&lt;/p&gt;
&lt;h3 id="2101-https"&gt;2.10.1 HTTPS 重定向&lt;a class="headerlink" href="#2101-https" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要重定向未加密的请求到HTTPS.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;rewrite&lt;/code&gt;来发送所有HTTP流量到HTTPS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="s"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="s"&gt;[::]:80&lt;/span&gt; &lt;span class="s"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt; &lt;span class="s"&gt;https://&lt;/span&gt;&lt;span class="nv"&gt;$host$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个配置监听所有hostname的IPv4和IPv6的80端口作为默认的server. &lt;code&gt;return&lt;/code&gt;声明返回301永久重定向到同样的host和请求URI的HTTPS上.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;总是把适当的请求重定向到HTTPS是非常重要的. 你可能会发现你不需要重定向所有的请求, 而是在客户端和server之间传输敏感信息的那些请求. 在本例中, 你可能想要把&lt;code&gt;return&lt;/code&gt;声明放到特定的location里, 如&lt;code&gt;/login&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="2102-ssltlsnginxhttps"&gt;2.10.2 重定向SSL/TLS在NGINX之前已经结束的到HTTPS&lt;a class="headerlink" href="#2102-ssltlsnginxhttps" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要重定向到HTTPS, 然而, 在NGINX之前, 你已经结束了SSL/TLS.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;使用标准的&lt;code&gt;HTTP_X_Forwarded_Proto&lt;/code&gt; 头来决定是否你需要进行重定向:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="s"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="s"&gt;[::]:80&lt;/span&gt; &lt;span class="s"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_x_forwarded_proto&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http&amp;#39;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt; &lt;span class="s"&gt;https://&lt;/span&gt;&lt;span class="nv"&gt;$host$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个配置和HTTPS重定向很像. 但是, 在这个配置中, 只有头&lt;code&gt;X_Forwarded_Proto&lt;/code&gt;等于HTTP才会重定向.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;这是一个在NGINX之前就结束了SSL/TLS的常见案例. 你可能要这么做的一个原因是节省计算开销. 但是, 你需要确保每个请求都是HTTPS, 但是结束了SSL/TLS的层没有重定向的能力. 但是, 可以设置代理头部. 这个配置可以在Amazon Web Services Elastic Load Balancer上工作, 因为这个如果没有额外的花钱的话就会卸载掉SSL/TLS. 这是一个方便的技巧以确保你的HTTP流量是安全的。&lt;/p&gt;
&lt;h3 id="2103"&gt;2.10.3 满足任意数量的安全方法&lt;a class="headerlink" href="#2103" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要提供多种方式来传输安全到一个不公开的站点.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;satisfy&lt;/code&gt;指令来说明你想要使用任意数量的安全方法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;satisfy&lt;/span&gt; &lt;span class="s"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;allow&lt;/span&gt; &lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="s"&gt;.168.1.0/24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;deny&lt;/span&gt;  &lt;span class="s"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;auth_basic&lt;/span&gt;           &lt;span class="s"&gt;&amp;quot;closed&lt;/span&gt; &lt;span class="s"&gt;site&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;auth_basic_user_file&lt;/span&gt; &lt;span class="s"&gt;conf/htpasswd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该配置告诉NGINX用户请求&lt;code&gt;location /&lt;/code&gt;需要满足其中的一个安全方法: 或者该请求需要来自&lt;em&gt;192.168.1.0/24&lt;/em&gt; CIDR block, 或者能够提供在可以在&lt;code&gt;conf/htpasswd&lt;/code&gt;中找到的用户名密码. &lt;code&gt;satisfy&lt;/code&gt;指令有2个选项: &lt;code&gt;any&lt;/code&gt;或&lt;code&gt;all&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;satifsy&lt;/code&gt;指令是一个提供多种认证的很好的方式. 通过指定&lt;code&gt;any&lt;/code&gt;给&lt;code&gt;satisfy&lt;/code&gt;指令, 用户必须满足其中一个安全. 指定&lt;code&gt;all&lt;/code&gt;给&lt;code&gt;satisfy&lt;/code&gt;指令, 用户必须满足所有的安全认证. 该指令可以和2.1的&lt;code&gt;http_access_module&lt;/code&gt;结合, 2.4的&lt;code&gt;http_auth_basic_module&lt;/code&gt;, 2.5的&lt;code&gt;http_auth_request_module&lt;/code&gt;, 2.7的&lt;code&gt;http_auth_jwt_module&lt;/code&gt;. 只有各个层都安全, 才是真正的安全. &lt;code&gt;satisfy&lt;/code&gt;指令会帮助你为这个location或server实现需要的深度安全规则.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 20:24:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-handbook-2-10-security-tips.html</guid><category>nginx</category><category>安全</category><category>译文</category><category>最佳实践</category></item><item><title>NGINX 实战手册-安全-ModSecurity Web应用防火墙</title><link>https://www.EWhisper.cn/nginx-handbook-2-9-waf.html</link><description>&lt;h2 id="29-modsecurity-web"&gt;2.9 ModSecurity Web应用防火墙&lt;a class="headerlink" href="#29-modsecurity-web" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="290"&gt;2.9.0 介绍&lt;a class="headerlink" href="#290" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ModSecurity 是一个开源的web应用防火墙(WAF), 首次被构建仅Apache web server. 在2012年, 它作为NGINX的一个模块可供使用, 2016加入NGINX Plus作为一个可选功能. 本章将详细介绍使用NGINX Plus的动态模块功能安装ModSecurity 3.0, 使用开源NGINX安装ModeSecurity 2.9. ModSecurity 3.0比ModSecurity 2.x的安全和性能更出众. 当从开源运行ModSecurity 2.9, 因为它仍然是在Apache上构造, 因此需要比3.0更多的开销, 而3.0是基于NGINX原生设计的.  ModSecurity 3.0 只能用于NGINX Plus订阅.&lt;/p&gt;
&lt;h3 id="291-nginx-plusmodesecurity"&gt;2.9.1 为NGINX Plus安装ModeSecurity&lt;a class="headerlink" href="#291-nginx-plusmodesecurity" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;略过&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="292-nginx-plusmodsecurity"&gt;2.9.2 在NGINX Plus中配置ModSecurity&lt;a class="headerlink" href="#292-nginx-plusmodsecurity" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要配置NGINX Plus使用ModSecurity模块.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;在NGINX Plus配置中启用动态模块, 使用&lt;code&gt;modsecurity_rules_file&lt;/code&gt;来指向一个ModSecurity规则文件:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;load_module modules/ngx_http_modsecurity.so;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;load_module&lt;/code&gt;指令适用于主context, 意味着该指令可以在打开HTTP或Stream块之前使用.&lt;/p&gt;
&lt;p&gt;开启ModeSecurity, 使用指定规则集:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;modsecurity&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://backend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;modsecurity_rules_file&lt;/span&gt; &lt;span class="s"&gt;rule-set-file&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;ModSecurity的规则可以阻止对常见的web servers和应用的漏洞利用. ModSecurity已知可以防御应用层的攻击, 如HTTP violations, SQL注入, 跨站脚本, 应用层, DDoS, 远程和本地文件攻击. 使用ModSecurity, 你可以订阅恶意用于的实时的黑名单, 来帮助在服务被攻击之前阻止问题. ModSecurity模块也可以启用日志帮助识别新的攻击模式和异常.&lt;/p&gt;
&lt;h4&gt;参见&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://bit.ly/2fdZ7Dd"&gt;OWASP ModSecurity 核心规则集&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/2eJYuAx"&gt;TrustWave ModSecurity 付费规则集&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="293-modsecurity"&gt;2.9.3 源码安装ModSecurity&lt;a class="headerlink" href="#293-modsecurity" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要在CentOS或RHEL系统上使用NGINX运行ModSecurity.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;从源码编译ModSecurity和NGINX来使用ModSecurity模块.&lt;/p&gt;
&lt;p&gt;首先升级security并安装依赖:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yum --security update -y &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    yum -y install automake &lt;span class="se"&gt;\&lt;/span&gt;
    autoconf &lt;span class="se"&gt;\&lt;/span&gt;
    curl &lt;span class="se"&gt;\&lt;/span&gt;
    curl-devel &lt;span class="se"&gt;\&lt;/span&gt;
    gcc &lt;span class="se"&gt;\&lt;/span&gt;
    gcc-c++ &lt;span class="se"&gt;\&lt;/span&gt;
    httpd-devel &lt;span class="se"&gt;\&lt;/span&gt;
    libxml2 &lt;span class="se"&gt;\&lt;/span&gt;
    libxml2-devel &lt;span class="se"&gt;\&lt;/span&gt;
    make &lt;span class="se"&gt;\&lt;/span&gt;
    openssl &lt;span class="se"&gt;\&lt;/span&gt;
    openssl-devel &lt;span class="se"&gt;\&lt;/span&gt;
    perl &lt;span class="se"&gt;\&lt;/span&gt;
    wget
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来, 下载安装PCRE库:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /opt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    wget http://ftp.exim.org/pub/pcre/pcre-8.39.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    tar -zxf pcre-8.39.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; pcre-8.39 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ./configure &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下载zlib源码并安装:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /opt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    wget http://zlib.net/zlib-1.2.8.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    tar -zxf zlib-1.2.8.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; zlib-1.2.8 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ./configure &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下载ModSecurity源码并安装:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /opt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  wget &lt;span class="se"&gt;\&lt;/span&gt;
  https://www.modsecurity.org/tarball/2.9.1/modsecurity-2.9.1.&lt;span class="se"&gt;\&lt;/span&gt;
tar.gz&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  tar -zxf modsecurity-2.9.1.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nb"&gt;cd&lt;/span&gt; modsecurity-2.9.1 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  ./configure --enable-standalone-module &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从源码下载安装NGINX, 并在配置脚本里包含你需要的所有模块. 本次我们的关注点是ModSecurity:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /opt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    wget http://nginx.org/download/nginx-1.11.4.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    tar zxf nginx-1.11.4.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; nginx-1.11.4 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ./configure &lt;span class="se"&gt;\&lt;/span&gt;
        --sbin-path&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/nginx/nginx &lt;span class="se"&gt;\&lt;/span&gt;
        --conf-path&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/nginx.conf &lt;span class="se"&gt;\&lt;/span&gt;
        --pid-path&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/nginx/nginx.pid &lt;span class="se"&gt;\&lt;/span&gt;
        --with-pcre&lt;span class="o"&gt;=&lt;/span&gt;../pcre-8.39 &lt;span class="se"&gt;\&lt;/span&gt;
        --with-zlib&lt;span class="o"&gt;=&lt;/span&gt;../zlib-1.2.8 &lt;span class="se"&gt;\&lt;/span&gt;
        --with-http_ssl_module &lt;span class="se"&gt;\&lt;/span&gt;
        --with-stream &lt;span class="se"&gt;\&lt;/span&gt;
        --with-http_ssl_module &lt;span class="se"&gt;\&lt;/span&gt;
        --with-http_secure_link_module &lt;span class="se"&gt;\&lt;/span&gt;
        --add-module&lt;span class="o"&gt;=&lt;/span&gt;../modsecurity-2.9.1/nginx/modsecurity &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    make install &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /usr/local/nginx/nginx /usr/bin/nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这将会把ModSecurity 2.9.1 模块编译并和NGINX一起安装. 从现在开始, 我们可以使用&lt;code&gt;ModSecurityEnabled&lt;/code&gt;和&lt;code&gt;ModSecurityConfig&lt;/code&gt;指令:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="s"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="s"&gt;[::]:80&lt;/span&gt; &lt;span class="s"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;ModSecurityEnabled&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;ModSecurityConfig&lt;/span&gt; &lt;span class="s"&gt;modsecurity.conf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NGINX server的配置会为&lt;code&gt;location /&lt;/code&gt;启用ModSecurity, 并使用位于NGINX配置目录下的ModSecurity配置文件.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;这一节从NGINX源码编译, 并把ModSecurity编译到NGINX中. 推荐从源码编译NGINX的时候, 总是检查你是否使用了最新的稳定版的包. 通过之前的案例, 你可以使用有ModSecurity的开源版本的NGINX来构建你的开源web应用防火墙.&lt;/p&gt;
&lt;h4&gt;参见&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/SpiderLabs/ModSecurity"&gt;ModSecurity源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/2eJYuAx"&gt;Updated and maintained ModSecurity Rules from SpiderLabs&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 20:22:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-handbook-2-9-waf.html</guid><category>nginx</category><category>安全</category><category>译文</category><category>最佳实践</category></item><item><title>NGINX 实战手册-安全-安全链接</title><link>https://www.EWhisper.cn/nginx-handbook-2-6-secure-link.html</link><description>&lt;h2 id="26"&gt;2.6 安全链接&lt;a class="headerlink" href="#26" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="260"&gt;2.6.0 介绍&lt;a class="headerlink" href="#260" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;安全链接(secure links)是一种使用&lt;em&gt;md5&lt;/em&gt;哈希算法保证静态资源安全的方式. 使用这个模块, 你也可以限制该链接接收请求的时长. 使用安全链接使NGINX应用程序服务器确保静态内容安全而无需应用服务器承担这种责任. 这个模块包含在免费开源的NGINX里. 但是, 它没有打进标准的NGINX包, 而是放到了&lt;code&gt;nginx-extras&lt;/code&gt;包里. 当从源码构建NGINX时, 可以选择使用配置参数&lt;code&gt;--with-http_secure_link_module&lt;/code&gt;来启用.&lt;/p&gt;
&lt;h3 id="261-location"&gt;2.6.1 加密Location&lt;a class="headerlink" href="#261-location" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要使用一个密钥来加密一个location块.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;使用安全链接模块, &lt;code&gt;secure_link_secret&lt;/code&gt;指令来限制对资源的访问的用户有一个安全的链接:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/resources&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;secure_link_secret&lt;/span&gt; &lt;span class="s"&gt;mySecret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$secure_link&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kn"&gt;rewrite&lt;/span&gt; &lt;span class="s"&gt;^&lt;/span&gt; &lt;span class="s"&gt;/secured/&lt;/span&gt;&lt;span class="nv"&gt;$secure_link&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/secured&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该配置创建了一个内部和一个外部的location块. 外部的location块&lt;code&gt;/resources&lt;/code&gt;会返回403 Forbidden, 除非请求URI包含一个&lt;em&gt;md5&lt;/em&gt;哈希字符串, 这个字符串可以被&lt;code&gt;secure_link_secret&lt;/code&gt;指令提供的secret验证. &lt;code&gt;$secure_link&lt;/code&gt;变量是一个空字符串, 除非在URI的哈希被验证.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;使用secret加密资源是一个很好的确保你的文件受保护的方法. 该secret用于和URI串联 . 该字符串然后会被&lt;code&gt;md5&lt;/code&gt;哈希, &lt;code&gt;md5&lt;/code&gt;哈希后的16禁止数字被用在该URI中. 该哈希被放到链接中, 由NGINX计算. NGINX会知道URI想要访问的路径, 因为哈希后就在URI中 . NGINX也会直到你的secret, 因为指令&lt;code&gt;secure_link_secret&lt;/code&gt;会提供. NGINX能够迅速验证&lt;code&gt;md5&lt;/code&gt;哈希, 并存储在URI的&lt;code&gt;$secure_link&lt;/code&gt;变量中. 如果哈希无法验证, 该变量就是空字符串. 需要注意, 传给&lt;code&gt;secure_link_secret&lt;/code&gt;的参数必须是一个静态字符串, 不能是变量.&lt;/p&gt;
&lt;h3 id="262-secret"&gt;2.6.2 使用secret生成一个安全链接&lt;a class="headerlink" href="#262-secret" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要使用secret从你的应用生成一个安全链接.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;NGINX的安全链接模块接收一个md5哈希(URI路径和secret的联接)过的16进制字符串. 基于上一节, 我们会创建安全的连接, 可以工作在上个配置, 比如&lt;code&gt;/var/www/secured/index.html&lt;/code&gt;. 要生成md5哈希的16进制字符串, 我们可以使用Unix openssl命令:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s1"&gt;&amp;#39;index.htmlmySecret&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; openssl md5 -hex
&lt;span class="o"&gt;(&lt;/span&gt;stdin&lt;span class="o"&gt;)=&lt;/span&gt; a53bee08a4bf0bbea978ddf736363a12
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保护的URI: &lt;em&gt;index.html&lt;/em&gt;; secret: &lt;em&gt;mySecret&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;下边是使用Python 2.7和&lt;em&gt;md5&lt;/em&gt;库生成的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;md5&lt;/span&gt;
&lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.htmlmySecret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;a53bee08a4bf0bbea978ddf736363a12&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么我们访问的地址应该是如下所示, 要访问&lt;code&gt;/var/www/secured/index.html&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;www.example.com/resources/a53bee08a4bf0bbea978ddf736363a12/\
index.html
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;要生成这个数字可以由很多种方式, 很多语言都可以实现. 要记住的是: URI路径在secret之前, 字符串中没有回车, 并且使用&lt;em&gt;md5&lt;/em&gt;哈希的16进制数字.&lt;/p&gt;
&lt;h3 id="263-expire-datelocation"&gt;2.6.3 使用Expire Date加密Location&lt;a class="headerlink" href="#263-expire-datelocation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要生成一个在一段时间后过期的链接.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;利用在安全链接模块的其他指令来在你的加密链接中设置过期日志和使用变量:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/resources&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;secure_link&lt;/span&gt; &lt;span class="nv"&gt;$arg_md5,$arg_expires&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;secure_link_md5&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$secure_link_expires$uri$remote_addr&lt;/span&gt;
   &lt;span class="s"&gt;mySecret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$secure_link&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$secure_link&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0&amp;quot;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;410&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;secure_link&lt;/code&gt;指令有2个用逗号隔开的字段. 第一个字段是&lt;em&gt;md5&lt;/em&gt;哈希的变量. 这个例子使用一个HTTP参数的md5。第二个字段是放置以Unix元年时间格式的链接过期时间的变量. &lt;code&gt;secure_link_md5&lt;/code&gt;指令占用一个单独的字段, 声明用于构造&lt;em&gt;md5&lt;/em&gt;哈希的的格式的字符串. 和其他配置一样, 如果hash没有通过验证, &lt;code&gt;$secure_link&lt;/code&gt;变量设置为空字符串. 或者, 如果哈希匹配但是时间过期, &lt;code&gt;$secure_link&lt;/code&gt;变量设置为0.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;这种用法比之前2.6.1中的更灵活, 看起来更干净. 使用这些指令, 你可以使用可以用在NGINX哈希字符串中的任意数量的变量. 在哈希字符串中使用用户相关的变量会加强安全性, 因为用户不能够得到加密的资源. 推荐使用像是&lt;code&gt;$remote_addr&lt;/code&gt;或&lt;code&gt;$http_x_forwarded_for&lt;/code&gt;或由应用生成的会话cookie作为变量. &lt;code&gt;secure_link&lt;/code&gt;的参数可以来自你喜欢的任何变量, 他们可以被命名为任意合适的名字. 在&lt;code&gt;$secure_link&lt;/code&gt;变量中的条件可以被设置返回已知的Forbidder和Gone的HTTP代码. HTTP 410, Gone, 对于过期链接非常适用, 因为这个条件被认为是永久的.&lt;/p&gt;
&lt;h3 id="264"&gt;2.6.4 生成一个有过期时间的链接&lt;a class="headerlink" href="#264" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要生成一个有过期时间的链接.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;用Unix时间戳格式生成一个过期时间戳. 在Unix系统上, 你可以这样操作:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ date -d &lt;span class="s2"&gt;&amp;quot;2020-12-31 00:00&amp;quot;&lt;/span&gt; +%s
&lt;span class="m"&gt;1609390800&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来你需要连接用在&lt;code&gt;secure_link_md5&lt;/code&gt;指令中的哈希字符串. 在本例中, 使用&lt;code&gt;1293771600/resources/index.html127.0.0.1  mySecret&lt;/code&gt;. md5哈希和刚刚的16进制数字有一些不同. 它是一个二进制格式的md5哈希, 采用base64加密, 用加号(+)转换为连接符(-), 斜杠(/)转换为下划线(_), 等号(=)被移除. 如下所示:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s1"&gt;&amp;#39;1609390800/resources/index.html127.0.0.1 mySecret&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; openssl md5 -binary &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; openssl base64 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; tr +/ -_ &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; tr -d &lt;span class="o"&gt;=&lt;/span&gt;
81CYyxXFADhLHaQD36_BK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就得到了哈希, 我们可以用它后边跟着过期日期作为参数.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/resources/index.html?md5=81CYyxXFADhLHaQD36_BK&amp;amp;expires=1609390800'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以下是使用Python 2.7的标准库的例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;b64encode&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;md5&lt;/span&gt;
&lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/resources/index.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;remote_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;www.example.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;expire&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;uncoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expire&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;remote_addr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; mySecret&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;md5hashed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uncoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;b64&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;md5hashed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;linkformat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{}{}?md5={}?expires{}&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;securelink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;linkformat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;expire&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;使用这种方式, 我们能生成用于URL中的特殊格式的加密链接. 提供安全保障的secret绝不会发给客户端. 你可以用尽可能的你需要的其他变量来加密location. md5哈希和base64加密很常见, 轻量, 几乎在所有语言中都可用.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 20:15:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-handbook-2-6-secure-link.html</guid><category>nginx</category><category>安全</category><category>译文</category><category>最佳实践</category></item><item><title>NGINX 实战手册-安全-使用JWT API的安全认证</title><link>https://www.EWhisper.cn/nginx-handbook-2-7-jwt-api-auth.html</link><description>&lt;h2 id="27-jwtapi"&gt;2.7 使用JWT的API认证&lt;a class="headerlink" href="#27-jwtapi" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="270"&gt;2.7.0 介绍&lt;a class="headerlink" href="#270" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;JSON Web Tokens (JWTs)迅速成为一种广为使用和受欢迎的认证方式. 这些认证tokens有能力存储一些用户和用户的认证信息到token里. 这些tokens也可以异步验证, 这意味着负载均衡和代理可以使用公钥来验证该token, 而不需要用于签发token的私钥, 以此提高安全和灵活性.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NGINX Plus的功能, 略过.&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 20:15:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-handbook-2-7-jwt-api-auth.html</guid><category>nginx</category><category>安全</category><category>译文</category><category>最佳实践</category></item><item><title>NGINX 实战手册-安全-HTTP 子请求认证</title><link>https://www.EWhisper.cn/nginx-handbook-2-5-http-subrequest-auth.html</link><description>&lt;h3 id="251"&gt;2.5.1 介绍&lt;a class="headerlink" href="#251" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;伴随着很多不同的认证方法, NGINX通过启用自请求mid-flight 来使验证认证广泛的认证系统变得容易. HTTP认证请求模块可以启用如LDAP或自定义认证微服务的认证系统. 在请求被执行之前, 认证机制会代理该请求到认证服务. 在这个代理中, 通过NGINX的能力可以操纵需要身份验证服务的请求。因此,它非常灵活。&lt;/p&gt;
&lt;h3 id="252"&gt;2.5.2 认证子请求&lt;a class="headerlink" href="#252" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你有一个第三方的认证系统, 请求认证需要用到这个系统.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;http_auth_request_module&lt;/code&gt;在请求执行前, 让请求到对应的认证服务来进行验证:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;private&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;auth_request&lt;/span&gt; &lt;span class="err"&gt;/auth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;auth_request_set&lt;/span&gt; &lt;span class="err"&gt;$auth_status&lt;/span&gt; &lt;span class="err"&gt;$upstream_status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;auth&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;auth-server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;proxy_pass_request_body&lt;/span&gt; &lt;span class="err"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;proxy_set_header&lt;/span&gt; &lt;span class="err"&gt;Content-length&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;proxy_set_header&lt;/span&gt; &lt;span class="err"&gt;X-Original-URI&lt;/span&gt; &lt;span class="err"&gt;$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;auth_request&lt;/code&gt;指令使用必须是local internal location的URI参数. &lt;code&gt;auth_request_set&lt;/code&gt;指令允许你从认证自请求来设置变量.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;http_auth_request_module&lt;/code&gt;允许对每个NGINX处理的请求做认证. 在响应原服务之前, 会生成一个子请求, 来决定这个请求是否可以访问它请求的资源.  整个请求会被代理到自请求块 location. 通过自请求的状态码来确定是否可以访问资源. 如果自请求返回200 HTTP 状态码, 认证成功, 请求被响应. 如果返回HTTP 401或403, 会向原请求返回同样的代码.&lt;/p&gt;
&lt;p&gt;如果你的认证服务不需要请求body, 你可以抛弃掉请求body, 通过&lt;code&gt;proxy_pass_reqeust_body&lt;/code&gt;指令(如上例子所示). 这会减少请求size和时间. 因为请求体被忽略, &lt;code&gt;Content-Length&lt;/code&gt; header可以设为空字符串. 如果你的认证服务需要直到原请求的URI, 你可以把这个值放到一个自定义的header, 让你的认证服务来检查和验证. 如果从子请求到认证服务见你想要保留一些东西, 你可以使用  &lt;code&gt;auth_request_set&lt;/code&gt;指令来创建相应数据之外新的变量.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 20:13:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-handbook-2-5-http-subrequest-auth.html</guid><category>nginx</category><category>安全</category><category>译文</category><category>最佳实践</category></item><item><title>NGINX 实战手册-安全-加密</title><link>https://www.EWhisper.cn/nginx-handbook-2-3-encrypt.html</link><description>&lt;h2 id="23"&gt;2.3 加密&lt;a class="headerlink" href="#23" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="230"&gt;2.3.0 介绍&lt;a class="headerlink" href="#230" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;网络是个很可怕的地方, 但不需太过担心. 加密传输信息变得越来越容易, 越来越唾手可得, 因为签名证书在&lt;em&gt;Let's Encrypt&lt;/em&gt;和&lt;em&gt;Amazon Web Services&lt;/em&gt;变得越来越便宜. 二者都提供有限用途的免费证书. 在本章, 我们将讨论如何确保NGINX和客户端之间, 以及NGINX和upstream之间的信息安全.&lt;/p&gt;
&lt;h3 id="231"&gt;2.3.1 客户端加密&lt;a class="headerlink" href="#231" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;需要加密NGINX和客户端之间的流量.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;使用SSL模块, 如&lt;code&gt;ngx_http_ssl_module&lt;/code&gt;或&lt;code&gt;ngx_stream_ssl_module&lt;/code&gt;来加密流量.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;All&lt;/span&gt; &lt;span class="err"&gt;directives&lt;/span&gt; &lt;span class="err"&gt;used&lt;/span&gt; &lt;span class="err"&gt;below&lt;/span&gt; &lt;span class="err"&gt;are&lt;/span&gt; &lt;span class="err"&gt;also&lt;/span&gt; &lt;span class="err"&gt;valid&lt;/span&gt; &lt;span class="err"&gt;in&lt;/span&gt; &lt;span class="err"&gt;stream&lt;/span&gt;
    &lt;span class="err"&gt;server&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;listen&lt;/span&gt; &lt;span class="err"&gt;8083&lt;/span&gt; &lt;span class="err"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;ssl_protocols&lt;/span&gt;       &lt;span class="err"&gt;TLSv1.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;协议&lt;/span&gt;
        &lt;span class="err"&gt;ssl_ciphers&lt;/span&gt;         &lt;span class="n"&gt;AES128-SHA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;AES256-SHA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;密码套件&lt;/span&gt;
        &lt;span class="err"&gt;ssl_certificate&lt;/span&gt;     &lt;span class="err"&gt;/usr/local/nginx/conf/cert.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;证书&lt;/span&gt;
        &lt;span class="err"&gt;ssl_certificate_key&lt;/span&gt; &lt;span class="err"&gt;/usr/local/nginx/conf/cert.key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;密钥&lt;/span&gt;
        &lt;span class="err"&gt;ssl_session_cache&lt;/span&gt;   &lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;SSL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;ssl会话缓存&lt;/span&gt;
        &lt;span class="err"&gt;ssl_session_timeout&lt;/span&gt; &lt;span class="err"&gt;10m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;ssl会话超时&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;讨论&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;不要使用SSL(Secure Socket Layer)协议, 1 - 3版都被认为不安全&lt;/li&gt;
&lt;li&gt;TLS是默认的协议(Transport Layer Security), TLS还算安全.&lt;/li&gt;
&lt;li&gt;当使用签名证书, 你需要把证书和证书认证链连接到一块. 你的证书应该在证书链文件的上方.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSL会话缓存, 缓存后无需negotiate 版本和密码套件, 可以提升性能.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="232-upstream"&gt;2.3.2 Upstream 加密&lt;a class="headerlink" href="#232-upstream" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;为了合规, 或者你的upstream在你的安全网络之外, 你需要加密NGINX和upstream之间的流量.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;使用HTTP 代理模块的SSL指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;upstream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;proxy_ssl_verify&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;proxy_ssl_verify_depth&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;proxy_ssl_protocols&lt;/span&gt; &lt;span class="err"&gt;TLSv1.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置的指令确保NGINX在upsteam上验证证书和证书链2层认证深度是合法的. 默认NGINX&lt;strong&gt;不验证&lt;/strong&gt;upstream证书, 接收所有TLS版本.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果要加密upstream 流量, 你至少应该开启验证.&lt;/li&gt;
&lt;li&gt;其他可用指令, 如&lt;code&gt;proxy_ssl_certificate&lt;/code&gt;和&lt;code&gt;proxy_ssl_certificate_key&lt;/code&gt;, 允许你锁定upstream加密以增强安全性.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 20:08:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-handbook-2-3-encrypt.html</guid><category>nginx</category><category>安全</category><category>译文</category><category>最佳实践</category></item><item><title>NGINX 实战手册-安全-HTTP 基本认证</title><link>https://www.EWhisper.cn/nginx-handbook-2-4-http-basic-auth.html</link><description>&lt;h2 id="24-http"&gt;2.4 HTTP基本认证&lt;a class="headerlink" href="#24-http" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="240"&gt;2.4.0 介绍&lt;a class="headerlink" href="#240" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;基本认证是一个保护私有内容的简单方法. 这个认证方法可以很容易的用于隐藏&lt;strong&gt;开发网站&lt;/strong&gt;或者隐藏特权的内容. 推荐在需要基本认证的locations或servers上设置一个速率限制来组织暴力攻击. 也推荐如上章那样, 使用HTTPS, 因为每个认证请求, 用户名和密码是通过base64加密字符串, 作为一个header发送到server的. 如果使用HTTP, 意味着用户名和密码都可以被捕获.&lt;/p&gt;
&lt;h3 id="241-user-file"&gt;2.4.1 创建一个User File&lt;a class="headerlink" href="#241-user-file" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要一个HTTP基本认证用户文件来存储用户名和密码.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;生成一个下列格式的文件, 密码可以通过以下允许的格式来加密或哈希:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# comment
name1:password1
name2:password2:comment
name3:password3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NGINX可以理解几种格式的密码, 其中一种加密是用C函数&lt;code&gt;crypt()&lt;/code&gt;. 该函数被暴露给&lt;code&gt;openssl passwd&lt;/code&gt;命令, 可以用如下方式生成加密字符串:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ openssl passwd MyPassword1234&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;会输出一个字符串, NGINX可以用在密码文件里.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;也可以用Apache的&lt;code&gt;htpasswd&lt;/code&gt;来生成密码. &lt;code&gt;htpasswd&lt;/code&gt;和&lt;code&gt;openssl&lt;/code&gt; 都会生成&lt;em&gt;apr1&lt;/em&gt; 算法的密码. 密码也可以用LDAP和Dovecot使用的加盐sha-1 格式. NGINX支持更多的格式和哈希算法, 但是, 大部分都被认为不安全, 因为可以被轻易破解.&lt;/p&gt;
&lt;h3 id="242"&gt;2.4.2 使用基本认证&lt;a class="headerlink" href="#242" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要用基本认证来保护NGINX location或server.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;location / {
    auth_basic          &amp;quot;Private site&amp;quot;;
    auth_basic_user_file conf.d/passwd;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;auth_basic&lt;/code&gt;指令可以用于HTTP, server, 或location块里. 当未认证用户访问, &lt;code&gt;auth_basic&lt;/code&gt;指令会把字符串显示到基本认证的弹出窗口.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;基本认证通过server返回一个带有&lt;code&gt;WWW-Authenticate&lt;/code&gt;的401未认证HTTP code. 该header会有一个值&lt;code&gt;Basic realm="your string."&lt;/code&gt;. 该响应会导致浏览器提示输入用户名和密码. 输入的用户名和密码会通过base64加密, 通过一个叫做&lt;code&gt;Authorization&lt;/code&gt;的请求头发送. Server会机密密码, 并根据&lt;code&gt;auth_basic_user_file&lt;/code&gt;提供的密码做验证. 因为用户名密码仅仅是通过base64加密. 所以推荐使用HTTPS传输.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 20:08:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-handbook-2-4-http-basic-auth.html</guid><category>nginx</category><category>安全</category><category>译文</category><category>最佳实践</category></item><item><title>NGINX 实战手册-安全-限制使用</title><link>https://www.EWhisper.cn/nginx-handbook-2-2-limit-usage.html</link><description>&lt;h2 id="22"&gt;2.2 限制使用&lt;a class="headerlink" href="#22" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="220"&gt;2.2.0 介绍&lt;a class="headerlink" href="#220" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该章节关注于: 限制使用和滥用, 连接数, 请求服务速率, 带宽使用量. 区分开连接和请求是很重要的: 连接(TCP连接)是网络层, 在这层上, 请求被执行, 因此两者并不一样.&lt;/p&gt;
&lt;p&gt;在HTTP/1和HTTP/1.1中, 一个连接请求只能使用一次; 而在HTTP/2中, 多个请求可以使用同一个TCP连接.&lt;/p&gt;
&lt;h3 id="221"&gt;2.2.1 限制连接&lt;a class="headerlink" href="#221" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要基于预定义的key来限制连接数, 比如key是客户端IP地址.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;创建一个共享内存区域来存放连接metrics, 并使用&lt;code&gt;limit_conn&lt;/code&gt; 指令来限制打开的连接数:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;limit_conn_zone&lt;/span&gt; &lt;span class="nv"&gt;$binary_remote_addr&lt;/span&gt; &lt;span class="s"&gt;zone=limitbyaddr:10m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;limit_conn_status&lt;/span&gt; &lt;span class="mi"&gt;429&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;...&lt;/span&gt;
  &lt;span class="s"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;...&lt;/span&gt;
      &lt;span class="s"&gt;limit_conn&lt;/span&gt; &lt;span class="s"&gt;limitbyaddr&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;...&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="✔" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2714.png" title=":heavy_check_mark:" width="20px"&gt;  &lt;/p&gt;
&lt;p&gt;429: Too Many Requests&lt;/p&gt;
&lt;p&gt;预定义的key用的是:二进制格式的客户端IP地址.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;使用IP地址, 就像上个例子中那样, 如果很多用户都在同一个网络来自同一个IP可能很危险, 比如用的是一个NAT(网络地址转换). 整个组都会被限制. &lt;code&gt;limit_conn_zone&lt;/code&gt;指令只适用于HTTP块. 可以利用在HTTP块中的NGINX的任何变量来构建一个字符串来限制. 利用变量可以在应用级别识别具体的用户, 像是session cookie, 基于使用案例可能是一个更干净的解决方案. &lt;code&gt;limit_conn&lt;/code&gt;和&lt;code&gt;limit_conn_status&lt;/code&gt;指令在HTTP, server, 和location块中都能用. &lt;code&gt;limit_conn_status&lt;/code&gt;默认是503, 服务不可用. 429会更合适, 因为500界别的服务不可用意味着错误.&lt;/p&gt;
&lt;h3 id="222"&gt;2.2.2 限制速率&lt;a class="headerlink" href="#222" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;你需要基于预定义的key来限制请求速率, 比如客户端IP地址.&lt;/p&gt;
&lt;h4&gt;解决方案&lt;/h4&gt;
&lt;p&gt;利用速率限制模块来限制:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;limit_req_zone&lt;/span&gt; &lt;span class="nv"&gt;$binary_remote_addr&lt;/span&gt; &lt;span class="s"&gt;zone=limitbyaddr:10m&lt;/span&gt; &lt;span class="s"&gt;rate=1r/s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;limit_req_status&lt;/span&gt; &lt;span class="mi"&gt;429&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;...&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;...&lt;/span&gt;
      &lt;span class="s"&gt;limit_req&lt;/span&gt; &lt;span class="s"&gt;zone=limitbyaddr&lt;/span&gt; &lt;span class="s"&gt;burst=10&lt;/span&gt; &lt;span class="s"&gt;nodelay&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;...&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个zone用关键字参数设置了速率. &lt;code&gt;limit_req&lt;/code&gt;指令有2个关键字参数: &lt;code&gt;zone&lt;/code&gt;和&lt;code&gt;burst&lt;/code&gt;. 当给定zone的请求速率超出了, 请求会延迟直到达到他们的最大burst size, 这个由&lt;code&gt;burst&lt;/code&gt;关键字参数提供. 默认&lt;code&gt;burst&lt;/code&gt;关键字参数为0. &lt;code&gt;limit_req&lt;/code&gt;也有第三个可选的参数, &lt;code&gt;nodelay&lt;/code&gt;. 这个参数允许客户端在被限制之前使用它的&lt;code&gt;burst&lt;/code&gt;而不用延迟. &lt;code&gt;limit_req_status&lt;/code&gt; 和&lt;code&gt;limit_req&lt;/code&gt; 可以用在HTTP, server, 和location. &lt;code&gt;limit_req_zone&lt;/code&gt;只适用于HTTP块.&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;速率限制模块在组织恶意请求, 同时仍为每个人提供一定质量的服务时非常有用. 有很多限制请求速率的原因, 其中之一就是安全. 你可以通过在你的登陆页面设置非常严格的限制来防止恶意攻击. 你可以通过设置对所有请求的完善的限制来阻止恶意用户尝试对你的应用使用拒绝式服务攻击或浪费资源的计划. 速率限制模块的配置和2.2.1中的很类似. 速率可以被设置为每秒多少请求或每分钟多少请求. 当超过限制, 会记录事件日志. 例子中没有提到这个指令&lt;code&gt;limit_req_log_level&lt;/code&gt; , 默认是&lt;code&gt;error&lt;/code&gt;, 但是也可以设置为&lt;code&gt;info&lt;/code&gt; , &lt;code&gt;notice&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="223"&gt;2.2.3 限制带宽&lt;a class="headerlink" href="#223" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;待补充&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 20:05:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-handbook-2-2-limit-usage.html</guid><category>nginx</category><category>安全</category><category>译文</category><category>最佳实践</category></item><item><title>NGINX 实战手册-安全-访问控制</title><link>https://www.EWhisper.cn/nginx-handbook-2-1-control-access.html</link><description>&lt;h2 id="211"&gt;2.1.1 介绍&lt;a class="headerlink" href="#211" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;控制你的web应用或你的web应用的子网的访问是很重要的业务. 在NGINX中, 访问控制有多种形式, 像是在网络层拒绝掉, 基于认证策略的允许, 或 HTTP指令浏览器如何响应. 本章我们将讨论基于网络属性, 认证和如何防止&lt;em&gt;跨域资源共享(Cross-Origin Resource Sharing(CORS))&lt;/em&gt;的访问控制.&lt;/p&gt;
&lt;h2 id="212-ip"&gt;2.1.2 基于IP地址的访问&lt;a class="headerlink" href="#212-ip" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_1"&gt;问题&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;你需要基于客户端的IP地址的控制.&lt;/p&gt;
&lt;h3 id="_2"&gt;解决方案&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用HTTP访问模块来控制对受保护资源的访问:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;deny&lt;/span&gt; &lt;span class="err"&gt;10.0.0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;allow&lt;/span&gt; &lt;span class="err"&gt;10.0.0.0/20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;allow&lt;/span&gt; &lt;span class="err"&gt;2001:0&lt;/span&gt;&lt;span class="n"&gt;db8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;deny&lt;/span&gt; &lt;span class="err"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在HTTP, server, 和location上下文中, &lt;code&gt;allow&lt;/code&gt;和&lt;code&gt;deny&lt;/code&gt;指令提供对给出的client, IP, CIDR range, Unix socket, 或all 关键字的允许和禁止访问的能力. 规则被依次检查, 直到发现匹配的地址.&lt;/p&gt;
&lt;h3 id="_3"&gt;讨论&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;保护在互联网上的有价值的资源和服务必须在对应的层上做. NGINX提供对其中一些层的能力. &lt;code&gt;deny&lt;/code&gt; 指令组织访问给定的上下文, &lt;code&gt;allow&lt;/code&gt;指令可以用于限制访问. 你可以使用IP地址, IPv4或IPv6, CIDR block ranges, 关键字&lt;code&gt;all&lt;/code&gt;, 和Unix socket. 通常要保护某个资源, 应该允许特定区域的内网IP地址, 并拒绝所有.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 20:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-handbook-2-1-control-access.html</guid><category>nginx</category><category>安全</category><category>译文</category><category>最佳实践</category></item><item><title>NGINX 配置SSL 支持</title><link>https://www.EWhisper.cn/nginx-conf-add-ssl-support.html</link><description>&lt;p&gt;&lt;img alt="nginx+ssl" src="./images/nginx-ssl-certificate.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.EWhisper.cn/tencentyun-apply-ssl-certificate.html"&gt;上篇文章&lt;/a&gt;中, 我们已经申请好了SSL证书. 那么现在, 我们就要配置全站SSL了! &lt;img align="absmiddle" alt="💪" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4aa.png" title=":muscle:" width="20px"&gt;&lt;img align="absmiddle" alt="💪" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4aa.png" title=":muscle:" width="20px"&gt;&lt;img align="absmiddle" alt="💪" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4aa.png" title=":muscle:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;这次的工作主要是NGINX的配置, 同时会有一些我的博客本身的配置.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;博客本身配置更改包括: (这篇文章就先不细说了)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网页内链接全部从http改为https(其实配置下SITEURL, 工具会自动生成好) 并重新发布. (特别要注意, 如果有的站内css, js等没有用https就尴尬了, 会被各类浏览器拦截掉, 并提示"不安全的脚本")&lt;/li&gt;
&lt;li&gt;网站有用到的第三方工具(如拨测), 把网站的地址改为 https开头的.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id="nginx"&gt;NGINX配置&lt;a class="headerlink" href="#nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先, 创建并上传准备好的证书文件到指定目录: (crt和key文件)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mkdir -p /etc/pki/nginx/
&lt;span class="c1"&gt;# 通过sftp上传到该目录&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进行nginx.conf 的ssl配置, 本次主要涉及到server块的配置更改, 如下: (具体的指令作用见注释)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt;       &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;server_name&lt;/span&gt;  &lt;span class="s"&gt;www.ewhisper.cn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt; &lt;span class="s"&gt;https://&lt;/span&gt;&lt;span class="nv"&gt;$host$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt;       &lt;span class="mi"&gt;443&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt; &lt;span class="s"&gt;http2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;server_name&lt;/span&gt;  &lt;span class="s"&gt;www.ewhisper.cn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt;         &lt;span class="s"&gt;/usr/share/nginx/html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# 静态博客的存放位置&lt;/span&gt;

        &lt;span class="kn"&gt;ssl_certificate&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/etc/pki/nginx/1_www.ewhisper.cn_bundle.crt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# 证书路径&lt;/span&gt;
        &lt;span class="kn"&gt;ssl_certificate_key&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/etc/pki/nginx/2_www.ewhisper.cn.key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# 证书密钥路径&lt;/span&gt;
        &lt;span class="kn"&gt;ssl_session_cache&lt;/span&gt; &lt;span class="s"&gt;shared:SSL:50m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# ssl session cache分配50m空间, 缓存ssl session&lt;/span&gt;
        &lt;span class="kn"&gt;ssl_session_timeout&lt;/span&gt;  &lt;span class="s"&gt;1d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# ssl session 超时时间为1天&lt;/span&gt;
        &lt;span class="kn"&gt;ssl_session_tickets&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# ssl session ticket 机制, 部分版本有bug, 视情况开启.&lt;/span&gt;

        &lt;span class="kn"&gt;ssl_protocols&lt;/span&gt; &lt;span class="s"&gt;TLSv1.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# ssl 协议版本&lt;/span&gt;
        &lt;span class="kn"&gt;ssl_ciphers&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# ssl ciphers&lt;/span&gt;
        &lt;span class="kn"&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# 倾向于使用server端的ciphers&lt;/span&gt;

        &lt;span class="c1"&gt;# HSTS 6 months&lt;/span&gt;
        &lt;span class="kn"&gt;add_header&lt;/span&gt; &lt;span class="s"&gt;Strict-Transport-Security&lt;/span&gt; &lt;span class="s"&gt;max-age=15768000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
        &lt;span class="c1"&gt;# 添加个http header, 告诉浏览器直接转到https, 此功能有风险, 慎重选择. &lt;/span&gt;
        &lt;span class="c1"&gt;# (比如你的证书过期忘记续了, 那么用户想转到http都没办法)&lt;/span&gt;

        &lt;span class="kn"&gt;ssl_stapling&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# 启用ssl OCSP stapling功能, 服务端主动查询OCSP结果, 提高TLS效率&lt;/span&gt;
        &lt;span class="kn"&gt;ssl_stapling_verify&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# 开启OCSP stapling 验证&lt;/span&gt;

        &lt;span class="c1"&gt;# Load configuration files for the default server block.&lt;/span&gt;
        &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;/etc/nginx/default.d/*.conf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# 我的博客的location在这里配置&lt;/span&gt;

        &lt;span class="c1"&gt;#location / {&lt;/span&gt;
        &lt;span class="c1"&gt;#}&lt;/span&gt;

        &lt;span class="kn"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="s"&gt;/404.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/40x.html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kn"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="mi"&gt;502&lt;/span&gt; &lt;span class="mi"&gt;503&lt;/span&gt; &lt;span class="mi"&gt;504&lt;/span&gt; &lt;span class="s"&gt;/50X.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/50X.html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;以上的某些指令, 我先大概介绍下, 后续会有文章做详细介绍.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;return 301 https://$host$request_uri;&lt;/code&gt;   HTTP的全部永久重定向到https对应的URL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/share/nginx/html&lt;/code&gt;  静态博客的存放位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl_session_timeout  1d;&lt;/code&gt;  ssl session 超时时间为1天&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl_session_tickets off;  #&lt;/code&gt;  ssl session ticket 机制, 部分版本有bug, 视情况开启.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl_prefer_server_ciphers on;&lt;/code&gt;  倾向于使用server端的ciphers&lt;/li&gt;
&lt;li&gt;HSTS功能:　添加个HTTP header, 告诉浏览器直接转到https, &lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;此功能有风险, 慎重选择.  (比如你的证书过期忘记续了, 那么用户想转到HTTP都没办法)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl_stapling on;&lt;/code&gt;  启用ssl OCSP stapling功能, 服务端主动查询OCSP结果, 提高TLS握手效率&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/nginx/default.d/*.conf;&lt;/code&gt;  我的博客&lt;code&gt;location&lt;/code&gt;配置&lt;br&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 小技巧:&lt;/p&gt;
&lt;p&gt;火狐浏览器背后的基金会, 开源了一个非常好用的工具: &lt;a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/"&gt;ssl-config-generator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这上边, 点一点就可以自动生成推荐的SSL配置了.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ssl-config-generator" src="./images/ssl-config-generator.png"&gt;&lt;/p&gt;
&lt;p&gt;提一点, 如上图所示, 第二列一定要根据你的客户浏览器或客户端的版本使用情况慎重选择. &lt;/p&gt;
&lt;p&gt;比如, 用户还在用Windows XP, IE6, Java 6, 那么只能选择Old.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来, 就是要重启nginx来生效了. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo nginx -t  &lt;span class="c1"&gt;# 测试配置, 没问题再重启&lt;/span&gt;
$ sudo systemctl reload nginx.service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启后, 测试发现 css js都没有生效. &lt;img align="absmiddle" alt="😱" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f631.png" title=":scream:" width="20px"&gt;&lt;img align="absmiddle" alt="😱" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f631.png" title=":scream:" width="20px"&gt;&lt;img align="absmiddle" alt="😱" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f631.png" title=":scream:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;因为之前nginx刚配置过缓存. 当时脑子没转过来, 没有第一时间意识到可能是浏览器缓存的问题. 就直接nginx stop 再start了下. 结果悲催的我的网站可用性就从100%跌到99.81%了.&lt;/p&gt;
&lt;p&gt;&lt;img alt="网站可用性" src="images/index.png"&gt;&lt;/p&gt;
&lt;p&gt;后来终于意识到可能是浏览器缓存的问题了, 清理了缓存后, 再启动, 终于页面显示正常, 图标也从"不安全"变成了小锁.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/ssl-ewhisper.png"&gt;&lt;/p&gt;
&lt;p&gt;测试访问http://www.ewhisper.cn, 也会被强制转到 https://www.ewhisper.cn. 完美!&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;/p&gt;
&lt;h2 id="ssl"&gt;我的SSL评级&lt;a class="headerlink" href="#ssl" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;再来介绍个好东西 - &lt;a href="https://www.ssllabs.com/ssltest/analyze.html"&gt;SSL Labs&lt;/a&gt;. 可以对你的网站进行SSL 安全评级. &lt;/p&gt;
&lt;p&gt;点击链接, 输入网站地址, 喝杯茶, 结果就出来了 - &lt;strong&gt;A+&lt;/strong&gt; 哈哈哈哈哈!!!!&lt;/p&gt;
&lt;p&gt;&lt;img alt="我的网站SSL评分" src="./images/ewhisper-ssl-report.png"&gt;&lt;/p&gt;
&lt;p&gt;最后附上我的&lt;a href="https://www.EWhisper.cn/assets/SSL_Server_Test_ www.ewhisper.cn.pdf"&gt;完整报告&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 19:26:20 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/nginx-conf-add-ssl-support.html</guid><category>nginx</category><category>ssl</category><category>拨测</category><category>可用性</category></item><item><title>Dynatrace AppMon 实战手册 - 29.某保险公司核心系统变慢问题分析</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-29-analysis-a-app-slowdown-problem.html</link><description>&lt;h2 id="dynatrace-20151106"&gt;dynaTrace最新案例分享-20151106应用性能下降问题&lt;a class="headerlink" href="#dynatrace-20151106" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这是一个展现&lt;strong&gt;dynaTrace强大功能&lt;/strong&gt;的典型案例！具体的故障及相关的分析如下。&lt;/p&gt;
&lt;h3 id="_1"&gt;具体故障分析流程&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;1. 先用&lt;strong&gt;事务流拓扑图&lt;/strong&gt;查看具体慢的点在哪，如下图：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以大体看出有2段为红色告警，一个是weblogic层面，一个是数据库层面。&lt;/p&gt;
&lt;p&gt;另外也观察到数据库响应时间过长，达到了8s之久。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="./images/Snipaste_2019-06-19_19-49-15.png"&gt;&lt;/p&gt;
&lt;p&gt;2. 分析第一个红色告警，主要是&lt;strong&gt;事务失败率过高&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/Snipaste_2019-06-19_19-50-04.png"&gt;&lt;/p&gt;
&lt;p&gt;3. 查看相关的报错，可以看到主要是&lt;strong&gt;数据库相关&lt;/strong&gt;异常报错。&lt;/p&gt;
&lt;p&gt;可以从日志中初步判断：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;连接池满&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DBA已经在杀SQL了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="./images/Snipaste_2019-06-19_19-50-34.png"&gt;&lt;/p&gt;
&lt;p&gt;4. 再查看第二个红色告警，可以看到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;数据库响应时间过长，为8s左右&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;连接池满&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="./images/Snipaste_2019-06-19_19-51-02.png"&gt;&lt;/p&gt;
&lt;p&gt;5. 查看数据库的相关情况，具体如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;池大小160，使用量100%&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tpl2a&lt;/strong&gt;平均获取时间12s。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="./images/Snipaste_2019-06-19_19-51-35.png"&gt;&lt;/p&gt;
&lt;p&gt;6. 找出相关的&lt;strong&gt;执行次数多、平均执行时间长&lt;/strong&gt;的sql语句。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/Snipaste_2019-06-19_19-51-55.png"&gt;&lt;/p&gt;
&lt;p&gt;7. 从对应sql直接转到相关请求，从下图可以看出事务来自客户端：&lt;strong&gt;10.94.21.23&lt;/strong&gt;。（这个是&lt;strong&gt;微信平台系统&lt;/strong&gt;的一个server地址）。联系微信后，知道对方在&lt;strong&gt;搞活动&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/Snipaste_2019-06-19_19-52-18.png"&gt;&lt;/p&gt;
&lt;p&gt;8. 最后也可以看一下这条web请求的相关信息：（吞吐量中&lt;strong&gt;绿色面积&lt;/strong&gt;是根据历史数据计算出来的正常吞吐量区间范围，可以看到因为做活动，&lt;strong&gt;吞吐量飙涨，远远大于历史基线&lt;/strong&gt;。而且可以看出活动高峰期是在8:00-9:00）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/Snipaste_2019-06-19_19-52-38.png"&gt;&lt;/p&gt;
&lt;p&gt;9. 再看一下&lt;strong&gt;最慢响应时间的基线&lt;/strong&gt;，如下图：&lt;strong&gt;基线时间准确到2669ms，但是活动高峰期响应时间高出了近50s！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/Snipaste_2019-06-19_19-52-57.png"&gt;&lt;/p&gt;
&lt;h3 id="_2"&gt;总结&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这是一个典型的由于其他系统调用而导致核心系统出问题的案例，在这个案例中dynaTrace的强大功能展现的淋漓尽致。&lt;br&gt;
从dynaTrace给出的信息我们可以看出以下几个问题：&lt;br&gt;
- 很明显微信项目组对活动的准备不足；&lt;br&gt;
- 各个系统之间的相互调用拓扑关系是非常重要的。（这次dynaTrace的agent只安装在核心的一台机器上，但是仍然可以发现微信的调用；如果微信系统有安装，那么我猜测直接从拓扑图就能一眼看出问题根源）&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 19:15:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/dynatrace-appmon-handbook-29-analysis-a-app-slowdown-problem.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 28.Dynatrace 6.5升级和迁移向导</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-28-update-migrate-guide.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;前言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;1.准备迁移（见第一章）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;2.安装新组件并迁移数据（见第二章）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3agents"&gt;3.如果需要，则升级Agents（见第三章）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;4.最终检查和验证（见第四章）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#1_1"&gt;1 准备升级&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;步骤一&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;步骤二&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;步骤三&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;步骤四&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;步骤五&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;步骤六&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;步骤七&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;步骤八&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;步骤九&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;步骤十&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;步骤十一&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_13"&gt;步骤十二&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_14"&gt;步骤十三&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_15"&gt;步骤十四&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_16"&gt;步骤十五&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_17"&gt;步骤十六&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#11-agent"&gt;1.1 Agent兼容矩阵&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-servercollectors"&gt;2 升级Server，Collectors，客户端&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#21-servercollectors"&gt;2.1 安装新的Server，Collectors和客户端&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#22"&gt;2.2 关闭老版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#23"&gt;2.3 创建备份&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#24-servercollector"&gt;2.4 服务迁移（Server，Collector和内存分析服务器）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#25"&gt;2.5 自动启动新服务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#26"&gt;2.6 客户端迁移&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#27-server"&gt;2.7 启动新的Server组件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#28"&gt;2.8 启动新的客户端&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#29-serverlicenses"&gt;2.9 激活新的Server的licenses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#210-server-sizing"&gt;2.10 选择Server Sizing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#211-dynatrace"&gt;2.11 升级新的Dynatrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#212"&gt;2.12 连接性能仓库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#213-session"&gt;2.13 配置Session存储&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#214-collectors"&gt;2.14 启动新的Collectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#215"&gt;2.15 手动文件迁移&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-agents"&gt;3 升级Agents&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#31-agents"&gt;3.1 升级Agents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#32-agents"&gt;3.2 重启Agents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#33-bootstrap-agents"&gt;3.3 升级Bootstrap Agents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#34-zos-agents"&gt;3.4 升级zOS Agents&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#4_1"&gt;4 最终检查&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#41"&gt;4.1 检查配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#42-dynatrace-server"&gt;4.2 确认新的Dynatrace Server的运行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#5"&gt;5 故障排除&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#51"&gt;5.1 常见问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#52-dynatrace"&gt;5.2 Dynatrace 支持&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;2017年2月22日&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_1"&gt;前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文档用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;升级现有的Dynatrace环境到6.5，或者&lt;/li&gt;
&lt;li&gt;迁移已存在的Dynatrace 6.5 Server 到另一台主机&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="1"&gt;1.准备迁移（见第一章）&lt;a class="headerlink" href="#1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;开始之前，检查当前已安装（Servers, Collectors, Agents)来判定当前使用的版本，以及是否有组件可以直接升级到新版本。另外，检查&lt;strong&gt;系统需求&lt;/strong&gt;来确定你正在使用受支持的硬件和平台。&lt;/p&gt;
&lt;h3 id="2"&gt;2.安装新组件并迁移数据（见第二章）&lt;a class="headerlink" href="#2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;安装新组件，&lt;strong&gt;使用最新&lt;/strong&gt;的&lt;a href="https://files.dynatrace.com/downloads/migrationtool/dynatrace-migration.jar"&gt;&lt;em&gt;dynatrace-migration Tool&lt;/em&gt;&lt;/a&gt;来转移当前数据和配置至新版本。当你从命令行运行该工具时请检查所显示的版本！&lt;/p&gt;
&lt;p&gt;你需要几步手工的操作和编辑来完成迁移。&lt;/p&gt;
&lt;h3 id="3agents"&gt;3.如果需要，则升级Agents（见第三章）&lt;a class="headerlink" href="#3agents" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;大多数Agents会自动升级到最新版本。在某些情况下，你可能需要手动升级Agents。&lt;/p&gt;
&lt;h3 id="4"&gt;4.最终检查和验证（见第四章）&lt;a class="headerlink" href="#4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;启动Dynatrace AppMon并且查看是否Agents在发送数据，PurePaths和仪表板正确地显示。&lt;/p&gt;
&lt;h2 id="1_1"&gt;1 准备升级&lt;a class="headerlink" href="#1_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;检查下列checklist来确保你已经做好迁移准备。&lt;/p&gt;
&lt;h3 id="_2"&gt;步骤一&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;检查已安装的Dynatrace的版本和安装类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于5.6之前版本，你&lt;strong&gt;必须&lt;/strong&gt;先迁移到6.2。具体见&lt;a href="https://community.dynatrace.com/community/display/DOCDT62/Upgrade+and+Migration+Guide"&gt;《6.2升级向导》&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;对于POC，需要&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/Installation+Overview"&gt;重新安装&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;对于独立软件供应商版本（PTC Windchill),请使用供应商提供的文档。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;步骤二&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;创建一个已安装的Collectors, Agents, Clients的详细清单，来审定升级的范围。&lt;/p&gt;
&lt;h3 id="_4"&gt;步骤三&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;验证&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/System+Requirements"&gt;&lt;strong&gt;系统需求&lt;/strong&gt;&lt;/a&gt;是否符合。一些要点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Servers&lt;strong&gt;只兼容&lt;/strong&gt;主版本相同，小版本相同或更小的Collectors。例如：一台6.1的Server可以和一台6.0的Collector正常工作，但是&lt;strong&gt;不兼容&lt;/strong&gt;5.6或6.2的Collector.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用&lt;strong&gt;64位客户端&lt;/strong&gt;而不是32位的。查看&lt;em&gt;客户端配置&lt;/em&gt;和&lt;em&gt;Webstart 客户端&lt;/em&gt;获取更多信息。&lt;/li&gt;
&lt;li&gt;迁移&lt;strong&gt;不支持&lt;/strong&gt;Server内置的Collector。&lt;strong&gt;升级之前&lt;/strong&gt;需要为当前版本安装一个stand-alone服务。特别是对于“开发团队版本”。&lt;/li&gt;
&lt;li&gt;内置性能仓库&lt;strong&gt;不支持&lt;/strong&gt;迁移。首先要切换到外置的，具体描述见&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/Performance+Warehouse+Administration"&gt;链接&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;如果启用LDAP认证，用户需要至少称为一个Dynatrace LDAP组的一员用以登陆。查看&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/User+Permissions+and+Authentication#UserPermissionsandAuthentication-LDAP"&gt;LDAP&lt;/a&gt;获取更多信息。&lt;/li&gt;
&lt;li&gt;如果你的Dynatrace和DC RUM整合，DC RUM必须&amp;gt;= 12.0.2.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;步骤四&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;对于清单上的每个Agent，检查&lt;em&gt;Agent和新的Servers和Collectors的兼容性&lt;/em&gt;（见1.1）。&lt;/p&gt;
&lt;p&gt;推荐升级所有Agents，可能需要新功能来正常工作以及获取支持，来确保已知问题已经被修复。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计划好利用已安排好的升级窗口来进行升级：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须能够重启Agent 组。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意项&lt;/strong&gt;：.NET和IIS Agent： 由于license的变动，所有.NET和IIS Agents在6.3之前的需要升级后重启只6.3或更高。&lt;/p&gt;
&lt;h3 id="_6"&gt;步骤五&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;注意项&lt;/strong&gt;：如果当前的Dynatrace server安装路径&lt;DT_HOME_OLD&gt;,存在一个&lt;em&gt;server/instances&lt;/em&gt;文件夹，并且你正在使用这些&lt;strong&gt;Server实例&lt;/strong&gt;：该功能，dtserver和dtfrontendserver的&lt;em&gt;- instance&lt;/em&gt;参数6.3版本已弃用。Collector实例仍然支持。&lt;/p&gt;
&lt;p&gt;使用&lt;a href="https://community.dynatrace.com/community/display/APMDOC/Migrating+Server+Instances+to+Separate+Installations"&gt;该向导&lt;/a&gt;，&lt;strong&gt;升级前&lt;/strong&gt;检查迁移Server 实例到独立安装的需求。&lt;/p&gt;
&lt;h3 id="_7"&gt;步骤六&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;注意项&lt;/strong&gt;：6.2主机监控发生重大更改。被监控的主机不在被映射到系统配置文件，而是在一个叫做&lt;strong&gt;基础结构&lt;/strong&gt;的部分进行全局管理。&lt;/p&gt;
&lt;p&gt;因为这些更改，迁移前被收集的历史主机监控数据和相关的系统配置文件在使用Dynatrace 6.2或以后版本将不再可以访问。&lt;/p&gt;
&lt;p&gt;要使历史主机监控数据迁移后仍可以访问，具体步骤参考&lt;a href="https://community.dynatrace.com/community/display/DTKB/After+Upgrade+to+6.2%2C+Host+Metrics+From+Times+Before+the+Upgrade+Are+No+Longer+Shown"&gt;&lt;em&gt;升级6.2后，来自升级前的主机度量无法显示&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_8"&gt;步骤七&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;检查Server sizing,如果从以下版本升级，请事先&lt;a href="https://support.dynatrace.com/"&gt;联系support&lt;/a&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5.6，并且&lt;em&gt;dtserver.ini&lt;/em&gt;中&lt;em&gt;-Xmx&lt;/em&gt;值大于14GB&lt;/li&gt;
&lt;li&gt;≥ 6.0，并且在&lt;em&gt;dtserver.ini&lt;/em&gt;或&lt;em&gt;dfrontendserver.ini&lt;/em&gt;, &lt;em&gt;memory&lt;/em&gt;的值不受支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_9"&gt;步骤八&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;要证明是否正在使用&lt;strong&gt;连续事务存储&lt;/strong&gt;。在客户端检查：&lt;strong&gt;设置-&amp;gt;Dynatrace Server-&amp;gt;存储&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="_10"&gt;步骤九&lt;a class="headerlink" href="#_10" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;要证明是否有安装额外插件：客户端：&lt;strong&gt;设置-&amp;gt;Dynatrace Server-&amp;gt;插件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;要证明自监控Profile里的所有的&lt;strong&gt;停机时间和事件规则&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_11"&gt;步骤十&lt;a class="headerlink" href="#_11" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;性能仓库数据库&lt;/strong&gt;和&lt;strong&gt;Session存储&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看当前配置：从客户端：&lt;strong&gt;设置-&amp;gt;Dynatrace Server&lt;/strong&gt;，选择左侧面板：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能仓库&lt;/strong&gt;所有细节包括密码，因为6.1版本密码存储改变过，你需要迁移后重新输入密码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;该向导工作的一部分，要准备好创建备份。&lt;/li&gt;
&lt;li&gt;检查&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/System+Requirements#SystemRequirements-pwh"&gt;系统需求&lt;/a&gt;，是否你的SQL DB server受支持：&lt;ul&gt;
&lt;li&gt;如果不支持，&lt;strong&gt;升级前&lt;/strong&gt;创建&lt;strong&gt;备份&lt;/strong&gt;并切换到受支持的DB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;确认配置&lt;strong&gt;性能仓库&lt;/strong&gt;的用户有权限创建和移除DBMS的表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_12"&gt;步骤十一&lt;a class="headerlink" href="#_12" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;会话存储&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果当前存储位置位于安装路径（默认的），并且你想保留sessions，为了简化session存储和未来的迁移，在迁移之前可以&lt;a href="https://community.dynatrace.com/community/display/DOCDT65/Move+Session+Storage+to+a+new+Disk+or+Directory"&gt;移动session存储&lt;/a&gt;到一个2者（老的和新的安装）都可以访问到的独立目录。&lt;/li&gt;
&lt;li&gt;确定当前配置：从客户端： &lt;strong&gt;Settings -&amp;gt; Dynatrace Server&lt;/strong&gt;，选择左面版的&lt;strong&gt;存储&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;创建备份作为升级的一部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_13"&gt;步骤十二&lt;a class="headerlink" href="#_13" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;确定下列服务的密码：Email、LDAP、Proxy、DC-RUM、Gomez、数据库。&lt;/p&gt;
&lt;h3 id="_14"&gt;步骤十三&lt;a class="headerlink" href="#_14" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在现有的&lt;strong&gt;Dynatrace Server&lt;/strong&gt;上停用license。可能需要升级现有的license。查看&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/License+Upgrade"&gt;license升级文档&lt;/a&gt;获取更多信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意！&lt;/p&gt;
&lt;p&gt;如果你使用z/OS Agents，（从6.3开始）不在需要额外的license（LMS - license管理系统）。取而代之的是你需要联系&lt;strong&gt;license 管理&lt;/strong&gt;去获得需要数量的CICS和IMS agents 和/或 Java Agents加到你的Server license上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_15"&gt;步骤十四&lt;a class="headerlink" href="#_15" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;迁移之前，需要下载软件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对应应用平台和操作系统的&lt;a href="https://downloads.dynatrace.com/downloads/download.aspx?p=DT"&gt;安装包&lt;/a&gt; (完整包 或 Server/Collector/Client/Memory Analysis Server 或只是Agent)&lt;/li&gt;
&lt;li&gt;最新版的&lt;strong&gt; dynatrace-migration Tool&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最新的升级包&lt;/strong&gt;，如果可用，可以在6.5&lt;a href="https://downloads.dynatrace.com/downloads/download.aspx?p=DT"&gt;下载列表&lt;/a&gt;的顶部找到。具体参考&lt;a href="https://community.dynatrace.com/community/display/DOCDT65/Install+an+Update"&gt;安装升级包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;如果Server无法联网，从&lt;a href="http://eservices.dynatrace.com/"&gt;eServices&lt;/a&gt;下载&lt;strong&gt;升级后的licenses&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_16"&gt;步骤十五&lt;a class="headerlink" href="#_16" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果正在使用自定义keys用于Dynatrace TLS通信（替换&lt;em&gt;keystore.jks&lt;/em&gt;)或WebUI（通过&lt;em&gt;com.dynatrace.diagnostics.web.ssl.&lt;/em&gt;* 参数），准备好私钥和相应的证书链以防这些需要被重新导入。参见&lt;a href="https://community.dynatrace.com/community/display/DOCDT65/Custom+Certificate+Requirements"&gt;自定义证书需求&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_17"&gt;步骤十六&lt;a class="headerlink" href="#_17" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;你可以并行运行不同版本的Dynatrace来测试升级情况，另外要了解&lt;strong&gt;并行运行配置需求&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下一步&lt;/strong&gt;：升级Server，Collectors，客户端（见第二章）。&lt;/p&gt;
&lt;h3 id="11-agent"&gt;1.1 Agent兼容矩阵&lt;a class="headerlink" href="#11-agent" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;升级Agents取决于他们的类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当应用重启时，&lt;strong&gt;Bootstrapped Agents&lt;/strong&gt;自动升级。&lt;/li&gt;
&lt;li&gt;使用了&lt;strong&gt;non-bootstrapped Agents&lt;/strong&gt;，需要手动升级。（安装到一个新的目录路径）当应用层被重启，Agent连接字符串必须被指定到新的路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要查看Agent的版本以及是否有引导程序，使用Dynatrace客户端的&lt;strong&gt;驾驶舱 -&amp;gt; Agent概述&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;尽管老版本Agents连接新版本Collectors是支持的。但是Agents应该尽早升级到Collector的版本 -- 通过安装新的Agents并且重启apps。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Agent/Collector 兼容性&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Collector（横）/Agent(竖)&lt;/th&gt;
&lt;th&gt;6.0&lt;/th&gt;
&lt;th&gt;6.1&lt;/th&gt;
&lt;th&gt;6.2&lt;/th&gt;
&lt;th&gt;6.3&lt;/th&gt;
&lt;th&gt;6.5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5.6&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.1&lt;/td&gt;
&lt;td&gt;n/a 1)&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.2&lt;/td&gt;
&lt;td&gt;n/a 1)&lt;/td&gt;
&lt;td&gt;n/a 1)&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.3&lt;/td&gt;
&lt;td&gt;n/a 1)&lt;/td&gt;
&lt;td&gt;n/a 1)&lt;/td&gt;
&lt;td&gt;n/a 1)&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.5&lt;/td&gt;
&lt;td&gt;n/a 1)&lt;/td&gt;
&lt;td&gt;n/a 1)&lt;/td&gt;
&lt;td&gt;n/a 1)&lt;/td&gt;
&lt;td&gt;n/a 1)&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;1) 在非引导程序Agents之前升级Server和Collectors。&lt;/p&gt;
&lt;h2 id="2-servercollectors"&gt;2 升级Server，Collectors，客户端&lt;a class="headerlink" href="#2-servercollectors" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果你需要迁移Server到新主机而不是升级到新版本，你只需要执行适当的步骤，例如，不需要停止和安装新的Collectors。&lt;/p&gt;
&lt;h3 id="21-servercollectors"&gt;2.1 安装新的Server，Collectors和客户端&lt;a class="headerlink" href="#21-servercollectors" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在所有相关机器上安装新的Dynatrace Server和Dynatrace Collectors和客户端。&lt;/li&gt;
&lt;li&gt;应该被安装到&lt;strong&gt;新的目录&lt;/strong&gt;，在该向导中被引用做&lt;DT_HOME_NEW&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;：使用完整安装包&lt;strong&gt;自定义&lt;/strong&gt;选项或者使用Server, Collector, Client独立安装包。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;重要&lt;/strong&gt;：Windows：在安装完成后，推荐手动启动Server, Collector和客户端。&lt;strong&gt;不要在安装时启动这些组件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/*NIX"&gt;*NIX&lt;/a&gt;：&lt;strong&gt;不要&lt;/strong&gt;解压&lt;em&gt;.jar&lt;/em&gt;。而是运行&lt;br&gt;
&lt;code&gt;java -jar &amp;lt;pathToInstallerJar&amp;gt;/dynatrace-6.5.0.&amp;lt;build&amp;gt;-linux-&amp;lt;bit&amp;gt;.jar&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自动化安装参见&lt;strong&gt;无人值守（静默）安装&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id="22"&gt;2.2 关闭老版本&lt;a class="headerlink" href="#22" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;关闭老版本客户端，停掉老版本Server，Frontend Server，Collector和内存分析服务器服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：关于如何启动和停止Dynatrace 服务可以在&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/How+to+Start+and+Stop+dynaTrace+Services+or+Daemons"&gt;这儿&lt;/a&gt;找到。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start="2"&gt;
&lt;li&gt;取消老版本Server，Frontend Server，Collector和内存分析服务器的自启动:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: &lt;strong&gt;控制面板-&amp;gt;管理员工具-&amp;gt;服务&lt;/strong&gt;。在每个服务属性里，设置&lt;strong&gt;启动类型&lt;/strong&gt;为&lt;strong&gt;手动&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;NIX&lt;/strong&gt;: 使用&lt;/em&gt;chkconfig&lt;em&gt; 或者&lt;/em&gt;update - rc.d *来禁用所有Dynatrace服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="23"&gt;2.3 创建备份&lt;a class="headerlink" href="#23" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;准备期间进行配置信息收集：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;备份&lt;strong&gt;性能仓库DB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;备份&lt;strong&gt;Session存储&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在&lt;em&gt;&lt;strong&gt;NIX&lt;/strong&gt;，备份在&lt;/em&gt;/etc/init.d*下的所有Dynatrace脚本。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;DT_HOME&lt;/em&gt;的文件在下一步进行备份。&lt;/p&gt;
&lt;h3 id="24-servercollector"&gt;2.4 服务迁移（Server，Collector和内存分析服务器）&lt;a class="headerlink" href="#24-servercollector" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;下载并在所有Server和Collector机器上使用最新&lt;a href="https://files.dynatrace.com/downloads/migrationtool/dynatrace-migration.jar"&gt;dynatrace-migration tool&lt;/a&gt;。对于迁移的更多选项参见&lt;a href="https://community.dynatrace.com/community/display/APMDOC/Migration+Tool+Details"&gt;dynatrace-migration Tool 细节&lt;/a&gt;或者运行&lt;code&gt;java -jar dynatrace-migration.jar&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;2.4.1 文件收集&lt;/h4&gt;
&lt;p&gt;使用&lt;em&gt;dynatrace-migration&lt;/em&gt;创建迁移存档：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;文件收集&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shell
java -jar dynatrace-migration.jar -migration -sourceDTHome "&amp;lt;DT_HOME_OLD&amp;gt;" -targetArchiveDir "&amp;lt;ARCHIVE_DIR&amp;gt;"&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;DT_HOME_OLD&gt;&lt;/strong&gt;是老版本Dynatrace安装路径。名为&lt;Server_name&gt;_&lt;creation_dateTime&gt;.dtma的&lt;MIGRATION_ARCHIVE&gt;文件将会在&lt;ARCHIVE_DIR&gt;中被创建。&lt;/p&gt;
&lt;p&gt;保留该生成文件作为永久备份。&lt;/p&gt;
&lt;h4&gt;2.4.2 文件迁移&lt;/h4&gt;
&lt;p&gt;在目标主机， 要迁移所有Server和Collector实例&lt;DT_HOME_NEW&gt;，使用如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推荐迁移方式&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java -jar dynatrace-migration.jar -migration -sourceArchive &lt;span class="s2"&gt;&amp;quot;&amp;lt;ARCHIVE_DIR&amp;gt;/&amp;lt;MIGRATION_ARCHIVE&amp;gt;&amp;quot;&lt;/span&gt; -targetDTHome &lt;span class="s2"&gt;&amp;quot;&amp;lt;DT_HOME_NEW&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;备份（文件转移到&lt;DT_HOME_NEW&gt;）,迁移日志会在&lt;em&gt;&lt;DT_HOME_NEW&gt;/migration/backup/&lt;/em&gt; 创建一个新目录。&lt;/p&gt;
&lt;p&gt;若果你在这些步骤遇到问题，可以获取支持或者考虑&lt;a href="https://community.dynatrace.com/community/display/DOCDT62/Manual+File+Migration"&gt;手动文件迁移&lt;/a&gt;。&lt;/p&gt;
&lt;h4&gt;2.4.3 编辑配置文件&lt;/h4&gt;
&lt;p&gt;最后， dynatrace-migration 会列出可能需要手动迁移到新版本的文件（如配置设置文件）。因此，相关的老版本文件被复制并加上后缀&lt;em&gt;.toBeMigrated&lt;/em&gt; 。这些文件位于&lt;DT_HOME_NEW&gt;。&lt;strong&gt;不要复用&lt;/strong&gt;这些老版本文件，因为6.3修改过boot bundles，将导致Server无法启动。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以下是示例输出：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;There are some files left, which have to be migrated manually:
In C:\Program Files\dynaTrace\dynaTrace 6.5 :
 \dtanalysisserver.ini -&amp;gt; edit and integrate custom settings from old \dtanalysisserver.ini.toBeMigrated
 \dtcollector.ini -&amp;gt; edit and integrate custom settings from old \dtcollector.ini.toBeMigrated
 \dtfrontendserver.ini -&amp;gt; edit and integrate custom settings from old \dtfrontendserver.ini.toBeMigrated
 \dtserver.ini -&amp;gt; edit and integrate custom settings from old \dtserver.ini.toBeMigrated
 \server\selfmonitoring\dtselfmon.ini -&amp;gt; edit and integrate custom settings from old
\server\selfmonitoring\dtselfmon.ini.toBeMigrated
Do NOT re-use the old files, this may cause components not to start!
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;em&gt;dtserver.ini&lt;/em&gt; ：如果你正在升级，且使用连续事务存储，如果显式指定&lt;code&gt;-Dcom.dynatrace.diagnostics.memory.maxPurePathBufferSize=&amp;lt;x&amp;gt;&lt;/code&gt;,则&lt;strong&gt;不要&lt;/strong&gt;迁移该参数。&lt;/li&gt;
&lt;li&gt;如果从 ＜ 6.1 升级，并且&lt;em&gt;dtserver.ini.toBeMigrated&lt;/em&gt; 包含&lt;em&gt;-Dcom.dynatrace.diagnostics.SQLSERVERUSENTLMV2&lt;/em&gt;，参考&lt;a href="https://community.dynatrace.com/community/display/DTKB/How+to+connect+the+Performance+Warehouse+to+a+MS+SQL+Server+via+Windows+Authentication"&gt;该文章&lt;/a&gt;,迁移该条目并且也需要新增2个条目到&lt;em&gt;dtfrontendserver.ini&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;迁移所有的-Xmx, -Xms, -XX:PermSize, 和 -XX:MaxPermSize条目。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;​&lt;img align="absmiddle" alt="⚠" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/26a0.png" title=":warning:" width="20px"&gt; &lt;strong&gt;自定义证书：&lt;/strong&gt; 如果ini文件包含&lt;em&gt;-Dcom.dynatrace.diagnostics.web.ssl.keystore&lt;/em&gt;,则一个自定义web认证&lt;a href="https://community.dynatrace.com/community/display/DOCDT62/Configure+SSL+Communication"&gt;被配置&lt;/a&gt;。不要带上该条目，而是在升级结束后使用新的&lt;a href="https://community.dynatrace.com/community/display/DOCDT65/Certificate+Management"&gt;证书管理&lt;/a&gt;来roll out之前的证书。&lt;/p&gt;
&lt;p&gt;如果修改&lt;em&gt;&lt;DT_HOME_OLD&gt;/server/conf/keystore.jks&lt;/em&gt;，使用一个自定义证书用于通信，该证书将会被自动迁移。&lt;/p&gt;
&lt;p&gt;如果两者都做过配置，推荐升级后使用&lt;a href="https://community.dynatrace.com/community/display/DOCDT65/Certificate+Management"&gt;证书管理&lt;/a&gt;来切换到一个单一证书。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多信息参见&lt;strong&gt;Server配置&lt;/strong&gt;和&lt;strong&gt;Collector配置&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;2.4.4 注册并自动启动额外的Collector 实例&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;关于多实例的信息扩展。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你在老版本是使用Collector多实例：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;: 对于每个Collector实例，在老版本中使用相同的&lt;code&gt;&amp;lt;CollectorInstanceName&amp;gt;&lt;/code&gt;,在目录&lt;DT_HOME_NEW&gt;中，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dtcollector -service install -instance &amp;lt;CollectorInstanceName&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;*NIX&lt;/strong&gt; ：在&lt;code&gt;/etc/init.d&lt;/code&gt;中，对于每个Collector示例，会有一个老的启动脚本叫做&lt;code&gt;dynaTraceCollector&amp;lt;NN&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;NN&amp;gt;&lt;/code&gt;是数字。对于每个该文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;记下变量&lt;em&gt;DT_OPTARGS&lt;/em&gt;和&lt;em&gt;DT_INSTANCE&lt;/em&gt;的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用新版本替换：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp &amp;lt;DT_HOME_NEW&amp;gt;/init.d/dynaTraceCollector /etc
/init.d/dynaTraceCollector&amp;lt;NN&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;编辑&lt;code&gt;/etc/init.d/dynaTraceCollector&amp;lt;NN&amp;gt;&lt;/code&gt;并填写&lt;code&gt;DT_OPTARGS&lt;/code&gt;和&lt;code&gt;DT_INSTANCE&lt;/code&gt;的记录值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="25"&gt;2.5 自动启动新服务&lt;a class="headerlink" href="#25" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;仅限*NIX&lt;/strong&gt;：使用&lt;em&gt;chkconfig&lt;/em&gt;或&lt;em&gt;update-rc.d&lt;/em&gt;，确保新的Server，Collectors，内存分析服务器，和Frontend Server使用&lt;em&gt;/etc/init.d&lt;/em&gt;脚本自动启动，并且权限是正确的。&lt;/p&gt;
&lt;h3 id="26"&gt;2.6 客户端迁移&lt;a class="headerlink" href="#26" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果你在Dynatrace 客户端里有特殊设置，像是代理设置，比较&lt;DT_HOME_OLD&gt;和&lt;DT_HOME_NEW&gt;中的&lt;em&gt;dtclient.ini&lt;/em&gt;,以及：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;:&lt;code&gt;C:\Users\&amp;lt;username&amp;gt;\.dynaTrace\dynaTrace 6.5\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*NIX&lt;/strong&gt;:  &lt;code&gt;~/.dynaTrace/dynaTrace 6.5/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;适用的属性仍然要延续。&lt;/p&gt;
&lt;h3 id="27-server"&gt;2.7 启动新的Server组件&lt;a class="headerlink" href="#27-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果你配置过&lt;em&gt;DT_HOME&lt;/em&gt;变量，把它升级到&lt;DT_HOME_NEW&gt;,并且之后启动Dynatrace Server和&lt;strong&gt;Frontend Server&lt;/strong&gt;（6.0版本引入）。&lt;/p&gt;
&lt;h3 id="28"&gt;2.8 启动新的客户端&lt;a class="headerlink" href="#28" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在&lt;DT_HOME_NEW&gt;里启动&lt;em&gt;dtclient&lt;/em&gt;或者使用&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/Webstart+Client"&gt;Webstart Client&lt;/a&gt;: &lt;code&gt;http://&amp;lt;servername&amp;gt;:8020&lt;/code&gt;。在&lt;strong&gt;设置-&amp;gt;Dynatrace Server-&amp;gt;连接状态&lt;/strong&gt;面板配置，确保连接到正确的Dynatrace Server（hostname）。&lt;/p&gt;
&lt;h3 id="29-serverlicenses"&gt;2.9 激活新的Server的licenses&lt;a class="headerlink" href="#29-serverlicenses" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如过你需要代理服务器来访问互联网，手动配置&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/Licensing+Details#LicensingDetails-proxysettings"&gt;代理服务器设置来访问eServices的在线liensing站点&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="210-server-sizing"&gt;2.10 选择Server Sizing&lt;a class="headerlink" href="#210-server-sizing" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;license导入后，会显示选择不同的sizing选项（参见&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/Sizing+Settings"&gt;Sizing设置&lt;/a&gt;获取更多信息。）选择在准备阶段验证过的Sizing。&lt;strong&gt;在启动新的Collectors之前&lt;/strong&gt;执行这一步骤很重要，可以避免内存溢出问题。&lt;/p&gt;
&lt;h3 id="211-dynatrace"&gt;2.11 升级新的Dynatrace&lt;a class="headerlink" href="#211-dynatrace" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;检查&lt;a href="https://downloads.dynatrace.com/downloads/download.aspx?p=DT"&gt;下载页面&lt;/a&gt;是否有Dynatrace 6.5的升级包，使用客户端&lt;a href="https://community.dynatrace.com/community/display/DOCDT65/Install+an+Update"&gt;安装升级包&lt;/a&gt;，然后按照说明做。升级包安装好后会重启和升级Collectors和Agents。&lt;/p&gt;
&lt;h3 id="212"&gt;2.12 连接性能仓库&lt;a class="headerlink" href="#212" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在&lt;strong&gt;设置-&amp;gt;Dynatrace Server-&amp;gt;性能仓库&lt;/strong&gt;，验证连接细节并且输入数据库授权信息来连接到老的数据库。&lt;/p&gt;
&lt;p&gt;点击&lt;strong&gt;测试&lt;/strong&gt;,如果DB连接状态正常，点击&lt;strong&gt;连接&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Server会自动升级schema和数据到最新版本。这可能会花费大概5分钟。&lt;/p&gt;
&lt;h3 id="213-session"&gt;2.13 配置Session存储&lt;a class="headerlink" href="#213-session" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果你想迁移已存储的sessions，在&lt;strong&gt;设置-&amp;gt;Dynatrace Server-&amp;gt;存储&lt;/strong&gt;修改目录到你的session存储数据。&lt;/p&gt;
&lt;h3 id="214-collectors"&gt;2.14 启动新的Collectors&lt;a class="headerlink" href="#214-collectors" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;启动新的Collectors，然后在&lt;strong&gt;设置-&amp;gt;Dynatrace Server-&amp;gt;Collectors&lt;/strong&gt;面板确保所有的Collectors已连接到新的Server。如果你应用过升级（到新的Server），你应该在当前的对话框中立刻重启Collectors，确保应用升级。&lt;/p&gt;
&lt;p&gt;Dynatrace Server和Collector现在将接收Agent的连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下一步&lt;/strong&gt;：升级Agents（见第三章）。&lt;/p&gt;
&lt;h3 id="215"&gt;2.15 手动文件迁移&lt;a class="headerlink" href="#215" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;不推荐手动迁移文件。如果使用迁移工具出现问题，请开ticket。&lt;/p&gt;
&lt;h2 id="3-agents"&gt;3 升级Agents&lt;a class="headerlink" href="#3-agents" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="31-agents"&gt;3.1 升级Agents&lt;a class="headerlink" href="#31-agents" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;那么推荐升级Agents到最新而且将需要接收升级包。&lt;/p&gt;
&lt;h4&gt;3.1.1 Bootstrapped Agents(Java, .NET, HOST, Native ADK, Web Server, PHP, CICS, and IMS)&lt;/h4&gt;
&lt;p&gt;Bootstrapped Agents重启时自动升级。到那时，老的Agents会尝试连接运行中的 Collector/Server。参见在兼容性矩阵中关于重启考量的详细描述（见1.1）。&lt;/p&gt;
&lt;p&gt;如果你从＜6.0升级，并且想使用&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/Updates"&gt;Controlled Update Rollout&lt;/a&gt;,那么你必须重新安装Agents到&lt;strong&gt;升级它们的bootstrap组件&lt;/strong&gt;（见3.3）。&lt;/p&gt;
&lt;p&gt;如果你有 与你在升级的同一台主机上的bootstrapped Agents，它们将升级，但是会&lt;strong&gt;继续使用&lt;DT_HOME_OLD&gt;&lt;/strong&gt;目录来恢复它们的配置。因此，需要手动迁移它们的配置文件到&lt;DT_HOME_NEW&gt;(新版本安装目录)或为了相关配置继续使用&lt;DT_HOME_OLD&gt;。查看特殊Agent 配置获取更多细节（见3.1.1下文）。&lt;/p&gt;
&lt;h5&gt;Bootstrapped Web Server Agents&lt;/h5&gt;
&lt;p&gt;使用正确顺序来重启Web Server Agent 服务和Web Server Agent是必要的。第一次重启Web Server Agent 服务并且等待直至重新连接。然后重启Web Server Agent。这个步骤是必须的以确保两个Agents都升级到正确的版本。对于老版本的，Apache Web Server自动启动Web Server Agent服务的Unix安装，Apache Web Server可能需要二次重启。&lt;/p&gt;
&lt;p&gt;如果你想从客户端重启Webserver Agent 服务，那么你必须升级bootstrap(见3.3)。&lt;/p&gt;
&lt;h5&gt;NGINX Web Server Agent&lt;/h5&gt;
&lt;p&gt;6.2中，JSON偏移量文件包括比6.1更多的数据。如果NGINX binary包含debug标志，重命名JSON文件就好，Agent启动时它将被自动再次生成。然而，如果stripped NGINX binary被使用，偏移量文件需要在NGINX Agent重启前被手动再次生成，否则升级后的Agent将无法启动。&lt;/p&gt;
&lt;p&gt;使用下列命令行重命名偏移量(offset)文件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;AGENT_HOME&amp;gt;/agent/conf/ngx_offset_gen.sh &amp;lt;nginx binary&amp;gt; &amp;lt;nginx debug symbols file&amp;gt; &amp;lt;JSON offset file&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;3.1.2 Non-bootstrapped Agents需要手动升级（浏览器和移动APP ADK）&lt;/h4&gt;
&lt;p&gt;在&lt;a href="https://downloads.compuwareapm.com/downloads/download.aspx?p=DT"&gt;这儿&lt;/a&gt;找到新的浏览器Agent安装包和新的ADK版本。&lt;/p&gt;
&lt;p&gt;瞎子啊并应用新的Agent-only安装包升级到最新的浏览器Agent。&lt;/p&gt;
&lt;p&gt;在移动APP开发环境，切换到新的ADK并部署新版本升级。&lt;/p&gt;
&lt;h4&gt;3.1.3 z/OS Agents&lt;/h4&gt;
&lt;p&gt;它们可以被 bootstrapped 或 non-bootstrapped。参见&lt;strong&gt;升级zOS Agents&lt;/strong&gt;（见3.4）。&lt;/p&gt;
&lt;h3 id="32-agents"&gt;3.2 重启Agents&lt;a class="headerlink" href="#32-agents" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;除非你已经升级并手动重启Agents，否则请&lt;strong&gt;对你所有相关的应用现在执行重启&lt;/strong&gt;来升级Agents。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下一步&lt;/strong&gt;：最终检查（见第四章）&lt;/p&gt;
&lt;h3 id="33-bootstrap-agents"&gt;3.3 升级Bootstrap Agents&lt;a class="headerlink" href="#33-bootstrap-agents" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dynatrace是6.5版本不支持bootstrap agents &amp;lt; 6.0 。 使用该向导升级6.0之前的 bootstrap agents到最新版本。&lt;/p&gt;
&lt;h4&gt;3.3.1 准备&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;从&lt;a href="https://downloads.dynatrace.com/downloads/download.aspx?p=DT"&gt;downloads.dynatrace.com&lt;/a&gt;下载对应平台的新的agent安装包。&lt;/li&gt;
&lt;li&gt;备份当前agent的配置文件目录&lt;/li&gt;
&lt;li&gt;在你的目标平台上部署和安装agent靠近当前正在使用的agents安装。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;3.3.2 Bootstrap agent升级过程&lt;/h4&gt;
&lt;h5&gt;Host Agent&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;停掉所有老版本的host agent&lt;/li&gt;
&lt;li&gt;将&lt;em&gt;/conf/dthostagent.ini&lt;/em&gt;（主要是名称和对应server）从老目录迁移到新目录。&lt;/li&gt;
&lt;li&gt;启动新的host agent。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;Webserver Agent&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;停掉老版本的web server agent&lt;/li&gt;
&lt;li&gt;将&lt;em&gt;conf/dtwsagent.ini&lt;/em&gt;从老目录迁移到新安装目录。&lt;/li&gt;
&lt;li&gt;启动新的web server agent&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;Java Agent&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;重新在应用配置里配置agent路径（如从-agentpath:/opt/dynatrace-5.6.0/agent/lib64/libdtagent.&lt;br&gt;
   so=name=Application_Monitoring  到  -agentpath:/opt/dynatrace-6.2/agent/lib64&lt;br&gt;
   /libdtagent.so=name=Application_Monitoring）。:light:你也可以安装和配置一个与版本无关的agent路径（如/opt/dynatrace-agent/)，并移除老版本，安装新版本到同一目录。&lt;/li&gt;
&lt;li&gt;重启应用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;.NET Agent&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;安装好新agents后重启应用&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;zOS zLocal/zRemote agent&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;升级zLocal/zRemote agents将自动升级bootstrap agents。请参考说明（见3.4）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;3.3.3 卸载过时agents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Linux：简单删除过时agents的安装目录&lt;/li&gt;
&lt;li&gt;Windows：使用添加/删除应用卸载过时agents。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="34-zos-agents"&gt;3.4 升级zOS Agents&lt;a class="headerlink" href="#34-zos-agents" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;3.4.1 前提条件&lt;/h4&gt;
&lt;h5&gt;升级Dynatrace Servers，Collectors，Agents和性能仓库&lt;/h5&gt;
&lt;p&gt;在启动z/OS Agents的任何迁移操作之前，先阅读通用&lt;strong&gt;升级&lt;/strong&gt;（见前言）到6.5向导并创建一份详细的Dynatrace Servers，Collectors，其他Agents，性能仓库和其他组件的升级计划。为了减少维护开票，协调应用程序重启来配合这些升级。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​&lt;img align="absmiddle" alt="⚠" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/26a0.png" title=":warning:" width="20px"&gt; &lt;strong&gt;重要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dynatrace 6.2版本， z/OS Agent不先通过zRemote Agent则无法直接连接到Dynatrace Collector。使用zRemote Agent是为了减少z/OS上的CPU开销。如果你现在的6.2之前的z/OS Agent部署忽略了zRemote Agent，作为升级的一部分你需要安装它。更多信息参见&lt;strong&gt;zRemote Agent&lt;/strong&gt;(见下文)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;License&lt;/h5&gt;
&lt;p&gt;你需要Dynatrace Server和z/OS Agents的有效licenses。参考&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/License+Upgrade"&gt;license 升级&lt;/a&gt;获取更多信息。z/OS Agent的license是基于MIPS的。参见&lt;strong&gt;准备升级&lt;/strong&gt;（见第一章）和&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/License+Upgrade"&gt;license 升级&lt;/a&gt;获取更多信息。&lt;/p&gt;
&lt;p&gt;对于任何Dynatrace 版本（预生产/测试中心或生产），z/OS license是有效的。如果硬件（“fingerprint”）发生改变（例如，加了一个CPU），license会失效，并且必须在14天内更新。&lt;/p&gt;
&lt;h4&gt;3.4.2 升级步骤&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如升级描述（见前言）将Dynatrace Server和Collector优先升级到6.5，以此来升级主框架组件。新的zOS Agents一般无法与老的Dynatrace Collectors或Servers兼容，反而是新的Dynatrace Collectors或Servers通常可以和老的zOS Agents一起工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按照标准Agent 安装步骤。这包括：运行JCL来下载agent 分发文件，运行SMP/E来为新版本填入目标数据集。更多信息，参考&lt;strong&gt;下载并SMP/E 安装z/OS Agent组件&lt;/strong&gt;（见下文）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二步之后，你可以选择下文的1或2的其中一个来做：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;停掉当前zDC，并升级zDC认证库到6.5版。重启z/DC之前，你应该确保zDC参数&lt;em&gt;DTMSG_SMOSIZE&lt;/em&gt;已经去掉注释，而且参数&lt;em&gt;DTMSG_QSIZE&lt;/em&gt;已经被删除。这些参数控制无论信息已经队列进入zDC数据空间还是zDC 64位共享内存对象（SMO）挂起他们的写入，到Dynatrace Agent。       5.6版本，数据空间已经被弃用。如果你在5.6版本中自定义了ZDCSYSIN 样例，你可以跳过该步骤因为该样例已经包含了该变更。zDC启动后，CICS和IMS agents 应该在5分钟内注册。 &lt;strong&gt;- OR -&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;为zDC和zLocal（原名USS）Agent创建并行6.5环境。按照&lt;strong&gt;安装zDC&lt;/strong&gt;（见上文）的指引。在并行6.5环境，当你迁移独立的CICS区域和IMS控制区域到新的zDC时,你可以继续运行老的z/DC，或者你可以优先测试几个区域来升级默认的zDC。如果多个zDC在运行，指定为DEFAULT（YES）的那个将被选中除非在CICS或IMS系统初始化字段指定了一个INITPARM参数，那样的话它必须使用一个独有名称：INITPARM=(ZDTPLT6x='xxxx')连接到zDC。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;​ &lt;img align="absmiddle" alt="⚠" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/26a0.png" title=":warning:" width="20px"&gt; &lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有DEFAULT（YES）选项，每个LPAR只有一个zDC。&lt;/li&gt;
&lt;li&gt;每个zDC的SUBSYSTEM_ID必须独一无二。&lt;/li&gt;
&lt;li&gt;zDC STEPLIB使用的库必须被授权。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start="4"&gt;
&lt;li&gt;
&lt;p&gt;当bootstrap Agent 第一次连接到升级后的Dynatrace Collector/Server，会自动升级zLocal Agent。如果使用z/OS UNIX Agent的 non-bootstrap 版本，你必须运行 COPYAGNT来复制新版本到z/OS UNIX文件系统的相应执行位置。参考位于&lt;strong&gt;安装zDC&lt;/strong&gt;中的COPYAGNT步骤（见上文）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为Dynatrace新版本zDC兼容老的CICS和IMS agents，你不需要立刻升级所有的CICS区域和IMS控制区域。然而，如果你监控跨CICS区域或IMS控制区域的事务，这些相关区域应该agent版本相同，否则会有未完成的PurePath。因此，CICS区域和IMS控制区域的升级应该考虑应用组群来做。尽早计划升级所有的CICS区域和IMS控制区域，以此来使用最新Dynatrace版本的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要升级CICS区域，使用新的PDS（或它的内容）来替换老的PDS（或它的内容）DFHRPL concatenation。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;// DD DISP=SHR,DSN=&amp;lt;hlq&amp;gt;.LZDT6 30.SZDTLOAD&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要升级IMS控制区域，在JCL，执行IMS Agent注入程序，ZDTIINST，使用新的PDS（或它的内容）来替换STEPLIB PDS（或它的内容）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;// DD DISP=SHR,DSN=&amp;lt;hlq&amp;gt;.LZDT6 30.SZDTAUTH&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;​&lt;img align="absmiddle" alt="⚠" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/26a0.png" title=":warning:" width="20px"&gt; &lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STEPLIB使用的库必须被授权。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于Dynatrace组件兼容性列表，请参考&lt;a href="https://community.compuwareapm.com/community/display/DOCDT56/zOS+Agent+Troubleshooting#zOSAgentTroubleshooting-MigrationTroubleshooting"&gt;迁移故障排除&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="4_1"&gt;4 最终检查&lt;a class="headerlink" href="#4_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="41"&gt;4.1 检查配置&lt;a class="headerlink" href="#41" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;4.1.1 应用自定义配置，不要被自动化的覆盖&lt;/h4&gt;
&lt;h5&gt;事件规则和停机时间&lt;/h5&gt;
&lt;p&gt;你需要重新定义Self-Monitoring系统配置文件的所有&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/Incidents+and+Alerting"&gt;停机时间&lt;/a&gt;和&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/Incidents+and+Alerting"&gt;事件规则&lt;/a&gt;。&lt;/p&gt;
&lt;h5&gt;在自带项：传感器包 中重新应用修改项&lt;/h5&gt;
&lt;p&gt;dynatrace-migration不会迁移随着产品安装和分发的项，像是内置传感器包。因为这些在不同版本可能有改动，你不应该简单导出和导入它们，而是应该重新配置编辑。&lt;/p&gt;
&lt;h5&gt;检查用户插件&lt;/h5&gt;
&lt;p&gt;在Dynatrace 客户端：&lt;strong&gt;设置-&amp;gt;Dynatrace Server&lt;/strong&gt;，检查是否所有的插件被迁移，是否需要重新安装。&lt;/p&gt;
&lt;h5&gt;重新导入LDAP认证&lt;/h5&gt;
&lt;p&gt;如果额外认证（如为LDAP创建的CA或自签名证书）被导入到Dynatrace的keystore：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;server/conf/jssecacerts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重新导入证书到新的keystore。不要复制老的keystores，以此来避免通过潜在的被盗用的公有证书的安全漏洞。&lt;/p&gt;
&lt;p&gt;在LDAP证书的案例中，你可以通过使用Dynatrace本地用户登陆并点击Dynatrace客户端：&lt;strong&gt;设置-&amp;gt;Dynatrace Server-&amp;gt;用户-&amp;gt;LDAP-&amp;gt;测试连接&lt;/strong&gt;来重新导入之前的证书。&lt;/p&gt;
&lt;h3 id="42-dynatrace-server"&gt;4.2 确认新的Dynatrace Server的运行&lt;a class="headerlink" href="#42-dynatrace-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;为确保新的Server正常运转，验证下列内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;驾驶舱-&amp;gt;状态概述-&amp;gt;agent概述&lt;/strong&gt;中显示了所有的Agents：&lt;ul&gt;
&lt;li&gt;已连接&lt;/li&gt;
&lt;li&gt;有数据到达：水平滚动来验证&lt;strong&gt;事件计数&lt;/strong&gt; 或 &lt;strong&gt;类加载计数&lt;/strong&gt; （或2个一起）的变化&lt;/li&gt;
&lt;li&gt;如果安装了，有正确的Agent版本（6.5）和升级版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有PurePath&lt;/li&gt;
&lt;li&gt;仪表板正确显示&lt;/li&gt;
&lt;li&gt;如果迁移了Session存储，历史数据可以展现&lt;/li&gt;
&lt;li&gt;如果使用自定义证书，通过Server的&lt;a href="http://localhost:8020/"&gt;http://localhost:8020/&lt;/a&gt; 站点来验证。&lt;/li&gt;
&lt;li&gt;验证这些服务和连机器工作：Email、LDAP、Proxy、DC-RUM、Gomez&lt;/li&gt;
&lt;li&gt;查看&lt;strong&gt;开始中心 -&amp;gt; 管理&lt;/strong&gt;的告警和错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;​&lt;img align="absmiddle" alt="☑" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2611.png" title=":ballot_box_with_check:" width="20px"&gt; &lt;strong&gt;恭喜！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;迁移完成！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="5"&gt;5 故障排除&lt;a class="headerlink" href="#5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="51"&gt;5.1 常见问题&lt;a class="headerlink" href="#51" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;什么版本Agent在运行&lt;/h4&gt;
&lt;p&gt;Server/Collector升级后，Agent bootstrap 升级部分现有Agent，但是老版本Agents会一直运行直到你重启了应用。&lt;/p&gt;
&lt;p&gt;请准备一个应用层的重启计划/协调。&lt;/p&gt;
&lt;p&gt;你可以在&lt;strong&gt;驾驶舱-&amp;gt;Agent概述&lt;/strong&gt;里找到Agent版本信息（bootstrap和活动部分）。&lt;/p&gt;
&lt;h4&gt;我的性能仓库DB schema是哪个版本&lt;/h4&gt;
&lt;p&gt;当新的Dynatrace Server连接到老的性能仓库DB时，Dynatrace DB schema被升级。因此，如果你不确定版本，在连接前检查一下是个好主意。&lt;/p&gt;
&lt;p&gt;对于SQL Server，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dynatrace6&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dbo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;性能仓库DB schema向后兼容吗&lt;/h4&gt;
&lt;p&gt;不兼容。请使用DB备份进行回滚。&lt;/p&gt;
&lt;h4&gt;升级后PurePath丢失&lt;/h4&gt;
&lt;p&gt;如果升级时没有迁移类缓存，且有丢失的PurePath或者PurePath包含&lt;code&gt;&amp;lt;unknown&amp;gt;&lt;/code&gt;节点，尝试重启相关应用。需要重启&lt;strong&gt;2次&lt;/strong&gt;来避免该问题。&lt;/p&gt;
&lt;h4&gt;为什么dtserver.ini和dtfrontendserver.ini中的内存设置被忽略甚至移除&lt;/h4&gt;
&lt;p&gt;从Dynatrace 6.0开始，‘-Xmx’和‘-Xms’ VM参数被忽略。请通过&lt;strong&gt;设置-&amp;gt;Dynatrace Server-&amp;gt;设置面板-&amp;gt;Sizing&lt;/strong&gt;来选择合适的sizing。更多信息，见&lt;a href="https://community.dynatrace.com/community/display/DOCDT63/Sizing+Settings"&gt;Sizing 设置&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id="52-dynatrace"&gt;5.2 Dynatrace 支持&lt;a class="headerlink" href="#52-dynatrace" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果需要更多支持，请访问我们的&lt;strong&gt;支持页面&lt;/strong&gt;。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 19:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/dynatrace-appmon-handbook-28-update-migrate-guide.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 27.Dynatrace Web 客户端使用说明</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-27-use-dynatrace-appmon-web-console.html</link><description>&lt;h2 id="1-dynatrace-appmon-web"&gt;1 Dynatrace AppMon Web管理&lt;a class="headerlink" href="#1-dynatrace-appmon-web" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynatrace AppMon Web 是一个基于HTML5的页面应用，可以通过以下默认地址访问：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://&amp;lt;servername&amp;gt;:9911&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;AppMon Web是用于&lt;strong&gt;浏览器分辨率至少为1024×768&lt;/strong&gt;的&lt;strong&gt;平板设备&lt;/strong&gt;和&lt;strong&gt;桌面设备&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了最佳的使用体验，推荐使用&lt;strong&gt;经过测试的最新版本的浏览器&lt;/strong&gt;： IE11、Edge、Firefox 45+、Chrome 53+、Safari 9.1+。&lt;/p&gt;
&lt;p&gt;老版本的Firefox、Chrome和Safari可以显示AppMon Web，但是一些功能可能显示效果不佳。&lt;/p&gt;
&lt;h3 id="11"&gt;1.1 安全证书安装&lt;a class="headerlink" href="#11" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;当登陆AppMon Web时，浏览器可能会提示安全警告。这是因为浏览器无法识别AppMon Web安全证书。如果该信息出现，你可以做以下措施：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于所有的浏览器，你都可以忽略该安全警告，并继续登陆AppMon Web&lt;/li&gt;
&lt;li&gt;对于Firefox，IE和Safari，你可以添加Dynatrace证书到浏览器信任证书列表&lt;/li&gt;
&lt;li&gt;对于Chrome，你可以要求你的系统管理员安装AppMon Web安全证书到你的系统的keystore。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="12"&gt;1.2 数据展示&lt;a class="headerlink" href="#12" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;只有在Dynatrace AppMon 性能仓库中的&lt;em&gt;live session&lt;/em&gt; 数据可以在Web仪表板中展示。&lt;em&gt;Stored session&lt;/em&gt; 数据，如：内存快照、线程快照、CPU采样、以前存储在硬盘上的Purepath Session是不能在web仪表板中显示的。而这些数据可以在AppMon客户端仪表板中显示。&lt;/p&gt;
&lt;h2 id="2"&gt;2 仪表板&lt;a class="headerlink" href="#2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;仪表板是一个在软件应用生命周期中显示不同用例的诊断数据的强力工具。在仪表板中，你可以为不同领域的专家过滤、聚合和注释PurePath相关的信息。&lt;/p&gt;
&lt;p&gt;AppMon当前提供2种类型的仪表板：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;富客户端仪表板&lt;/li&gt;
&lt;li&gt;Web 仪表板&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仪表板 - 富客户端 vs Web 见下文。&lt;/p&gt;
&lt;h3 id="21-vs-web"&gt;2.1 仪表板 - 富客户端 vs Web&lt;a class="headerlink" href="#21-vs-web" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;2者很多概念是相同的（如选择系统配置文件和时间范围来显示，过滤其他的条件，创建自定义...）。因为web仪表板使用的是&lt;strong&gt;磁贴风格&lt;/strong&gt;，而富客户端使用的是&lt;strong&gt;仪表图(dashlet)&lt;/strong&gt;,所以看起来差别相当明显。&lt;/p&gt;
&lt;h4&gt;富客户端仪表板&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Dynatrace富客户端的传统信息、分析展现形式是仪表板。&lt;/li&gt;
&lt;li&gt;因为6.5种很多仪表板只有富客户端可用并且配置更多，所以建议&lt;ul&gt;
&lt;li&gt;安装一个绿色版的客户端在电脑设备上，并连接到AppMon Server&lt;/li&gt;
&lt;li&gt;为了持续使用，和更丰富的配置，请安装客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以存储在AppMon Server上并共享仪表板&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Web 仪表板&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;频繁使用的仪表板用浏览器，更方便查看&lt;/li&gt;
&lt;li&gt;不需要安装，直接在浏览器中打开(&lt;code&gt;https://&amp;lt;DynatraceServer&amp;gt;:9911&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;移动设备观感良好&lt;/li&gt;
&lt;li&gt;有关键仪表板如事务流&lt;/li&gt;
&lt;li&gt;你可以通过URL（或在AppMon Server上的一个账户和权限）来共享这些仪表板&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="22-web"&gt;2.2 Web仪表板&lt;a class="headerlink" href="#22-web" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;AppMon Web使用最新的web技术来显示直观和可视化的漂亮仪表板，显示内容包括：应用性能、关键基础架构指标。AppMon Web有以下功能和优点：&lt;/p&gt;
&lt;h4&gt;广泛适用的仪表板&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;App Owner&lt;/strong&gt; 仪表板提供应用性能概览视图，你可以使用&lt;strong&gt;Operation&lt;/strong&gt;仪表板迅速定位和浏览基础架构问题。可以共享任何仪表板给用户来交流问题，并帮助你和其他人保持有共同的视图页面。&lt;/p&gt;
&lt;p&gt;Web仪表板会显示你应用性能和系统健康、错误和失败等的关键指标，不需要任何配置。&lt;/p&gt;
&lt;p&gt;你可以拉取你需要的任何数据，并以此来创建自定义的仪表板。在自定义仪表板中以通过个性化的拖拽来安排磁贴排列。甚至可以选择自定义的HTML和JavaScript资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operation 仪表板&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Operation仪表板提供了对系统健康状态的一站式查看。Operation仪表板和它的详细视图包括关键基础架构指标来帮助你发现问题热点。并提供分析和解决问题的起始点。你可以共享任何运维数据给收到该系统健康问题影响的任何团队。&lt;/p&gt;
&lt;p&gt;具体见&lt;strong&gt;Web仪表板的基础架构监控&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内置Web 仪表板&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些内置仪表板包括主机资源使用率、错误和失败、应用性能和系统健康状态等信息，这些仪表板也为配置自定义仪表板提供了很好的参考。&lt;/p&gt;
&lt;p&gt;具体见下文&lt;strong&gt;内置仪表板&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为你的数据和团队自定义Web仪表板&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建你需要的数据的自定义仪表板，来监控和防止问题出现。&lt;/p&gt;
&lt;p&gt;使用拖拽编辑器，从一系列的磁贴风格中选择一个创建自定义的仪表板布局。每个磁贴都可以调整为你想要的大小。&lt;/p&gt;
&lt;p&gt;通过一个独有的URL或者通过包含在报告或展示中的截图图片来和你团队的其他成员共享你的自定义web 仪表板。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/Snipaste_2019-06-19_19-38-08.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自定义web仪表板&lt;/strong&gt; 和 &lt;strong&gt;共享web仪表板&lt;/strong&gt;见下文。&lt;/p&gt;
&lt;h4&gt;易于合作&lt;/h4&gt;
&lt;p&gt;一起工作更容易。AppMon Web让你轻松共享web仪表板。你的APM团队可以自定义图表来提供基础架构健康状态，应用性能的监控。你也可以导出一组仪表板，这样其他人可以导入它们，或者复制这些仪表板并修改来满足不同的需求。这让团队间更容易一起工作，并加强团队成员合作，帮助团队成员有共同的监控页面。&lt;/p&gt;
&lt;p&gt;更多内容见&lt;strong&gt;共享 web仪表板&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;访问AppMon web&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;必要的权限&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AppMon Web 的登陆，需要AppMon 用户至少具有“Use System Profile in Dynatrace Web”的权限。另一个要点，对于特定的web仪表板需要非常关键的权限“Read Confidential Strings”。&lt;/p&gt;
&lt;h4&gt;内置仪表板&lt;/h4&gt;
&lt;p&gt;内置web仪表板自动共享给所有可以访问仪表板的用户。&lt;/p&gt;
&lt;p&gt;在Dynatrace Web，点击&lt;strong&gt;仪表板&lt;/strong&gt;按钮，然后点击&lt;strong&gt;Shared&lt;/strong&gt;标签页，会看到一系列的内置仪表板。内置仪表板的创建者为&lt;strong&gt;Dynatrace&lt;/strong&gt;，包括下列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application overview&lt;/li&gt;
&lt;li&gt;CDN &amp;amp; 3rd party performance&lt;/li&gt;
&lt;li&gt;Errors &amp;amp; failures overview&lt;/li&gt;
&lt;li&gt;Host resource allocation&lt;/li&gt;
&lt;li&gt;Mobile overview&lt;/li&gt;
&lt;li&gt;User behavior analytics&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;​&lt;img align="absmiddle" alt="✔" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2714.png" title=":heavy_check_mark:" width="20px"&gt; 共享仪表板列表页包括有其他用户共享的仪表板 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="img" src="./images/Snipaste_2019-06-19_19-39-22.png"&gt;&lt;/p&gt;
&lt;h4&gt;自定义Web仪表板&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;概览&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你可以创建自定义web仪表板来可视化你关注的数据。点击&lt;strong&gt;仪表板&lt;/strong&gt;按钮，在&lt;strong&gt;My dashboards&lt;/strong&gt;里访问自定义的web仪表板。&lt;/p&gt;
&lt;p&gt;自定义仪表板是私人的，除非你把对应的URL共享给其他人。通过共享链接打开web仪表板需要Dynatrace用户账户并登陆。&lt;/p&gt;
&lt;p&gt;其他重要功能和注意事项包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义web仪表板只显示live session数据。不显示stored session数据。&lt;/li&gt;
&lt;li&gt;全局时间设置适用于仪表板的所有磁贴。自动刷新频率默认是1 min。&lt;/li&gt;
&lt;li&gt;每个仪表板最多允许有16个磁贴。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="./images/Snipaste_2019-06-19_19-41-13.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;准备工作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建自定义web 仪表板之前，识别并创建包含你想显示在仪表板上的measure或business transaction信息。创建measure和business transaction需要使用AppMon Client。&lt;/p&gt;
&lt;p&gt;当创建你的仪表板布局时，你可以以网格的形式灵活安排16个磁贴的位置和大小。磁贴可以变为需要显示数据的合适的大小。仪表板网格布局支持最大宽度为4磁贴列，最大高度为4磁贴行。磁贴不能堆叠。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;自定义布局 - 拖拽来改变磁贴布局和大小&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/Snipaste_2019-06-19_19-41-53.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/Snipaste_2019-06-19_19-42-13.png"&gt;&lt;/p&gt;
&lt;h5&gt;创建自定义web仪表板&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;点击&lt;strong&gt;仪表板&lt;/strong&gt;按钮，在&lt;strong&gt;My dashboards&lt;/strong&gt;里访问自定义的web仪表板。&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;Add dashboard&lt;/strong&gt;按钮。&lt;/li&gt;
&lt;li&gt;命名仪表板，然后选择系统配置文件和数据时间段。时间段决定了你的仪表板显示的数据。这个值应用于全局的每个磁贴。&lt;/li&gt;
&lt;li&gt;可选，在&lt;strong&gt;Dashboard name&lt;/strong&gt;旁边点击添加logo图标，输入你喜欢的logo的URL。logo会替换掉默认的图标。&lt;/li&gt;
&lt;li&gt;点击默认磁贴的&lt;strong&gt;Edit title&lt;/strong&gt;。&lt;strong&gt;Tile configurator&lt;/strong&gt;出现。&lt;/li&gt;
&lt;li&gt;配置磁贴。参见 &lt;a href="https://community.dynatrace.com/community/display/DOCDT65/Tile+Types"&gt;Tile Types&lt;/a&gt;, &lt;a href="https://community.dynatrace.com/community/display/DOCDT65/Add+and+Edit+Measures"&gt;Editing a Measure&lt;/a&gt;, and the &lt;a href="https://community.dynatrace.com/community/display/DOCDT65/Web+Dashboard+Timeframe+and+Resolution"&gt;Timeframe and Resolution&lt;/a&gt; 查看每种磁贴类型的具体配置。&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;Done&lt;/strong&gt;来关闭Tile configurator 并返回dashboard editor&lt;/li&gt;
&lt;li&gt;点击在右上角的&lt;strong&gt;Done&lt;/strong&gt;来查看仪表板。每个仪表板都可以点击最大化。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你可以复制自定义仪表板，以及共享自定义仪表板给其他人。从&lt;strong&gt;My dashboards&lt;/strong&gt;里选择你想要复制，点击&lt;strong&gt;More Actions&lt;/strong&gt;按钮,选择&lt;strong&gt;Copy&lt;/strong&gt;。在出现的仪表板中，命名该仪表板，并点击&lt;strong&gt;Copy and open&lt;/strong&gt;。仪表板副本会显示在&lt;strong&gt;My tab&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​&lt;img align="absmiddle" alt="✔" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2714.png" title=":heavy_check_mark:" width="20px"&gt; &lt;strong&gt;Tip&lt;/strong&gt;:默认复制的仪表板会命名为 [copied dashboard name] - Copy。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查看 &lt;a href="https://community.dynatrace.com/community/display/DOCDT65/Share+Web+Dashboards"&gt;共享Web Dashboards&lt;/a&gt;获取共享自定义仪表板的更多信息。&lt;/p&gt;
&lt;h5&gt;磁贴类型&lt;/h5&gt;
&lt;p&gt;The following list describes the available tile types that you can add to a custom web dashboard.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tile Type&lt;/th&gt;
&lt;th&gt;Use&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;双轴线形/柱状图 &amp;amp; 双轴柱状/线形图&lt;/td&gt;
&lt;td&gt;可视化两个数据系列或混合类型数据的值的广泛差异     &lt;strong&gt;提示:&lt;/strong&gt; 对于 &lt;strong&gt;双轴线形/柱状图&lt;/strong&gt;, 左y轴显示为线形图，右y轴显示为柱状图。 对于 &lt;strong&gt;双轴柱状/线形图&lt;/strong&gt;, 正相反。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;堆积百分比柱状图&lt;/td&gt;
&lt;td&gt;以部分对整个系列作出贡献的每个值的百分比来比较一系列中的部分。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;饼图&lt;/td&gt;
&lt;td&gt;绘制单个数据序列。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;面积图/堆积面积图&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;面积图&lt;/strong&gt; -将一个系列作为独立值显示出来， 这对于可视化多个数据系列之间的相对差异很有用。&lt;strong&gt;堆积面积图&lt;/strong&gt; - 可视化包含数据系列的每个部分的百分比。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数字仪表&lt;/td&gt;
&lt;td&gt;在测量值之间相对地比较来可视化和分析数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;百分位图&lt;/td&gt;
&lt;td&gt;在所选时间范围内，以0到100的百分位数分析数据系列。&lt;strong&gt;Tip:&lt;/strong&gt;  如果图表有许多测量，则使用对数y轴来增加可读性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;交通灯图&lt;/td&gt;
&lt;td&gt;通过交通灯来查看是否超出阈值:&lt;strong&gt;OK&lt;/strong&gt; - 表示没有超出阈值.&lt;strong&gt;Problem&lt;/strong&gt; - 表示选中时间内已经超出严重阈值。&lt;strong&gt;Warning&lt;/strong&gt; - 表示选中时间内已经超出警告阈值。Notes：所选的测量必须具有阈值指标。根据配置的聚合计算阈值违规状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Guage Chart&lt;/td&gt;
&lt;td&gt;单个配置的测量结果，用组合的甜甜圈图和饼图列出。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;测量&lt;/td&gt;
&lt;td&gt;在测量之间用相对比较的方式可视化数据。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;业务分析&lt;/td&gt;
&lt;td&gt;查看选中的业务分析的指标（响应时间，失败率，吞吐量）。这个图可以交互，每个指标都有显示，你可以选择默认显示那个指标。Notes： 如果选中的指标没有配置为业务分析，那么会显示&lt;strong&gt;N/A&lt;/strong&gt;。 该磁贴不支持业务分析的自定义度量值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;业务分析列表&lt;/td&gt;
&lt;td&gt;在一个列表里查看业务分析的拆分值，计算结果，聚合类型 (如总和，平均，最大值)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;World Map&lt;/td&gt;
&lt;td&gt;Notes：无UEM license无数据。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Image&lt;/td&gt;
&lt;td&gt;通过URL显示图片。&lt;strong&gt;Tip:&lt;/strong&gt;  图片大小过大会压缩。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;外部内容&lt;/td&gt;
&lt;td&gt;在一个web 仪表板的磁贴中查看URL里的内容和信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;告警&lt;/td&gt;
&lt;td&gt;获取一个或多个配置的事件条件的结果的一览表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Synthetic Tests&lt;/td&gt;
&lt;td&gt;Notes：需要与Dynatrace的Synthetic产品整合。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文本和测量&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;添加和编辑测量&lt;/h5&gt;
&lt;p&gt;测量是图表数据的来源。你可以选择一个或多个测量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加和编辑测量&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开Tile Configurator，点击&lt;strong&gt;Add Measure&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;查找或浏览要添加的测量，然后点击测量列表底部的&lt;strong&gt;Done&lt;/strong&gt;按钮。&lt;/li&gt;
&lt;li&gt;添加测量后，点击旁边的&lt;strong&gt;Edit&lt;/strong&gt;按钮来修改测量的显示名称，聚合方法，拆分值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="img" src="./images/Snipaste_2019-06-19_19-44-12.png"&gt;&lt;/p&gt;
&lt;h5&gt;web仪表板时间范围和解析度&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;时间范围&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" src="./images/Snipaste_2019-06-19_19-44-34.png"&gt;&lt;/p&gt;
&lt;p&gt;“时间表”下拉列表可在所有网页信息中心的顶部显示，并显示当前用于仪表板的时间范围。点击下拉列表，使用&lt;strong&gt;Quick，Relative，Custom&lt;/strong&gt;标签页来设置web仪表板要显示的时间范围。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Quick&lt;/strong&gt;: 点击Quick标签页来使用根据当前时间的相对时间偏移，或者设置时间范围为&lt;strong&gt;Today&lt;/strong&gt;或&lt;strong&gt;Yesterday&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Relative&lt;/strong&gt;：设置从15min到999天的时间范围，可以从当前时间开始，或者从过去的15 min到999天。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom&lt;/strong&gt;：点击Custom start和 Custom end，通过弹出的日历框来选择时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有仪表板的时间范围是动态的，并为所有磁贴以1分钟的间隔自动刷新。&lt;/p&gt;
&lt;p&gt;根据您选择的测量中的数据量，将时间范围增加到更长的时间段（如30天）可能会导致Web仪表板内容的呈现轻微延迟。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图表解析度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" src="./images/Snipaste_2019-06-19_19-44-55.png"&gt;&lt;/p&gt;
&lt;p&gt;图表分辨率下拉列表定义了显示在仪表板图块上的数据点之间的间隔。默认情况下，分辨率设置为所选仪表板时间范围的最佳间隔值。例如，如果仪表板的时间范围为1小时，则分辨率将自动设置为1分钟。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​:heavy_exclamation_mark: 所选仪表板时间框架的最佳间隔值在“分辨率”列表中始终显示为“自动”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;您可以调整分辨率以增加或减少图表上的数据点数，但是，请记住，在设置自定义分辨率值后更改仪表板的时间范围可能会使您的数据失真，从而难以解读。此外，数据点计算是相对于前一个数据点而不是时间帧的第一个数据点。因此，增加分辨率还会增加每个数据点的任何聚合值，因为在给定间隔内有更多的数据点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​&lt;img align="absmiddle" alt="✔" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2714.png" title=":heavy_check_mark:" width="20px"&gt; &lt;strong&gt;Tip:&lt;/strong&gt;作为最佳实践，将默认分辨率值设置为“自动”，以确保每当仪表板时间框架被修改时，分辨率都将以最佳方式显示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;共享web仪表板&lt;/h4&gt;
&lt;p&gt;您创建的自定义Web仪表板仅在您与其他用户共享之前才可以访问。共享视图或仪表板的基本概念是一个持久性的URL，您可以发送或包含在其他资产（如文档或wiki页面）中。&lt;/p&gt;
&lt;h5&gt;功能&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;通过电子邮件邀请&lt;strong&gt;与特定用户共享&lt;/strong&gt;。只有他们可以看到仪表板。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与所有访问AppMon Server的用户共享&lt;/strong&gt;。仪表板的人气显示有多少用户将仪表板添加到他们的个人收藏夹。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与没有AppMon用户帐户的用户共享。&lt;/strong&gt;请参阅以下部分的指南。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每当您登录到AppMon Web时，都会在仪表板概述中的“共享” - 标签中显示已与您共享的仪表板。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​:heavy_exclamation_mark: 打开一个共享的Web仪表板需要一个AppMon用户帐户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;将Web仪表板标记为个人最爱&lt;/h5&gt;
&lt;p&gt;每当用户与您共享一个价值的web仪表板时，您可以将其添加到您的个人收藏夹。如果仪表板与所有用户共享，这将增加仪表板的受欢迎度及其在列表中的排名，因此您的团队成员轻松查看哪些仪表板最有价值。&lt;/p&gt;
&lt;h5&gt;公开分享web仪表板&lt;/h5&gt;
&lt;p&gt;web 仪表板可以公开共享，无需登录即可访问。仪表板的共享URL必须通过用于根据以下语法进行公共共享的用户帐户的用户名和密码进行扩展：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt; &lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="nt"&gt;host&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;9911&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;jsp&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nt"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;username&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;dashboard&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因此，建议使用专用的用户帐户，以便全面控制哪些系统配置文件是公开的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" src="./images/Snipaste_2019-06-19_19-45-26.png"&gt;&lt;/p&gt;
&lt;h5&gt;其他报告功能&lt;/h5&gt;
&lt;p&gt;使用磁贴图像下载功能来创建磁贴图表的可分发PNG或SVG图像文件，以包含在演示文稿中，在wiki页面上发布或发送电子邮件。&lt;/p&gt;
&lt;p&gt;要下载磁贴图像，请单击内置或自定义web仪表板的上下文菜单，然后选择要下载的图像格式。&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" src="./images/Snipaste_2019-06-19_19-45-53.png"&gt;&lt;/p&gt;
&lt;h4&gt;导出和导入web仪表板&lt;/h4&gt;
&lt;p&gt;Web仪表板导出和导入提供了另一种方式来将您的仪表板与组织中的其他人共享。当需要与其他人共享大量仪表板时，导出功能非常有用。一次可以导出和导入数百个仪表板。只有自定义仪表板可以导出或导入。&lt;/p&gt;
&lt;h5&gt;导出web仪表板&lt;/h5&gt;
&lt;p&gt;在AppMon Web中，单击“Dashboards”，然后选择“My”选项卡。显示您的自定义仪表板列表，复选框显示在仪表板条目旁边。&lt;/p&gt;
&lt;p&gt;单击要导出的每个仪表板的复选框，然后单击&lt;strong&gt;Export&lt;/strong&gt;按钮。名为&lt;em&gt;DashboardExport.dwd&lt;/em&gt;的文件下载到您分配的下载文件夹。使用Windows将文件发送给要与之共享仪表板的其他人。一旦导出文件被复制到可访问的位置，其他人可以使用它导入Web仪表板。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​&lt;img align="absmiddle" alt="✔" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2714.png" title=":heavy_check_mark:" width="20px"&gt; 注意:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导出按钮仅在选择仪表板时显示。&lt;/li&gt;
&lt;li&gt;单击自定义仪表板标题旁边的复选框以选择列表中的所有自定义仪表板。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="img" src="./images/Snipaste_2019-06-19_19-46-23.png"&gt;&lt;/p&gt;
&lt;h5&gt;导入Web仪表板&lt;/h5&gt;
&lt;p&gt;您可以从任何可访问的文件位置导入Web仪表板文件。文件中的所有导出的自定义Web仪表板导入到“自定义仪表板”列表。&lt;/p&gt;
&lt;p&gt;要导入自定义Web仪表板文件，请单击&lt;strong&gt;Dashboards&lt;/strong&gt;，然后选择&lt;strong&gt;My&lt;/strong&gt;选项卡以显示自定义仪表板，然后单击&lt;strong&gt;Import&lt;/strong&gt;按钮。&lt;/p&gt;
&lt;p&gt;使用操作系统文件浏览器导航到导出文件的位置并选择它。&lt;/p&gt;
&lt;p&gt;当出现消息框指示仪表板成功导入时，单击&lt;strong&gt;OK&lt;/strong&gt;。导入的仪表板显示在“自定义仪表板”列表中。&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" src="./images/Snipaste_2019-06-19_19-46-46.png"&gt;&lt;/p&gt;
&lt;h5&gt;删除自定义web仪表板&lt;/h5&gt;
&lt;p&gt;您可以删除仪表板，以删除过时或不必要的自定义仪表板，并帮助管理自定义仪表盘列表。&lt;/p&gt;
&lt;p&gt;只需点击要删除的每个仪表板的复选框，然后单击&lt;strong&gt;Delete&lt;/strong&gt;按钮。在出现的消息框中单击确定以&lt;strong&gt;OK&lt;/strong&gt;删除。&lt;/p&gt;
&lt;h4&gt;web仪表板的基础架构监控&lt;/h4&gt;
&lt;p&gt;运营人员需要持续更新有关环境健康的信息。&lt;strong&gt;Operation&lt;/strong&gt;信息板可让您从任何设备中查看热点，了解导致热点的原因，并分享您的分析给团队中以解决问题。了解您的基础设施或特定应用程序中是否存在问题，跟踪关键事件警报，然后深入了解警报详细信息，事件分配和根本原因分析。&lt;/p&gt;
&lt;p&gt;与AppMon Client中的基础设施概述一样，“Operation”面板中的“HOST”视图列出了每个范围内主机的操作系统，并指示其相对运行状况。此外，其主机上每个运行的进程会监控和展示。健康，不健康的进程和当前不运行的进程在详细进程视图中的单独选项卡中，因此您可以快速关注问题进程。&lt;/p&gt;
&lt;p&gt;可以选择Operations Dashboard的详细视图中的所有事件警报，并直接跳转到AppMon Client，进行进一步分析和解决主机和进程问题。&lt;/p&gt;
&lt;p&gt;在这个仪表版中的磁贴：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;帮助您监控主机和进程运行状况。&lt;/li&gt;
&lt;li&gt;确定问题是否与基础设施或应用程序相关，并对应问题事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;警报通知也可以使用Alert 磁贴类型在自定义Web仪表板上查看。有关详细信息，请参阅磁贴类型。&lt;/p&gt;
&lt;h4&gt;AppMon客户端深入分析&lt;/h4&gt;
&lt;h5&gt;概览&lt;/h5&gt;
&lt;p&gt;AppMon Web与AppMon Client一起提供方便的用户体验管理工作流程和基础架构监控功能，用于快速和翔实的根本原因分析。AppMon Web中的几个视图可让您从特定的AppMon Web项目中深入到AppMon Client中打开相应的或详细的数据。&lt;/p&gt;
&lt;h5&gt;客户端深入分析&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;安装AppMon客户端或AppMon Webstart客户端。&lt;/li&gt;
&lt;li&gt;在AppMon Web中，打开包含要向下钻取的项目的页面。您可以深入了解以下内容：&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;AppMon Web的视图/动作&lt;/th&gt;
&lt;th&gt;AppMon Client 打开&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Business analytics &amp;gt; Visits &amp;gt; Visit details&lt;/td&gt;
&lt;td&gt;用户体验的访问&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Operations &amp;gt; Infrastructure &amp;gt; 选择alert 或 alert rule&lt;/td&gt;
&lt;td&gt;事件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Operations &amp;gt; Hosts &amp;gt;选择Host name&lt;/td&gt;
&lt;td&gt;事件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Operations &amp;gt; Hosts &amp;gt; 选择Host name&lt;/td&gt;
&lt;td&gt;主机信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Operations &amp;gt; Processes &amp;gt; 选择Process name&lt;/td&gt;
&lt;td&gt;进程信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;​:heavy_exclamation_mark: &lt;strong&gt;Note:&lt;/strong&gt; 根据您的浏览器类型，可能会提示您授权加载不安全的脚本，不安全的内容或证书。如果要使用AppMon Client向下钻取，则必须接受浏览器授权请求。如果没有，则默认情况下只打开Webstart客户端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start="3"&gt;
&lt;li&gt;单击访问表下面的&lt;strong&gt;Open in client&lt;/strong&gt;按钮。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果AppMon Client正在运行，它将启动。如果没有，则Webstart Client启动。一个浏览器消息框会弹出来下载client.jnlp文件。用建议的Java Web Start Launcher打开它来启动客户端。&lt;/p&gt;
&lt;p&gt;客户端打开并显示所选信息的详细信息。显示所选的访问信息。&lt;/p&gt;
&lt;h4&gt;FAQ&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;我可以将富客户端仪表板转换为网页信息中心吗？&lt;/p&gt;
&lt;p&gt;不行。这种情况，使用富客户端创建的仪表板必须重新创建为Web仪表板。&lt;/p&gt;
&lt;p&gt;但是，您可以创建富客户端仪表板的HTML报告。HTML报告也可以在浏览器中查看。&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 18:55:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/dynatrace-appmon-handbook-27-use-dynatrace-appmon-web-console.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 26.分析诡异的应用性能问题</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-26-analysis-a-difficult-app-performance-problem.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;一 概述&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#11"&gt;1.1 客户需求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#12"&gt;1.2  收集信息概述&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;二 事故影响范围&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#21"&gt;2.1 主机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#22"&gt;2.2 中间件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#23"&gt;2.3 应用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;三 问题分析及定位&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#31-2"&gt;3.1 我定制2个仪表图来分析问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#32"&gt;3.2 为什么加载的类会突然飙增&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#33-825-830jbosspurepath"&gt;3.3 查看8:25-8:30的Jboss上的purepath&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;四 总结及优化建议&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#41"&gt;4.1 问题发生的先后顺序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#42"&gt;4.2 优化建议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#43"&gt;4.3 最后说一句&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;一 概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="11"&gt;1.1 客户需求&lt;a class="headerlink" href="#11" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;1.1.1 客户问题描述&lt;/h4&gt;
&lt;p&gt;客户通过Dynatrace发现某台Jboss的JVM&lt;strong&gt;内存突然提交，然后垃圾回收&lt;/strong&gt;。如下图。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GmHC5HKe/6IqvB.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;1.1.2 客户需求&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;客户想要了解Root Cause。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="12"&gt;1.2  收集信息概述&lt;a class="headerlink" href="#12" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;客户发现Jboss的内存突然彪增，且JVM的GC时间大幅增长。查看Dynatrace发现，当时该及节点已经发生&lt;strong&gt;Perm区内存溢出&lt;/strong&gt;。且有&lt;strong&gt;告警&lt;/strong&gt;产生（同时应用关键业务错误率大幅增长）（Perm区内存溢出导致的OLD去彪增和GC时间彪增，具体分析见下文）。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GmHC5NsA/8zCBy.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GmHC5SAB/jRbrt.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;二 事故影响范围&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;查看当时的主机、JVM及应用业务情况，该问题造成一系列的连锁影响，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU利用率升高&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;物理内存升高&lt;/li&gt;
&lt;li&gt;JVM heap区增大&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JVM gc及挂起时间变长&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Jboss线程数上升&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键业务全部失败&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;关键业务响应变慢&lt;br&gt;
  具体如下图：&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="21"&gt;2.1 主机&lt;a class="headerlink" href="#21" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GmHC6cC7/AeojF.jpg"&gt;&lt;/p&gt;
&lt;h3 id="22"&gt;2.2 中间件&lt;a class="headerlink" href="#22" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GmHC5XC0/VPQzr.jpg"&gt;&lt;/p&gt;
&lt;h3 id="23"&gt;2.3 应用&lt;a class="headerlink" href="#23" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GmHC6Wjg/myso8.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_3"&gt;三 问题分析及定位&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="31-2"&gt;3.1 我定制2个仪表图来分析问题&lt;a class="headerlink" href="#31-2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;具体如下图。&lt;strong&gt;直接Perm OOM的原因是：类加载量的大幅增长&lt;/strong&gt;（因为Perm区存放的就是静态类和常量等，而Perm OOM JDK默认会做fullgc，因此导致gc及挂起时间增加；因为无法GC掉，会导致Heap区调整及CPU增加、线程数增加）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GmHC6jtL/WnSxj.jpg"&gt;&lt;/p&gt;
&lt;h3 id="32"&gt;3.2 为什么加载的类会突然飙增&lt;a class="headerlink" href="#32" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我们对上图放大，查看细节。如下图：&lt;/p&gt;
&lt;p&gt;类加载数量是在&lt;strong&gt;8:25-8:30&lt;/strong&gt;期间大幅增长的。&lt;strong&gt;接下来我们需要查看这期间的该Jboss具体在做什么业务。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GmHC7g9r/M5dMD.jpg"&gt;&lt;/p&gt;
&lt;h3 id="33-825-830jbosspurepath"&gt;3.3 查看8:25-8:30的Jboss上的purepath&lt;a class="headerlink" href="#33-825-830jbosspurepath" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;purepath简单理解：所有的事务的分布式方法调用栈及相关信息。（如响应时间、时间细分、线程、LOG、Exception、SQL、Message等）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如下图，直接可以看出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;导致该问题的root cause 事务：/RuleManager/showCalib1QueryCondition.htm&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;导致该问题的root casue代码：c3p0(c3p0性能有问题。调用c3p0前后会有类加载的动作，正是这个情况导致了当时大量的类加载)&lt;/strong&gt;  （下图forName0就是类加载的相关方法）&lt;br&gt;
&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GmHC7aDf/JGcrG.jpg"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;四 总结及优化建议&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="41"&gt;4.1 问题发生的先后顺序&lt;a class="headerlink" href="#41" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;出现大量的/RuleManager/showCalib1QueryCondition.htm请求&lt;/li&gt;
&lt;li&gt;需要加载大量的C3p0相关类&lt;/li&gt;
&lt;li&gt;类加载数量大幅增长&lt;/li&gt;
&lt;li&gt;Perm区256M内存用完&lt;/li&gt;
&lt;li&gt;触发JVM full gc&lt;/li&gt;
&lt;li&gt;gc及挂起时间增加&lt;/li&gt;
&lt;li&gt;无法GC掉 -&amp;gt; CPU增加、线程增加、Heap区增加、业务失败&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="42"&gt;4.2 优化建议&lt;a class="headerlink" href="#42" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;4.2.1 中间件（治标不治本）&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;增大Perm区大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优化与Perm清理有关的参数（如Perm满后清理，不执行full gc等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了更方便的定位问题，特别是在没有Dynatrace的情况下，&lt;strong&gt;建议在生产环境开启GC日志。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;阿里的JAVA专家说过:&lt;/p&gt;
&lt;p&gt;其实线上开GC日志没关系啦，我们线上就一直开着，对性能不会有那么大影响的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;4.2.2 开发&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;优化JDBC相关代码（如果想要优化c3p0代码可以看3.3的代码逻辑。如果不想优化建议直接不要采用c3p0作为JDBC框架，选择其他JDBC框架）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="43"&gt;4.3 最后说一句&lt;a class="headerlink" href="#43" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;其实这个问题一个月以前就已经分析过了，但是由于当时的影响只是&lt;em&gt;应用关键业务变慢&lt;/em&gt;，所以并没有引起重视。但是这次造成的影响就比较大了，直接导致关键业务全部失败以及Jboss长时间挂起（即不可用）。&lt;/p&gt;
&lt;p&gt;所以，大的生产事故，其实可能都是因为一些细小的，我们认为没关系或者可以忽略的性能问题导致的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​&lt;img align="absmiddle" alt="👊" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f44a.png" title=":punch:" width="20px"&gt;​ 生产无小事！责任大于天！&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 19 Jun 2019 18:50:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-06-19:/dynatrace-appmon-handbook-26-analysis-a-difficult-app-performance-problem.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>使用 Docker 安装 Gitlab</title><link>https://www.EWhisper.cn/install-gitlab-with-docker.html</link><description>&lt;h2 id="docker"&gt;Docker 安装&lt;a class="headerlink" href="#docker" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;官网链接:&lt;a href="https://docs.gitlab.com/omnibus/docker/"&gt;GitLab Docker images&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/docker/Dockerfile"&gt;官网 Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker pull gitlab/gitlab-ce  &lt;span class="c1"&gt;# 下载&lt;/span&gt;
sudo docker run --detach &lt;span class="se"&gt;\&lt;/span&gt;
  --hostname gitlab.example.com &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;443&lt;/span&gt;:443 --publish &lt;span class="m"&gt;80&lt;/span&gt;:80 --publish &lt;span class="m"&gt;22&lt;/span&gt;:22 &lt;span class="se"&gt;\&lt;/span&gt;
  --name gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --restart always &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/config:/etc/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/logs:/var/log/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/data:/var/opt/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  gitlab/gitlab-ce:latest  &lt;span class="c1"&gt;# 运行容器&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_1"&gt;数据存在哪儿:&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;本地位置&lt;/th&gt;
&lt;th align="left"&gt;容器位置&lt;/th&gt;
&lt;th align="left"&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;/srv/gitlab/data&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;/var/opt/gitlab&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;用于存储应用数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;/srv/gitlab/logs&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;/var/log/gitlab&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;用于存储日志&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;/srv/gitlab/config&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;/etc/gitlab&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;用于存储GitLab配置文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="gitlab"&gt;配置Gitlab:&lt;a class="headerlink" href="#gitlab" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;配置文件位于: &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;几种配置方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo docker exec -it gitlab /bin/bash&lt;/code&gt; 进入到容器内, 然后通过&lt;code&gt;vi&lt;/code&gt;编辑保存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo docker exec -it gitlab editor /etc/gitlab/gitlab.rb&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编辑完之后, 重启容器:&lt;code&gt;sudo docker restart gitlab&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="docker_1"&gt;预配置 Docker 容器&lt;a class="headerlink" href="#docker_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;也可以通过将环境变量&lt;code&gt;GITLAB_OMNIBUS_CONFIG&lt;/code&gt;添加到docker run命令来预配置GitLab Docker映像。此变量可以包含任何&lt;code&gt;gitlab.rb&lt;/code&gt;设置，并在加载容器&lt;code&gt;gitlab.rb&lt;/code&gt;文件之前进行加载。&lt;/p&gt;
&lt;p&gt;示例如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker run --detach &lt;span class="se"&gt;\&lt;/span&gt;
  --hostname gitlab.example.com &lt;span class="se"&gt;\&lt;/span&gt;
  --env &lt;span class="nv"&gt;GITLAB_OMNIBUS_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;external_url &amp;#39;http://my.domain.com/&amp;#39;; gitlab_rails[&amp;#39;lfs_enabled&amp;#39;] = true;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;443&lt;/span&gt;:443 --publish &lt;span class="m"&gt;80&lt;/span&gt;:80 --publish &lt;span class="m"&gt;22&lt;/span&gt;:22 &lt;span class="se"&gt;\&lt;/span&gt;
  --name gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --restart always &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/config:/etc/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/logs:/var/log/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/data:/var/opt/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  gitlab/gitlab-ce:latest
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;启动容器后&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以通过&lt;a href="http://localhost"&gt;http://localhost&lt;/a&gt; 进行访问.&lt;/p&gt;
&lt;p&gt;可以通过 &lt;code&gt;sudo docker logs -f gitlab&lt;/code&gt; 查看日志.&lt;/p&gt;
&lt;h3 id="ip"&gt;发布到公网IP&lt;a class="headerlink" href="#ip" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker run --detach &lt;span class="se"&gt;\&lt;/span&gt;
  --hostname gitlab.example.com &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;198&lt;/span&gt;.51.100.1:443:443 &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;198&lt;/span&gt;.51.100.1:80:80 &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;198&lt;/span&gt;.51.100.1:22:22 &lt;span class="se"&gt;\&lt;/span&gt;
  --name gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --restart always &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/config:/etc/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/logs:/var/log/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/data:/var/opt/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  gitlab/gitlab-ce:latest
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="docker-composegitlab"&gt;使用docker-compose安装GitLab&lt;a class="headerlink" href="#docker-composegitlab" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;安装 docker compose&lt;/li&gt;
&lt;li&gt;创建&lt;code&gt;docker-compose.yml&lt;/code&gt; 文件（或&lt;a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/docker/docker-compose.yml"&gt;下载示例&lt;/a&gt;）: &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="nt"&gt;web&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gitlab/gitlab-ce:latest&amp;#39;&lt;/span&gt;
   &lt;span class="nt"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
   &lt;span class="nt"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gitlab.example.com&amp;#39;&lt;/span&gt;
   &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="nt"&gt;GITLAB_OMNIBUS_CONFIG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
       &lt;span class="no"&gt;external_url &amp;#39;https://gitlab.example.com&amp;#39;&lt;/span&gt;
       &lt;span class="no"&gt;# Add any other gitlab.rb configuration here, each on its own line&lt;/span&gt;
   &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;80:80&amp;#39;&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;443:443&amp;#39;&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;22:22&amp;#39;&lt;/span&gt;
   &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/srv/gitlab/config:/etc/gitlab&amp;#39;&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/srv/gitlab/logs:/var/log/gitlab&amp;#39;&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/srv/gitlab/data:/var/opt/gitlab&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;确保您&lt;code&gt;docker-compose.yml&lt;/code&gt;与运行&lt;code&gt;docker-compose up -d&lt;/code&gt; 在同一目录中以运行GitLab&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="openshift"&gt;OpenShift 安装&lt;a class="headerlink" href="#openshift" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 注意:&lt;/p&gt;
&lt;p&gt;目前Gitlab通过OpenShift 安装, 有一些已知的问题. 并且只在OpenShift 3.11版本上测试通过.&lt;/p&gt;
&lt;p&gt;另外, 安装是通过 Helm Chart方式进行安装的. 还是有点复杂的...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_3"&gt;已知的问题&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以下问题是已知的，并且预计适用于OpenShift上的GitLab安装：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;anyuid&lt;/code&gt;scc的要求：(OpenShift 的安全加固导致的)&lt;ul&gt;
&lt;li&gt;GitLab的不同组件，如Sidekiq，unicorn等，使用UID 1000来运行服务。&lt;/li&gt;
&lt;li&gt;PostgreSQL chart以&lt;code&gt;root&lt;/code&gt;用户身份运行服务。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/charts/gitlab/issues/752"&gt;问题＃752&lt;/a&gt;是open状态，以调查更多有关解决此问题的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果使用&lt;code&gt;hostpath&lt;/code&gt;卷，则需要为主机中的持久性卷目录授予&lt;code&gt;0777&lt;/code&gt;权限，以授予所有用户对卷的访问权限。&lt;/li&gt;
&lt;li&gt;OpenShift的内置router 不支持通过SSH进行Git操作。 &lt;a href="https://gitlab.com/charts/gitlab/issues/892"&gt;问题＃892&lt;/a&gt; 是oepn状态，以调查更多有关解决此问题的信息。&lt;/li&gt;
&lt;li&gt;众所周知，GitLab Registry不能与OpenShift的内置router配合使用。 &lt;a href="https://gitlab.com/charts/gitlab/issues/893"&gt;问题＃893&lt;/a&gt;是open状态，以调查更多有关修复此问题的信息。&lt;/li&gt;
&lt;li&gt;从Let's Encrypt自动发出SSL证书不适用于OpenShift router。我们建议&lt;a href="https://docs.gitlab.com/charts/installation/tls.html#option-2-use-your-own-wildcard-certificate"&gt;您使用自己的证书&lt;/a&gt;。 &lt;a href="https://gitlab.com/charts/gitlab/issues/894"&gt;问题＃894&lt;/a&gt;开放，以调查更多有关解决此问题的信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_4"&gt;先决条件步骤&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;请参阅&lt;a href="https://www.okd.io/download.html#oc-platforms"&gt;官方文档&lt;/a&gt; 以安装和配置群集。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行&lt;code&gt;oc cluster status&lt;/code&gt;并确认群集正在运行：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc cluster status
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;输出应类似于：
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Web console URL: https://gitlab.example.com:8443/console/

Config is at host directory
Volumes are at host directory
Persistent volumes are at host directory /home/okduser/openshift/openshift.local.clusterup/openshift.local.pv
Data will be discarded when cluster is destroyed
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;请注意主机中Persistent Volumes的位置（在上例中`/home/okduser/openshift/openshift.local.clusterup/openshift.local.pv`）。以下命令需要`PV_HOST_DIRECTORY`环境变量中的路径。
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;修改PV目录的权限（用以上值替换以下命令中的路径）：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chmod -R a+rwx &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PV_HOST_DIRECTORY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/*
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;切换到系统管理员用户：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc login -u system:admin
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="5"&gt;
&lt;li&gt;将&lt;code&gt;anyuid&lt;/code&gt;scc 添加到系统用户：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc adm policy add-scc-to-group anyuid system:authenticated
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;**警告**：此设置将应用于所有namespace，并将导致Docker镜像未明确指定USER作为`root`用户运行。 [问题＃895](https://gitlab.com/charts/gitlab/issues/895)是开放的，用于记录所需的不同服务帐户，并描述仅将scc添加到这些服务帐户，因此影响可能有限。
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="6"&gt;
&lt;li&gt;创建服务帐户和&lt;code&gt;rolebinding&lt;/code&gt;RBAC并&lt;a href="https://docs.gitlab.com/charts/installation/tools.html#helm"&gt;安装Tiller&lt;/a&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create -f https://gitlab.com/charts/gitlab/raw/master/doc/installation/examples/rbac-config.yaml
helm init --service-account tiller
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_5"&gt;下一步&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在群集启动并运行后，继续&lt;a href="https://docs.gitlab.com/charts/installation/deployment.html"&gt;安装chart&lt;/a&gt;，并准备好静态IP和DNS条目。&lt;/p&gt;
&lt;p&gt;在此之前，请注意常规 chart安装过程中的以下更改：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们将使用OpenShift的内置router，因此需要禁用chart中包含的nginx-ingress服务。将以下标志传递给&lt;code&gt;helm install&lt;/code&gt;命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--set nginx-ingress.enabled&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;由于已知内置注册表不能使用Helm Chart与OpenShift一起使用，因此请禁用注册表服务。将以下标志传递给 &lt;code&gt;helm install&lt;/code&gt;命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--set registry.enabled=false
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;&lt;a href="https://docs.gitlab.com/charts/installation/tls.html#option-2-use-your-own-wildcard-certificate"&gt;使用您自己的SSL证书&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 26 May 2019 21:24:52 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-26:/install-gitlab-with-docker.html</guid><category>docker</category><category>openshift</category><category>k8s</category><category>containers</category><category>git</category></item><item><title>Dynatrace AppMon 实战手册 - 25.RESTful API</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-25-restful-api.html</link><description>&lt;h2 id="rest"&gt;REST 接口&lt;a class="headerlink" href="#rest" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynatrace Server 和 Dynatrace Client都通过REST接口提供管理功能。这些接口可以用于执行以下任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启停session recording&lt;/li&gt;
&lt;li&gt;为系统配置文件切换活动配置&lt;/li&gt;
&lt;li&gt;触发内存快照、线程快照及CPU采样&lt;/li&gt;
&lt;li&gt;重启Dynatrace Server 和 Dynatrace Collector&lt;/li&gt;
&lt;li&gt;执行传感器热部署&lt;/li&gt;
&lt;li&gt;生成报告&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Dynatrace 6.1中，由于安全原因，对SSLv3的支持已经不再继续。在Java 7中，默认已经禁用对伪协议SSLv2Hello的支持。这也在RSET接口中得以体现。使用Java6或者更早版本运行的应用，如果他们通过HTTPS访问REST接口，也可能会受影响。为了能够使用Java 6访问REST接口，SSLv2Hello必须被禁用：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;java
Set&amp;lt;String&amp;gt; protocols = new HashSet&amp;lt;String&amp;gt;(Arrays.asList(socket.getEnabledProtocols()));
protocols.remove("SSLv2Hello");
socket.setEnabledProtocols(protocols.toArray(new String[protocols.size()]));&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="server-rest"&gt;Server REST接口&lt;a class="headerlink" href="#server-rest" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;概览&lt;/h4&gt;
&lt;p&gt;Dynatrace Server 和 Dynatrace Client都通过REST接口提供管理功能。通过这些接口，你可以启动和停止session recording，触发内存和线程快照，创建报告等等。&lt;/p&gt;
&lt;p&gt;你可以用默认的8020和8021端口，使用HTTP 1.1和HTTPS 1.1 访问所有的Dynatrace Server REST 接口。如何更改端口设置和如何启用/禁用REST接口参见“Setup Communication”（见dynaTrace 6.2 Documentation 525页）。&lt;/p&gt;
&lt;p&gt;大多数接口通过HTML被暴露，可以通过浏览器访问。默认，HTML的接口访问地址为：&lt;a href="https://DT_SERVER:8021/rest/html/management/server"&gt;https://DT_SERVER:8021/rest/html/management/server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下列主题描述了如何访问REST服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Agent Groups (REST) (2438页)&lt;/li&gt;
&lt;li&gt;Agents and Collectors (REST) (2447页)&lt;/li&gt;
&lt;li&gt;仪表板和报告 (REST) (2450页)&lt;/li&gt;
&lt;li&gt;“停机时间” (REST) (2459页)&lt;/li&gt;
&lt;li&gt;事件 （REST) (2463页)&lt;/li&gt;
&lt;li&gt;活动Sessions (REST) (2497页)&lt;/li&gt;
&lt;li&gt;内存快照 (REST) (2468页)&lt;/li&gt;
&lt;li&gt;性能仓库 (REST) (2479页)&lt;/li&gt;
&lt;li&gt;插件管理 (REST) (2485页)&lt;/li&gt;
&lt;li&gt;资源快照 (REST) (2490页)&lt;/li&gt;
&lt;li&gt;Server 管理 (REST) (2492页)&lt;/li&gt;
&lt;li&gt;存储的Sessions (REST) (2500页)&lt;/li&gt;
&lt;li&gt;系统配置文件 (REST) (2507页)&lt;/li&gt;
&lt;li&gt;任务和监视器 (REST) (2511页)&lt;/li&gt;
&lt;li&gt;测试自动化 (REST) (2512页)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;HTTP响应码&lt;/h4&gt;
&lt;p&gt;HTTP状态响应码展示了你的访问的结果。&lt;em&gt;RFC 2616&lt;/em&gt; 标准（&lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"&gt;W3C&lt;/a&gt;, &lt;a href="http://www.ietf.org/rfc/rfc2616.txt"&gt;IETF&lt;/a&gt;描述了这些状态码。&lt;/p&gt;
&lt;p&gt;例如，如果请求被成功收到，理解，并接受，REST接口返回2xx状态码。如果请求不能被Dynatrace Server理解，会返回4xx状态码。状态码5xx表示有server error在组织Dynatrace Server完成该请求。&lt;/p&gt;
&lt;p&gt;下列是常见的响应码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;200&lt;/strong&gt; - OK：请求已成功。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;201&lt;/strong&gt; - Created：请求被执行，一个新资源被创建。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;202&lt;/strong&gt; - Accepted: 请求被接受处理，但是处理尚未完成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;204&lt;/strong&gt; - No Content: 请求已成功，但是响应没有entity-body。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;400&lt;/strong&gt; - Bad Request: 一些请求参数不正确。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;401&lt;/strong&gt; - Unauthorized: 需要一个合法认证头（基本认证），但是却没有。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;403&lt;/strong&gt; - Forbidden: 请求的执行不被允许，例如：用户没有权限。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;404&lt;/strong&gt; - Not Found: 一些实体找不到，如：系统配置文件，仪表板，Collector，或Agent。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;500&lt;/strong&gt; - Internal Server Error: 具体信息请查看response body。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;501&lt;/strong&gt; - Not Implemented: 请求的服务当前没有被执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;身份认证和授权&lt;/h4&gt;
&lt;p&gt;为访问Dynatrace REST接口，User Agent必须通过HTTP 基本认证证实它自己。&lt;a href="http://www.ietf.org/rfc/rfc2617.txt"&gt;RFC2617&lt;/a&gt;描述了该认证技术。基于用户名，一个冒号(:)，和密码的串联的字符串的BASE 64 hash key必须被计算。&lt;em&gt;Basic&lt;/em&gt;加上该hash key的字符串必须被设为HTTP请求的&lt;em&gt;Authorization&lt;/em&gt; 头。参见&lt;a href="http://en.wikipedia.org/wiki/Basic_access_authentication"&gt;Wiki page&lt;/a&gt; 获取更多信息。&lt;/p&gt;
&lt;p&gt;如果用户成功被认证，Dynatrace Server检查该用户是否可以访问该REST接口。如果该用户没有&lt;em&gt;Web Service Interface Access&lt;/em&gt;权限，返回HTTP状态码401(Unauthorized)。取决于被请求的服务，用户可能需要额外的权限（如：访问一个具体的仪表板或者系统配置文件。）&lt;/p&gt;
&lt;h4&gt;Agent Groups (REST)&lt;/h4&gt;
&lt;h5&gt;Agent Groups&lt;/h5&gt;
&lt;p&gt;Dynatrace Server提供几个RESTful接口URL：&lt;code&gt;http://&amp;lt;server&amp;gt;:8020/rest/management/profiles/&amp;lt;profilename&amp;gt;/agentgroups/&amp;lt;groupname&amp;gt;&lt;/code&gt; 来管理一个系统配置文件的Agent Groups。使用HTTP GET (2439页)来请求一个Agent Group的细节信息。使用HTTP PUT (2440页)来创建新的Agent Groups或者修改已经存在的Agent Groups。使用HTTP方法DELETE(2442页)来删除已存在的Agent Group。也有一个接口，用于list(2439页)一个具体系统配置文件的所有的Agent Groups。&lt;/p&gt;
&lt;h6&gt;List Groups&lt;/h6&gt;
&lt;p&gt;这个接口列出一个具体系统配置文件的的所有Agent Groups。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;GET&lt;/th&gt;
&lt;th&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/profiles/&amp;lt;profilename&amp;gt;/agentgroups&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;produces application/xml&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;Mandatory&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;profilename&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;相应的系统配置文件名称&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;请求URL&lt;/strong&gt;&lt;br&gt;
GET &lt;code&gt;https://localhost:8021/rest/management/profiles/easyTravel/agentgroups&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;响应内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xml
&amp;lt;?xml version="1.0" encoding="UTF-8" standalone="yes" ?&amp;gt;
&amp;lt;agentgroups&amp;gt;
    &amp;lt;agentgroupreference name="Business Backend Server (Java)" href="http://localhost:8020/rest/management
/profiles/easyTravel/agentgroups/Business%20Backend%20Server%20(Java)" /&amp;gt;
    &amp;lt;agentgroupreference name="Customer Web Frontend (Java)" href="http://localhost:8020/rest/management
/profiles/easyTravel/agentgroups/Customer%20Web%20Frontend%20(Java)" /&amp;gt;
    &amp;lt;agentgroupreference name="CreditCardAuthorization (C++)" href="http://localhost:8020/rest/management
/profiles/easyTravel/agentgroups/CreditCardAuthorization%20(C++)" /&amp;gt;
    &amp;lt;agentgroupreference name="Payment Backend (.NET)" href="http://localhost:8020/rest/management/profiles
/easyTravel/agentgroups/Payment%20Backend%20(.NET)" /&amp;gt;
    &amp;lt;agentgroupreference name="B2B Web Frontend (.NET)" href="http://localhost:8020/rest/management/profiles
/easyTravel/agentgroups/B2B%20Web%20Frontend%20(.NET)" /&amp;gt;
&amp;lt;/agentgroups&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应代码&lt;/strong&gt;&lt;br&gt;
200 OK&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;GET Group&lt;/h6&gt;
&lt;p&gt;在一个指定的Agent Group使用HTTP GET来获取XML展示的Agent Group。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;GET&lt;/th&gt;
&lt;th&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/profiles/&amp;lt;profilename&amp;gt;/agentgroups/&amp;lt;groupname&amp;gt;&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;produces application/xml&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;Mandatory&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;profilename&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;groupname&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;对应Agent Group名称&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;本例展示了Agent Group Customer Web Frontend (java)的XML描述如何被请求。返回的XML包含Agent Group名称，描述，相关Agent映射的引用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求URL&lt;/strong&gt;&lt;br&gt;
GET &lt;code&gt;https://localhost:8021/rest/management/profiles/easyTravel/agentgroups/Customer%20Web%20Frontend%20(Java)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;响应内容&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;agentgroup&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Customer Web Frontend (Java)&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Web application which provides the customer web pages via JSF/icefaces technology. Accesses the siness backend via WebServices.&amp;gt;&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;agentmappingsreference&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://localhost:8020/rest/management/profiles/easyTravel/agentgroups/stomer%20Web%20Frontend%20(Java)/mappings&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/agentgroup&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;响应代码&lt;/strong&gt;&lt;br&gt;
200 OK&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;PUT Group&lt;/h6&gt;
&lt;p&gt;使用HTTP PUT接口创建或覆盖一个Agent Group通过发送XML格式作为请求的内容。请求内容的期望XML格式内容与响应HTTP GET接口的内容类似。需要有写入系统配置文件的权限。重载POST接口提供与HTTP PUT相同的输出。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;PUT&lt;/th&gt;
&lt;th&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/profiles/&amp;lt;profilename&amp;gt;/agentgroups/&amp;lt;groupname&amp;gt;&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;consumes application/xml&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/profiles/&amp;lt;profilename&amp;gt;/agentgroups/&amp;lt;groupname&amp;gt;?httpMethod=PUT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;consumes application/xml&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;agentmappingsreference元素没有被PUT接口显示。要增加一个Agent映射到Agent Group，使用Agent 映射的HTTP PUT接口（2445页）。不支持通过该接口重命名Agent Group。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;Mandatory&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;profilename&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;groupname&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;要创建或更新的Agent Group名称&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;本例演示如何修改已有的Agent Group Customer Web Frontend (Java)的描述。如果请求被成功执行，会返回状态码204(No Content)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求URL&lt;/strong&gt;&lt;br&gt;
PUT &lt;code&gt;https://localhost:8021/rest/management/profiles/easyTravel/agentgroups/Customer%20Web%20Frontend%20(Java)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;请求内容&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;agentgroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;This is a modified description.&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/agentgroup&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;响应代码&lt;/strong&gt;&lt;br&gt;
204 No Content&lt;/p&gt;
&lt;p&gt;本例展示了如何创建一个包含描述的，叫做New Agent Group的新的Agent Group。Agent Group的名称通过路径参数指定，描述在XML内容中指定。如果请求执行成功，返回响应码201，然后头信息Location指定为刚创建的Agent Group的URL。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求URL&lt;/strong&gt;&lt;br&gt;
PUT &lt;code&gt;https://localhost:8021/rest/management/profiles/easyTravel/agentgroups/New%20Agent%20Group&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;请求内容&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;agentgroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;This is a new agent group.&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/agentgroup&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;响应代码&lt;/strong&gt;&lt;br&gt;
201 Created&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应头&lt;/strong&gt;&lt;br&gt;
Location: &lt;code&gt;https://localhost:8021/rest/management/profiles/easyTravel/agentgroups/New%20Agent%20Group&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;DELETE Group&lt;/h6&gt;
&lt;p&gt;使用HTTP DELETE接口来删除已有的Agent Group。需要有修改系统配置文件的权限。重载POST接口提供和HTTP DELETE相同的输出。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;DELETE&lt;/th&gt;
&lt;th&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/profiles/&amp;lt;profilename&amp;gt;/agentgroups/&amp;lt;groupname&amp;gt;&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/profiles/&amp;lt;profilename&amp;gt;/agentgroups/&amp;lt;groupname&amp;gt;?httpMethod=DELETE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;Mandatory&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;profilename&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;groupname&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;要删除的Agent Group名称&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;本例展示如何删除一个叫做Cunstomer Web Frontend (Java)的Agent Group。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求URL&lt;/strong&gt;&lt;br&gt;
DELETE &lt;code&gt;https://localhost:8021/rest/management/profiles/easyTravel/agentgroups/Customer%20Web%20Frontend%20(Java)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应代码&lt;/strong&gt;&lt;br&gt;
204 No Content&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;Agent映射&lt;/h5&gt;
&lt;p&gt;与Agent Groups（2439页）类似，Dynatrace Server提供几个接口管理Agent映射。使用HTTP GET（2444页）来请求Agent映射的细节信息。使用HTTP方法PUT（2445页）和DELETE（2446页）来创建、修改和删除Agent映射。使用Lists 接口（2443页）来得到一个Agent Group的Agent映射列表。&lt;/p&gt;
&lt;h6&gt;List 映射&lt;/h6&gt;
&lt;p&gt;该接口列出一个Agent Group的所有Agent映射。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;GET&lt;/th&gt;
&lt;th&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/profiles/&amp;lt;profilename&amp;gt;/agentgroups/&amp;lt;groupname&amp;gt;/mappings&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;produces application/xml&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;Mandatory&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;profilename&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;groupname&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;请求URL&lt;/strong&gt;&lt;br&gt;
GET &lt;code&gt;https://localhost:8021/rest/management/profiles/easyTravel/agentgroups/Customer%20Web%20Frontend%20(Java)/mappings&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;响应内容&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;agentmappings&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;agentmappingreference&lt;/span&gt; &lt;span class="na"&gt;alias=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CustomerFrontend_easyTravel&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://localhost:8020/rest/management/profiles/easyTravel/agentgroups/Customer%20Web%20Frontend%20(Java)/mappings/CustomerFrontend_easyTravel&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;agentmappingreference&lt;/span&gt; &lt;span class="na"&gt;alias=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;easyTravel_CF&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://localhost:8020/rest/management/profiles/easyTravel/agentgroups/Customer%20Web%20Frontend%20(Java)/mappings/easyTravel_CF&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/agentmappings&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;响应代码&lt;/strong&gt;&lt;br&gt;
200 OK&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;GET 映射&lt;/h6&gt;
&lt;p&gt;在一个指定的Agent Mapping使用HTTP GET来获得该Agent映射的XML格式描述。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;GET&lt;/th&gt;
&lt;th&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/profiles/&amp;lt;profilename&amp;gt;/agentgroups/&amp;lt;groupname&amp;gt;/mappings/&amp;lt;mappingalias&amp;gt;&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;produces application/xml&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;Mandatory&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;profilename&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;groupname&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mappingalias&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;请求的Agent Mapping的alias&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;本例展示了如何请求CustomerFrontend_easyTravel的XML格式的Agent 映射。返回的XML描述了该映射匹配哪些agent名和主机名。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求URL&lt;/strong&gt;&lt;br&gt;
GET &lt;code&gt;https://localhost:8021/rest/management/profiles/easyTravel/agentgroups/Customer%20Web%20Frontend%20%28Java%29/mappings/CustomerFrontend_easyTravel&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;响应内容&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;agentmapping&lt;/span&gt; &lt;span class="na"&gt;alias=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CustomerFrontend_easyTravel&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;agentnamepattern&amp;gt;&lt;/span&gt;CustomerFrontend_easyTravel&lt;span class="nt"&gt;&amp;lt;/agentnamepattern&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;agentnamematchtype&amp;gt;&lt;/span&gt;starts&lt;span class="nt"&gt;&amp;lt;/agentnamematchtype&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hostnamepattern&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hostnamematchtype&amp;gt;&lt;/span&gt;starts&lt;span class="nt"&gt;&amp;lt;/hostnamematchtype&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/agentmapping&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;响应代码&lt;/strong&gt;&lt;br&gt;
200 OK&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;PUT映射&lt;/h6&gt;
&lt;p&gt;使用HTTP PUT接口来创建或覆盖Agent映射。需要有写系统配置文件的权限。重载POST接口提供与HTTP PUT相同的输出。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;PUT&lt;/th&gt;
&lt;th&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/profiles/&amp;lt;profilename&amp;gt;/agentgroups/&amp;lt;groupname&amp;gt;/mappings/&amp;lt;mappingalias&amp;gt;&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;consumes application/xml&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/profiles/&amp;lt;profilename&amp;gt;/agentgroups/&amp;lt;groupname&amp;gt;/mappings/&amp;lt;mappingalias&amp;gt;?httpMethod=PUT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;consumes application/xml&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;Mandatory&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;profilename&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;groupname&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mappingalias&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;需要创建或修改的Agent Mapping 的alias&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;请求必须发送XML格式的Agent 映射。Agent 映射的HTTP GET请求可以查看需要的XML架构。&lt;em&gt;agentnamematchtype&lt;/em&gt; 和 &lt;em&gt;hostnamematchtype&lt;/em&gt; 元素可以有以下的其中一个值：&lt;em&gt;starts&lt;/em&gt;，&lt;em&gt;ends&lt;/em&gt;，&lt;em&gt;contains&lt;/em&gt;，&lt;em&gt;equals&lt;/em&gt; 或 &lt;em&gt;regex&lt;/em&gt;。（详见Agent Group - Agent 映射（979页））。该接口不支持Agent映射重命名。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;agentmapping&lt;/span&gt; &lt;span class="na"&gt;alias=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CustomerFrontend_easyTravel&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;agentnamepattern&amp;gt;&lt;/span&gt;CustomerFrontend_easyTravel&lt;span class="nt"&gt;&amp;lt;/agentnamepattern&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;agentnamematchtype&amp;gt;&lt;/span&gt;starts&lt;span class="nt"&gt;&amp;lt;/agentnamematchtype&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hostnamepattern&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hostnamematchtype&amp;gt;&lt;/span&gt;starts&lt;span class="nt"&gt;&amp;lt;/hostnamematchtype&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/agentmapping&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;本例展示如何修改CustomerFrontend_easyTravel的Agent 映射。如果请求成功执行，返回状态码204(No Content)。&lt;br&gt;
&lt;strong&gt;请求URL&lt;/strong&gt;&lt;br&gt;
PUT &lt;code&gt;https://localhost:8021/rest/management/profiles/easyTravel/agentgroups/Customer%20Web%20Frontend%20(Java)/mappings/CustomerFrontend_easyTravel&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;请求内容&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;agentmapping&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;agentnamepattern&amp;gt;&lt;/span&gt;sampleApp&lt;span class="nt"&gt;&amp;lt;/agentnamepattern&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;agentnamematchtype&amp;gt;&lt;/span&gt;contains&lt;span class="nt"&gt;&amp;lt;/agentnamematchtype&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hostnamepattern&amp;gt;&lt;/span&gt;machineX&lt;span class="nt"&gt;&amp;lt;/hostnamepattern&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hostnamematchtype&amp;gt;&lt;/span&gt;contains&lt;span class="nt"&gt;&amp;lt;/hostnamematchtype&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/agentmapping&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;响应代码&lt;/strong&gt;&lt;br&gt;
204 No Content&lt;br&gt;
本例展示如何使用alias名New Mapping来创建一个新的Agent映射。如果请求被成功执行，返回响应码201，对应的创建Agent映射的URL会指定Location头信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求URL&lt;/strong&gt;&lt;br&gt;
PUT &lt;code&gt;https://localhost:8021/rest/management/profiles/easyTravel/agentgroups/Customer%20Web%20Frontend%20(Java)/mappings/New%20Mapping&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;请求内容&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;agentmapping&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;agentnamepattern&amp;gt;&lt;/span&gt;someprefix&lt;span class="nt"&gt;&amp;lt;/agentnamepattern&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;agentnamematchtype&amp;gt;&lt;/span&gt;starts&lt;span class="nt"&gt;&amp;lt;/agentnamematchtype&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hostnamepattern&amp;gt;&lt;/span&gt;machineX&lt;span class="nt"&gt;&amp;lt;/hostnamepattern&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hostnamematchtype&amp;gt;&lt;/span&gt;ends&lt;span class="nt"&gt;&amp;lt;/hostnamematchtype&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/agentmapping&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;响应代码&lt;/strong&gt;&lt;br&gt;
201 Created&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应头信息&lt;/strong&gt;&lt;br&gt;
Location: &lt;code&gt;https://localhost:8021/rest/management/profiles/easyTravel/agentgroups/Customer%20Web%20Frontend%20(Java)/mappings/New%20Mapping&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;DELETE映射&lt;/h6&gt;
&lt;p&gt;使用HTTP DELETE接口来删除已经存在的Agent映射。需要有修改系统配置文件的权限。重载POST接口提供与HTTP DELETE相同的输出。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;DELETE&lt;/th&gt;
&lt;th&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/profiles/&amp;lt;profilename&amp;gt;/agentgroups/&amp;lt;groupname&amp;gt;/mappings/&amp;lt;mappingalias&amp;gt;&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/profiles/&amp;lt;profilename&amp;gt;/agentgroups/&amp;lt;groupname&amp;gt;/mappings/&amp;lt;mappingalias&amp;gt;?httpMethod=DELETE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;Mandatory&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;profilename&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;groupname&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mappingalias&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;需要删除的Agent映射的alias&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;本例展示如何删除Agent映射CustomerFrontend_easyTravel的alias。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求URL&lt;/strong&gt;&lt;br&gt;
DELETE &lt;code&gt;https://localhost:8021/rest/management/profiles/easyTravel/agentgroups/Customer%20Web%20Frontend%20(Java)/mappings/CustomerFrontend_easyTravel&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应代码&lt;/strong&gt;&lt;br&gt;
204 No Content&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Agents和Collectors (REST)&lt;/h4&gt;
&lt;h5&gt;Agents&lt;/h5&gt;
&lt;p&gt;Dynatrace Server提供2个RESTful 接口与Dynatrace Agents交互。使用List Agents(2447页)接口来收集Dynatrace Agents的信息。使用Hot Sensor Placement接口来执行指定Dynatrace Agent的传感器热部署(2448页)&lt;/p&gt;
&lt;h6&gt;List Agents&lt;/h6&gt;
&lt;p&gt;该接口列出所有已知的Dynatrace Agents，并且提供诸如它们连接的Collector和其他元数据信息。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;GET&lt;/th&gt;
&lt;th&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/agents&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;produces text/xml&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;请求URL&lt;/strong&gt;&lt;br&gt;
GET &lt;code&gt;https://localhost:8021/rest/management/agents&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;响应代码&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;agents&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;agentinformation&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;agentGroup&amp;gt;&lt;/span&gt;easyTravelBackend&lt;span class="nt"&gt;&amp;lt;/agentGroup&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;agentId&amp;gt;&lt;/span&gt;-91443089&lt;span class="nt"&gt;&amp;lt;/agentId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;capture&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/capture&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;classLoadCount&amp;gt;&lt;/span&gt;4783&lt;span class="nt"&gt;&amp;lt;/classLoadCount&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;collectorinformation&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Embedded dynaTrace Collector&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;host&amp;gt;&lt;/span&gt;GRABS&lt;span class="nt"&gt;&amp;lt;/host&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;connected&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/connected&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;embedded&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/embedded&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/collectorinformation&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;easyTravel&lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;connected&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/connected&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;eventCount&amp;gt;&lt;/span&gt;70&lt;span class="nt"&gt;&amp;lt;/eventCount&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;host&amp;gt;&lt;/span&gt;GRABS&lt;span class="nt"&gt;&amp;lt;/host&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;licenseInformation&amp;gt;&lt;/span&gt;License OK&lt;span class="nt"&gt;&amp;lt;/licenseInformation&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;licenseOk&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/licenseOk&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;easyTravelBackend&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;processId&amp;gt;&lt;/span&gt;6612&lt;span class="nt"&gt;&amp;lt;/processId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;skippedEvents&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/skippedEvents&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;skippedPurePaths&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/skippedPurePaths&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;startupTimeUTC&amp;gt;&lt;/span&gt;1250107304703&lt;span class="nt"&gt;&amp;lt;/startupTimeUTC&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;supportsHotSensorPlacement&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/supportsHotSensorPlacement&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;systemProfile&amp;gt;&lt;/span&gt;easyTravel&lt;span class="nt"&gt;&amp;lt;/systemProfile&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;technologyType&amp;gt;&lt;/span&gt;Java&lt;span class="nt"&gt;&amp;lt;/technologyType&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;totalClassLoadCount&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/totalClassLoadCount&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;totalCpuTime&amp;gt;&lt;/span&gt;0.0&lt;span class="nt"&gt;&amp;lt;/totalCpuTime&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;totalExecutionTime&amp;gt;&lt;/span&gt;0.0&lt;span class="nt"&gt;&amp;lt;/totalExecutionTime&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;totalPurePathCount&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/totalPurePathCount&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/agentinformation&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/agents&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;响应代码&lt;/strong&gt;&lt;br&gt;
200 OK&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;传感器热部署&lt;/h6&gt;
&lt;p&gt;该接口执行ID为&lt;agent_id&gt;的Dynatrace Agent的传感器热部署。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;GET&lt;/th&gt;
&lt;th&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/agents/&amp;lt;agent_id&amp;gt;/hotsensorplacement&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;produces text/xml&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;Mandatory&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;路径&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;agent_id&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;对应Dynatrace Agent的ID&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;本例激活了ID为-86650354的Dynatrace Agent的传感器热部署。XML响应描述了请求被成功执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求URL&lt;/strong&gt;&lt;br&gt;
GET &lt;code&gt;https://localhost:8021/rest/management/agents/-86650354/hotsensorplacement&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;响应内容&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;result&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;响应代码&lt;/strong&gt;&lt;br&gt;
200 OK&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;Collectors&lt;/h5&gt;
&lt;h6&gt;列出Collectors&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;GET&lt;/th&gt;
&lt;th&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/collectors&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;produces text/xml&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;返回的XML包含关于已连接的collectors的根节点和子节点的详细信息。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;collectors&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://localhost:8021/rest/management/collectors&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;collectorinformation&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://localhost:8021/rest/management/collectors/Embedded%20dynaTrace%20Collector@GRABS&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;connected&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/connected&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;embedded&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/embedded&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;host&amp;gt;&lt;/span&gt;GRABS&lt;span class="nt"&gt;&amp;lt;/host&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Embedded dynaTrace Collector&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/collectorinformation&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/collectors&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;Collector细节&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;GET&lt;/th&gt;
&lt;th&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/collectors/&amp;lt;collectorname&amp;gt;&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;produces text/xml&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;返回的XML包括该collector的根节点的细节信息。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;collectorinformation&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://localhost:8021/rest/management/collectors/Embedded%20dynaTrace%20Collector@GRABS&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;connected&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/connected&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;embedded&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/embedded&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;host&amp;gt;&lt;/span&gt;GRABS&lt;span class="nt"&gt;&amp;lt;/host&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Embedded dynaTrace Collector&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/collectorinformation&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;重启和关闭Collector&lt;/h6&gt;
&lt;p&gt;Dynatrace Server提供2个REST接口来重启和关闭已连接的Dynatrace Collectors。都是HTTP POST请求。下列2个例子展示了如何重启和停止已连接到Dynatrace Server的collectors。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;POST https://&amp;lt;server&amp;gt;:8021/rest/management/collector/&amp;lt;collectorname&amp;gt;/restart HTTP/1.1
POST https://&amp;lt;server&amp;gt;:8021/rest/management/collector/&amp;lt;collectorname&amp;gt;/shutdown HTTP/1.1
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;仪表板和报告 (REST)&lt;/h4&gt;
&lt;p&gt;Dynatrace Server提供一系列的RESTful接口来通过HTTP请求创建仪表板报告。使用这个接口来取回不同文件格式的仪表板中的信息，并且通过灵活的参数来选择报告数据的源和时间段。&lt;br&gt;
关于报告的概览信息和Dynatrace的报告功能，见报告(1966页)。&lt;/p&gt;
&lt;h5&gt;生成仪表板报告&lt;/h5&gt;
&lt;p&gt;通过REST生成报告的语法如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;GET&lt;/th&gt;
&lt;th&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/reports/create/&amp;lt;dashboardname&amp;gt;&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6&gt;参数&lt;/h6&gt;
&lt;p&gt;你可以添加请求参数来完善报告。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​:heavy_exclamation_mark: 更改只应用在仪表板等级。单个dashlet（如数据源）的特殊配置不受这些参数的影响。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;强制&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;类型(2451页)&lt;/td&gt;
&lt;td&gt;指定请求输出类型&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;HTML&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;格式(2451页)&lt;/td&gt;
&lt;td&gt;指定用于选择的报告类型的报告格式&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;已选择的基于报告内部基本类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;过滤器(2451页)&lt;/td&gt;
&lt;td&gt;设置源的过滤器，但是会被指定的源过滤器覆盖。可以被指定多次&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;源(2452页)&lt;/td&gt;
&lt;td&gt;负载仪表板的默认源&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;比较(2452页)&lt;/td&gt;
&lt;td&gt;覆盖(如必要则激活)默认数据源的参照&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6&gt;# 参数细节&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;type&lt;/strong&gt;&lt;br&gt;
指定输出类型。指定类型可以在Reporting(1966页)找到或者可以通过REST列出(2454页)。&lt;br&gt;
示例：&lt;br&gt;
URI    &lt;code&gt;https://localhost:8021/rest/management/reports/create/demo?type=CSV&lt;/code&gt;&lt;br&gt;
这会创建一个CSV格式的，叫做&lt;strong&gt;demo&lt;/strong&gt;的报告。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;format&lt;/strong&gt;&lt;br&gt;
一些类型提供不同的格式。每种类型可用的格式可以在"每种类型支持格式列表"(2454页)找到。&lt;br&gt;
示例：&lt;br&gt;
URI    &lt;code&gt;https://localhost:8021/rest/management/reports/create/demo?type=HTML&amp;amp;format=HTML%20Paged&lt;/code&gt;&lt;br&gt;
这会创建一个叫做&lt;strong&gt;demo&lt;/strong&gt;的HTML报告。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;filter&lt;/strong&gt;&lt;br&gt;
Filters可以自定义报告使用的数据。关于filters的详细届时，参见REST Filters(2550页)。&lt;br&gt;
示例：&lt;br&gt;
URI    &lt;code&gt;https://localhost:8021/rest/management/reports/create/demo?filter=tf:Last5Min&amp;amp;filter=ag:AgentGroups?Browser&lt;/code&gt;&lt;br&gt;
这会创建一个dashboard demo的HTML格式的报告，时间为过去5min，Agent Group为&lt;strong&gt;Browser&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;source&lt;/strong&gt;&lt;br&gt;
源可以覆盖报告的dashboard的源系统配置文件。&lt;br&gt;
示例：&lt;br&gt;
URI   &lt;code&gt;https://localhost:8021/rest/management/reports/create/demo?source=live:easyTravel&lt;/code&gt;&lt;br&gt;
这回创建&lt;strong&gt;demo&lt;/strong&gt; dashboard的HTML格式的报告，使用活动session &lt;strong&gt;easyTravel&lt;/strong&gt;作为源。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​:heavy_exclamation_mark:​ source参数的值是在Dynatrace Client上储存会话的名字。你可能需要encode一些字符来构造一个合法的URL。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;compare&lt;/strong&gt;&lt;br&gt;
URI   &lt;code&gt;https://localhost:8021/rest/management/dashboard/Incident%20Dashboard?compare=stored:easyTravel%20baseline&lt;/code&gt;&lt;br&gt;
这个事件仪表板会比较默认源和储存的会话&lt;strong&gt;easyTravel&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询默认配置的本地Server的事件仪表板： &lt;code&gt;https://localhost:8021/rest/management/reports/create/Incident%20Dashboard&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;改变默认仪表板的源为live session easyTravel。 &lt;code&gt;https://localhost:8021/rest/management/reports/create/Incident%20Dashboard?source=live:easyTravel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对默认仪表板源应用web 请求过滤  &lt;code&gt;https://localhost:8021/rest/management/reports/create/Incident%20Dashboard?filter=wr:/frontend/userlogin.do&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置一个基线session作为比较源  &lt;code&gt;https://localhost:8021/rest/management/reports/create/Incident%20Dashboard?compare=stored:easyTravel%20baseline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;过滤UserLogin和UserLogout事务。  &lt;code&gt;https://localhost:8021/rest/management/reports/create/Incident%20Dashboard?filter=bt:UserLogin&amp;amp;filter=bt:UserLogout&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;请求过去15min数据。  &lt;code&gt;https://localhost:8021/rest/management/reports/create/Incident%20Dashboard?filter=tf:Last15Min&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;请求昨天数据  &lt;code&gt;https://localhost:8021/rest/management/reports/create/Incident%20Dashboard?filter=tf:Yesterday&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;请求过去15s的数据  &lt;code&gt;https://localhost:8021/rest/management/reports/create/Incident%20Dashboard?filter=tf:OffsetTimeframe?15:SECONDS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;请求from 2015-03-14 09:26 GMT to 09:27 GMT的数据。  &lt;code&gt;https://localhost:8021/rest/management/reports/create/Incident%20Dashboard?filter=tf:CustomTimeframe?1426339613000:1426339620000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;仪表板信息&lt;/h5&gt;
&lt;h6&gt;列出可用仪表板&lt;/h6&gt;
&lt;p&gt;要得到可用仪表板，发送下列RESTful请求：&lt;br&gt;
|     |                                                    |                   |&lt;br&gt;
| --- | -------------------------------------------------- | ----------------- |&lt;br&gt;
| GET | &lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/dashboards&lt;/code&gt; | produces text/xml |&lt;/p&gt;
&lt;p&gt;返回的XML包含仪表板的根节点和子节点。&lt;em&gt;href&lt;/em&gt;属性包含报告这个仪表板的链接。在特殊情况下，一个仪表板会把一个icon作为引用，icon可以请求，带有&lt;em&gt;icon&lt;/em&gt;属性的链接。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​:heavy_exclamation_mark:​ 只会列出登陆用户可用的仪表板。没有权限的仪表板不会列出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;仪表板Icon&lt;/h6&gt;
&lt;p&gt;一些预配置的仪表板引用了PNG，GIF，或JPEG格式的图标。使用下列请求来下载指定仪表板的图标：&lt;br&gt;
GET    &lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/dashboards/&amp;lt;dashboardname&amp;gt;/icon&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;类型和格式&lt;/h5&gt;
&lt;h6&gt;列出受支持的报告类型&lt;/h6&gt;
&lt;p&gt;报告类型是指由Dynatrace Server提供的报告功能中的一种输出格式，如PDF和HTML。报告类型可以支持多种报告格式，如HTML不同的排版，但是一般情况下每种报告类型只有一种报告格式。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/reports/types&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;produces text/xml&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;返回XML包含一个&lt;em&gt;reporttypes&lt;/em&gt;根节点，和列出可用类型的&lt;em&gt;reporttype&lt;/em&gt;子节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;reporttypes&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://localhost:8021/rest/management/reports/types&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;reporttype&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTML&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;reporttype&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PDF&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;reporttype&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CSV&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;reporttype&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;XML&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;reporttype&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;XLS&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;reporttype&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;XLSX&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;reporttype&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;XSD&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;reporttype&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;XSL&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/reporttypes&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;列出每种类型受支持的格式&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/reports/formats&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;produces text/xml&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;返回XML包含一个&lt;em&gt;reporttypes&lt;/em&gt;根节点和列出可用仪表板的&lt;em&gt;reporttype&lt;/em&gt;子节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;br&gt;
要得到可用的HTML报告的格式：&lt;br&gt;
URL   &lt;code&gt;https://localhost:8021/rest/management/reports/formats/HTML&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;返回：&lt;br&gt;
&lt;strong&gt;响应示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;reportformats&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://localhost:8021/rest/management/reports/formats/HTML&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;reportformat&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTML Report&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Produces a report in HTML format&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/reportformat&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;reportformat&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTML Paged&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Produces a report in HTML format with tabs to quickly switch between the Dashlets&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/reportformat&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/reportformats&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;扩展XML报告&lt;/h5&gt;
&lt;p&gt;XML报告可以像任何其他报告一样被创建。也有一个指定的XML报告接口（2455页）支持一些额外的参数。&lt;/p&gt;
&lt;h5&gt;XML报告（REST）&lt;/h5&gt;
&lt;h6&gt;介绍&lt;/h6&gt;
&lt;p&gt;除了常规的REST 报告（2450页），Dynatrace Server对于XML报告也支持另一种REST接口。它提供比常规接口更多的参数。XML报告也可以使用客户端报告(1973页)来生成。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​:heavy_exclamation_mark:​ XML REST报告与常规REST报告不同。一些参数列在下边，这些参数在其他报告类型和格式里不可用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;XML请求接口&lt;/h6&gt;
&lt;p&gt;创建XML报告的常用语法是：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;请求类型&lt;/th&gt;
&lt;th&gt;HTTP GET&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;URI&lt;/td&gt;
&lt;td&gt;&lt;code&gt;http://DTSERVER:8020/rest/management/dashboard/DASHBOARDNAME?PARAMETERS&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;查看安装通信(525页)获取更多配置细节。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​:heavy_exclamation_mark:​ 请注意常规REST报告使用接口 /rest/management/reports/create/ 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;参数&lt;/h6&gt;
&lt;p&gt;下列参数配置报告和仪表板。变更只应用在仪表板级别。对于单个dashlet的特定设置无法修改。&lt;br&gt;
参数&lt;strong&gt;source&lt;/strong&gt;， &lt;strong&gt;compare&lt;/strong&gt;， &lt;strong&gt;filter&lt;/strong&gt;在仪表板和报告(REST)(2451页)中有说明。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;强制&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;源(2452页)&lt;/td&gt;
&lt;td&gt;覆盖仪表板默认数据源&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;includeLayout(2456页)&lt;/td&gt;
&lt;td&gt;设为&lt;em&gt;true&lt;/em&gt;(默认为false)，额外的布局信息被添加，像是表的列顺序，列显示名称，或排序。(只有XML可用)&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;过滤器(2451页)&lt;/td&gt;
&lt;td&gt;设置源的过滤器，但是会被指定的源过滤器覆盖。可以被指定多次&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;源(2452页)&lt;/td&gt;
&lt;td&gt;负载仪表板的默认源&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;比较(2452页)&lt;/td&gt;
&lt;td&gt;覆盖(如必要则激活)默认数据源的参照&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;purePathDetails(2457页)&lt;/td&gt;
&lt;td&gt;启用报告的全部细节，包括报告仪表板中一个或者所有PurePath的所有节点数据。这只会影响PurePath dashlet的报告。(只有XML可用)&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6&gt;# includeLayout&lt;/h6&gt;
&lt;p&gt;&lt;em&gt;includeLayout&lt;/em&gt;决定是否需要在XML报告里添加额外的布局信息。&lt;br&gt;
&lt;em&gt;示例：&lt;/em&gt;&lt;br&gt;
URI    &lt;code&gt;http://localhost:8020/rest/management/dashboard/demo?includeLayout=true&lt;/code&gt;&lt;br&gt;
这会创建一个包含额外布局信息的XML报告，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;layout&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;sort&lt;/span&gt; &lt;span class="na"&gt;field=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;exec&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;order=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;descending&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;order=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;state&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;display=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;order=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;display=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PurePath&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;order=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;agent&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;display=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Agent&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;order=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;node_count&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;display=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Size&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;order=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;8&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;exec&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;display=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Duration [ms]&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;order=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;7&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;start&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;display=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Start Time&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;order=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;9&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;agentid&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;display=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Agent ID&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;order=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tagid&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;display=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tag ID&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;order=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;6&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;application&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;display=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Application&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;order=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;breakdown&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;display=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Breakdown&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;order=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;response_time&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;display=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Response Time [ms]&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/layout&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;# purePathDetails&lt;/h6&gt;
&lt;p&gt;&lt;em&gt;purePathDetails&lt;/em&gt; 和PurePath dashlet中PurePath 树显示的是等效的。该参数只影响PurePath dashlet的报告。它可以选择所有的PurePath(purePathDetails=ALL)或者通过PurePath标识符(2457页)选择指定的Purepath。&lt;br&gt;
&lt;em&gt;示例：&lt;/em&gt;&lt;br&gt;
URI    &lt;code&gt;http://localhost:8020/rest/management/dashboard/demo?purePathDetails=ALL&lt;/code&gt;&lt;br&gt;
这将会创建XML报告，包括demo仪表板(包含一个PurePath dashlet)的所有PurePath细节。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​:heavy_exclamation_mark:​  请求所有PurePath细节可能会产生巨大的数据量。导出所有PurePath会花费很长时间，取决于报告中PurePath的数量和节点。当导出所有PurePath数据时，Dynatrace Server的CPU开销可能会增加。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;XML报告的PurePath 标识符&lt;/h6&gt;
&lt;p&gt;要选择你想看到细节的PurePath，你需要通过它的Agent ID和Tag ID来确定。要得到这些数据，打开PurePath dashlet，选择指定Purepath的&lt;strong&gt;详细信息&lt;/strong&gt;。&lt;strong&gt;Agent ID&lt;/strong&gt;和&lt;strong&gt;Tag ID&lt;/strong&gt;会列出。你也可以再PurePath dashlet上显示该列。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;部分&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;强制&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PA&lt;/td&gt;
&lt;td&gt;十进制或十六进制('0x'开头)的Agent tag&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;PA=0x4ae37f41&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PT&lt;/td&gt;
&lt;td&gt;十进制格式的tag 号&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;PT=0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;示例:&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;下列请求会从demo仪表板中获取一个指定PurePath的详细信息：&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URI    &lt;code&gt;http://localhost:8020/rest/management/dashboard/demo?purePathDetails=PT=1175239;PA=0xe1bfd3b9&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;返回的XML(节选)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dashboardreport&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;demo&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;6.2.0.1140&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;reportdate=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2015-03-18T13:44:21.006+01:00&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;description=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;easyTravel&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;filtersummary=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;last 30 minutes (auto)&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;data&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;purepathsdashlet&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PurePaths&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;description=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;displaysource=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Base&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;purepaths&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;purepath&lt;/span&gt; &lt;span class="na"&gt;state=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OK&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/CalculateRecommendations&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;agent=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CustomerFrontend_easyTravel_8080@lnz126872d02:5872&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;node_count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;6639&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;exec=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3292.459228515625&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;start=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Wed Mar 18 13:43:53 CET 2015&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;agentid=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;e1bfd3b9&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;tagid=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1178204&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;application=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;easyTravel portal&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;breakdown=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CPU: 844.514 ms, Sync: -, Wait: -, Suspension: 1,978.724 ms&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;response_time=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.25823116302490234&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;purepath&lt;/span&gt; &lt;span class="na"&gt;state=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Transaction failed&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/services/BookingService/storeBooking&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;agent=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CustomerFrontend_easyTravel_8080@lnz126872d02:5872&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;node_count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;49&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;exec=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3008.294189453125&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;start=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Wed Mar 18 13:43:05 CET 2015&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;agentid=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;e1bfd3b9&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;tagid=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1175239&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;application=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;easyTravel mobile&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;breakdown=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CPU: 832.091 ms, Sync: -, Wait: -, Suspension: 1,075.756 ms&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;response_time=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3008.294189453125&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;node&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse resp)&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.dynatrace.easytravel.frontend.servlet.BackendServicesServlet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;argument=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/services/BookingService/storeBooking&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;agent=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CustomerFrontend_easyTravel_8080@lnz126872d02:5872&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;api=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;easyTravel, Servlet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;totaltime=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3008.2942302301526&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;relativestart=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;attachment&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;EuWebRequestNodeAttachment&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sessioncookie&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2EB3EB92778753CF9A2C12BC2D0AA006&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;requestid&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1882790301&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;responseid&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1744252718&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/attachment&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;示例&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;为demo仪表板创建默认XML报告： &lt;code&gt;http://localhost:8020/rest/management/dashboard/demo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用session 'easyTravel'，时间为'过去7天': &lt;code&gt;http://localhost:8020/rest/management/dashboard/demo?source=live:easyTravel!tf:Last7d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用'easyTravel Baseline'作为比较源： &lt;code&gt;http://localhost:8020/rest/management/dashboard/Incident%20Dashboard?compare=stored:easyTravel%20Baseline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;报告包含布局信息： &lt;code&gt;http://localhost:8020/rest/management/dashboard/demo?includeLayout=true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;包含Agent ID xe1bdf3b9 和 Tag ID 1306756 的PurePath详细信息： &lt;code&gt;http://localhost:8020/rest/management/dashboard/demo?purePathDetails=PA=0xe1bfd3b9;PT=1306756&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h6&gt;XML Schema&lt;/h6&gt;
&lt;p&gt;响应被XML Schema指定，可以在Dynatrace Server上查到具体定义：&lt;br&gt;
URI &lt;code&gt;http://DTSERVER:8020/rest/management/schema/dashboard&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;事件停机时间(REST)&lt;/h4&gt;
&lt;h5&gt;概览&lt;/h5&gt;
&lt;p&gt;在Dynatrace，如果超过指定阈值，事件规则可以被定义来执行行为(如发邮件)。某些情况下，你可能不想触发这些行为，比如系统备份，数据库镜像，server重启等等。你可以配置事件停机时间(1893页)来抑制这些规则。&lt;br&gt;
使用Dynatrace客户端或者Dynatrace Server RESTful服务:  &lt;code&gt;http://&amp;lt;server&amp;gt;:8020/rest/management/profiles/&amp;lt;profilename&amp;gt;/incidentdowntimes/&amp;lt;downtimename&amp;gt;&lt;/code&gt; 来管理事件停机时间。你可以通过发送HTTP GET请求来检查事件停机时间细节。你必须使用HTTP方法PUT来添加一个新的事件停机时间或者升级一个现有的停机时间。使用HTTP方法DELETE来删除事件停机时间。&lt;/p&gt;
&lt;h5&gt;GET 事件停机时间&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;https://&amp;lt;server&amp;gt;:8021/rest/management/profiles/&amp;lt;profilename&amp;gt;/incidentdowntimes/&amp;lt;downtimename&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;produces  application/xml&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;会得到一个已存在事件停机时间的XML展示。&lt;br&gt;
&lt;strong&gt;参数&lt;/strong&gt;&lt;br&gt;
| 类型 | 参数         | 描述               | 强制 | 默认值 |&lt;br&gt;
| ---- | ------------ | ------------------ | ---- | ------ |&lt;br&gt;
| Path | profilename  |                    | yes  |        |&lt;br&gt;
| Path | downtimename | 对应停机时间的名称 | yes  |        |&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 26 May 2019 21:09:38 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-26:/dynatrace-appmon-handbook-25-restful-api.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 21.分析事件简要流程</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-21-analysis-events.html</link><description>&lt;h2 id="_1"&gt;告警类别及含义&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_2"&gt;应用告警&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;响应时间/速度较慢的请求的响应时间降低&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;响应时间降低--对应的应用或URL平均响应时间(中值)明显高于期望。即使所观测的响应时间尚可被客户接受，这种状态明显是应用程序或是硬件问题导致，并且会降低所能达到的最大吞吐量。&lt;/li&gt;
&lt;li&gt;速度较慢的请求的响应时间降低--观测中 10% 最慢请求的反应时间明显增加。这将导致用户体验变差。应用程序及硬件问题都能导致该问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;失败率过高/页面操作/事务整体失败率高&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;失败率过高--事务失败率远高于预期。&lt;/li&gt;
&lt;li&gt;页面操作失败率高--总体页面操作失败率超过预设阀值。&lt;/li&gt;
&lt;li&gt;事务整体失败率高--事务整体失败率高。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_3"&gt;中间件告警&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;应用程序进程不可用（非预期）&lt;/h4&gt;
&lt;p&gt;与之前连接的应用程序进程/Agent 之间的连接已丢失，无法与 Agent 断开连接。&lt;/p&gt;
&lt;p&gt;一般出现该告警的原因为停止或杀掉对应中间件的进程。&lt;/p&gt;
&lt;h4&gt;应用程序进程运行状况不佳&lt;/h4&gt;
&lt;p&gt;由于在垃圾回收过程中花费大量执行时间，因此应用程序进程的显著挂起时间会持续一段时间。&lt;/p&gt;
&lt;p&gt;一般是由于频繁GC导致的。&lt;/p&gt;
&lt;h4&gt;可能挂起的JVM&lt;/h4&gt;
&lt;p&gt;可能的java VM挂起。可能是由于heap/thread dump或者GC活动。原因未知需要手动分析。&lt;/p&gt;
&lt;h4&gt;应用程序进程内存不足&lt;/h4&gt;
&lt;p&gt;应用程序进程报出内存不足。&lt;/p&gt;
&lt;p&gt;一般是由于中间件内存使用已满或内存溢出。&lt;/p&gt;
&lt;h3 id="_4"&gt;主机告警&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;主机类告警的阈值与所属的主机组有关。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCXRay6p/bea1t.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;CPU运行状况不佳&lt;/h4&gt;
&lt;p&gt;CPU使用率或系统时间超过预设阈值。&lt;/p&gt;
&lt;p&gt;CPU的阈值有2个阈值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用率&lt;/li&gt;
&lt;li&gt;系统时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;硬盘运行状况不佳&lt;/h4&gt;
&lt;p&gt;主机硬盘的可用空间大小及百分比低于预设阈值。有2个阈值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可用空间大小&lt;/li&gt;
&lt;li&gt;可用空间百分比&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;内存运行状况不佳&lt;/h4&gt;
&lt;p&gt;主机的可用内存大小及百分比低于预设阈值或内存页面故障大于预设阈值。有3个阈值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可用内存大小&lt;/li&gt;
&lt;li&gt;可用内存百分比&lt;/li&gt;
&lt;li&gt;页面故障数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;网络运行状况不佳&lt;/h4&gt;
&lt;p&gt;网络带宽使用率大于预设阈值。有1个阈值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带宽使用率&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;告警简要分析流程&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_6"&gt;简介&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;通用入口&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;“驾驶舱”，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCY07pnX/Ry7Q9.jpg"&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Start Center，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCY32F9u/eT8op.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;“监控”，如下图：(绿色正常/红色异常/灰色无数据)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCY4WDEM/l7JDg.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_7"&gt;响应时间/速度较慢的请求的响应时间降低&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;打开事件仪表板，如下图：(告警红色为Severe级别/黄色为Warning级别；告警时间段可以按需选择)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCY7f5oF/dYODm.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;移动到对应的告警信息→右键→深入分析→PurePath，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYaxIBv/uWnkT.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;跳转到PurePath仪表板，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYdl5vQ/10ziUa.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;
&lt;p&gt;右键仪表板→编辑筛选器→筛选对应的PurePath并应用，如下图:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYehBhS/Jkp4w.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYfBRlP/NMHo5.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全选所有的PurePath→右键→深入分析→响应时间热点 （此处可以点击第二列”响应时间“对PurePath进行排序，针对性分析）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYhLI4x/nAr3y.jpg"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;响应时间热点仪表板，如下：(针对“速度较慢的请求的响应时间降低”告警，需要在右上角“百分比筛选器进行选择。至此，初步分析结果已得出)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYk4En1/n9rDF.jpg"&gt;&lt;/p&gt;
&lt;ol start="8"&gt;
&lt;li&gt;
&lt;p&gt;最终分析结果：API细分仪表板及方法细分仪表板，如下图：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYlQlsd/NpiKX.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYlQd76/REkXi.jpg"&gt;&lt;/p&gt;
&lt;ol start="10"&gt;
&lt;li&gt;更近一步分析：可以直接分析源代码，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYnAAJy/yrJBF.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYnwwKB/LynTC.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_8"&gt;失败率过高/页面操作/事务整体失败率高&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;事件→Purepath，如上文&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑筛选器内容，如上文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按错误排序，如下图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYrsFLH/Qyujo.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;右键上图报错方法，出现具体的报错/异常/日志等内容，如下图：(可以多看十几条PurePath，如果报错内容都相同，则已经初步定位到告警原因)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYsL7Nf/UcVBq.jpg"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;全选所有PurePath→深入分析→错误率相关菜单，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYtOs3i/Myyj4.jpg"&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;定位到告警原因，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYuXMxi/148DNZ.jpg"&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h3 id="_9"&gt;应用程序进程不可用（非预期）&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该类报错通常是由于停止或杀掉或重启中间件等进程导致的。&lt;/p&gt;
&lt;p&gt;可以直接在”事件”仪表板中查看，如下图：（告警开始时间就是停进程的时间；终止时间就是启动进程的时间）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYwhZNA/gEE3m.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_10"&gt;应用程序进程运行状况不佳&lt;a class="headerlink" href="#_10" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该类报错分析起来较为复杂，需要有丰富的中间件运维经验和dynaTrace使用经验。详细信息参考附件：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《应用程序进程运行状况不佳分析示例》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="jvm"&gt;可能挂起的JVM&lt;a class="headerlink" href="#jvm" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如上文所述：可能是由于heap/thread dump或者GC活动。原因未知需要手动分析。具体问题具体对待。&lt;/p&gt;
&lt;h3 id="_11"&gt;应用程序进程内存不足&lt;a class="headerlink" href="#_11" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如上文所述，通常是由于内存溢出或内存快满。分析流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过上文提到的入口--“监控”→点击“进程”→查看进程仪表板，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYKC06L/RD3sF.jpg"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;![](http://pic.yupoo.com/east4ming_v/FCYJdo4D/10CMzY.jpg)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;​&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;点击内存快照→创建内存快照→按需选择快照的类型并应用，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYMr7TG/RzIqA.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;dynaTrace会自动分析并给出结果，如下图：(至此已经定位到问题所在)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYO7UoS/jZMqd.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;如需进一步分析，可以点击内存快照分析的其他标签页。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYPQTpk/T02uX.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dynaTrace支持内存溢出时自动做内存快照，且默认开启，在生产环境建议关闭该功能，有需求可以针对性开启。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYRN2UG/H6NSX.jpg"&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="cpu"&gt;CPU运行状况不佳&lt;a class="headerlink" href="#cpu" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;从入口“监控”进入→主机列表→主机监控，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYV9u5l/aweYD.jpg"&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;主机监控仪表图分析，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYVyY4X/NmNbr.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;做CPU采样与线程快照（步骤与做内存快照类似，见上文）。CPU采样与线程快照分析如下：(已经定位到告警原因)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYX1rCQ/RpJ2j.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;可以对线程快照进一步分析，定位到线程的堆栈以及当时线程执行的URL请求，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYZHuqt/10KqLh.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_12"&gt;硬盘运行状况不佳&lt;a class="headerlink" href="#_12" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;直接进入主机仪表板，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCZ2mxAA/C7G0x.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_13"&gt;内存运行状况不佳&lt;a class="headerlink" href="#_13" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;直接进入主机仪表板查看内存使用率，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCZ3lGA6/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;分析占用物理内存的进程情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;JVM使用的JVM代码区、JVM数据区、heap区都应该是固定的。但是JVM进程所使用的线程栈区、永久代、内核内存是可能随着应用程序吞吐量、业务量、负载量的变化而变化的。&lt;/p&gt;
&lt;p&gt;JVM是作为一个进程运行在Linux上的。从进程的角度来看，进程能直接访问的用户内存（虚拟内存空间）被划分为5个部分：代码区、数据区、堆区、栈区、未使用区。代码区中存放应用程序的机器代码，运行过程中代码不能被修改，具有只读和固定大小的特点。数据区中存放了应用程序中的全局数据，静态数据和一些常量字符串等，其大小也是固定的。堆是运行时程序动态申请的空间，属于程序运行时直接申请、释放的内存资源。栈区用来存放函数的传入参数、临时变量，以及返回地址等数据。未使用区是分配新内存空间的预备区域。&lt;/p&gt;
&lt;p&gt;JavaNIO使得JVM可以使用内核内存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_14"&gt;网络运行状况不佳&lt;a class="headerlink" href="#_14" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;直接进入主机仪表板查看网络利用率，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCZ2o2RS/hLaMM.jpg"&gt;&lt;/p&gt;
&lt;h2 id="dynatrace"&gt;dynaTrace告警确认及关闭&lt;a class="headerlink" href="#dynatrace" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;dynaTrace的告警确认及关闭需要登录客户端，进入到“事件”仪表板进行操作。具体如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCZ6HvHe/eop6b.jpg"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 26 May 2019 10:02:54 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-26:/dynatrace-appmon-handbook-21-analysis-events.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 22.数据流接口-PureLytics</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-22-purelytics.html</link><description>&lt;h2 id="_1"&gt;概览&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PureLytics stream从AppMon Server发送实时UEM数据到外部数据源如Elasticsearch，这样你可以利用UEM数据作为大数据分析的一部分。流数据包括用户访问，用户行为和客户端错误。&lt;/p&gt;
&lt;p&gt;使用Elasticsearch，基于大量的访问和用户行为数据来做即席分析，并且结合来自其他源的分析数据。你可以通过使用可视化工具如Kibana做细节图和其他数据可视化来消耗来自外部源的存储组合数据，以此提供详细的用户体验分析。&lt;/p&gt;
&lt;p&gt;当启用时，PureLytics stream自动发送所有访问和用户行为的JSON数据到配置的HTTP端点。导出也可以在特定时间或session按命令触发。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX1LCylT/medium.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于Elasticsearch&lt;/p&gt;
&lt;p&gt;Elasticsearch is a highly scalable open-source search engine with a full-text search-engine library. It includes a distributed real-time document store where all fields are indexed and can be searched. Streaming live UEM data to Elasticsearch provides multi-dimensional Ad-hoc analysis on large data sets over long time frames.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="json-document"&gt;JSON Document 格式&lt;a class="headerlink" href="#json-document" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;访问，用户行为，和客户端错误数据作为JSON导出。对于访问、用户行为的Business Transactions也作为JSON的一部分导出。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JSON  Document 示例&lt;/p&gt;
&lt;p&gt;下表展示了导出JSON的示例&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Visit&lt;/th&gt;
&lt;th&gt;User Action&lt;/th&gt;
&lt;th&gt;Client Error&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://community.dynatrace.com/community/download/attachments/221381017/browser_visit.txt?version=3&amp;amp;modificationDate=1453723096180&amp;amp;api=v2"&gt;Browser Visit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://community.dynatrace.com/community/download/attachments/221381017/browser_useraction.txt?version=6&amp;amp;modificationDate=1474979996337&amp;amp;api=v2"&gt;Browser User Action&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://community.dynatrace.com/community/download/attachments/221381017/javascript_error.txt?version=2&amp;amp;modificationDate=1453723238497&amp;amp;api=v2"&gt;Javascript Error&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://community.dynatrace.com/community/download/attachments/221381017/mobile_visit.txt?version=2&amp;amp;modificationDate=1453723109770&amp;amp;api=v2"&gt;Mobile Visit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://community.dynatrace.com/community/download/attachments/221381017/mobile_useraction.txt?version=1&amp;amp;modificationDate=1453723162260&amp;amp;api=v2"&gt;Mobile User Action&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://community.dynatrace.com/community/download/attachments/221381017/mobile_web_request.txt?version=2&amp;amp;modificationDate=1453723254897&amp;amp;api=v2"&gt;Mobile Web Request&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://community.dynatrace.com/community/download/attachments/221381017/mobile_error_code.txt?version=1&amp;amp;modificationDate=1453723269387&amp;amp;api=v2"&gt;Mobile Error Code&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://community.dynatrace.com/community/download/attachments/221381017/mobile_exception.txt?version=1&amp;amp;modificationDate=1453723295607&amp;amp;api=v2"&gt;Mobile Exception&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://community.dynatrace.com/community/download/attachments/221381017/mobile_crash.txt?version=1&amp;amp;modificationDate=1453723428797&amp;amp;api=v2"&gt;Mobile Crash&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://community.dynatrace.com/community/download/attachments/221381017/javascript_warning.txt?version=1&amp;amp;modificationDate=1453973925313&amp;amp;api=v2"&gt;Javascript Warning &amp;amp; Info&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;h2 id="purelytics-streamelasticsearchkibana"&gt;使用PureLytics Stream整合Elasticsearch和Kibana&lt;a class="headerlink" href="#purelytics-streamelasticsearchkibana" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;下列视频展示如何使用Kibana可视化来自PureLytics的数据的示例。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://s3.amazonaws.com/apmu-test-videos/RBZaCD-eEh41srh-wF0jkI/Whats_New_63_PurelyticsStream.mp4"&gt;PureLytics chats with ElasticSearch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下部分描述了使用Elasticsearch和Kibana来可视化PureLytics Stream的一般步骤。&lt;/p&gt;
&lt;h3 id="_2"&gt;需求和先决条件&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;需求和先决条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Elasticsearch 1.5.2 or later. Elasticsearch 2.0.0 or higher is recommended because of the major stability improvements and improved resource use introduced in the 2.0.0 release.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Elasticsearch requires a recent version of Java on the machine where Elasticsearch runs. You can install the latest Java version from &lt;a href="http://www.java.com/"&gt;www.java.com.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Most later versions of Kibana work seamlessly with Elasticsearch. However, the latest version of Kibana is recommended because of the increased level of integration with Elasticsearch and more robust analytics and charting features.&lt;/li&gt;
&lt;li&gt;If running Elasticsearch on Windows, install cURL so you can quickly and conveniently submit requests to Elasticsearch. Download cURL from &lt;a href="http://curl.haxx.se/download.html"&gt;&lt;code&gt;http://curl.haxx.se/download.html&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Familiarity with Elasticsearch is needed for deploying Elasticsearch, creating nodes and clusters, indexing, and executing Elasticsearch queries.&lt;/li&gt;
&lt;li&gt;Familiarity with Kibana is needed for visualizing data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="streaming-target"&gt;安装Streaming Target软件和可视化软件&lt;a class="headerlink" href="#streaming-target" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果尚未安装，&lt;a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/running-elasticsearch.html"&gt;install Elasticsearch&lt;/a&gt; 和 &lt;a href="https://www.elastic.co/downloads/kibana"&gt;install Kibana&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id="elasticsearch"&gt;启动Elasticsearch和配置集群&lt;a class="headerlink" href="#elasticsearch" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;必须启动Elasticsearch并且至少在一个节点启动一个集群来创建JSON documents。最佳选择是使用至少2个节点来运行Elasticsearch 集群。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于节点和集群的附加信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is recommended to create and use multiple nodes rather than one node with more CPU cores.&lt;/li&gt;
&lt;li&gt;Node memory should be between 8 GB and 64 GB.&lt;/li&gt;
&lt;li&gt;Get the fastest SSD you can get to boost performance.&lt;/li&gt;
&lt;li&gt;Once started, communicate with Elasticsearch using the JSON based REST API residing at localhost port 9200. You can query Elasticsearch using cURL in Windows, or use graphical tools such as &lt;a href="http://www.telerik.com/fiddler"&gt;Fiddler&lt;/a&gt; or &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/restclient/"&gt;RESTClient&lt;/a&gt; on other platforms. You can also use Elasticsearch's &lt;a href="https://www.elastic.co/guide/en/sense/current/introduction.html"&gt;Sense&lt;/a&gt; plug-in, which is a simple user interface specifically for using ElasticSearch's REST API that includes auto-completion.&lt;/li&gt;
&lt;li&gt;See the official Elasticsearch documentation on &lt;a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/hardware.html"&gt;Hardware&lt;/a&gt; and &lt;a href="https://www.elastic.co/blog/found-sizing-elasticsearch"&gt;Sizing Elasticsearch&lt;/a&gt; for more information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;查看Elasticsearch 官网的&lt;a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/running-elasticsearch.html"&gt;guide&lt;/a&gt;，来获取关于启动和使用Elasticsearch的更多信息。&lt;/p&gt;
&lt;h3 id="_3"&gt;应用一个动态模板&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;应用&lt;a href="https://community.dynatrace.com/community/download/attachments/221381017/dynamic_template.txt?version=2&amp;amp;modificationDate=1455701735027&amp;amp;api=v2"&gt;dynamic template&lt;/a&gt; 到集群。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;PUT&lt;/span&gt; &lt;span class="err"&gt;_template/dynatrace&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;order&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;template&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dt_*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;quot;number_of_shards&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;6&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;mappings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;quot;useraction&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;dynamic_templates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
           &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;quot;allStrings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;mapping&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;not_analyzed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;
                 &lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;match_mapping_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;match&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;startTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;
                 &lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;endTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;
                 &lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;visitId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                     &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;long&amp;quot;&lt;/span&gt;
                 &lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;tagId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                     &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;long&amp;quot;&lt;/span&gt;
                 &lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;agentId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                     &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;long&amp;quot;&lt;/span&gt;
                 &lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;clientDetails&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                      &lt;span class="nt"&gt;&amp;quot;gpsCoordinates&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;geo_point&amp;quot;&lt;/span&gt;
                      &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                 &lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;resourceReport&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                   &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                     &lt;span class="nt"&gt;&amp;quot;cdn&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                       &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                         &lt;span class="nt"&gt;&amp;quot;domains&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                           &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nested&amp;quot;&lt;/span&gt;
                         &lt;span class="p"&gt;}&lt;/span&gt;
                       &lt;span class="p"&gt;}&lt;/span&gt;
                     &lt;span class="p"&gt;},&lt;/span&gt;
                     &lt;span class="nt"&gt;&amp;quot;thirdParty&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                       &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                         &lt;span class="nt"&gt;&amp;quot;domains&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                           &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nested&amp;quot;&lt;/span&gt;
                         &lt;span class="p"&gt;}&lt;/span&gt;
                       &lt;span class="p"&gt;}&lt;/span&gt;
                     &lt;span class="p"&gt;}&lt;/span&gt;
                   &lt;span class="p"&gt;}&lt;/span&gt;
                 &lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;_parent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;visit&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;quot;visit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;dynamic_templates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
           &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;quot;allStrings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;mapping&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;not_analyzed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;
                 &lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;match_mapping_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;match&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;startTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;
                 &lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;endTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;
                 &lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;visitId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                     &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;long&amp;quot;&lt;/span&gt;
                 &lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;clientDetails&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                      &lt;span class="nt"&gt;&amp;quot;gpsCoordinates&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;geo_point&amp;quot;&lt;/span&gt;
                      &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                 &lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;quot;clienterror&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;dynamic_templates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
           &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;quot;allStrings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;mapping&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;not_analyzed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;
                 &lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;match_mapping_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;match&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;startTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;
                 &lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;visitId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;long&amp;quot;&lt;/span&gt;
                 &lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;tagId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                     &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;long&amp;quot;&lt;/span&gt;
                 &lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;agentId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                     &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;long&amp;quot;&lt;/span&gt;
                 &lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;quot;clientDetails&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                      &lt;span class="nt"&gt;&amp;quot;gpsCoordinates&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;geo_point&amp;quot;&lt;/span&gt;
                      &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                 &lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;_parent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;visit&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;aliases&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="purelytics-stream"&gt;配置PureLytics Stream&lt;a class="headerlink" href="#purelytics-stream" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;要配置AppMon来实时流传输PureLytics数据，启用PureLytics stream功能，指定Elasticsearch端点和其他AppMon Server关于实时流的设置，然后为你想导出数据的每个系统配置文件启用PureLytics stream。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;配置PureLytics Stream&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在AppMon客户端设置里打开实时流(&lt;strong&gt;Settings &amp;gt; Dynatrace Server &amp;gt; Realtime Streaming &amp;gt; PureLytics Stream&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查&lt;strong&gt;Configure PureLytics Stream.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择你想导出JSON数据的目标。 你可以导出它们到一个Elasticsearch 集群或一个通用的HTTP端点 (使用与Elasticsearch相同的块格式).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后数据到Elasticsearch集群的URL或在&lt;strong&gt;URL&lt;/strong&gt; field的通用HTTP端点（REST端口）。 &lt;strong&gt;注意:&lt;/strong&gt;  PureLytics Stream 会在输入的URL后加上 &lt;strong&gt;"/_bulk" &lt;/strong&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你想使用HTTPS和使用非官方证书，可选&lt;strong&gt;Allow untrusted SLL&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;strong&gt;Dispatch Interval(s)&lt;/strong&gt; and &lt;strong&gt;Queue Size&lt;/strong&gt;来设置每个请求块发送的数据量 和请求的间隔时间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;A request is sent when the internal document queue hits the size specified in &lt;strong&gt;Queue Size&lt;/strong&gt; &lt;strong&gt;and/or&lt;/strong&gt; after the amount of time specified in &lt;strong&gt;Dispatch Interval(s)&lt;/strong&gt;  has passed (&lt;em&gt;Dispatch Interval&lt;/em&gt;). Request size is approximately the number of documents times 2 kB. This depends heavily on factors such as configured Business Transactions and resource timings.&lt;img alt="img" src="https://community.dynatrace.com/community/download/thumbnails/221381017/config%20dialogue.png?version=2&amp;amp;modificationDate=1474975218090&amp;amp;api=v2"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;strong&gt;OK&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;strong&gt; Cockpits&lt;/strong&gt; 标签页,双击指定的系统配置文件来打开 该配置文件的Preferences 会话框。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在常用标签页, 勾选&lt;strong&gt;PureLytics Stream&lt;/strong&gt; 并点击 &lt;strong&gt;OK&lt;/strong&gt;.&lt;br&gt;
&lt;img alt="Enable the PureLytics Stream for each System Profile you want to export" src="https://community.dynatrace.com/community/download/thumbnails/221381017/system_profile.png?version=3&amp;amp;modificationDate=1474975882020&amp;amp;api=v2"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id="_4"&gt;按命令导出&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;你可以在AppMon客户端按命令导出指定的数据，或者使用PureLytics Stream REST API来导出。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用Dynatrace 客户端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;右存储的或实时的包含要导出数据的会话 并选择 &lt;strong&gt;PureLytics Stream&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="img" src="https://community.dynatrace.com/community/download/thumbnails/221381017/on_demand_export.png?version=3&amp;amp;modificationDate=1474976227450&amp;amp;api=v2"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定抓取的PureLytics stream的时间范围和哪些内容要导出（用户行为和/或访问）。 按需修改stream配置并点击 &lt;strong&gt;Stream&lt;/strong&gt;.&lt;br&gt;
&lt;img alt="img" src="https://community.dynatrace.com/community/download/thumbnails/221381017/on_demand_export_dialogue.png?version=4&amp;amp;modificationDate=1474979722060&amp;amp;api=v2"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用REST接口&lt;/p&gt;
&lt;p&gt;使用REST API来触发和监控一个按命令导出。 更多信息查看 &lt;a href="https://community.dynatrace.com/community/pages/viewpage.action?pageId=221381578"&gt;PureLytics Stream (REST)&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a job that exports data with a POST request. For example:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;POST https://&amp;lt;server&amp;gt;:8021/rest/management/profiles/&amp;lt;profilename&amp;gt;/analyticsstreamjob&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monitor the job with a GET request. For example:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;GET https://&amp;lt;server&amp;gt;:8021/rest/management/profiles/&amp;lt;profilename&amp;gt;/analyticsstreamjob/&amp;lt;jobId&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="kibana"&gt;在Kibana中可视化数据&lt;a class="headerlink" href="#kibana" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;必须配置至少一种索引模式来使用Kibana。索引模式识别你想要搜索和可视化PureLytics数据的索引。每个你指定的索引模式必须符合你的Elasticsearch索引的名称。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX1LBTRo/10UZbY.png"&gt;&lt;/p&gt;
&lt;h2 id="_5"&gt;技术细节和限制&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Documents在它们被分析后导出。 对于访问数据, 这意味者访问完成后documents才会被导出。一个访问在Elasticsearch中可视需要一定时间, 这个时间取决于访问的长度和配置的访问超时。&lt;/li&gt;
&lt;li&gt;每个配置的系统文件存储在&lt;em&gt;每个时间戳的索引上&lt;/em&gt;。每月创建一个索引，并以此命名。 例如, 开始于2016年1月的访问、用户行为和客户端错误 (使用document field &lt;code&gt;data.startTime&lt;/code&gt;) 存储于索引，命名为&lt;code&gt;dt_2016-01&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;PureLytics streaming使用Elasticsearch bulk API (&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html&lt;/a&gt;). AppMon UEM 添加 &lt;code&gt;/_bulk&lt;/code&gt; 到配置的URL之后  (仅当目标“Elasticsearch”被选中)。单一请求包含多个不同类型的documents。Bulk API也需要额外的元数据，实际数据包含多种信息, 包括使用的索引， document type, 和document ID。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dt_2016-03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;visit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1860046861_14036&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;serverID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1860046861&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;serverName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lnz124742d03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;systemProfile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;easyTravel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;visitId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14036&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;startTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1457606705739&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;endTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1457606729349&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;duration&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23610&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;application&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;easyTravel mobile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;appVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;visitTag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;additionalTags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;userExperienceIndex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;userExperience&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;satisfied&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;userExperienceReason&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Satisfied&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;connectionType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;WIFI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;bandwidth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5496&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;isConverted&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;isBounced&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;isCrashed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;pageViews&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;userActions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;failedActions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;landingPage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SearchJourneyActivity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;responseTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1909&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;isFailed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;exitPage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;easyTravel - Terms of Use&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;responseTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;289&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;isFailed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;clientType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mobile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;clientDetails&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;osFamily&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Android&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;osVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Android 2.3.3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;manufacturer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Samsung&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;deviceName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Galaxy S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;modelId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GT-I9000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;resolution&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;480x800&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;cpuInfo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;armv7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;isRooted&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;adkVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;6.1.1234&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;gpsCoordinates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;lat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;48.85832&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;lon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;2.29436&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;applicationBuildVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1234&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;ipAddress&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;159.108.218.157&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;continent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Europe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;France&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;region&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ile-de-France&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Neuilly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;convertedBy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;businessTransactions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Conversion+visits&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;measures&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;splittings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Visits+by+connection+type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;measures&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;splittings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Connection+Type+of+Visits&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;WIFI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;carrier&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Orange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dt_2016-03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;visit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1860046861_14037&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;serverID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1860046861&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;serverName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lnz124742d03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;systemProfile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;easyTravel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;visitId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14037&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;startTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1457606708560&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;endTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1457606709023&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;duration&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;463&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;application&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;easyTravel portal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;appVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;visitTag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;additionalTags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Visits - App Version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;userExperienceIndex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;userExperience&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;frustrated&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;userExperienceReason&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DueToErrorInLastAction&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;connectionType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Broadband&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;bandwidth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5496&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;isConverted&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;isBounced&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;isCrashed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;pageViews&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;userActions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;failedActions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;landingPage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;easyTravel - Terms of Use&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;responseTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;463&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;isFailed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;exitPage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;easyTravel - Terms of Use&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;responseTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;463&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;isFailed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;clientType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;browser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;clientDetails&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;osFamily&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Android&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;osVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Android 4.0.x Ice Cream Sandwich&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;browserFamily&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Chrome Mobile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;browserVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;38.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;ipAddress&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;128.133.96.84&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;continent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;North America&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;United States&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;region&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Alabama&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Montgomery&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;convertedBy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;businessTransactions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Conversion+visits&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;measures&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;splittings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Visits+by+connection+type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;measures&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;splittings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Connection+Type+of+Visits&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Broadband (&amp;gt;1500 kb/s)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;browserErrors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;videoStreams&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;audioStreams&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;isp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dt_2016-03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;useraction&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1860046861_1385397273_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;parent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1860046861_14036&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;serverID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1860046861&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;serverName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lnz124742d03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;systemProfile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;easyTravel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;visitId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14036&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;tagId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;agentId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1385397273&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;startTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1457606705739&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;endTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1457606707648&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;visitTag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;additionalTags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;searchJourney&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;prettyName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;searchJourney&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ActionEvent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;actionGroup&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Mobile ADK Actions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;actionGroupPerformanceBaseline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;apdex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;userExperience&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;satisfied&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;isFailed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;failingReasons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;responseTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1909.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;networkContributionTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1665.6201&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;serverContributionTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;26.379906&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;thirdPartyContribution&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;-1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;cdnContribution&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;-1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;application&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;easyTravel mobile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;appVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;continent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Europe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;France&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;region&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ile-de-France&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Neuilly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;clientDetails&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;osFamily&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Android&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;osVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Android 2.3.3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;manufacturer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Samsung&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;deviceName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Galaxy S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;modelId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GT-I9000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;resolution&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;480x800&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;cpuInfo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;armv7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;isRooted&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;adkVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;6.1.1234&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;gpsCoordinates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;lat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;48.85832&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;lon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;2.29436&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;applicationBuildVersion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1234&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;isPortrait&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;batteryStatus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.33563203&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;totalMemory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;790&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;freeMemory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;runningProcesses&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;networkTechnology&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;802.11x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;signalStrength&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;-115&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;xhrUrl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;clientErrors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;serverErrors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;perceivedRenderTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;perceivedRenderTimeSlowestImageSrc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SearchJourneyActivity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;viewDuration&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3593&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SearchJourneyActivity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;resourceSummary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;navTiming&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;onLoad&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;domready&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;metaData&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;adkStrings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;adkValues&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;businessTransactions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Pageview+Apdex+by+Country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;measures&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Apdex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;splittings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Country+of+Visits&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;France&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Pageview+Apdex+by+Application&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;measures&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Apdex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;splittings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}}}}&lt;/span&gt;
&lt;span class="err"&gt;(...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 26 May 2019 10:02:54 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-26:/dynatrace-appmon-handbook-22-purelytics.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 23.相关网络权限</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-23-firewall.html</link><description>&lt;h2 id="_1"&gt;网络&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;建议Dynatrace的Agent与Collector放在同一网段或2者间无防火墙。&lt;/li&gt;
&lt;li&gt;建议Dynatrace Server与数据库放在同一网段，2者间无防火墙。&lt;/li&gt;
&lt;li&gt;Dynatrace Server和Dynatrace Collector间可以有防火墙，需要开通对应的权限。&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;From&lt;/th&gt;
&lt;th&gt;To&lt;/th&gt;
&lt;th&gt;Port&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;th&gt;协议&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;dynaTrace Agent&lt;/td&gt;
&lt;td&gt;dynaTrace Collector&lt;/td&gt;
&lt;td&gt;9998&lt;/td&gt;
&lt;td&gt;建议同一网段，无防火墙。则次端口权限无需开通。&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dynaTrace Collector&lt;/td&gt;
&lt;td&gt;dynaTrace Server&lt;/td&gt;
&lt;td&gt;6698&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;需要开通&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dynaTrace Server&lt;/td&gt;
&lt;td&gt;dynaTrace Memory Analysis Server&lt;/td&gt;
&lt;td&gt;7788&lt;/td&gt;
&lt;td&gt;同一台机器或同一网段则无需开通。&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dynaTrace Client&lt;/td&gt;
&lt;td&gt;dynaTrace Server&lt;/td&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dynaTrace Server&lt;/td&gt;
&lt;td&gt;数据库（以Oracle为例）&lt;/td&gt;
&lt;td&gt;1521&lt;/td&gt;
&lt;td&gt;其他DB开通对应端口&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Components to Connect&lt;/th&gt;
&lt;th&gt;Port non-SSL&lt;/th&gt;
&lt;th&gt;PortSSL or e. HTTP&lt;/th&gt;
&lt;th&gt;Protocol&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Agent to Collector&lt;/td&gt;
&lt;td&gt;9998&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Or Agent to Server-embedded Collector if enabled for demo scenarios&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Agent to Collector&lt;/td&gt;
&lt;td&gt;8042&lt;/td&gt;
&lt;td&gt;8043&lt;/td&gt;
&lt;td&gt;HTTP(S)&lt;/td&gt;
&lt;td&gt;For AppMon 6.2 and later, the node.js Agent uses this connection. 1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AppMon Web toFrontend Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9911&lt;/td&gt;
&lt;td&gt;HTTPS&lt;/td&gt;
&lt;td&gt;Port on which browser-based dashboardsget their data.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Browser to Server&lt;/td&gt;
&lt;td&gt;8020&lt;/td&gt;
&lt;td&gt;8021&lt;/td&gt;
&lt;td&gt;HTTP(S)&lt;/td&gt;
&lt;td&gt;Web interface for RESTful Server administration, to start the Webstart Client.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Client to Frontend Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;For AppMon 6.5and later, non-SSL connections are no longer supported.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Client to Frontend Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8023&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td&gt;Tunnel via HTTP. Sent data is by default encrypted using the AES algorithm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Collector to Server&lt;/td&gt;
&lt;td&gt;(6698)&lt;/td&gt;
&lt;td&gt;6699&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;For AppMon 6.5 and later, non-SSL connections are no longer supported. For compatibility reasons with pre-6.5 collectors the 6698 plain port is still available and must be activated using the Client running in debug mode.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Collector to Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8033&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td&gt;Tunnel via HTTP. Sent data is by default encrypted.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Collector to Server&lt;/td&gt;
&lt;td&gt;8040&lt;/td&gt;
&lt;td&gt;8041&lt;/td&gt;
&lt;td&gt;HTTP(S)&lt;/td&gt;
&lt;td&gt;For HTTP-based Agent connections 1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Frontend Server to Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2031&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;The communication port between the Frontend Server and the backend server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Memory Analysis Server to Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7788&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;For AppMon 6.5 and later, non-SSL connections are no longer supported.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Slave Web Server agent to master Web Server agent&lt;/td&gt;
&lt;td&gt;8001&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;UDP&lt;/td&gt;
&lt;td&gt;The UDP port on which the master Web Server Agent should listen for data packets of the slave Web Server Agent&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;Important&lt;/p&gt;
&lt;p&gt;For performance reasons, do not pass communication between the AppMon Agent and the Collector through firewalls. Place a Collector as close as possible to the Agents.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="set-up-e-mail-communication"&gt;Set up E-Mail Communication&lt;a class="headerlink" href="#set-up-e-mail-communication" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For more information, see &lt;a href="https://community.dynatrace.com/community/display/DOCDT65/Email"&gt;Email configuration&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="set-up-appmon-memory-analysis-server-communication"&gt;Set up AppMon Memory Analysis Server Communication&lt;a class="headerlink" href="#set-up-appmon-memory-analysis-server-communication" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://community.dynatrace.com/community/download/attachments/221381541/ManageServersServicesAnalysisServer.png?api=v2"&gt;&lt;img alt="img" src="https://community.dynatrace.com/community/download/thumbnails/221381541/ManageServersServicesAnalysisServer.png?version=1&amp;amp;modificationDate=1398370369357&amp;amp;api=v2"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Use this page to configure the connection settings to the AppMon Memory Analysis Server. For more information, see &lt;a href="https://community.dynatrace.com/community/display/DOCDT65/Set+up+a+Memory+Analysis+Server"&gt;Set up a Memory Analysis Server&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 26 May 2019 10:02:54 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-26:/dynatrace-appmon-handbook-23-firewall.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 24.手机ADK</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-24-mobile-adk.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;支持平台&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adk"&gt;下载ADK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynatrace"&gt;配置dynaTrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;和应用整合&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;本地应用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#web"&gt;关联Web请求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ios-adk"&gt;iOS ADK安装和使用说明&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#adk_1"&gt;ADK安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;使用说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;生命周期说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#iosauto-instrumentation"&gt;iOS自动感知（Auto-Instrumentation）&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_8"&gt;自动化功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;自动感知概览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;限制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;支持平台&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Apple iOS 5或更高（armv7,armv7s或更高架构）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;谷歌Android2.2或更高&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="adk"&gt;下载ADK&lt;a class="headerlink" href="#adk" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;从&lt;a href="http://www.dynatrace.com/downloads/Downloads.aspx"&gt;http://www.dynatrace.com/downloads/Downloads.aspx&lt;/a&gt;下载&lt;em&gt;dynatrace-mobile-adk-$VERSION.$BUILD.zip&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="dynatrace"&gt;配置dynaTrace&lt;a class="headerlink" href="#dynatrace" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;安装步骤和安装UEM类似：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进行基本的dynaTrace安装。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用UEM license，包括访问数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装Agent和用户体验Sensor在应用服务器或web服务器上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;和应用整合&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对于和把ADK和手机应用整合的具体细节，参见下面的相关章节。&lt;/p&gt;
&lt;h3 id="_3"&gt;本地应用&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;iOS ADK&lt;/h4&gt;
&lt;p&gt;参见&lt;strong&gt;iOS ADK安装和使用说明&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;iOS 自动化使用说明&lt;/h4&gt;
&lt;p&gt;参见&lt;strong&gt;iOS自动化使用说明&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Android ADK&lt;/h4&gt;
&lt;p&gt;参见&lt;strong&gt;Android ADK安装和使用说明&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Android应用（APK）使用说明&lt;/h4&gt;
&lt;p&gt;参见&lt;strong&gt;Android使用说明&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Hybrid应用&lt;/h4&gt;
&lt;p&gt;参见&lt;strong&gt;Hybrid应用安装和使用说明&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="web"&gt;关联Web请求&lt;a class="headerlink" href="#web" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="ios-adk"&gt;iOS ADK安装和使用说明&lt;a class="headerlink" href="#ios-adk" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="adk_1"&gt;ADK安装&lt;a class="headerlink" href="#adk_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;1. 解包ADK到任意目录&lt;/h4&gt;
&lt;h4&gt;2. 添加这些文件到你的Xcode项目和iOS target：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;libCompuwareUEM.a&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CompuwareUEM.h&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3. 添加需要的框架和库到你的Xcode项目。&lt;/h4&gt;
&lt;p&gt;在项目导航里，选择你的项目，选择target，选择&lt;strong&gt;Build Phases&lt;/strong&gt;标签页，展开&lt;strong&gt;Link Binaries with Libraries&lt;/strong&gt;，点击 &lt;strong&gt;+&lt;/strong&gt; 按钮，选择下列框架和库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;libsqlite3.dylib&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CoreLocation.framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CoreTelephony.framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Security.framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SystemConfiguration.framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;libz.dylib&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;libc++.dylib&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MessageUI.framework&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4. 添加flags到&lt;strong&gt;Other Linker Flags&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;在项目导航里，选择你的项目，选择你的target，选择&lt;strong&gt;Build Settings&lt;/strong&gt;，添加如下设置到&lt;strong&gt;Other Linker Flags&lt;/strong&gt;设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-Objc&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5. 设置编译选项&lt;strong&gt;Strip Style&lt;/strong&gt;为&lt;strong&gt;Debugging Symbols&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;这会使你的包稍微增大，但是会保留完整的设备崩溃信息。&lt;/p&gt;
&lt;h4&gt;6. 添加文档到Xcode：&lt;/h4&gt;
&lt;p&gt;复制&lt;em&gt;com.compuware.uem.iOS.CompuwareUEM.docset&lt;/em&gt;*到下列路径 ~/Library/Developer/Shared/Documentation/DocSets&lt;/p&gt;
&lt;h4&gt;7. 基于Swift编程app的手工操作说明：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;创建一个包括Mobile Agent header的Bridging header&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;ifndef&lt;/span&gt; &lt;span class="n"&gt;myApp_Bridging_Header_h&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="n"&gt;myApp_Bridging_Header_h&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;CompuwareUEM.h&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;在项目导航，选择你的项目，选择你的target，选择&lt;strong&gt;Build Settings&lt;/strong&gt;，添加先下列选项到&lt;strong&gt;Objective-C Bridging Header&lt;/strong&gt; 设置：$(SRCROOT)/myApp/Bridging-Header.h&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;使用说明&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CompuwareUEM.h中定义了2个类来instrument你的iOS app。CompuwareUEM类用于管理ADK的操作。UEMAction类用于创建行为和相关报告。&lt;/p&gt;
&lt;h4&gt;CompuwareUEM&lt;/h4&gt;
&lt;h5&gt;setMonitorCookie&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`+ (void) setMonitorCookie:(NSString *)cookieString`
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cookieString&lt;/td&gt;
&lt;td&gt;A cookie string such as MIGRATION_FLAG=3 or n1=v1; n2=v2. Pass nil to remove the Cookie header from requests.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;设置由ADK发送（当和后端建立链接或者发送数据到后端）的HTTP Cookie header的每个HTTP GET/POST请求。只有当你的网络架构里需要该cookie，这个方法才是必须的。这个方法必须被包含在startupWithApplicationName:serverURL:allowAnyCert:certificatePath:之前，来确保最早的请求也包括该cookie。它可以随时被再次调用（invoke）来改变cookie string。&lt;/p&gt;
&lt;h5&gt;startupWithApplicationName&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ (CPWR_StatusCode) startupWithApplicationName:(NSString *)applicationId
                                      serverURL:(NSString *)serverURL
                                   allowAnyCert:(BOOL)allowAnyCert
                                certificatePath:(NSString *)pathToCertificateAsDER
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;applicatonName&lt;/td&gt;
&lt;td&gt;用户定义的应用识别符 (eg. @"EasyTravel" ). 在应用名称里不要使用下划线（_）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serverURL&lt;/td&gt;
&lt;td&gt;嵌入UEM agent的web server的URL (e.g. &lt;code&gt;http://myhost.mydomain.com:8080/agentLocation/&lt;/code&gt;). 包括使用的传输协议( https or   http ) 和这个应用的dynaTrace UEM设置里指定的Agent 位置.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;allowAnyCert&lt;/td&gt;
&lt;td&gt;允许https通讯的任何认证。这个参数只在server name里指定https协议时生效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pathToCertificateAsDER&lt;/td&gt;
&lt;td&gt;在DER规格料理的到证书（自签署）的路径；或nil。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOn&lt;/td&gt;
&lt;td&gt;ADK成功启动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_InvalidParameter&lt;/td&gt;
&lt;td&gt;&lt;em&gt;applicatonName&lt;/em&gt;或&lt;em&gt;serverURL&lt;/em&gt;参数为nil或空字符串。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_TruncatedEventName&lt;/td&gt;
&lt;td&gt;&lt;em&gt;applicatonName&lt;/em&gt;超过255个字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_NotInitialized&lt;/td&gt;
&lt;td&gt;数据库没有初始化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOff&lt;/td&gt;
&lt;td&gt;关闭中；完成后重启&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;调用该方法来实例化ADK。&lt;strong&gt;该方法必须在任何其他方法调用前被引用（invoked）。&lt;/strong&gt;如果在ADK没有关闭前，对该方法的多次调用将被忽略。如果&lt;em&gt;allowAnyCert&lt;/em&gt;和使用自签名证书，那么需要用DER格式认证，它是被用作一个额外的锚点（anchor）来验证HTTPS通讯。例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pathToCertificateAsDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;NSBundle&lt;/span&gt; &lt;span class="n"&gt;mainBundle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;easyTravelServerCert&amp;quot;&lt;/span&gt; &lt;span class="nl"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;der&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;shutdown&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ (CPWR_StatusCode) shutdown
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOff&lt;/td&gt;
&lt;td&gt;成功关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;调用该方法来关闭ADK。收集的数据被发送到dynaTrace Server。这个方法直到本次操作成功或失败才会返回值。你不应该在主线程中调用该方法，因为它会导致你的UI无响应。如果操作失败，数据会保留。在数据过期前如果ADK被重启，数据会之后再次发送。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;enableCrashReportingWithReport&lt;/h5&gt;
&lt;p&gt;取决于使用的语法，&lt;em&gt;enableCrashReportingWithReport&lt;/em&gt;方法可以发送crash报告到dynaTrace Server， HockeyApp Server，Quincy Server或Victory Server，或发送crash电子邮件报告到指定接收者。&lt;/p&gt;
&lt;h6&gt;dynaTrace Server&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`+ (CPWR_StatusCode) enableCrashReportingWithReport:(BOOL)sendCrashReport`
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sendCrashReport&lt;/td&gt;
&lt;td&gt;&lt;em&gt;True&lt;/em&gt;：发送完整crash报告。&lt;em&gt;False&lt;/em&gt;：只发送crash事件，不包含全部细节。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_CrashReportingUnavailable&lt;/td&gt;
&lt;td&gt;无法启用crash报告&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_CrashReportingAvailable&lt;/td&gt;
&lt;td&gt;crash报告已启用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOff&lt;/td&gt;
&lt;td&gt;ADK没有初始化或ADK没有在收集数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;这个方法会激活ADK中的KSCrash框架来抓取信号和未处理的例外。crash发生时，在设备上一份报告被保存。app下次启动后，报告会被处理。如果参数为&lt;em&gt;True&lt;/em&gt;，完整的iOS crash报告被发送到dynaTrace Server.否则包括一些关于crash线程的信息被发送，而不是完整的报告。如果在七天内相同的例外再次发生，crash数据不会被再次报告，但是附带之前已被报告的crash数据的crash事件会被报告。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;~~关于发送到其他Server，略。~~&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;setGpsLocation&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`+ (CPWR_StatusCode) setGpsLocation:(id)gpsLocation`
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gpsLocation&lt;/td&gt;
&lt;td&gt;从用户应用获得的带有GPS坐标的&lt;em&gt;CLLocation&lt;/em&gt;对象&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOn&lt;/td&gt;
&lt;td&gt;ADK实例化，GPS坐标被接收。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOff&lt;/td&gt;
&lt;td&gt;ADK没有实例化，GPS坐标被接收。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_InvalidParameter&lt;/td&gt;
&lt;td&gt;参数非法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;使用该方法记录用户的当前GPS位置。ADK不会自动收集任何位置信息。当前dynaTrace Server版本不会对GPS位置信息进行处理，但是未来版本的dynaTrace会。&lt;/p&gt;
&lt;h5&gt;lastErrorCode&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`+ (CPWR_StatusCode) lastErrorCode`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回与最近的内部ADK错误有关的错误代码。返回&lt;em&gt;0&lt;/em&gt;表示没有错误。&lt;/p&gt;
&lt;h5&gt;lastErrorMsg&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`+ (NSString *) lastErrorMsg`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回与最近的内部ADK错误有关的错误信息。如果没有错误会返回nil。&lt;/p&gt;
&lt;h5&gt;flushEvents&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`+ (CPWR_StatusCode) flushEvents`
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOn&lt;/td&gt;
&lt;td&gt;ADK实例化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOff&lt;/td&gt;
&lt;td&gt;ADK没有实例化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;立即发送所有收集到的事件。为了减少网络阻塞/使用，收集的事件通常以包的形式来发送，最老的事件超过9分钟。使用该方法强制发送所有的收集到的事件而不管事件的收集时间。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;UEMAction&lt;/h4&gt;
&lt;h5&gt;enterActionWithName&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    + (UEMAction *) enterActionWithName:(NSString *)actionName
    + (UEMAction *) enterActionWithName:(NSString *)actionName
                           parentAction:(UEMAction *)parentAction
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;actionName&lt;/td&gt;
&lt;td&gt;行为名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;parentAction&lt;/td&gt;
&lt;td&gt;当前行为的UEMAction对象&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_InvalidParameter&lt;/td&gt;
&lt;td&gt;&lt;em&gt;parentAction&lt;/em&gt;为nil，&lt;em&gt;parentAction&lt;/em&gt;已经结束，或行为名为nil或空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOff&lt;/td&gt;
&lt;td&gt;ADK没有实例化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_TruncatedEventName&lt;/td&gt;
&lt;td&gt;行为名被缩短到最大长度。这是warning；行为仍然会创建。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_InternalError&lt;/td&gt;
&lt;td&gt;ADK内部错误发生&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;启动一个行为，会在dynaTrace里产生一条手机行为。在你想计时的代码的开头调用该方法。你必须通过调用&lt;em&gt;leaveAction&lt;/em&gt;设置行为结束。如果行为被成功创建，返回值是non-nil。如果报错，返回值是nil。调用lastErrorCode 或 lastErrorMsg来定位错误。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;返回的&lt;em&gt;UEMAction&lt;/em&gt;被保留，因此它如果不再需要那么必须被释放（只在non-ARC环境合法）。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;leaveAction&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`- (CPWR_StatusCode) leaveAction`
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOn&lt;/td&gt;
&lt;td&gt;行为成功结束&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOff&lt;/td&gt;
&lt;td&gt;ADK已经关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_ActionEnded&lt;/td&gt;
&lt;td&gt;&lt;em&gt;UEMAction&lt;/em&gt;已经结束。这意味着&lt;em&gt;leaveAction&lt;/em&gt;已经在该行为或其父行为被调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_InternalError&lt;/td&gt;
&lt;td&gt;发生数据库错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_ActionNotFound&lt;/td&gt;
&lt;td&gt;行为不再存在。如果行为保持打开的时间大于发送间隔会发生。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;结束以前开始的行为。所有在一个行为开始结束之间的报告事件，值，或被标记的web请求讲师行为的一部分，例如嵌入手机行为的PurePath。调用该方法在你想计时的代码结尾。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;endVisit&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- (CPWR_StatusCode) endVisit
+ (CPWR_StatusCode) endVisit
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOn&lt;/td&gt;
&lt;td&gt;行为成功结束&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOff&lt;/td&gt;
&lt;td&gt;ADK已经关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_ActionEnded&lt;/td&gt;
&lt;td&gt;&lt;em&gt;UEMAction&lt;/em&gt;已经关闭。这意味着&lt;em&gt;leaveAction&lt;/em&gt;已经被该行为或其父行为调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_InternalError&lt;/td&gt;
&lt;td&gt;数据库错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_NotSupportedInFreeMode&lt;/td&gt;
&lt;td&gt;该操作只支持更高版本&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;结束当前访问，关闭所有当前行为（actions），传输期间的数据给server，然后开始一个新的访问。&lt;/p&gt;
&lt;h5&gt;reportEventWithName&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`- (CPWR_StatusCode) reportEventWithName:(NSString *)eventName`
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;eventName&lt;/td&gt;
&lt;td&gt;事件名&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOn&lt;/td&gt;
&lt;td&gt;行为成功结束&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOff&lt;/td&gt;
&lt;td&gt;ADK已经关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_ActionEnded&lt;/td&gt;
&lt;td&gt;&lt;em&gt;UEMAction&lt;/em&gt;已经关闭。这意味着&lt;em&gt;leaveAction&lt;/em&gt;已经被该行为或其父行为调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_InvalidParameter&lt;/td&gt;
&lt;td&gt;事件名为nil或空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_TruncatedEventName&lt;/td&gt;
&lt;td&gt;事件名被压缩到最大长度。这是warning；事件仍然会被创建&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_InternalError&lt;/td&gt;
&lt;td&gt;发生数据库错误&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;发送一个事件到dynaTrace，会产生一个节点的手机行为PurePath.&lt;/p&gt;
&lt;h5&gt;reportValueWithName&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    - (CPWR_StatusCode) reportValueWithName:(NSString *)valueName
                                   intValue:(NSInteger)value
    - (CPWR_StatusCode) reportValueWithName:(NSString *)valueName
                                doubleValue:(double)doubleValue
    - (CPWR_StatusCode) reportValueWithName:(NSString *)valueName
                                stringValue:(NSString *)stringValue
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;valueName&lt;/td&gt;
&lt;td&gt;值的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;intValue&lt;/td&gt;
&lt;td&gt;0-2147483的整型值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;doubleValue&lt;/td&gt;
&lt;td&gt;double值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stringValue&lt;/td&gt;
&lt;td&gt;字符串值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOn&lt;/td&gt;
&lt;td&gt;值被成功创建&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOff&lt;/td&gt;
&lt;td&gt;ADK已经关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_actionEnded&lt;/td&gt;
&lt;td&gt;&lt;em&gt;UEMAction&lt;/em&gt;已经结束。这意味着&lt;em&gt;leaveAction&lt;/em&gt;已经被该行为或其父行为调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_InvalidParameter&lt;/td&gt;
&lt;td&gt;值的名称为nil或空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_TruncatedEventName&lt;/td&gt;
&lt;td&gt;值的名称已经被限制到最大长度。这是warning：事件仍会创建&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_InternalError&lt;/td&gt;
&lt;td&gt;数据库发生错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_NotSupprotedInFreeMode&lt;/td&gt;
&lt;td&gt;免费版不支持含有&lt;em&gt;doubleValue&lt;/em&gt;的&lt;em&gt;reportValueWithName&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;发送一个键/值对到dynaTrace，会产生一个节点的手机行为PurePath。这个值可以通过方法进行图表处理。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;reportErrorWithName&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    - (CPWR_StatusCode) reportErrorWithName:(NSString *)errorName
                                 errorValue:(NSInteger)errorValue
    - (CPWR_StatusCode) reportErrorWithName:(NSString *)errorName
                                  exception:(NSException *)exception
    + (CPWR_StatusCode) reportErrorWithName:(NSString *)errorName
                                 errorValue:(NSInteger)errorValue
    + (CPWR_StatusCode) reportErrorWithName:(NSString *)errorName
                                  exception:(NSException *)exception
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;errorName&lt;/td&gt;
&lt;td&gt;值的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;errorValue&lt;/td&gt;
&lt;td&gt;错误整型值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exception&lt;/td&gt;
&lt;td&gt;例外描述被发送到Server&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOn&lt;/td&gt;
&lt;td&gt;错误值被成功创建&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOff&lt;/td&gt;
&lt;td&gt;ADK已经关闭（或类的方法还没有实例化）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_ActionEnded&lt;/td&gt;
&lt;td&gt;&lt;em&gt;UEMAction&lt;/em&gt;已经被关闭。这意味着&lt;em&gt;leaveAction&lt;/em&gt;已经被该行为或其副行为调用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_InvalidParameter&lt;/td&gt;
&lt;td&gt;值名称为nil或空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_TruncatedEventName&lt;/td&gt;
&lt;td&gt;错误名已经被压缩至最大长度，这是warning；错误仍然会被创建。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_InternalError&lt;/td&gt;
&lt;td&gt;发生数据库错误。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_NotSupportedInFreeMode&lt;/td&gt;
&lt;td&gt;带有&lt;em&gt;exception&lt;/em&gt;的&lt;em&gt;reportErrorWithName&lt;/em&gt;在免费版中不受支持。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;getRequestTagHeader&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`- (NSString *) getRequestTagHeader`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你必须添加一个Web请求到dynaTrace Server，链接&lt;em&gt;UEMAction&lt;/em&gt;到PurePath中，会返回HTTP头的名称。你不应该像平常那样调用该方法，因为该自动化请求标签应该抓取所有的网络请求。&lt;/p&gt;
&lt;h5&gt;getRequestTagValue&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`- (NSString *) getRequestTagValue`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回由&lt;em&gt;getRequestTagHeader&lt;/em&gt;返回的HTTP头的值。你不应该像平常那样调用该方法，因为该自动化请求标签应该抓取所有的网络请求。&lt;/p&gt;
&lt;h4&gt;返回值定义&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOff&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;数据抓取关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_UemOn&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;数据抓取开启，或方法被成功调用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_CrashReportingUnavailable&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;em&gt;KSCrash&lt;/em&gt;框架无法实例化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_CrashReportingAvailable&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;em&gt;KSCrash&lt;/em&gt;成功实例化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_NotInitialized&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;ADK实例化失败&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_InvalidRange&lt;/td&gt;
&lt;td&gt;-2&lt;/td&gt;
&lt;td&gt;整型值超过界限0-2147483&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_ActionNotFound&lt;/td&gt;
&lt;td&gt;-4&lt;/td&gt;
&lt;td&gt;当使用JavaScript bridge，这意味着行为名没有找到&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_InvalidParameter&lt;/td&gt;
&lt;td&gt;-5&lt;/td&gt;
&lt;td&gt;非法字段被发送给一个ADK方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_ActionEnded&lt;/td&gt;
&lt;td&gt;-6&lt;/td&gt;
&lt;td&gt;在已经被&lt;em&gt;leaveAction&lt;/em&gt;方法结束的行为执行了一个操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_ReportErrorOff&lt;/td&gt;
&lt;td&gt;-8&lt;/td&gt;
&lt;td&gt;dynaTrace Server已禁用错误报告。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_TruncatedEventName&lt;/td&gt;
&lt;td&gt;-9&lt;/td&gt;
&lt;td&gt;一个行为，错误，或值名称太长而被压缩。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPWR_Error_NotSupportedInFreeMode&lt;/td&gt;
&lt;td&gt;-11&lt;/td&gt;
&lt;td&gt;该方法在免费版不被支持&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="_5"&gt;日志&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;你可以启用日志并且通过添加&lt;em&gt;cpwrUEM_logging&lt;/em&gt;来设置日志级别。日志关键词在应用的&lt;em&gt;info.plist&lt;/em&gt;文件。参见&lt;strong&gt;iOS自动安装说明&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实例说明&lt;br&gt;
像这样，下列代码将创建一个用户行为PurePath：&lt;br&gt;
&lt;em&gt;示例PurePath&lt;/em&gt;&lt;br&gt;
&lt;img alt="用户行为PurePath" src="http://pic.yupoo.com/east4ming_v/FjNDMj8O/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;```swift&lt;br&gt;
    #import "CompuwareUEM.h"&lt;br&gt;
    - (BOOL)application:(UIApplication &lt;em&gt;)application didFinishLaunchingWithOptions:(NSDictionary &lt;/em&gt;)launchOptions&lt;br&gt;
    {&lt;br&gt;
        ...&lt;br&gt;
        // initialize CompuwareUEM here or anywhere else (mind that actions and events that occur before initialization are not reported to dynaTrace!)&lt;br&gt;
        [CompuwareUEM startupWithApplicationName:@"easyTravel"&lt;br&gt;
                                       serverURL:@"http://easytravel.example.com:8080/eT/"&lt;br&gt;
                                    allowAnyCert:NO&lt;br&gt;
                                 certificatePath:nil];&lt;br&gt;
        ...&lt;br&gt;
    }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;IBAction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;performSearch:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;sender&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="c1"&gt;// [1a] start action &amp;quot;search&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;UEMAction&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UEMAction&lt;/span&gt; &lt;span class="nl"&gt;enterActionWithName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;search&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// [2] named event inside an action&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="nl"&gt;reportEventWithName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;searchStart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// [3a] starting sub-action&lt;/span&gt;
    &lt;span class="n"&gt;UEMAction&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UEMAction&lt;/span&gt; &lt;span class="nl"&gt;enterActionWithName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;searchRequest&amp;quot;&lt;/span&gt;
                                         &lt;span class="nl"&gt;parentAction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// [4] NSURLRequest and NSMutableURLReqest are tagged automatically&lt;/span&gt;
    &lt;span class="bp"&gt;NSError&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="bp"&gt;NSHTTPURLResponse&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="bp"&gt;NSURL&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;searchURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;NSURL&lt;/span&gt; &lt;span class="nl"&gt;URLWithString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                         &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="nl"&gt;stringWithFormat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;http://127.0.0.1:8080/ajax/TimeService?tz=GMT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;]]]&lt;/span&gt; &lt;span class="k"&gt;retain&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="bp"&gt;NSData&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSURLConnection&lt;/span&gt; &lt;span class="nl"&gt;sendSynchronousRequest&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="bp"&gt;NSURLRequest&lt;/span&gt; &lt;span class="nl"&gt;requestWithURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;searchURL&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                         &lt;span class="nl"&gt;returningResponse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="nl"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;searchURL&lt;/span&gt; &lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// [x] report an error if communication fails&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="nl"&gt;reportErrorWithName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;CommunicationError&amp;quot;&lt;/span&gt; &lt;span class="nl"&gt;errorValue&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// [5] custom value inside an action&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="nl"&gt;reportValueWithName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;responseCode&amp;quot;&lt;/span&gt; &lt;span class="nl"&gt;intValue&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="n"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
    &lt;span class="c1"&gt;// [3b] end action &amp;quot;searchRequest&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="n"&gt;leaveAction&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// [6] named event on successful completion&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="nl"&gt;reportEventWithName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;searchEnd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// [1b] end action &amp;quot;search&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="n"&gt;leaveAction&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_6"&gt;生命周期说明&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在应用中很早实例化ADK来抓取初始视图展现或者使用自动启动功能。从&lt;em&gt;main()&lt;/em&gt;调用&lt;em&gt;startupWithApplicationName&lt;/em&gt;是可以的。&lt;/p&gt;
&lt;h4&gt;限制&lt;/h4&gt;
&lt;p&gt;在dynaTrace5.6之前的版本，在&lt;strong&gt;System Profile-Error Detection&lt;/strong&gt;条件中的特殊字符（如：空格）被ADK使用下划线自动替换。确定你有正确的比较字符串，因为5.6及以后版本的ADK不会替换这些字符串。&lt;/p&gt;
&lt;h3 id="_7"&gt;总结&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;添加iOS ADK到应用会增加如下大小：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;架构&lt;/th&gt;
&lt;th&gt;大小&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;armv7&lt;/td&gt;
&lt;td&gt;340KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;armv7s&lt;/td&gt;
&lt;td&gt;340KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;325KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;All three&lt;/td&gt;
&lt;td&gt;980KB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;行为，事件，错误被自动创建或者通过ADK API被储存在一个在应用的Document路径的SQLite 数据库。平均下来，这些项在数据库中大概占用150 bytes。大小取决于项中的字符串的长度，像名称、错误信息。&lt;br&gt;
默认情况下，ADK储存项在数据库中一直到2min在发送给Server端或者删除。你可以在dynaTrace 客户端管理发送间隔。&lt;/p&gt;
&lt;h2 id="iosauto-instrumentation"&gt;iOS自动感知（Auto-Instrumentation）&lt;a class="headerlink" href="#iosauto-instrumentation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Auto-Instrumentation for iOS&lt;/em&gt;允许任何人通过手机App ADK来监控iOS应用。该说明程序是自动添加标准手机App ADK到应用而不用手动修改源代码。标准手机App ADK用于自动化的处理进程。自动化添加的应用和手动添加的应用收集到的基本数据是一样的。该方法提供应用、crash监测、应用启动和web交易相应时间性能监控真实用户体验流。&lt;/p&gt;
&lt;h3 id="_8"&gt;自动化功能&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;下列功能是自动感知的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ADK自动启动-你必须使用instrumentation keys来配置自动启动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生命周期数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;crash报告&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;web请求标记（tagging）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;web请求事件（报告执行时间和认证第三方请求）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;web视图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动用户行为检测（真实用户行为像点按按钮及其他浏览操作和控制的监测和计时）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ADK 日志记录-你必须使用相应的instrumentation key来启动自动日志记录&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有这些功能默认开启。你可以禁用或改进这些自动感知功能通过添加&lt;strong&gt;&lt;em&gt;configuration keys&lt;/em&gt;&lt;/strong&gt;到你的应用的&lt;em&gt;info.plist&lt;/em&gt;文件。&lt;br&gt;
你可以把自动感知和手动赶集结合起来。例如，你可能想在开发阶段手动获取确切用户定义的行为（并报告数值和事件），然后使用自动感知添加上列功能到你的应用。&lt;/p&gt;
&lt;h3 id="_9"&gt;自动感知概览&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;链接iOS 手机ADK静态库到你的应用并且编译进Xcode。参见&lt;strong&gt;iOS ADK安装使用说明&lt;/strong&gt;获取更多细节。&lt;/li&gt;
&lt;li&gt;添加keys到你的应用的&lt;em&gt;info.plist&lt;/em&gt;文件，配置自动感知。&lt;/li&gt;
&lt;li&gt;在编译期间自动感知发生。之后应用会感知在&lt;em&gt;info.plist&lt;/em&gt;文件中的级别配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;感知配置&lt;/h4&gt;
&lt;p&gt;下表的keys（properties）是自动感知的配置选项。根据需要添加keys到你的应用的info.plist文件。其中的很多属性值参考&lt;strong&gt;CompuwareUEM 手机App ADK API&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;关键字&lt;/th&gt;
&lt;th&gt;关键字类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_logging.level&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;如果该关键词合法（ALL,FINEST,FINER,FINE,CONFIG,INFO,WARNING,SEVERE,OFF），ADK日志记录就会自动启用对应等级。如果关键字没是哟个或者没有合法值，自动记录日志&lt;strong&gt;关闭&lt;/strong&gt;，你必须手动在应用中开启日志记录功能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM.setMonitorCookie&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;如果配置该关键字，该值会自动作为HTTP请求到&lt;em&gt;serverUrl&lt;/em&gt;(参见&lt;em&gt;cpwrUEM_startup.agentpath&lt;/em&gt;)的一个cookie，这样他们可以通过你的基础架构需求。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_startup.agentPath&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;如果该关键字配置一个合法的值，ADK将自动启动，使用该值作为&lt;em&gt;serverUrl&lt;/em&gt;,并将忽略你app中任何手动的&lt;em&gt;startupWithApplicationName&lt;/em&gt;调用。&lt;em&gt;serverUrl&lt;/em&gt;需要使用http://或https://传输。如果没配置，你必须手动调用&lt;em&gt;startupWithApplicationName&lt;/em&gt;来启动ADK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_startup.sApplId&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;如果配置该关键字，它的值会被用作你应用的名称。如果没有配置，ADK将使用在main bundle中的应用名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_startup.useAnyCert&lt;/td&gt;
&lt;td&gt;布尔&lt;/td&gt;
&lt;td&gt;默认值是&lt;em&gt;NO&lt;/em&gt;。该关键字等价于启动时调用&lt;em&gt;allowAnyCert&lt;/em&gt;参数。如果设置为&lt;em&gt;YES&lt;/em&gt;，所有证书都会被接受。如果设置为&lt;em&gt;NO&lt;/em&gt;，来自已知认证机构的合法证书会被接受；如果提供了一个自签名证书（参见&lt;em&gt;cpwrUEM_startup.certPath&lt;/em&gt;）,将检查它的有效性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_startup.certPath&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;默认值为nil。该关键字定义了一个DER格式的（自签名）证书路径，用作一个额外的anchor来验证HTTPS通讯。如果&lt;em&gt;cpwrUEM_startup.useAnyCert&lt;/em&gt;是&lt;em&gt;NO&lt;/em&gt;,并且server上用了一个自签名的证书，那么需要使用该关键字。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_crash.reporting&lt;/td&gt;
&lt;td&gt;布尔&lt;/td&gt;
&lt;td&gt;默认值是&lt;em&gt;YES&lt;/em&gt;。crash报告默认自动启用。如果你不想启动crash报告，你必须使用该关键字，并设置值为&lt;em&gt;NO&lt;/em&gt;。如果你想报告crashes到一个不是dynaTrace server的server上，或者启用发送crash email通知，在你的代码里添加合适的&lt;em&gt;enableCrashReportingWithReport&lt;/em&gt; API调用来覆盖默认配置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_crash.sendCrashReport&lt;/td&gt;
&lt;td&gt;布尔&lt;/td&gt;
&lt;td&gt;默认值是&lt;em&gt;YES&lt;/em&gt;。对于&lt;em&gt;enableCrashReportingWithReport&lt;/em&gt;发送crash报告到dynaTrace server，它和&lt;em&gt;sendCrashReport&lt;/em&gt;字段是等价的。如果你不想设置发送crash报告，设置该关键字为&lt;em&gt;NO&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_instr.lifecycleMonitoring&lt;/td&gt;
&lt;td&gt;布尔&lt;/td&gt;
&lt;td&gt;默认值是&lt;em&gt;YES&lt;/em&gt;。不用使用iOS ADK生命周期类覆盖你的view controller 类，自动生命周期监测是启用的。设置该值为&lt;em&gt;NO&lt;/em&gt;来禁用自动生命周期监测。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_instr.webRequestTagging&lt;/td&gt;
&lt;td&gt;布尔&lt;/td&gt;
&lt;td&gt;默认是&lt;em&gt;YES&lt;/em&gt;，打开自动web请求标记。注意，如果&lt;em&gt;webRequestTiming&lt;/em&gt;被启用，&lt;em&gt;webRequestTagging&lt;/em&gt;也会启用，因为有依赖关系。要关闭自动web请求标记，你需要把&lt;em&gt;webRequestTiming&lt;/em&gt;和&lt;em&gt;webRequestTagging&lt;/em&gt;都设置为&lt;em&gt;NO&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_instr.webRequestTiming&lt;/td&gt;
&lt;td&gt;布尔&lt;/td&gt;
&lt;td&gt;默认是&lt;em&gt;YES&lt;/em&gt;，即开启自动web请求计时。设置为&lt;em&gt;NO&lt;/em&gt;禁用。注意该关键字和&lt;em&gt;webRequestTagging&lt;/em&gt;相互依赖。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_instr.wrapWebRequestInAction&lt;/td&gt;
&lt;td&gt;布尔&lt;/td&gt;
&lt;td&gt;默认值是&lt;em&gt;YES&lt;/em&gt;。如果一个手动用户行为或自动用户行为不可用，就自动把web请求包进用户行为里。设置该值为&lt;em&gt;NO&lt;/em&gt;来禁用自动web请求行为包裹。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_instr.autoUserAction&lt;/td&gt;
&lt;td&gt;布尔&lt;/td&gt;
&lt;td&gt;默认值是&lt;em&gt;YES&lt;/em&gt;。可以自动创建用户和app交互的行为（按按钮，跳转至其他页面，表单浏览选择等）.设置该值为&lt;em&gt;NO&lt;/em&gt;来禁用该功能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_action.autoActionTimeoutMs&lt;/td&gt;
&lt;td&gt;数字&lt;/td&gt;
&lt;td&gt;The default value is 500 ms. It sets the value for how long a particular automatic user action is active. The purpose is to catch all web requests that happen when an automatic user action is active. If the automatic user action has completed web requests, the ADK leaves the action at the end of this time. The minimum allowed value is 100 ms, the maximum allowed value is 5000 ms (5 seconds).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_action.autoActionMaxDurationMs&lt;/td&gt;
&lt;td&gt;数字&lt;/td&gt;
&lt;td&gt;The default value is 60000 ms (60 seconds). It sets the value for how long a particular automatic user action is retained before being deleted. The purpose is to catch all web requests that happen when an automatic user action is active. If the automatic user action has pending web requests (because they are taking a long time to complete), the ADK waits for this amount of time for the web requests to complete before leaving the user action. The minimum allowed value is 100 ms, the maximum allowed value is 540000 ms (9 minutes).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_action.sendEmptyAutoAction&lt;/td&gt;
&lt;td&gt;布尔&lt;/td&gt;
&lt;td&gt;The default value is NO. It determines whether to send automatic user actions if they do not contain any web requests or lifecycle actions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_instr.webViewTiming&lt;/td&gt;
&lt;td&gt;布尔&lt;/td&gt;
&lt;td&gt;The default value is YES . It automatically detects and times  web views in your hybrid app. Set the value to   to disable automatic detection and timing of web views.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_instr.excludeControls&lt;/td&gt;
&lt;td&gt;数组&lt;/td&gt;
&lt;td&gt;This key defines an array of items where each item contains a type of view or control to exclude from automatic creation of user actions. Each item in the array is a case-insensitive string. The possible values are Button， toolBar segmentedControl tableView tabBar alertView and  pageView navigationController collectionView actionSheet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpwrUEM_instr.excludeLifecycleClasses&lt;/td&gt;
&lt;td&gt;数组&lt;/td&gt;
&lt;td&gt;This is an array of items where each item contains the name of a class to exclude from automatic lifecycle instrumentation. Each item in the array is a case-sensitive string that must &lt;strong&gt;exactly&lt;/strong&gt; match the name of the class to be  excluded.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="_10"&gt;限制&lt;a class="headerlink" href="#_10" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;~~2698页~~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 26 May 2019 10:02:54 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-26:/dynatrace-appmon-handbook-24-mobile-adk.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 20.报告功能</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-20-reporting.html</link><description>&lt;h2 id="_1"&gt;综述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;dynaTrace可以将dashboard和dashlet转换为自定义的报告。&lt;br&gt;
报告可以有客户端或者服务端生成。计划报告是一种服务端报告。&lt;/p&gt;
&lt;h2 id="_2"&gt;类型和格式&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;dynaTrace包括下列自定义报告格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PDF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Excel和Excel2007&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSV&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="PDF" src="http://pic.yupoo.com/east4ming_v/FhuunmKR/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="HTML" src="http://pic.yupoo.com/east4ming_v/FhuumWhj/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="xml" src="http://pic.yupoo.com/east4ming_v/FhuuoRBf/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Excel" src="http://pic.yupoo.com/east4ming_v/FhuunQEO/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="CSV" src="http://pic.yupoo.com/east4ming_v/FhuumrDF/medium.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_3"&gt;客户端报告&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_4"&gt;默认报告&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以通过下列操作创建报告：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建一个dashboard，从&lt;strong&gt;Dashboard&lt;/strong&gt;按钮或者右击在右上方的dashboard图标，选择&lt;strong&gt;Report&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成单个dashlet的报告，邮寄dashlet的标签并且选择&lt;strong&gt;Report&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后会出现&lt;strong&gt;Generate Report&lt;/strong&gt;对话框，可以进行细节项设置。&lt;/p&gt;
&lt;p&gt;&lt;img alt="创建报告对话框" src="http://pic.yupoo.com/east4ming_v/FhuyMfcb/medium.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;报告标题和描述自动由dashboard创建。可以进行修改。&lt;/li&gt;
&lt;li&gt;选择报告格式。&lt;/li&gt;
&lt;li&gt;更改纸张方向和纸张大小。&lt;/li&gt;
&lt;li&gt;定义输出路径&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;Generate&lt;/strong&gt;创建报告。完成后，会自动打开。&lt;br&gt;
这些变更只会应用在一个报告里。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="dashboard"&gt;自定义dashboard报告&lt;a class="headerlink" href="#dashboard" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在dashboard属性里选择&lt;strong&gt;Reporting&lt;/strong&gt;标签页来改变下列设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;默认格式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;纸张方向和纸张大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义页眉图片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dashlet顺序和包含项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按计划生成报告&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Reporting标签页" src="http://pic.yupoo.com/east4ming_v/FhuFqY65/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="自定义项" src="http://pic.yupoo.com/east4ming_v/FhuGlt9I/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这些变更将会应用到由这个dashboard生成的每份报告里。&lt;/p&gt;
&lt;h2 id="_5"&gt;计划报告&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_6"&gt;计划报告&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;报告可以在给定的时间间隔自动生成，并且储存在dynaTrace Server端的文件系统或者通过email发送。计划报告由dynaTrace Server创建。&lt;br&gt;
创建报告任务，执行如下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开你想要生成报告的dashboard&lt;/li&gt;
&lt;li&gt;邮寄dashboard或者打开dashboard菜单，选择&lt;strong&gt;Report&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;自定义报告，可以更改标题、描述、格式、纸张方向和大小、文件名。&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;Create Schedule&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;自定义后处理--通过email发送或储存在dynaTrace Server文件系统。&lt;/li&gt;
&lt;li&gt;选择&lt;strong&gt;Schedule&lt;/strong&gt;标签页&lt;/li&gt;
&lt;li&gt;在Schedules Editor增加或编辑计划。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="计划报告_1" src="http://pic.yupoo.com/east4ming_v/FhuKKVdo/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="计划报告_2" src="http://pic.yupoo.com/east4ming_v/FhuKM5hh/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="计划报告_3" src="http://pic.yupoo.com/east4ming_v/FhuKKZ7B/medium.jpg"&gt;&lt;/p&gt;
&lt;h3 id="server"&gt;Server端自动报告任务&lt;a class="headerlink" href="#server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;为什么需要自动化报告？&lt;/h4&gt;
&lt;p&gt;通过自动化报告，你可以展示累计数据给利益相关者或者发送每日的KPI状态更新到你的邮箱。报告是必须的，而且你不想花费太多时间收集数据，设计报告，执行。如果你曾做同一个报告2次，那么你应该使用dynaTrace的报告功能来自动化生成报告。&lt;/p&gt;
&lt;h4&gt;目标演练&lt;/h4&gt;
&lt;p&gt;本次目标演练展示了dynaTrace的报告功能，以及如何更容易的生成报告。学习如何生成你的计划报告。&lt;/p&gt;
&lt;h4&gt;需求&lt;/h4&gt;
&lt;p&gt;创建你自己的dashboard或者使用dynaTrace自带的。如果你没有System Profile，没有来自agent的数据的话，使用自监控的内置dashboard。&lt;/p&gt;
&lt;h4&gt;详细步骤&lt;/h4&gt;
&lt;p&gt;根据以下步骤自动化生成报告：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开报告对话框到报告文档&lt;/li&gt;
&lt;li&gt;自定义必须的信息&lt;/li&gt;
&lt;li&gt;创建一个报告计划&lt;/li&gt;
&lt;li&gt;基于计划自动化生成报告&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;创建报告计划&lt;/h4&gt;
&lt;p&gt;如果你想通过邮件每天、每周、或者发报告或者发送给多个接收者，那么可以创建报告计划。到&lt;strong&gt;Report&lt;/strong&gt;设置项，创建计划。比如，可以创建计划，发送PDF报告，每天8点到你的邮箱，每周到你经理的邮箱。你必须创建两个计划。&lt;br&gt;
对于每天的计划，使用下列的定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Start on：每天&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time to Send：8:00AM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;End：永久&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recurrence：每天&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定义周六、周日例外：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Schedule Exclusion：总是排除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On：周六、周日&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In：每月&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="创建报告计划_1" src="http://pic.yupoo.com/east4ming_v/Fhw8OvM2/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="创建报告计划_2" src="http://pic.yupoo.com/east4ming_v/Fhw8PIOd/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="创建报告计划_3" src="http://pic.yupoo.com/east4ming_v/FhuKM5hh/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="创建报告计划_4" src="http://pic.yupoo.com/east4ming_v/Fhw8PHcr/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;第二个计划每月第一天执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Start on:每月第一天&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;End：永久&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recurrence：每月&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;月度计划：每月第一天发送报告&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="创建报告计划_5" src="http://pic.yupoo.com/east4ming_v/Fhw8RcHJ/medium.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;你用dashboard相关的数据配置后，自动报告节省了很多时间。而且自动化的技能可以作为一个数据导出引擎将数据发送到你的工具上。定时拿到数据或者把数据发送到自动化工具以备之后处理。&lt;/p&gt;
&lt;h2 id="_7"&gt;报告的限制&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_8"&gt;客户端报告限制&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;客户端报告有明确的限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只有客户端上有数据展示才会报告-报告之前不会触发刷新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端报告会跳过没有激活的dashlet。要确保所有dashlet的数据显示在报告里，你必须在创建报告前手动刷新。这项不适用于通过REST的server端报告或计划报告。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_9"&gt;大小限制&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;dynaTrace限制报告大小，这样dynaTrace Server或客户端不会受到非常大的报告的影响。要生成大的报告，使用下列配置项：&lt;/p&gt;
&lt;h4&gt;软限制：每个dashlet 100行&lt;/h4&gt;
&lt;p&gt;dashlet和dashboard被设置每个表100行。该设置会被具体的dashboard和dashlet的设置覆盖。如果你设置高于硬限制：5000行，硬限制仍然起作用。&lt;/p&gt;
&lt;h4&gt;硬限制：每个报告5000行&lt;/h4&gt;
&lt;p&gt;所有dashlet的报告不能超过5000行。如果你需要更大值，你可以设置下列系统属性：&lt;br&gt;
&lt;img alt="硬限制" src="http://pic.yupoo.com/east4ming_v/Fhwjvk0s/14Nfau.jpg"&gt;&lt;/p&gt;
&lt;p&gt;你可能需要设置该项在多个地方。下列描述了报告类型和相应的设置：&lt;/p&gt;
&lt;h4&gt;客户端报告：本地安装的客户端&lt;/h4&gt;
&lt;p&gt;本地安装的客户端配置位是&lt;em&gt;dtclient.ini&lt;/em&gt;,位于C:/Users/$username/.dynaTrace/dynaTrace $version/dtclient.ini(Liunx/Mac OS X 是 ~/.dynaTrace/..)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;-vargs&lt;/span&gt;

&lt;span class="na"&gt;-Dcom.dynatrace.diagnostics.reporting.maxTableRows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10000&lt;/span&gt;
&lt;span class="na"&gt;-Xmx512M&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;直接增加该设置到&lt;em&gt;-vmargs&lt;/em&gt;。&lt;/p&gt;
&lt;h4&gt;每个报告最多50个dashlets&lt;/h4&gt;
&lt;p&gt;为了防止超大的报告导致性能问题而作此设置。当然，你可以创建多个有50个dashlets的报告。&lt;/p&gt;
&lt;h4&gt;客户端报告：通过dynaTrace Server站点的Webstart客户端&lt;/h4&gt;
&lt;p&gt;没有本地安装，因此当你使用Webstart客户端时，必须在dynaTrace Server设置。位置：  C:\Program Files\dynaTrace\dynaTrace $version\server\conf\plugins\c.d.d.autoupdate.client.common_$version\common\plugin.properties.在文件末尾增加如下配置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;...osgi.user.area&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;@user.home/$$workdingdir&lt;/span&gt;
&lt;span class="na"&gt;osgi.install.area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;file:&lt;/span&gt;
&lt;span class="na"&gt;com.dynatrace.diagnostics.reporting.maxTableRows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="serverrest"&gt;Server端报告：计划报告和REST报告&lt;a class="headerlink" href="#serverrest" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;当你通过计划任务或REST接口创建报告时，dynaTrace Server创建的报告。如果必须要配置更高的限制。在&lt;em&gt;dtserver.ini&lt;/em&gt;,位于$dynaTrace Installation\dtserver.ini,例如 C:\Program Files\dynaTrace\dynaTrace 5.5.0\dtserver.ini&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;-restartonfailure&lt;/span&gt;

&lt;span class="na"&gt;-vmargs&lt;/span&gt;

&lt;span class="na"&gt;-Dcom.dynatrace.diagnostics.reporting.maxTableRows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10000&lt;/span&gt;
&lt;span class="na"&gt;-Xmx1920M&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;加到&lt;em&gt;-vmargs&lt;/em&gt;之后。&lt;/p&gt;
&lt;h2 id="troubleshooting"&gt;Troubleshooting&lt;a class="headerlink" href="#troubleshooting" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;配置应用，server或客户端重启后，第一份报告触发后，你应该在日志文件里看到下面信息：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;2015-14-03 09:26:53 INFO [ServerReportManager] Using non-default limit of table rows per report: '10000'&lt;br&gt;
如果没有出现，验证配置文件，并且重启server和客户端来激活新的变更。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;你也必须在dashboard或dashlet修改软限制，因为软限制仍然是100行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;dtclient.ini&lt;/em&gt;文件只位于C:\Users.如果该文件位于像是这样的位置：C:\Program Files (x86)\dynaTrace\dynaTrace $version,删除掉。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_10"&gt;非拉丁语脚本&lt;a class="headerlink" href="#_10" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;要启用PDF报告的非拉丁语系脚本，需要设置系统属性com。dynatrace.diagnostics.reporting.pdf.english为&lt;em&gt;false&lt;/em&gt;。这可能会导致连字符错误，但是允许从右到左书写。&lt;br&gt;
取决于报告是由dynaTrace Client还是dynaTrace Server创建，对应的系统属性也必须设置在&lt;em&gt;dtclient.ini&lt;/em&gt;或&lt;em&gt;dtserver.ini&lt;/em&gt;。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 26 May 2019 10:02:54 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-26:/dynatrace-appmon-handbook-20-reporting.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>OpenShift企业测试环境应用部署实战</title><link>https://www.EWhisper.cn/deploy-app-with-openshift-in-enterprise-env.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;总览&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;禅道简介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;实战步骤&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;具体步骤&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;总览&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今天领导交给我个小任务 - 把项目管理软件&lt;a href="https://www.zentao.net/download/80137.html"&gt;"禅道"&lt;/a&gt;开源版 部署到测试环境. 大概研究了下禅道开源版的官方文档, 决定通过Docker容器的方式把它部署到测试环境. &lt;/p&gt;
&lt;p&gt;除去研究的时间, 实际上2小时就把禅道开源版部署到测试环境, 无需申请主机、存储、数据库、中间件和域名。真是丝般顺滑, 挺舒服的.&lt;/p&gt;
&lt;h3 id="_2"&gt;禅道简介&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;禅道&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;是专业的研发项目管理软件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;细分需求、任务、缺陷和用例&lt;/li&gt;
&lt;li&gt;完整覆盖研发项目核心流程&lt;/li&gt;
&lt;li&gt;完整软件生命周期管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;实战步骤&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_4"&gt;概述&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;简单归纳起来, 就以下几步:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建"禅道"开源版的Docker 镜像&lt;/li&gt;
&lt;li&gt;在OpenShift上, 创建"禅道"项目, 并通过Docker 镜像创建"禅道"应用.&lt;/li&gt;
&lt;li&gt;将"禅道"应用通过域名发布到企业内网.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然, 由于OpenShift的安全增强, 以及企业测试环境的部分安全限制以及其他客观条件, 实际上执行起来需要的步骤更多:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建"禅道"开源版的Docker 镜像&lt;ol&gt;
&lt;li&gt;在云主机上, 通过Dockerfile 构建Docker镜像. 并导出&lt;/li&gt;
&lt;li&gt;在企业OpenShift 测试环境上, 上传并导入Docker 镜像&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;在OpenShift上, 创建"禅道"项目, 并通过Docker 镜像创建"禅道"应用.&lt;ol&gt;
&lt;li&gt;创建"禅道" - &lt;strong&gt;zentao&lt;/strong&gt; 项目&lt;ol&gt;
&lt;li&gt;(可选) 指定该项目只能被调度到特定主机上;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;(可选) 创建OpenShift useroot 服务账户 &lt;/li&gt;
&lt;li&gt;创建"禅道" app 应用&lt;/li&gt;
&lt;li&gt;持久化"禅道"应用和数据库数据.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;将"禅道"应用通过域名发布到企业内网.&lt;ol&gt;
&lt;li&gt;创建"禅道" 服务(service)&lt;/li&gt;
&lt;li&gt;创建"禅道" 路由(route)&lt;/li&gt;
&lt;li&gt;添加DNS记录.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_5"&gt;具体步骤&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;1-1 Dockerfile 构建镜像并导出&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;我是在我的云主机上构建的. &lt;/p&gt;
&lt;p&gt;之所以选择云主机, 原因有2:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有网, 有Docker镜像下载加速;&lt;/li&gt;
&lt;li&gt;已安装 Docker 组件和服务&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;创建 &lt;code&gt;Dockerfile&lt;/code&gt; (可以直接通过&lt;a href="http://dl.cnezsoft.com/zentao/docker/docker_zentao.zip"&gt;官网下载连接&lt;/a&gt;下载),&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ubuntu:16.04&lt;/span&gt;
&lt;span class="k"&gt;MAINTAINER&lt;/span&gt;&lt;span class="s"&gt; yidong &amp;lt;yidong@cnezsoft.com&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y apache2 mariadb-server php php-curl php-gd php-ldap php-mbstring php-mcrypt php-mysql php-xml php-zip php-cli php-json curl unzip libapache2-mod-php locales

&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en_US.UTF8&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;LANG=\&amp;quot;en_US.UTF-8\&amp;quot;\nLANGUAGE=\&amp;quot;en_US:en\&amp;quot;&amp;quot;&lt;/span&gt; &amp;gt; /etc/default/locale &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; locale-gen en_US.UTF-8

&lt;span class="k"&gt;RUN&lt;/span&gt; mkdir -p /app/zentaopms
&lt;span class="k"&gt;COPY&lt;/span&gt; docker-entrypoint.sh /app
&lt;span class="k"&gt;RUN&lt;/span&gt; &lt;span class="nv"&gt;random&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date +%s&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; curl http://cdn.zentaopm.com/latest/zentao.zip?rand&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$random&lt;/span&gt; -o /var/www/zentao.zip
&lt;span class="k"&gt;RUN&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /var/www/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; unzip -q zentao.zip &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm zentao.zip
&lt;span class="k"&gt;RUN&lt;/span&gt; a2enmod rewrite

&lt;span class="k"&gt;RUN&lt;/span&gt; rm -rf /etc/apache2/sites-enabled/000-default.conf /var/lib/mysql/*
&lt;span class="k"&gt;RUN&lt;/span&gt; sed -i &lt;span class="s1"&gt;&amp;#39;1i ServerName 127.0.0.1&amp;#39;&lt;/span&gt; /etc/apache2/apache2.conf
&lt;span class="k"&gt;COPY&lt;/span&gt; config/apache.conf /etc/apache2/sites-enabled/000-default.conf
&lt;span class="k"&gt;COPY&lt;/span&gt; config/ioncube_loader_lin_7.0.so /usr/lib/php/20151012/ioncube_loader_lin_7.0.so
&lt;span class="k"&gt;COPY&lt;/span&gt; config/00-ioncube.ini /etc/php/7.0/apache2/conf.d/
&lt;span class="k"&gt;COPY&lt;/span&gt; config/00-ioncube.ini /etc/php/7.0/cli/conf.d/

&lt;span class="k"&gt;VOLUME&lt;/span&gt;&lt;span class="s"&gt; /app/zentaopms /var/lib/mysql&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/app/docker-entrypoint.sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;此时, 该项目目录包含以下内容:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tree docker_zentao
docker_zentao
&lt;span class="p"&gt;|&lt;/span&gt;-- config
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;-- &lt;span class="m"&gt;00&lt;/span&gt;-ioncube.ini
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;-- apache.conf
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="sb"&gt;`&lt;/span&gt;-- ioncube_loader_lin_7.0.so
&lt;span class="p"&gt;|&lt;/span&gt;-- docker-entrypoint.sh
&lt;span class="p"&gt;|&lt;/span&gt;-- Dockerfile
&lt;span class="p"&gt;|&lt;/span&gt;-- docker_zentao.tar.gz
&lt;span class="sb"&gt;`&lt;/span&gt;-- README.md

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;7&lt;/span&gt; files
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;使用&lt;code&gt;Dockerfile&lt;/code&gt; 构建docker 镜像:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; docker_zentao
docker build -t zentao .
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;(可选) 可以运行一下以测试构建的镜像是否可以正常运行:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run --name zentao-test -p &lt;span class="m"&gt;8000&lt;/span&gt;:80 -e &lt;span class="nv"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;123456&lt;/span&gt; -d zentao  &lt;span class="c1"&gt;# 后台运行该docker容器&lt;/span&gt;
docker ps  &lt;span class="c1"&gt;# 查看容器是否正常运行, 有无crash&lt;/span&gt;
docker stop zentao-test  &lt;span class="c1"&gt;# 测试完毕, 停止该容器&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="5"&gt;
&lt;li&gt;将镜像导出为tar包.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker save -o docker_zentao.tar zentao
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;1-2 上传并导入docker 镜像&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;为什么要通过tar包导入镜像?&lt;/p&gt;
&lt;p&gt;因为企业的OpenShift测试环境不通外网, 但是有个测试内网的镜像仓库.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;把镜像tar包, 上传到可以连接到OpenShift企业测试环境的任意节点(本例子通过sftp上传)&lt;/li&gt;
&lt;li&gt;导入到企业测试环境的镜像仓库:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker load -i docker_zentao.tar
docker push txocp-registry.example.com/ewhisper/zentao
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2-1 创建"禅道" - &lt;strong&gt;zentao&lt;/strong&gt; 项目&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明1:&lt;/p&gt;
&lt;p&gt;"项目"(project) 是OpenShift中的概念, project可以理解为对应K8S的&lt;code&gt;namespace&lt;/code&gt;. 通过这个实现了多租户的隔离.&lt;/p&gt;
&lt;p&gt;所以每启动一个新项目, 就应该在OpenShift上创建一个单独的项目.&lt;/p&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明2:&lt;/p&gt;
&lt;p&gt;(可选) 指定该项目只能被调度到特定主机上;&lt;/p&gt;
&lt;p&gt;由于是测试环境, 为了方便配置, 会通过&lt;code&gt;HostPath&lt;/code&gt; (就是把文件持久化到本机的本地磁盘)来实现持久化. 那么就要保证"禅道"(zentao)这个项目的容器都要调度到一台指定的node(节点)服务器. 所以要通过下文的&lt;code&gt;node-selector&lt;/code&gt;来实现该功能.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc adm new-project zentao &lt;span class="se"&gt;\&lt;/span&gt;
    --node-selector&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kubernetes.io/hostname=txocp.node02.example.com&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上边的命令中, &lt;code&gt;oc adm new-project zentao&lt;/code&gt; 就是创建一个新项目 - zentao.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--node-selector&lt;/code&gt; 就是通过&lt;code&gt;node-selector&lt;/code&gt; 后边的条件来指定该项目如何调度.(应用场景是: 调度到高IO节点, 或者调度到上海区域...)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubernetes.io/hostname=txocp.node02.example.com&lt;/code&gt; 前边的&lt;code&gt;xxxhostname&lt;/code&gt;是条件, 即根据hostname 调度, 后边的是判定. 总的来说, 即该项目要被调度到:hostname为&lt;code&gt;txocp.node02.example.com&lt;/code&gt;的节点. (该节点肯定只有一个). &lt;/p&gt;
&lt;h5&gt;2-1-1 创建OpenShift useroot 服务账户&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;之所以创建OpenShift 服务账户, 是因为 OpenShift 作为企业级容器平台, 进行了安全加固,  默认不允许容器以&lt;strong&gt;root&lt;/strong&gt; 用户启动和运行. 所以要通过创建一个服务账户 &lt;code&gt;useroot&lt;/code&gt;, 为此账户添加"允许容器以root启动和运行的"的权限, 并应用到"zentao" 项目. 以此来使得容器可以正常启动.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在zentao项目中, 创建 服务账户(serviceaccount) - useroot&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc create serviceaccount useroot
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;使用OpenShift集群管理员用户, 为&lt;code&gt;useroot&lt;/code&gt;赋予&lt;code&gt;anyuid&lt;/code&gt;的权限:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc adm policy add-scc-to-user anyuid -z useroot
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;(可选) 如果已经启动过应用, 则通过&lt;code&gt;oc patch&lt;/code&gt;来更新应用的dc (部署配置)内容:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc patch dc/zentao --patch &lt;span class="s1"&gt;&amp;#39;{&amp;quot;spec&amp;quot;:{&amp;quot;template&amp;quot;:{&amp;quot;spec&amp;quot;:{&amp;quot;serviceAccountName&amp;quot;: &amp;quot;useroot&amp;quot;}}}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;此后, 容器内就可以通过root运行.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;2-2 创建"禅道" - zentao 应用&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;一个&lt;strong&gt;项目&lt;/strong&gt; 中, 可以包括多个应用, 比如: 禅道web server, 禅道app server, 禅道缓存服务器, 禅道数据库...&lt;/p&gt;
&lt;p&gt;本次为测试环境, 禅道的所有组件统统打进一个docker镜像里了, 所以就只有一个应用 - zentao. 里边其实就包括了禅道的: web server, app server和db.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app --name&lt;span class="o"&gt;=&lt;/span&gt;zentao &lt;span class="se"&gt;\&lt;/span&gt;
--docker-image&lt;span class="o"&gt;=&lt;/span&gt;txocp-registry.example.com/ewhisper/zentao &lt;span class="se"&gt;\&lt;/span&gt;
-e &lt;span class="nv"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;123456&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--insecure-registry&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上边的命令, 通过&lt;code&gt;oc new-app&lt;/code&gt;来创建新应用. 通过&lt;code&gt;--docker-image&lt;/code&gt;来指定镜像的地址, 通过&lt;code&gt;--e xxx&lt;/code&gt; 来指定环境变量.&lt;/p&gt;
&lt;p&gt;由于测试环境的registry没有配置https, 所以要添加&lt;code&gt;--insecure-registy=true&lt;/code&gt;, 否则默认是通过https访问, 会找不到镜像.&lt;/p&gt;
&lt;p&gt;运行命令后, OpenShift会默认创建:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;deployment configuration (dc, 部署配置) - zentao &lt;/li&gt;
&lt;li&gt;build configuration (bc, 构建配置)&lt;/li&gt;
&lt;li&gt;pod(容器)&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过&lt;code&gt;oc get&lt;/code&gt; 后边跟 &lt;code&gt;dc&lt;/code&gt;  &lt;code&gt;bc&lt;/code&gt;   &lt;code&gt;pod&lt;/code&gt;等来获取应用的创建和部署状态.&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;oc status&lt;/code&gt; 或者&lt;code&gt;oc logs&lt;/code&gt;来查看相关事件和日志.&lt;/p&gt;
&lt;p&gt;至此, 应用已经部署好了, 但是目前还存在2个问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;"禅道"的应用和数据库数据是临时性的, 还没有进行持久化;&lt;/li&gt;
&lt;li&gt;"禅道"只能通过docker内部访问, 用户无法访问.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;后续来一一解决这2个问题. 首先解决数据没有持久化的问题.&lt;/p&gt;
&lt;h4&gt;2-3 持久化应用和数据库数据&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;OpenShift 是一个容器编排调度系统, 理论上来说一个pod在哪儿我们完全不知道, 所以OpenShift推荐的持久化方案是通过PV和PVC来实现的.&lt;/p&gt;
&lt;p&gt;PV的具体实现可以是: NFS之类的公有存储, 而不应该是本地路径. (OpenShift默认不允许本地路径(即: hostPath)实现方式)&lt;/p&gt;
&lt;p&gt;本例中, 为了避免一切不必要的资源申请流程(当前OpenShift测试环境没有现成的nfs这类公有存储), 所以就直接用本地路径来实现持久化. 但还是要强调, 这不是最佳实践, 不推荐这么做. &lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于OpenShift不允许本地路径持久化, 所以首先要更改配置使其允许. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个名为&lt;code&gt;hostpath&lt;/code&gt;的SCC (SCC可以简单的理解为安全限制策略). 先创建一个&lt;code&gt;scc-hostpath.yaml&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;SecurityContextConstraints&lt;/span&gt;
&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hostpath&lt;/span&gt;
&lt;span class="nt"&gt;allowPrivilegedContainer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;span class="nt"&gt;runAsUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;RunAsAny&lt;/span&gt;
&lt;span class="nt"&gt;seLinuxContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;RunAsAny&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;通过yaml 创建SCC:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc create -f scc-hostpath.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;把&lt;code&gt;allowHostDirVolumePlugin&lt;/code&gt; 参数配给&lt;code&gt;hostpath&lt;/code&gt; :&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc patch scc hostpath -p &lt;span class="s1"&gt;&amp;#39;{&amp;quot;allowHostDirVolumePlugin&amp;quot;: true}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;把&lt;code&gt;hostpath&lt;/code&gt;这个SCC赋权给所有用户: (&lt;code&gt;system:authenticated&lt;/code&gt; 就是所有用户)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc adm policy add-scc-to-group hostpath system:authenticated
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至此, 所有用户就都可以挂载&lt;code&gt;hostPath&lt;/code&gt; 卷了.&lt;/p&gt;
&lt;p&gt;接下来, 就是要配置持久化了:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在对应的node节点, 创建对应的持久化目录, 如:&lt;code&gt;/data/mysql&lt;/code&gt; 和&lt;code&gt;/data/zentaopms&lt;/code&gt; (禅道 镜像, 包含了2个需要持久化的目录, 分别为: &lt;code&gt;/var/lib/mysql&lt;/code&gt; 和&lt;code&gt;/app/zentaopms&lt;/code&gt;, 分别持久化到前边的2个目录)&lt;/li&gt;
&lt;li&gt;编辑创建 zentao app时自动生成的&lt;code&gt;dc&lt;/code&gt; 配置, &lt;code&gt;oc edit dc zentao&lt;/code&gt;, 修改完成后如下:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apps.openshift.io/v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;DeploymentConfig&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;openshift.io/generated-by&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;OpenShiftNewApp&lt;/span&gt;
  &lt;span class="nt"&gt;creationTimestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2019-05-16T10:24:25Z&amp;#39;&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
  &lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
  &lt;span class="nt"&gt;resourceVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;12345678&amp;#39;&lt;/span&gt;
  &lt;span class="nt"&gt;selfLink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/apis/apps.openshift.io/v1/namespaces/zentao/deploymentconfigs/zentao&lt;/span&gt;
  &lt;span class="nt"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;c7xxxxxd-77c4-11e9-xxxx-faxxxxxxxfa&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;replicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
  &lt;span class="nt"&gt;revisionHistoryLimit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt;
  &lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
    &lt;span class="nt"&gt;deploymentconfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
  &lt;span class="nt"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;activeDeadlineSeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;21600&lt;/span&gt;
    &lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{}&lt;/span&gt;
    &lt;span class="nt"&gt;rollingParams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;intervalSeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
      &lt;span class="nt"&gt;maxSurge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;25%&lt;/span&gt;
      &lt;span class="nt"&gt;maxUnavailable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;25%&lt;/span&gt;
      &lt;span class="nt"&gt;timeoutSeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;600&lt;/span&gt;
      &lt;span class="nt"&gt;updatePeriodSeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
    &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Rolling&lt;/span&gt;
  &lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;openshift.io/generated-by&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;OpenShiftNewApp&lt;/span&gt;
      &lt;span class="nt"&gt;creationTimestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;null&lt;/span&gt;
      &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
        &lt;span class="nt"&gt;deploymentconfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
    &lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;
              &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;123456&lt;/span&gt;
          &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;&amp;gt;-&lt;/span&gt;
            &lt;span class="no"&gt;txocp-registry.example.com/ewhisper/zentao@sha256:......&lt;/span&gt;
          &lt;span class="nt"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Always&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
          &lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{}&lt;/span&gt;
          &lt;span class="nt"&gt;terminationMessagePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/dev/termination-log&lt;/span&gt;
          &lt;span class="nt"&gt;terminationMessagePolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;File&lt;/span&gt;
          &lt;span class="nt"&gt;volumeMounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;mountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/app/zentaopms&lt;/span&gt;
              &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-1&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;mountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/lib/mysql&lt;/span&gt;
              &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-2&lt;/span&gt;
      &lt;span class="nt"&gt;dnsPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ClusterFirst&lt;/span&gt;
      &lt;span class="nt"&gt;restartPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Always&lt;/span&gt;
      &lt;span class="nt"&gt;schedulerName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;default-scheduler&lt;/span&gt;
      &lt;span class="nt"&gt;securityContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{}&lt;/span&gt;
      &lt;span class="nt"&gt;serviceAccount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;useroot&lt;/span&gt;
      &lt;span class="nt"&gt;serviceAccountName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;useroot&lt;/span&gt;
      &lt;span class="nt"&gt;terminationGracePeriodSeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;30&lt;/span&gt;
      &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hostPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/cuikaidong/zentao/zentaopms&lt;/span&gt;
            &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-1&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hostPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/cuikaidong/zentao/mysql&lt;/span&gt;
            &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-2&lt;/span&gt;
  &lt;span class="nt"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;
  &lt;span class="nt"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ConfigChange&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;imageChangeParams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;automatic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
        &lt;span class="nt"&gt;containerNames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
        &lt;span class="nt"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ImageStreamTag&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;zentao:latest&amp;#39;&lt;/span&gt;
          &lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
        &lt;span class="nt"&gt;lastTriggeredImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;&amp;gt;-&lt;/span&gt;
          &lt;span class="no"&gt;txocp-registry.example.com/ewhisper/zentao@sha256:......&lt;/span&gt;
      &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ImageChange&lt;/span&gt;
&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;availableReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
  &lt;span class="nt"&gt;conditions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;lastTransitionTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2019-05-16T10:26:16Z&amp;#39;&lt;/span&gt;
      &lt;span class="nt"&gt;lastUpdateTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2019-05-16T10:26:16Z&amp;#39;&lt;/span&gt;
      &lt;span class="nt"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deployment config has minimum availability.&lt;/span&gt;
      &lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;True&amp;#39;&lt;/span&gt;
      &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Available&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;lastTransitionTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2019-05-16T11:54:24Z&amp;#39;&lt;/span&gt;
      &lt;span class="nt"&gt;lastUpdateTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2019-05-16T11:54:26Z&amp;#39;&lt;/span&gt;
      &lt;span class="nt"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;replication controller &amp;quot;zentao-5&amp;quot; successfully rolled out&lt;/span&gt;
      &lt;span class="nt"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;NewReplicationControllerAvailable&lt;/span&gt;
      &lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;True&amp;#39;&lt;/span&gt;
      &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Progressing&lt;/span&gt;
  &lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;causes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ConfigChange&lt;/span&gt;
    &lt;span class="nt"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;config change&lt;/span&gt;
  &lt;span class="nt"&gt;latestVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5&lt;/span&gt;
  &lt;span class="nt"&gt;observedGeneration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;6&lt;/span&gt;
  &lt;span class="nt"&gt;readyReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
  &lt;span class="nt"&gt;replicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
  &lt;span class="nt"&gt;unavailableReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
  &lt;span class="nt"&gt;updatedReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不要被这个配置文件吓到, 其实这些都是自动生成的. 关键信息是如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          &lt;span class="nt"&gt;volumeMounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;mountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/app/zentaopms&lt;/span&gt;
              &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-1&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;mountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/lib/mysql&lt;/span&gt;
              &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;△ 即2个容器内的需要挂载的路径, 分别被自动命名为: &lt;code&gt;zentao-volume-1&lt;/code&gt;和 &lt;code&gt;zentao-volume-2&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;对应的外部挂载, 原始情况是&lt;code&gt;EmptyDir&lt;/code&gt; (即没有挂载), 容器重启了数据就没了. 具体如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;emptyDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-1&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;emptyDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改后如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hostPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/cuikaidong/zentao/zentaopms&lt;/span&gt;
            &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-1&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hostPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/cuikaidong/zentao/mysql&lt;/span&gt;
            &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后, pod会自动进行重启, 把对应的数据通过&lt;code&gt;hostPath&lt;/code&gt; 挂载到本地目录来实现持久化.&lt;/p&gt;
&lt;h4&gt;3-1 创建"禅道" 服务(service)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务&lt;/strong&gt;(Service) 是OpenShift或K8S 的专有概念, 简单理解就是把pod内的指定接口暴露给OpenShift或K8S集群内部使用的一种方法. (比如把: mysql容器内的3306端口暴露到OpenShift SDN网络的 172.X.X.X:3306).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc expose dc zentao --port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把 zentao 应用的http服务端口80 暴露给OpenShift集群内部. (会创建一个叫 zentao 的 svc)&lt;/p&gt;
&lt;h4&gt;3-2 创建"禅道" 路由(route)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;路由&lt;/strong&gt; (route)是OpenShift的专有概念, 类似于K8S的Ingress, 作用都是把服务暴露给OpenShift之外的网络, 使得用户可以通过域名或其他方式访问到该应用. (如: 通过&lt;code&gt;zentao.apps.example.com&lt;/code&gt; 访问到 "禅道" 项目管理工具首页)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc expose svc zentao --hostname&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zentao.apps.example.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过上边的命令, 就创建了一条路由, 实现了通过&lt;code&gt;zentao.apps.example.com&lt;/code&gt; 访问到 "禅道" 项目管理工具首页. (如果不加&lt;code&gt;--hostname&lt;/code&gt;, 默认的hostname前缀为&lt;code&gt;appname-projectname&lt;/code&gt;, 即"zentao-zentao")&lt;/p&gt;
&lt;h4&gt;3-3 添加DNS记录&lt;/h4&gt;
&lt;p&gt;由于我们企业的OpenShift 测试环境DNS 的客观情况. 无法实现泛解析, 所以还需要请相关专业组手动添加DNS记录. 办公电脑添加DNS测试域等操作. &lt;/p&gt;
&lt;p&gt;做完这些操作后, 才能通过域名访问到禅道系统.&lt;/p&gt;
&lt;p&gt;至此, 我们就可以通过域名访问 "禅道" 页面​, ​而​我们​使用​的​数据​也会​保留在​指定​的​node​节点​上.​ &lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="禅道首页" src="./images/zentao_openshift.png"&gt;&lt;/p&gt;
&lt;h2 id="_6"&gt;总结&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;整体使用下来, 部分地方还存在使用不畅的情况, 可以继续优化提升使用体验, 大概总结一下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部镜像仓库镜像资源太匮乏. 导致构建镜像不太方便. 后续内部的镜像仓库可以从docker hub, 红帽官方定期拉取较为流行的镜像.&lt;/li&gt;
&lt;li&gt;在OpenShift上, 多挂载一个或多个公有存储(如NFS, NAS, 对象存储等), 方便进行数据持久化&lt;ul&gt;
&lt;li&gt;跟进一步, 希望OpenShift可以直接调用下一层数据存储的相关接口, 实现自动申请&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用通过域名发布出来, 还需要经过域控或F5或个人电脑进行进一步配置才能生效. 后续可以考虑:&lt;ul&gt;
&lt;li&gt;配置某二级域名的泛解析, 实现相关域名的自动发布. &lt;/li&gt;
&lt;li&gt;更进一步, 可以考虑OpenShift直接和F5深度整合, 将F5作为其router使用. (当前是: F5 -&amp;gt; HAProxy(router) )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;https://www.zentao.net&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Mon, 20 May 2019 00:04:46 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-20:/deploy-app-with-openshift-in-enterprise-env.html</guid><category>openshift</category><category>docker</category></item><item><title>容器自动伸缩</title><link>https://www.EWhisper.cn/openshift-pod-autoscaling.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;概览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#horizontal-pod-autoscalers"&gt;使用Horizontal Pod Autoscalers的要求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;支持的指标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;自动缩放&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpu"&gt;根据CPU利用率自动扩展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;根据内存利用率自动缩放&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#horizontal-pod-autoscaler"&gt;查看Horizontal Pod Autoscaler&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#horizontal-pod-autoscaler-status-conditions"&gt;查看Horizontal Pod Autoscaler Status Conditions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;概览&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="./images/Matrix-agent-Smith-clones.jpg"&gt;&lt;/p&gt;
&lt;p&gt;由&lt;code&gt;HorizontalPodAutoscaler&lt;/code&gt;对象定义的横向pod自动伸缩器(autoscaler)指定系统应如何根据从属于该复制控制器(replication controller)或部署配置(deployment configuration)的pod收集的度量标准(metrics)自动增加或减少复制控制器或部署配置的规模。&lt;/p&gt;
&lt;h2 id="horizontal-pod-autoscalers"&gt;使用Horizontal Pod Autoscalers的要求&lt;a class="headerlink" href="#horizontal-pod-autoscalers" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;要使用横向pod自动伸缩器(horizontal pod autoscalers)，您需要安装OpenShift Container Platform度量服务器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ansible-playbook &lt;span class="se"&gt;\&lt;/span&gt;
/usr/share/ansible/openshift-ansible/playbooks/metrics-server/config.yml &lt;span class="se"&gt;\&lt;/span&gt;
-e &lt;span class="nv"&gt;openshift_metrics_server_install&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;您可以通过运行以下命令验证服务器是否已正确安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc adm top node
$ oc adm top pod
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有关这些命令的其他信息，请参阅 &lt;a href="https://docs.openshift.com/container-platform/3.11/admin_guide/manage_nodes.html#viewing-nodes"&gt;查看Nodes&lt;/a&gt;和 &lt;a href="https://docs.openshift.com/container-platform/3.11/admin_guide/managing_pods.html#viewing-pods"&gt;查看Pods&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="_2"&gt;支持的指标&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Horizontal pod autoscalers支持以下度量标准：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;指标&lt;/th&gt;
&lt;th align="left"&gt;描述&lt;/th&gt;
&lt;th align="left"&gt;API版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;CPU利用率&lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/compute_resources.html#dev-cpu-requests"&gt;请求的CPU的&lt;/a&gt;百分比&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;autoscaling/v1&lt;/code&gt;， &lt;code&gt;autoscaling/v2beta1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;内存利用率&lt;/td&gt;
&lt;td align="left"&gt;请求的内存百分比&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;autoscaling/v2beta1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_3"&gt;自动缩放&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;您可以使用&lt;code&gt;oc autoscale&lt;/code&gt;命令创建horizontal pod autoscaler，并指定要运行的pod 的最小和最大数量，以及pod应指向的 &lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/pod_autoscaling.html#creating-a-hpa"&gt;CPU利用率&lt;/a&gt;或&lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/pod_autoscaling.html#pod-autoscaling-memory"&gt;内存利用率&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;创建horizontal pod autoscaler后，它开始尝试查询Heapster以获取pod上的指标。在Heapster获得初始指标之前可能需要一到两分钟。&lt;/p&gt;
&lt;p&gt;在Heapster中提供度量标准后，horizontal pod autoscaler将计算当前度量标准利用率与所需度量标准利用率的比率，并相应地向上或向下扩展。缩放将定期发生，但在指标进入Heapster之前可能需要一到两分钟。&lt;/p&gt;
&lt;p&gt;对于复制控制器(replication controller)，此扩展直接对应于复制控制器的副本。对于部署配置(deployment configuration)，此扩展直接对应于部署配置的副本计数。请注意，自动缩放仅适用于&lt;code&gt;Complete&lt;/code&gt;阶段中的最新部署。&lt;/p&gt;
&lt;p&gt;OpenShift Container Platform自动对资源进行核算，并防止在资源激增期间（例如启动期间）进行不必要的自动扩展。在向上扩展时，&lt;code&gt;unready&lt;/code&gt;状态中的pod的CPU使用率为&lt;code&gt;0 CPU&lt;/code&gt;，并且autoscaler在向下伸缩时会忽略这些pod。无法获取到指标的pod在向上伸缩时CPU使用率为0%，向下伸缩时CPU使用率为100%。这样可以在HPA决策期间实现更高的稳定性。要使用此功能，您必须配置 &lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/application_health.html#dev-guide-application-health"&gt;readiness checks&lt;/a&gt; 以确定是否可以使用新容器。&lt;/p&gt;
&lt;h2 id="cpu"&gt;根据CPU利用率自动扩展&lt;a class="headerlink" href="#cpu" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;oc autoscale&lt;/code&gt;命令并指定在任何给定时间至少要运行的最大pod数。您可以选择指定pod的最小数量以及pod应该定位的平均CPU利用率，否则将从OpenShift Container Platform服务器获得这些默认值。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc autoscale dc/frontend --min &lt;span class="m"&gt;1&lt;/span&gt; --max &lt;span class="m"&gt;10&lt;/span&gt; --cpu-percent&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;
deploymentconfig &lt;span class="s2"&gt;&amp;quot;frontend&amp;quot;&lt;/span&gt; autoscaled
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的示例在使用&lt;code&gt;autoscaling/v1&lt;/code&gt;版本的horizontal pod autoscaler时会创建一个具有以下定义的horizontal pod autoscaler：&lt;/p&gt;
&lt;p&gt;例1. Horizontal Pod Autoscaler 对象定义&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;autoscaling/v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;HorizontalPodAutoscaler&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;frontend&lt;/span&gt; 
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;scaleTargetRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;DeploymentConfig&lt;/span&gt; 
    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;frontend&lt;/span&gt; 
    &lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apps/v1&lt;/span&gt; 
    &lt;span class="nt"&gt;subresource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;scale&lt;/span&gt;
  &lt;span class="nt"&gt;minReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt; 
  &lt;span class="nt"&gt;maxReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt; 
  &lt;span class="nt"&gt;cpuUtilization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;targetCPUUtilizationPercentage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;metadata.name&lt;/td&gt;
&lt;td&gt;这个horizontal pod autoscaler 对象的名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kind&lt;/td&gt;
&lt;td&gt;要伸缩的对象类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.name&lt;/td&gt;
&lt;td&gt;要伸缩的对象的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.apiVersion&lt;/td&gt;
&lt;td&gt;要扩展的对象的API版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;minReplicas&lt;/td&gt;
&lt;td&gt;向下伸缩时的最小副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maxReplicas&lt;/td&gt;
&lt;td&gt;向上扩展时的最大副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;targetCPUUtilizationPercentage&lt;/td&gt;
&lt;td&gt;理想情况下每个pod应使用的请求CPU的百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;或者，在&lt;code&gt;oc autoscale&lt;/code&gt;使用horizontal pod autoscaler的&lt;code&gt;v2beta1&lt;/code&gt;版本时，该命令会创建一个具有以下定义的horizontal pod autoscaler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;autoscaling/v2beta1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;HorizontalPodAutoscaler&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hpa-resource-metrics-cpu&lt;/span&gt; 
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;scaleTargetRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apps/v1&lt;/span&gt; 
    &lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ReplicationController&lt;/span&gt; 
    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hello-hpa-cpu&lt;/span&gt; 
  &lt;span class="nt"&gt;minReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt; 
  &lt;span class="nt"&gt;maxReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt; 
  &lt;span class="nt"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Resource&lt;/span&gt;
    &lt;span class="nt"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cpu&lt;/span&gt;
      &lt;span class="nt"&gt;targetAverageUtilization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;50&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;metadata.name&lt;/td&gt;
&lt;td&gt;这个horizontal pod autoscaler 对象的名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.apiVersion&lt;/td&gt;
&lt;td&gt;要扩展的对象的API版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kind&lt;/td&gt;
&lt;td&gt;要扩展的对象类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.name&lt;/td&gt;
&lt;td&gt;要缩放的对象的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;minReplicas&lt;/td&gt;
&lt;td&gt;向下伸缩时的最小副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maxReplicas&lt;/td&gt;
&lt;td&gt;向上扩展时的最大副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;targetAverageUtilization&lt;/td&gt;
&lt;td&gt;每个pod应使用的请求CPU的平均百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_4"&gt;根据内存利用率自动缩放&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;与基于CPU的自动缩放不同，基于内存的自动缩放需要使用YAML而不是使用&lt;code&gt;oc autoscale&lt;/code&gt;命令来指定自动缩放器。（可选）您可以指定pod的最小数量以及pod应该定位的平均内存利用率，否则将从OpenShift Container Platform服务器获得这些默认值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于内存的自动扩展仅适用&lt;code&gt;v2beta1&lt;/code&gt;的自动扩展API 的版本。通过将以下内容添加到群集的&lt;code&gt;master-config.yaml&lt;/code&gt;文件来启用基于内存的自动缩放：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="nt"&gt;apiServerArguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;runtime-config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apis/autoscaling/v2beta1=true&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;将以下内容放在一个文件中，例如&lt;code&gt;hpa.yaml&lt;/code&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;autoscaling/v2beta1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;HorizontalPodAutoscaler&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hpa-resource-metrics-memory&lt;/span&gt; 
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;scaleTargetRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apps/v1&lt;/span&gt; 
    &lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ReplicationController&lt;/span&gt; 
    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hello-hpa-memory&lt;/span&gt; 
  &lt;span class="nt"&gt;minReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt; 
  &lt;span class="nt"&gt;maxReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt; 
  &lt;span class="nt"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Resource&lt;/span&gt;
    &lt;span class="nt"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;memory&lt;/span&gt;
      &lt;span class="nt"&gt;targetAverageUtilization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;50&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;metadata.name&lt;/td&gt;
&lt;td&gt;这个horizontal pod autoscaler 对象的名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.apiVersion&lt;/td&gt;
&lt;td&gt;要扩展的对象的API版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kind&lt;/td&gt;
&lt;td&gt;要扩展的对象类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.name&lt;/td&gt;
&lt;td&gt;要缩放的对象的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;minReplicas&lt;/td&gt;
&lt;td&gt;向下缩小时的最小副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maxReplicas&lt;/td&gt;
&lt;td&gt;向上扩展时的最大副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;targetAverageUtilization&lt;/td&gt;
&lt;td&gt;每个pod应使用的请求内存的平均百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start="3"&gt;
&lt;li&gt;然后，从上面的文件创建自动缩放器：&lt;code&gt;$ oc create -f hpa.yaml&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;注意:&lt;/p&gt;
&lt;p&gt;要使基于内存的自动缩放工作，内存使用量必须与副本计数成比例地增加和减少。一般：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;副本计数的增加必然导致每个pod的内存（工作集 working set）使用率整体下降。&lt;/li&gt;
&lt;li&gt;副本计数的减少必然导致每个pod的内存使用量整体增加。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用OpenShift Web控制台检查应用程序的内存行为，并确保在使用基于内存的自动缩放之前，您的应用程序满足这些要求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="horizontal-pod-autoscaler"&gt;查看Horizontal Pod Autoscaler&lt;a class="headerlink" href="#horizontal-pod-autoscaler" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;要查看Horizontal Pod Autoscaler的状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;oc get&lt;/code&gt;命令可以查看有关CPU利用率和容器 limits 的信息：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
$ oc get hpa/hpa-resource-metrics-cpu
NAME                         REFERENCE                                 TARGET    CURRENT  MINPODS        MAXPODS    AGE
hpa-resource-metrics-cpu     DeploymentConfig/default/frontend/scale   80%       79%      1              10         8d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输出包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目标(Target)&lt;/strong&gt;。由部署配置控制(deployment configuration)的所有pod的目标平均CPU利用率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Current&lt;/strong&gt;。由部署配置(deployment configuration)控制的所有pod的当前CPU利用率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minpods/Maxpods&lt;/strong&gt;。autoscaler可以设置的最小和最大副本数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;oc describe&lt;/code&gt;命令获取有关Horizontal Pod Autoscaler对象的详细信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc describe hpa/hpa-resource-metrics-cpu
Name:                           hpa-resource-metrics-cpu
Namespace:                      default
Labels:                         &amp;lt;none&amp;gt;
CreationTimestamp:              Mon, &lt;span class="m"&gt;26&lt;/span&gt; Oct &lt;span class="m"&gt;2015&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:13:47 -0400
Reference:                      DeploymentConfig/default/frontend/scale
Target CPU utilization:         &lt;span class="m"&gt;80&lt;/span&gt;% 
Current CPU utilization:        &lt;span class="m"&gt;79&lt;/span&gt;% 
Min replicas:                   &lt;span class="m"&gt;1&lt;/span&gt; 
Max replicas:                   &lt;span class="m"&gt;4&lt;/span&gt; 
ReplicationController pods:     &lt;span class="m"&gt;1&lt;/span&gt; current / &lt;span class="m"&gt;1&lt;/span&gt; desired
Conditions: 
  Type                  Status  Reason                  Message
  ----                  ------  ------                  -------
  AbleToScale           True    ReadyForNewScale        the last scale &lt;span class="nb"&gt;time&lt;/span&gt; was sufficiently old as to warrant a new scale
  ScalingActive         True    ValidMetricFound        the HPA was able to successfully calculate a replica count from pods metric http_requests
  ScalingLimited        False   DesiredWithinRange      the desired replica count is within the acceptable range
Events:
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Target CPU utilization&lt;/td&gt;
&lt;td&gt;每个pod应使用的请求内存的平均百分比。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Current CPU utilization&lt;/td&gt;
&lt;td&gt;由部署配置(deployment configuration)控制的所有pod的当前CPU利用率。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Min replicas&lt;/td&gt;
&lt;td&gt;要缩小到的最小副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Max replicas&lt;/td&gt;
&lt;td&gt;要扩展到的最大副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Conditions&lt;/td&gt;
&lt;td&gt;如果对象使用&lt;code&gt;v2alpha1&lt;/code&gt;API，则显示&lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/pod_autoscaling.html#viewing-a-hpa-status"&gt;status conditions&lt;/a&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="horizontal-pod-autoscaler-status-conditions"&gt;查看Horizontal Pod Autoscaler Status Conditions&lt;a class="headerlink" href="#horizontal-pod-autoscaler-status-conditions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;您可以使用设置的状态条件(status conditions)来确定Horizontal Pod Autoscaler 是否能够进行缩放以及当前是否以任何方式限制它。&lt;/p&gt;
&lt;p&gt;自动扩展API &lt;code&gt;v2beta1&lt;/code&gt;的版本提供Horizontal Pod Autoscaler Status Conditions：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;kubernetesMasterConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiServerArguments&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runtime-config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apis/autoscaling/v2beta1=true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置以下状态条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AbleToScale&lt;/code&gt; 指示Horizontal Pod Autoscaler 是否能够获取和更新 scales，以及是否有任何backoff 条件阻止缩放。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;表示缩放是允许的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt;表示对指定的原因缩放不允许。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScalingActive&lt;/code&gt; 指示是否启用Horizontal Pod Autoscaler （目标的副本计数不为零）并且能够计算所需的比例。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;状态表示度量工作正常。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt;条件通常表明与获取指标时遇到问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScalingLimited&lt;/code&gt; 表示不允许自动缩放，因为达到了最大或最小副本计数。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;条件表明，为了进行缩放你需要提高或降低最小或最大副本数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt;状态表明请求的比例是允许的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果您需要添加或编辑此行，请重新启动OpenShift Container Platform服务：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#master-restart api&lt;/span&gt;
&lt;span class="c1"&gt;#master-restart controllers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要查看影响Horizontal Pod Autoscaler 的条件，请使用&lt;code&gt;oc describe hpa&lt;/code&gt;。条件出现在&lt;code&gt;status.conditions&lt;/code&gt;字段中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc describe hpa cm-test
Name:                           cm-test
Namespace:                      prom
Labels:                         &amp;lt;none&amp;gt;
Annotations:                    &amp;lt;none&amp;gt;
CreationTimestamp:              Fri, &lt;span class="m"&gt;16&lt;/span&gt; Jun &lt;span class="m"&gt;2017&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:09:22 +0000
Reference:                      ReplicationController/cm-test
Metrics:                        &lt;span class="o"&gt;(&lt;/span&gt; current / target &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;http_requests&amp;quot;&lt;/span&gt; on pods:      66m / 500m
Min replicas:                   &lt;span class="m"&gt;1&lt;/span&gt;
Max replicas:                   &lt;span class="m"&gt;4&lt;/span&gt;
ReplicationController pods:     &lt;span class="m"&gt;1&lt;/span&gt; current / &lt;span class="m"&gt;1&lt;/span&gt; desired
Conditions: 
  Type                  Status  Reason                  Message
  ----                  ------  ------                  -------
  AbleToScale       True      ReadyForNewScale    the last scale &lt;span class="nb"&gt;time&lt;/span&gt; was sufficiently old as to warrant a new scale
  ScalingActive     True      ValidMetricFound    the HPA was able to successfully calculate a replica count from pods metric http_request
  ScalingLimited    False     DesiredWithinRange  the desired replica count is within the acceptable range
Events:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Horizontal Pod Autoscaler Status Conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AbleToScale&lt;/code&gt;条件指示HPA是否能够获取和更新比例，以及任何与backoff相关的条件是否会阻止扩展。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScalingActive&lt;/code&gt;状况指示HPA是否被启用（例如，目标的副本数不为零），并能够计算所需的scales。&lt;code&gt;False&lt;/code&gt;状态通常表示获取指标的问题。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScalingLimited&lt;/code&gt;条件指示期望scale由Horizontal Pod Autoscaler的最大或最小上限。&lt;code&gt;True&lt;/code&gt;状态一般预示着你可能需要在你的水平荚自动配置器升高或降低的最小或最大副本数量的限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是无法扩展的pod的示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Conditions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Type&lt;/span&gt;           &lt;span class="n"&gt;Status&lt;/span&gt;    &lt;span class="n"&gt;Reason&lt;/span&gt;            &lt;span class="n"&gt;Message&lt;/span&gt;
  &lt;span class="o"&gt;----&lt;/span&gt;           &lt;span class="o"&gt;------&lt;/span&gt;    &lt;span class="o"&gt;------&lt;/span&gt;            &lt;span class="o"&gt;-------&lt;/span&gt;
  &lt;span class="n"&gt;AbleToScale&lt;/span&gt;    &lt;span class="n"&gt;False&lt;/span&gt;     &lt;span class="n"&gt;FailedGetScale&lt;/span&gt;    &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;HPA&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;replicationcontrollers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;extensions&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello-hpa-cpu&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下是无法获取缩放所需pod的指标示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Conditions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Type&lt;/span&gt;                  &lt;span class="n"&gt;Status&lt;/span&gt;    &lt;span class="n"&gt;Reason&lt;/span&gt;                    &lt;span class="n"&gt;Message&lt;/span&gt;
  &lt;span class="o"&gt;----&lt;/span&gt;                  &lt;span class="o"&gt;------&lt;/span&gt;    &lt;span class="o"&gt;------&lt;/span&gt;                    &lt;span class="o"&gt;-------&lt;/span&gt;
  &lt;span class="n"&gt;AbleToScale&lt;/span&gt;           &lt;span class="n"&gt;True&lt;/span&gt;     &lt;span class="n"&gt;SucceededGetScale&lt;/span&gt;          &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;HPA&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;
  &lt;span class="n"&gt;ScalingActive&lt;/span&gt;         &lt;span class="n"&gt;False&lt;/span&gt;    &lt;span class="n"&gt;FailedGetResourceMetric&lt;/span&gt;    &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;HPA&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;compute&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;replica&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt; &lt;span class="n"&gt;returned&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;heapster&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下是请求的自动缩放小于所需最小值的pod示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Conditions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Type&lt;/span&gt;              &lt;span class="n"&gt;Status&lt;/span&gt;    &lt;span class="n"&gt;Reason&lt;/span&gt;              &lt;span class="n"&gt;Message&lt;/span&gt;
  &lt;span class="o"&gt;----&lt;/span&gt;              &lt;span class="o"&gt;------&lt;/span&gt;    &lt;span class="o"&gt;------&lt;/span&gt;              &lt;span class="o"&gt;-------&lt;/span&gt;
  &lt;span class="n"&gt;AbleToScale&lt;/span&gt;       &lt;span class="n"&gt;True&lt;/span&gt;      &lt;span class="n"&gt;ReadyForNewScale&lt;/span&gt;    &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;sufficiently&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;warrant&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;
  &lt;span class="n"&gt;ScalingActive&lt;/span&gt;     &lt;span class="n"&gt;True&lt;/span&gt;      &lt;span class="n"&gt;ValidMetricFound&lt;/span&gt;    &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;HPA&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;successfully&lt;/span&gt; &lt;span class="n"&gt;calculate&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;replica&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pods&lt;/span&gt; &lt;span class="n"&gt;metric&lt;/span&gt; &lt;span class="n"&gt;http_request&lt;/span&gt;
  &lt;span class="n"&gt;ScalingLimited&lt;/span&gt;    &lt;span class="n"&gt;False&lt;/span&gt;     &lt;span class="n"&gt;DesiredWithinRange&lt;/span&gt;  &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;desired&lt;/span&gt; &lt;span class="n"&gt;replica&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;within&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;acceptable&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;
&lt;span class="n"&gt;Events&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 14 May 2019 22:06:59 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-14:/openshift-pod-autoscaling.html</guid><category>openshift</category><category>containers</category><category>docker</category><category>k8s</category></item><item><title>我的个人博客迁移到Docker啦</title><link>https://www.EWhisper.cn/ewhisper-blog-moved-to-docker.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;网站架构&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;数据流向&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;网站架构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;容器化简单步骤&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#nginx"&gt;直接启动NGINX容器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;其他容器化方式&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#dockerfile"&gt;Dockerfile 封装镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-docker-compose"&gt;简单容器编排工具 - docker compose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;查看状态和日志&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;2019年5月10日起, 我的个人博客 - https://www.EWhisper.cn 正式运行在docker里边了! &lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt; &lt;/p&gt;
&lt;p&gt;我把相关的源码, Docker镜像分别上传到了GitHub和Docker Hub. 地址如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub: https://github.com/east4ming/my-tencentyun-nginx&lt;/li&gt;
&lt;li&gt;Docker Hub: https://cloud.docker.com/u/caseycui/repository/docker/caseycui/my-tencentyun-nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="欢迎上&amp;quot;船&amp;quot;" src="./images/illustration-com-container-party.png"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;网站架构&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_2"&gt;数据流向&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我的博客网站的架构其实&lt;strong&gt;非常非常&lt;/strong&gt;简单. 说白了, 就是&lt;strong&gt;NGINX + 静态页面&lt;/strong&gt;. (对的, 你没有看错, 我的网站是个全静态网站, 没有动态页面). &lt;/p&gt;
&lt;p&gt;之前的数据流向大概是:&lt;/p&gt;
&lt;p&gt;用户 -&amp;gt; 域名 -&amp;gt; DNS -&amp;gt; 腾讯云主机外网IP -&amp;gt; 腾讯云主机内网IP -&amp;gt; NGINX 80和443端口  (NGINX作为Web Server, 后端没有App Server和DB)&lt;/p&gt;
&lt;p&gt;现在加了一层Docker, 多了一层 主机 -&amp;gt; docker sdn的转发. 如下:&lt;/p&gt;
&lt;p&gt;用户 -&amp;gt; 域名 -&amp;gt; DNS -&amp;gt; 腾讯云主机外网IP -&amp;gt; 腾讯云主机内网IP -&amp;gt; &lt;strong&gt;Docker SDN端口映射&lt;/strong&gt;(443指向docker的443, 80之下那个docker的80) -&amp;gt; Docker的NGINX容器的 80和443端口 &lt;/p&gt;
&lt;h3 id="_3"&gt;网站架构&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;从头开始说起吧, 我的博客是一个&lt;strong&gt;静态站点&lt;/strong&gt;. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我写博文是先通过MarkDown 写.md格式的文本.&lt;/li&gt;
&lt;li&gt;然后通过&lt;strong&gt;静态站点生成器&lt;/strong&gt;(static site generator) -- &lt;a href="http://www.getpelican.com/"&gt;Pelican&lt;/a&gt; (我用的这个不算最主流的, 主流的如: Hexo等)将我的MarkDown 文本, 根据Pelican中定义的主题, 渲染为一个相应风格HTML文件. &lt;/li&gt;
&lt;li&gt;整个站点, 包括以下内容都是一个个的HTML页面.&lt;ol&gt;
&lt;li&gt;Index页面&lt;/li&gt;
&lt;li&gt;about  和 contact 页面&lt;/li&gt;
&lt;li&gt;标签 类别页面&lt;/li&gt;
&lt;li&gt;RSS 订阅页面&lt;/li&gt;
&lt;li&gt;每一篇博文&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;整个网站呢, 实际上就是:&lt;ol&gt;
&lt;li&gt;HTML(和CSS JS)&lt;/li&gt;
&lt;li&gt;静态内容(如: 图片, 图片目前部分在本地, 部分调用图床外链如&lt;a href="https://www.yupoo.com"&gt;又拍&lt;/a&gt; 七牛 CND等)&lt;/li&gt;
&lt;li&gt;其他功能通过插件(也是JS, 外部的JS)实现, 如:&lt;ol&gt;
&lt;li&gt;评论框 (国内可能看不见, 被屏蔽了....)&lt;/li&gt;
&lt;li&gt;转发条&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Pelican 生成的所有的静态站点内容, 都全部通过rsync等工具同步到我的腾讯云主机的&lt;code&gt;/usr/share/nginx/html&lt;/code&gt; 目录下, 并启动NGINX, 配置80, 443端口监听并处理静态内容就可以了.  &lt;ol&gt;
&lt;li&gt;以前, 我是直接通过&lt;code&gt;systemctl&lt;/code&gt; 在云主机上启动的NGINX&lt;/li&gt;
&lt;li&gt;现在, 是通过docker启动的NGINX镜像.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_4"&gt;容器化简单步骤&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;因为我这个只涉及NGINX的容器化, 而且NGINX有官方提供的标准镜像. 所以容器化非常简单, 最简单的方式, 就是&lt;strong&gt;直接启动NGINX容器&lt;/strong&gt;, 如下:&lt;/p&gt;
&lt;h3 id="nginx"&gt;直接启动NGINX容器&lt;a class="headerlink" href="#nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;其实, 直接启动&lt;strong&gt;NGINX&lt;/strong&gt;容器就好了, 你只需要把以下内容挂载卷或者暴露出来:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;挂载卷&lt;ol&gt;
&lt;li&gt;NGINX相关配置(包括: &lt;code&gt;/etc/nginx&lt;/code&gt;下面的nginx.conf文件, conf.d和default.d文件夹)&lt;/li&gt;
&lt;li&gt;静态站点文件(pelican生成的, 放到&lt;code&gt;/usr/share/nginx/html&lt;/code&gt;的文件)&lt;/li&gt;
&lt;li&gt;证书文件(向云供应商或证书供应商申请到的证书, 放到&lt;code&gt;/etc/pki/nginx&lt;/code&gt; 文件夹)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;暴露端口&lt;ol&gt;
&lt;li&gt;80&lt;/li&gt;
&lt;li&gt;443&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;命令如下: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker run --name my-tencentyun-nginx -d &lt;span class="se"&gt;\&lt;/span&gt;
  -p &lt;span class="m"&gt;80&lt;/span&gt;:80 -p &lt;span class="m"&gt;443&lt;/span&gt;:443 &lt;span class="se"&gt;\&lt;/span&gt;
  -v /etc/nginx/nginx.conf:/etc/nginx/nginx.conf &lt;span class="se"&gt;\&lt;/span&gt;
  -v /etc/nginx/conf.d:/etc/nginx/conf.d &lt;span class="se"&gt;\&lt;/span&gt;
  -v /etc/nginx/default.d:/etc/nginx/default.d &lt;span class="se"&gt;\&lt;/span&gt;
  -v /usr/share/nginx/html:/usr/share/nginx/html &lt;span class="se"&gt;\&lt;/span&gt;
  -v /etc/pki/nginx:/etc/pki/nginx:ro &lt;span class="se"&gt;\&lt;/span&gt;
  nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的命令就不细说了, 很容易理解的. &lt;code&gt;-p&lt;/code&gt;是暴露端口, &lt;code&gt;-v&lt;/code&gt;是把主机的磁盘挂载到容器里, &lt;code&gt;-d&lt;/code&gt;是后台运行.&lt;/p&gt;
&lt;p&gt;启动后, 你的NGINX docker容器就会自动下载并启动运行, 你的网站也可以正式对外服务啦. &lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;/p&gt;
&lt;h2 id="_5"&gt;其他容器化方式&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;自己本地或单机玩玩, 上边的容器化方式完全够用了. 但是如果我们有以下需求:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多人合作. 需要封装成新的镜像, 将镜像提供给别人使用.&lt;/li&gt;
&lt;li&gt;更好地编排与管理. 管理一个项目, 需要启动多少个web server, 多少个app server, 多少个db. 相互之间如何交互.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么久需要其他的容器化方式.&lt;/p&gt;
&lt;h3 id="dockerfile"&gt;Dockerfile 封装镜像&lt;a class="headerlink" href="#dockerfile" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种其实是团队, 公司, 或生产上推荐的一种方式. 开发负责写代码, 编译代码, 写Dockerfile, 构建镜像. 并把镜像上传到共有或私有的镜像仓库. 然后另外的团队角色, 如: 测试, 运维, 再从仓库中拉取镜像并启动, 测试, 上线. &lt;/p&gt;
&lt;p&gt;这也实现了docker的最大优势, 他们的slogan: &lt;strong&gt;"build, share and run any application, anywhere"&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;能做到这一点, 也是因为OS+语言+组件+应用包, 整个打包成了一个镜像, 实现了环境的一致性.&lt;/p&gt;
&lt;p&gt;还有一个有点, 因为有Dockerfile, 也方便进行追溯和理解镜像. (如果只是一个镜像的话, 很难知道镜像是怎么做出来的).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建个项目, 本地文件夹是&lt;strong&gt;my-tencentyun-nginx&lt;/strong&gt;, GitHub是: https://github.com/east4ming/my-tencentyun-nginx&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将相关源码和站点文件放到该目录中(配置文件, 站点文件, 证书)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 注意: &lt;/p&gt;
&lt;p&gt;证书key包含重要的私密信息, 千万不要上传到公网上!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构建镜像: &lt;code&gt;sudo docker build -t caseycui/my-tencentyun-nginx .&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(可选) 推送镜像到Docker Hub: &lt;code&gt;sudo docker push caseycui/my-tencentyun-nginx&lt;/code&gt; (我这边是Docker Hub直接oauth连接到Github, 我的对应的Github仓库代码有更新, 就会自动构建)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行镜像: &lt;code&gt;sudo docker run --name my-tencentyun-nginx -v /etc/pki/nginx:/etc/pki/nginx:ro -d -p 80:80 -p 443:443 caseycui/my-tencentyun-nginx&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Dockerfile 如下:&lt;/p&gt;
&lt;p&gt;最简单的Dockerfile, 就是在nginx镜像的基础上, 把我们自己的nginx配置文件和静态站点文件复制进去, 生成一个新镜像.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; nginx:latest&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt; pelican-output /usr/share/nginx/html
&lt;span class="k"&gt;COPY&lt;/span&gt; nginx.conf /etc/nginx/nginx.conf
&lt;span class="k"&gt;COPY&lt;/span&gt; default.d /etc/nginx/default.d
&lt;span class="c"&gt;#COPY conf.d /etc/nginx/conf.d  # 这边注释掉, 是因为这个目录里还没有内容&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="-docker-compose"&gt;简单容器编排工具 - docker compose&lt;a class="headerlink" href="#-docker-compose" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;docker compose是docker官方出品的容器编排工具, 简单易用. 小规模用用还是挺舒服的. 大规模, 企业级的现在都是使用Kubernetes.&lt;/p&gt;
&lt;p&gt;我这里用docker compose其实是杀鸡用牛刀了, 没啥必要. 它适用于哪种场景呢? &lt;/p&gt;
&lt;p&gt;比如, 我一个项目要上线, 包括: web server, app server, db. 那么这时候docker compose就很合适了. 通过它来编排这3类容器, 使它们相互协作和交互. &lt;/p&gt;
&lt;p&gt;docker-compose是通过&lt;code&gt;docker-compose.yaml&lt;/code&gt;来定义这些编排内容的. 示例如下:&lt;/p&gt;
&lt;p&gt;一个web容器, 一个redis容器. 挂载哪些卷, 怎么编译...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;web&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;.&lt;/span&gt;
    &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;5000:5000&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;.:/code&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;logvolume01:/var/log&lt;/span&gt;
    &lt;span class="nt"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;redis&lt;/span&gt;
  &lt;span class="nt"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;redis&lt;/span&gt;
&lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;logvolume01&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;创建&lt;code&gt;docker-compose.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;web&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;
  &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./nginx.conf:/etc/nginx/nginx.conf&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./default.d:/etc/nginx/default.d&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./conf.d:/etc/nginx/conf.d&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./pelican-output:/usr/share/nginx/html&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/pki/nginx:/etc/pki/nginx:ro&lt;/span&gt;
  &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;80:80&amp;quot;&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;443:443&amp;quot;&lt;/span&gt;
  &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;nginx&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-g&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;daemon&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;off;&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行: &lt;code&gt;sudo nohup docker-compose up &amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_6"&gt;查看状态和日志&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;查看状态: &lt;code&gt;sudo docker ps &amp;lt;container name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看日志: &lt;code&gt;sudo docker logs &amp;lt;container name&amp;gt;&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 10 May 2019 10:32:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-10:/ewhisper-blog-moved-to-docker.html</guid><category>nginx</category><category>github</category><category>docker</category><category>containers</category></item><item><title>使用OpenShift进行二进制构建</title><link>https://www.EWhisper.cn/binary-builds-with-openshift.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;介绍&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;用例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;限制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;教程概述&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_5"&gt;教程：构建本地代码更改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;教程：构建私有代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pipeline"&gt;教程：来自 pipeline 的二进制工件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;介绍&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;OpenShift 推荐和常用的构建方式是: 直接从代码仓库(如GIT 或SVN)中拉取源码进行构建(即源码构建). 但是这一种构建方式并不能满足所有的需求, 所以还有一种构建方式就是: 二进制构建. 二进制构建适用于以下2个场景:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发人员本地开发调试代码并构建;&lt;/li&gt;
&lt;li&gt;OpenShift和 CI/CD的pipeline进行整合, 获取从前边平台(如自动化开发平台或测试平台)传过来的工件(即二进制包)并构建为镜像.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OpenShift中的二进制构建功能允许开发人员将源代码或工件直接上传到构建(build)，而不是从Git存储库URL pull需要构建的源。通过源代码，Docker或自定义构建策略的 BuildConfig 都可以作为二进制构建启动。从本地工件启动构建时，现有源引用将替换为来自本地用户计算机的源。&lt;/p&gt;
&lt;p&gt;可以使用几种方式提供源，这些方式对应于使用&lt;code&gt;start-build&lt;/code&gt;命令时可用的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从文件（&lt;code&gt;--from-file&lt;/code&gt;）：当构建的整个源包含单个文件时就是这种情况。例如，它可能是用于Docker构建的&lt;code&gt;Dockerfile&lt;/code&gt;，用于Java应用构建的&lt;code&gt;pom.xml&lt;/code&gt;，或用于Ruby构建的&lt;code&gt;Gemfile&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;从目录（&lt;code&gt;--from-directory&lt;/code&gt;）：当源在本地目录中并且未提交到Git存储库时使用此目录。&lt;code&gt;start-build&lt;/code&gt; 命令将创建给定目录的存档，并将其作为源上传到构建器(builder)。&lt;/li&gt;
&lt;li&gt;从存档（&lt;code&gt;--from-archive&lt;/code&gt;）：当具有源的存档已存在时使用此选项。该存档可以是&lt;code&gt;tar&lt;/code&gt;，&lt;code&gt;tar.gz&lt;/code&gt;或&lt;code&gt;zip&lt;/code&gt;格式。&lt;/li&gt;
&lt;li&gt;从Git存储库（&lt;code&gt;--from-repo&lt;/code&gt;）：源是当前用户本地计算机上的Git存储库的一部分。当前存储库的HEAD commit将被存档并发送到OpenShift进行构建。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;用例&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;二进制构建适用于无法从现有Git存储库中提取源的需求。使用二进制构建的原因包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建和测试本地代码的变更。克隆来自公共存储库的源，并将本地变更上传到OpenShift进行构建。而无需在任何地方提交或推送本地更改。&lt;/li&gt;
&lt;li&gt;构建私有代码。新构建可以作为二进制构建从头开始。然后可以将源直接从本地工作站上传到OpenShift，而无需将其签入SCM。&lt;/li&gt;
&lt;li&gt;使用其他来源的工件构建镜像。通过Jenkins pipeline，二进制构建可以用于整合使用Maven或C编译器等工具构建的工件，以及使用这些构建的运行时镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;限制&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;二进制构建无法重复。由于二进制构建依赖于在构建开始时用户上传工件，因此OpenShift无法重复相同的构建而无需用户每次都重复相同的上载。&lt;/li&gt;
&lt;li&gt;无法自动触发二进制生成。它们只能在用户上传所需的二进制工件时手动启动。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;以二进制构建方式启动的构建版本也可能具有已配置的源URL。如果是这种情况，触发器会成功启动构建，但源将来自配置的源URL，而不是来自上次构建运行时用户提供的源。(比如: 用户先从Git仓库下载了源码并修改, 用本地修改后的源码手动上传、构建，那么OpenShift会获取到Git仓库的URL, 如果配置了触发器, 下次构建就直接通过Git URL pull源码并自动构建, 而不是自动获取本地的源码.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_4"&gt;教程概述&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下教程假设您有一个可用的OpenShift集群，并且您有一个可以创建工件的项目。它要求您拥有本地&lt;code&gt;git&lt;/code&gt;和&lt;code&gt;oc&lt;/code&gt;客户端。&lt;/p&gt;
&lt;h3 id="_5"&gt;教程：构建本地代码更改&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;基于现有源存储库创建新应用程序并为其创建路由：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app https://github.com/openshift/ruby-hello-world.git
oc expose svc/ruby-hello-world
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;等待初始构建完成并通过route来查看应用程序的页面。你应该得到一个欢迎页面：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc get route ruby-hello-world
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;在本地克隆存储库：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/openshift/ruby-hello-world.git
&lt;span class="nb"&gt;cd&lt;/span&gt; ruby-hello-world
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;
&lt;p&gt;更改应用程序的视图。使用您喜欢的编辑器编辑 &lt;code&gt;views/main.rb&lt;/code&gt;：将&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;标签更改为&lt;code&gt;&amp;lt;body style="background-color:blue"&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用本地修改的源启动新构建。在存储库的本地目录中，运行：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc start-build ruby-hello-world --from-dir&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; --follow
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;构建完成并重新部署应用程序后，指向应用程序主机的route应该会生成一个蓝色背景的页面。&lt;/p&gt;
&lt;p&gt;您可以继续在本地进行更改并使用&lt;code&gt;oc start-build --from-dir&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;您还可以创建代码分支，在本地提交更改，并使用存储库的HEAD作为构建的源：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout -b my_branch
git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;My changes&amp;quot;&lt;/span&gt;
oc start-build ruby-hello-world --from-repo&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; --follow
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_6"&gt;教程：构建私有代码&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;创建一个本地目录来保存您的代码：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir myapp
&lt;span class="nb"&gt;cd&lt;/span&gt; myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;在目录中创建一个名为&lt;code&gt;Dockerfile&lt;/code&gt;的文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; centos:centos7&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8080&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; index.html /var/run/web/index.html
&lt;span class="k"&gt;CMD&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /var/run/web &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; python -m SimpleHTTPServer &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;创建一个&lt;code&gt;index.html&lt;/code&gt;文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My local app&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is my local application&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;为您的应用程序创建一个新的构建：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-build --strategy docker --binary --docker-image centos:centos7 --name myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="5"&gt;
&lt;li&gt;使用本地目录的内容启动二进制构建：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc start-build myapp --from-dir . --follow
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="6"&gt;
&lt;li&gt;使用&lt;code&gt;new-app&lt;/code&gt;部署应用程序，然后为其创建路由：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app myapp
oc expose svc/myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="7"&gt;
&lt;li&gt;获取指向对应应用主机的路由：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc get route myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在构建和部署代码之后，您可以通过更改本地文件并通过&lt;code&gt;oc start-build myapp --from-dir&lt;/code&gt;再次调用启动新构建来进行迭代。构建完成后，代码将自动部署，更新的内容将在刷新页面时反映在浏览器中。&lt;/p&gt;
&lt;h3 id="pipeline"&gt;教程：来自 pipeline 的二进制工件&lt;a class="headerlink" href="#pipeline" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;OpenShift上的Jenkins允许使用带有合适工具的slave镜像来构建代码。例如，您可以使用&lt;code&gt;maven&lt;/code&gt; slave镜像来从代码存储库构建WAR包。但是，一旦构建了此工件，您需要将其提交到包含正确的运行时工件的镜像以运行您的代码。可以使用二进制构建将这些工件添加到运行时映像。在下面的教程中，我们将创建一个Jenkins pipeline，该pipeline使用&lt;code&gt;maven&lt;/code&gt; slave构建WAR，然后使用带有&lt;code&gt;Dockerfile&lt;/code&gt;的二进制构建将WAR添加到 wildfly 运行时映像。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为您的应用程序创建一个新目录：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir mavenapp
&lt;span class="nb"&gt;cd&lt;/span&gt; mavenapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;创建一个&lt;code&gt;Dockerfile&lt;/code&gt;将WAR复制到wildfly镜像内的适当位置以供执行。将以下内容复制到名为的本地文件 &lt;code&gt;Dockerfile&lt;/code&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; wildfly:latest&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; ROOT.war /wildfly/standalone/deployments/ROOT.war
&lt;span class="k"&gt;CMD&lt;/span&gt;  &lt;span class="nv"&gt;$STI_SCRIPTS_PATH&lt;/span&gt;/run
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;为该&lt;code&gt;Dockerfile&lt;/code&gt;创建一个新的BuildConfig：&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;这将自动启动一个构建, 刚开始会构建失败，因为 &lt;code&gt;ROOT.war&lt;/code&gt;工件尚不可用。下面的pipeline将使用二进制构建将该WAR包传递给构建。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat Dockerfile &lt;span class="p"&gt;|&lt;/span&gt; oc new-build -D - --name mavenapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;创建1个使用Jenkins pipeline的BuildConfig, 这个BuildConfig将构建1个WAR包，然后使用该WAR包和先前创建的&lt;code&gt;Dockerfile&lt;/code&gt;来构建镜像。相同的模式可用于其他平台，其中二进制工件由一组工具构建，然后与最终的包含不同运行时的镜像组合。将以下代码保存到&lt;code&gt;mavenapp-pipeline.yml&lt;/code&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;BuildConfig&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mavenapp-pipeline&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;jenkinsPipelineStrategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;jenkinsfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|-&lt;/span&gt;
        &lt;span class="no"&gt;pipeline {&lt;/span&gt;
          &lt;span class="no"&gt;agent { label &amp;quot;maven&amp;quot; }&lt;/span&gt;
          &lt;span class="no"&gt;stages {&lt;/span&gt;
            &lt;span class="no"&gt;stage(&amp;quot;Clone Source&amp;quot;) {&lt;/span&gt;
              &lt;span class="no"&gt;steps {&lt;/span&gt;
                &lt;span class="no"&gt;checkout([$class: &amp;#39;GitSCM&amp;#39;,&lt;/span&gt;
                            &lt;span class="no"&gt;branches: [[name: &amp;#39;*/master&amp;#39;]],&lt;/span&gt;
                            &lt;span class="no"&gt;extensions: [&lt;/span&gt;
                              &lt;span class="no"&gt;[$class: &amp;#39;RelativeTargetDirectory&amp;#39;, relativeTargetDir: &amp;#39;mavenapp&amp;#39;]&lt;/span&gt;
                            &lt;span class="no"&gt;],&lt;/span&gt;
                            &lt;span class="no"&gt;userRemoteConfigs: [[url: &amp;#39;https://github.com/openshift/openshift-jee-sample.git&amp;#39;]]&lt;/span&gt;
                        &lt;span class="no"&gt;])&lt;/span&gt;
              &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;stage(&amp;quot;Build WAR&amp;quot;) {&lt;/span&gt;
              &lt;span class="no"&gt;steps {&lt;/span&gt;
                &lt;span class="no"&gt;dir(&amp;#39;mavenapp&amp;#39;) {&lt;/span&gt;
                  &lt;span class="no"&gt;sh &amp;#39;mvn clean package -Popenshift&amp;#39;&lt;/span&gt;
                &lt;span class="no"&gt;}&lt;/span&gt;
              &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;stage(&amp;quot;Build Image&amp;quot;) {&lt;/span&gt;
              &lt;span class="no"&gt;steps {&lt;/span&gt;
                &lt;span class="no"&gt;dir(&amp;#39;mavenapp/target&amp;#39;) {&lt;/span&gt;
                  &lt;span class="no"&gt;sh &amp;#39;oc start-build mavenapp --from-dir . --follow&amp;#39;&lt;/span&gt;
                &lt;span class="no"&gt;}&lt;/span&gt;
              &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;}&lt;/span&gt;
          &lt;span class="no"&gt;}&lt;/span&gt;
        &lt;span class="no"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;JenkinsPipeline&lt;/span&gt;
  &lt;span class="nt"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="5"&gt;
&lt;li&gt;创建pipeline 构建。如果Jenkins未部署到您的项目中，则使用管道创建的BuildConfig会先部署Jenkins。在Jenkins准备建立您的管道之前可能需要几分钟来启动。您可以通过调用&lt;code&gt;oc rollout status dc/jenkins&lt;/code&gt;来检查Jenkins的状态：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc create -f ./mavenapp-pipeline.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="6"&gt;
&lt;li&gt;一旦Jenkins准备就绪，启动之前定义的管道：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc start-build mavenapp-pipeline
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="7"&gt;
&lt;li&gt;管道构建完成后，使用&lt;code&gt;new-app&lt;/code&gt;部署新应用程序并公开其route：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app mavenapp
oc expose svc/mavenapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="8"&gt;
&lt;li&gt;使用浏览器，导航到应用程序的路径：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc get route mavenapp
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 08 May 2019 18:41:34 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-08:/binary-builds-with-openshift.html</guid><category>openshift</category><category>docker</category><category>devops</category><category>git</category><category>containers</category></item><item><title>OpenShift 和 Kubernetes 有什么区别?</title><link>https://www.EWhisper.cn/openshift-and-kubernetes-whats-difference.html</link><description>&lt;p&gt;OpenShift 3以后, 架构完全基于K8S进行了重构, 但是又有一些差异. 今天, 我们就深入研究一下.&lt;/p&gt;
&lt;h2 id="k8s"&gt;K8S 是"内核"&lt;a class="headerlink" href="#k8s" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;K8S可以认为是当代分布式系统的"内核". 我们意识到, 一个设计良好的作业调度程序, 跨多台及其运行, 能够协调托管在骑上的工作负载的状态, 自然就会促进写作, 就像Linux内核为单个主机上调度工作负载所做的那样. 遵循这一逻辑, 我们知道不同的产品会根据针对用户的不同而差异化地打造.&lt;/p&gt;
&lt;p&gt;在很多手机, 电脑, 服务器, 甚至是树莓派上, 运行的都是相同的Linux 内核, 但是通过不同的不定来支持多种多样的硬件.&lt;/p&gt;
&lt;p&gt;K8S和各种各样的K8S发行版也适用于同样的模型, 通过不同类型的补丁, 来支持在K8S上面的一层. &lt;/p&gt;
&lt;h2 id="openshift"&gt;OpenShift 是发行版&lt;a class="headerlink" href="#openshift" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这是一个强有力的区别。OpenShift就是Kubernetes的发行版，专注于开发人员的体验，而开发人员需要开发下一代云原生应用程序。&lt;/p&gt;
&lt;p&gt;虽然任何人都可以通过选择每1个部分并按照每个用户选择的定制方式组装它们来&lt;a href="http://www.linuxfromscratch.org/"&gt;从Scratch &lt;/a&gt;构建&lt;a href="http://www.linuxfromscratch.org/"&gt;Linux&lt;/a&gt;，但大多数人都没有。大多数用户选择的抽象级别意味着他们不会从管理（甚至了解）Util-Linux版本2.31和2.33之间的差异中获得很多价值。为了更进一步，用户关心最低级别的功能（例如，只要超过最小版本号，他们就知道哪些命令/ API可用），然后提供所提供功能的列表。&lt;/p&gt;
&lt;p&gt;这与OpenShift非常相似。OpenShift将Kubernetes打包并包含其他工具作为OpenShift认为重要且OpenShift的用户需求的功能。就像CoreOS和CentOS包含不同的工具集一样，迎合不同的用户，因此Kubernetes发行版也是如此。&lt;/p&gt;
&lt;h2 id="openshiftk8s"&gt;OpenShift和K8S的具体区别&lt;a class="headerlink" href="#openshiftk8s" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="openshift_1"&gt;OpenShift 架构概述&lt;a class="headerlink" href="#openshift_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;OpenShift容器平台是一系列流行的组件和服务的集合体, 构建于Red Hat Enterprise Linux, Docker, 和K8S之上. OpenShift针对开发人员, 增强了以下功能: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;远程管理&lt;/li&gt;
&lt;li&gt;多租户&lt;/li&gt;
&lt;li&gt;安全性增强&lt;/li&gt;
&lt;li&gt;应用生命周期管理&lt;/li&gt;
&lt;li&gt;自服务接口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="OpenShift 架构" src="./images/openshift-architecture-overview.png"&gt;&lt;/p&gt;
&lt;p&gt;在上图中, 从下至上, 从左至右, 展示了经过Red Hat 在基本的容器架构基础上进一步集成、增强的架构:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本OS是Red Hat Enterprise Linux (RHEL)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;  提供了基本的容器管理API和容器镜像文件格式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt; 管理运行容器的主机集群(实体的或虚拟的). 它通过资源(resources)来描述多容器应用是由多个资源组成的, 以及他们间如何交互&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Etcd&lt;/strong&gt; 是一个分布式 key-value 存储, Kubernetes 通过它来存储集群内的关于容器和其他资源的配置和状态信息.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Docker + Kubernetes 之上, OpenShift增加了容器平台所需要的其他功能. 具体包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OpenShift-Kubernetes 扩展&lt;/strong&gt; 是存储在Etcd中, 由Kubernetes管理的额外的资源类型(resource types). 这些额外的资源类型组成了OpenShift 内部状态和配置, 还有应用的资源.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器化服务&lt;/strong&gt; 充实了很多基础架构功能, 比如网络和认证. 这些功能有些是一直运行的, 有些是按需启动的. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行时和xPaaS&lt;/strong&gt; 是为开发者准备好的容器镜像, 每个都预配置了特定的语言运行时或数据库. 可以被用作镜像流(Image Stream)或在此基础上增加不同的框架, 库, 甚至是中间件来进行扩展. xPaaS 提供了一系列JBoss中间件产品的基础镜像, 如: JBoss EAP 和 ActiveMQ.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DevOps 工具集和用户体验&lt;/strong&gt;: OpenShift 为开发人员和系统管理员提供了一个Web UI和CLI 管理工具, 允许配置和监控应用和OpenShift的服务和资源. Web和 CLI 都是基于相同的REST API, 这个API也可以被外部工具(如: IDE和CI平台)整合. OpenShift也可以访问外部SCM库和容器镜像库.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;OpenShift 团队:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;帮助K8S 完成了Namespace 和 quota功能的开发;&lt;/li&gt;
&lt;li&gt;推动了RBAC 授权认证的开发&lt;/li&gt;
&lt;li&gt;帮助K8S运行更多类型的应用, 并为其开发了一些卷插件(Volume Plugin)&lt;/li&gt;
&lt;li&gt;相比K8S, 多了Deployment Config(DC) resource. 使用该资源可以进行参数化部署, 执行滚动部署和回滚等.&lt;/li&gt;
&lt;li&gt;相比K8S, 多了Route resource. 而Router也是K8S的Ingress功能的前身.&lt;/li&gt;
&lt;li&gt;相比K8S, 默认集成了SDN (Open vSwitch)&lt;/li&gt;
&lt;li&gt;相比K8S, 实现了开发运维一体化.&lt;/li&gt;
&lt;li&gt;纳入CoreOS&lt;/li&gt;
&lt;li&gt;OpenShift 3.11, 集成了Prometheus和Grafana&lt;/li&gt;
&lt;li&gt;相比K8S, 增强了管理物理节点的能力&lt;/li&gt;
&lt;li&gt;目前, OpenShift还和NV合作, 未来会提供基于GPU运算能力的支持.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;资源类型差异&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes 资源类型&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pods&lt;/li&gt;
&lt;li&gt;Services&lt;/li&gt;
&lt;li&gt;Replication Controllers&lt;/li&gt;
&lt;li&gt;Persistent Volume (PV)&lt;/li&gt;
&lt;li&gt;Persistent Volume Claims (PVC)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;OpenShift 资源类型&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;除了以上资源类型, OpenShift 还增加了以下主要的资源类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deployment Configurations (DC) - 用于 持续交付(CD)工作流&lt;/li&gt;
&lt;li&gt;Build Configurations (BC) - 用于 持续集成(CI) 工作流&lt;/li&gt;
&lt;li&gt;Routes - 基于HAProxy, 作用类似于K8S Ingress, 但早于Ingress.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="openshift-s2i"&gt;OpenShift 特有的S2I 功能&lt;a class="headerlink" href="#openshift-s2i" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;OpenShift中的Source-to-Image (S2I) 进程会从SCM仓库中拉取代码, 自动化监测代码需要哪种类型的运行时, 并从特定运行时的基础镜像启动一个pod. 在这个pod 中, OpenShift 以开发人员相同的方式来构建该应用(如, 使用&lt;strong&gt;maven&lt;/strong&gt;来构建java程序). 如果构建成功, 另一个镜像会被创建, 把应用二进制附加到运行时层之上, 并把这个新镜像推送到OpenShift的内部镜像仓库中. 接下来, 可以从这个新镜像创建一个pod来运行该应用. S2I 可以看做是一个嵌入到OpenShift平台中的 CI/CD pipeline.&lt;/p&gt;
&lt;p&gt;CI/CD pipelines 会有很多种变异, 这个pipeline会暴露在这个项目(project, 就是K8S的namespace)中, 那么它就可以被调节来满足开发人员的需求. 例如, 外部CI工具(如Jenkins)可以用于来启动和运行测试, 然后给新镜像打上"成功"或"失败"的标签(label), 并推送到QA或生产环境. 随着时间推移, 一个组织一个部门一个公司可以创建他们自己的pipeline模板, 包括自定义的构建器和部署器.&lt;/p&gt;
&lt;h2 id="_2"&gt;总结&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;OpenShift 平台相比K8S, 具有以下特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自服务平台;&lt;/li&gt;
&lt;li&gt;多语言, 多中间件, 数据库支持&lt;/li&gt;
&lt;li&gt;高可用, 可伸缩性&lt;/li&gt;
&lt;li&gt;也是开源的(Red Hat收取服务费)&lt;/li&gt;
&lt;li&gt;安全 (基于: RBAC, LDAP, 主机, 网络, 容器各个层面的加固)&lt;/li&gt;
&lt;li&gt;动态存储管理&lt;/li&gt;
&lt;li&gt;企业级&lt;/li&gt;
&lt;li&gt;日志整合/ 监控整合&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 03 May 2019 16:51:34 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-03:/openshift-and-kubernetes-whats-difference.html</guid><category>docker</category><category>openshift</category><category>k8s</category><category>containers</category><category>PAAS</category></item><item><title>Dynatrace 告警简要分析流程</title><link>https://www.EWhisper.cn/analyze-problems-with-dynatrace.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;告警类别及含义&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;应用告警&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;中间件告警&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;主机告警&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpu"&gt;CPU运行状况不佳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;告警简要分析流程&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_6"&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;响应时间/速度较慢的请求的响应时间降低&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_8"&gt;失败率过高/页面操作/事务整体失败率高&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;应用程序进程不可用（非预期）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;应用程序进程运行状况不佳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#jvm"&gt;可能挂起的JVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;应用程序进程内存不足&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpu_1"&gt;CPU运行状况不佳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;硬盘运行状况不佳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_13"&gt;内存运行状况不佳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_14"&gt;网络运行状况不佳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynatrace"&gt;dynaTrace告警确认及关闭&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;告警类别及含义&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_2"&gt;应用告警&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;响应时间/速度较慢的请求的响应时间降低&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;响应时间降低--对应的应用或URL平均响应时间(中值)明显高于期望。即使所观测的响应时间尚可被客户接受，这种状态明显是应用程序或是硬件问题导致，并且会降低所能达到的最大吞吐量。&lt;/li&gt;
&lt;li&gt;速度较慢的请求的响应时间降低--观测中 10% 最慢请求的反应时间明显增加。这将导致用户体验变差。应用程序及硬件问题都能导致该问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;失败率过高/页面操作/事务整体失败率高&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;失败率过高--事务失败率远高于预期。&lt;/li&gt;
&lt;li&gt;页面操作失败率高--总体页面操作失败率超过预设阀值。&lt;/li&gt;
&lt;li&gt;事务整体失败率高--事务整体失败率高。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_3"&gt;中间件告警&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;应用程序进程不可用（非预期）&lt;/h4&gt;
&lt;p&gt;与之前连接的应用程序进程/Agent 之间的连接已丢失，无法与 Agent 断开连接。&lt;/p&gt;
&lt;p&gt;一般出现该告警的原因为停止或杀掉对应中间件的进程。&lt;/p&gt;
&lt;h4&gt;应用程序进程运行状况不佳&lt;/h4&gt;
&lt;p&gt;由于在垃圾回收过程中花费大量执行时间，因此应用程序进程的显著挂起时间会持续一段时间。&lt;/p&gt;
&lt;p&gt;一般是由于频繁GC导致的。&lt;/p&gt;
&lt;h4&gt;可能挂起的JVM&lt;/h4&gt;
&lt;p&gt;可能的java VM挂起。可能是由于heap/thread dump或者GC活动。原因未知需要手动分析。&lt;/p&gt;
&lt;h4&gt;应用程序进程内存不足&lt;/h4&gt;
&lt;p&gt;应用程序进程报出内存不足。&lt;/p&gt;
&lt;p&gt;一般是由于中间件内存使用已满或内存溢出。&lt;/p&gt;
&lt;h3 id="_4"&gt;主机告警&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;主机类告警的阈值与所属的主机组有关。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCXRay6p/bea1t.jpg"&gt;&lt;/p&gt;
&lt;h3 id="cpu"&gt;CPU运行状况不佳&lt;a class="headerlink" href="#cpu" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CPU使用率或系统时间超过预设阈值。&lt;/p&gt;
&lt;p&gt;CPU的阈值有2个阈值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用率&lt;/li&gt;
&lt;li&gt;系统时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;硬盘运行状况不佳&lt;/h4&gt;
&lt;p&gt;主机硬盘的可用空间大小及百分比低于预设阈值。有2个阈值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可用空间大小&lt;/li&gt;
&lt;li&gt;可用空间百分比&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;内存运行状况不佳&lt;/h4&gt;
&lt;p&gt;主机的可用内存大小及百分比低于预设阈值或内存页面故障大于预设阈值。有3个阈值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可用内存大小&lt;/li&gt;
&lt;li&gt;可用内存百分比&lt;/li&gt;
&lt;li&gt;页面故障数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;网络运行状况不佳&lt;/h4&gt;
&lt;p&gt;网络带宽使用率大于预设阈值。有1个阈值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带宽使用率&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;告警简要分析流程&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_6"&gt;简介&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;通用入口&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;“驾驶舱”，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCY07pnX/Ry7Q9.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Start Center，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCY32F9u/eT8op.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;“监控”，如下图：(绿色正常/红色异常/灰色无数据)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCY4WDEM/l7JDg.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_7"&gt;响应时间/速度较慢的请求的响应时间降低&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;打开事件仪表板，如下图：(告警红色为Severe级别/黄色为Warning级别；告警时间段可以按需选择)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCY7f5oF/dYODm.jpg"&gt; &lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;移动到对应的告警信息→右键→深入分析→PurePath，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYaxIBv/uWnkT.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;跳转到PurePath仪表板，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYdl5vQ/10ziUa.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;
&lt;p&gt;右键仪表板→编辑筛选器→筛选对应的PurePath并应用，如下图:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYehBhS/Jkp4w.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYfBRlP/NMHo5.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全选所有的PurePath→右键→深入分析→响应时间热点 （此处可以点击第二列”响应时间“对PurePath进行排序，针对性分析）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYhLI4x/nAr3y.jpg"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;响应时间热点仪表板，如下：(针对“速度较慢的请求的响应时间降低”告警，需要在右上角“百分比筛选器进行选择。至此，初步分析结果已得出)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYk4En1/n9rDF.jpg"&gt;&lt;/p&gt;
&lt;ol start="8"&gt;
&lt;li&gt;
&lt;p&gt;最终分析结果：API细分仪表板及方法细分仪表板，如下图：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYlQlsd/NpiKX.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYlQd76/REkXi.jpg"&gt;&lt;/p&gt;
&lt;ol start="10"&gt;
&lt;li&gt;更近一步分析：可以直接分析源代码，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYnAAJy/yrJBF.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYnwwKB/LynTC.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_8"&gt;失败率过高/页面操作/事务整体失败率高&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;事件→Purepath，如上文&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑筛选器内容，如上文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按错误排序，如下图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYrsFLH/Qyujo.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;右键上图报错方法，出现具体的报错/异常/日志等内容，如下图：(可以多看十几条PurePath，如果报错内容都相同，则已经初步定位到告警原因)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYsL7Nf/UcVBq.jpg"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;全选所有PurePath→深入分析→错误率相关菜单，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYtOs3i/Myyj4.jpg"&gt; &lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;定位到告警原因，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYuXMxi/148DNZ.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_9"&gt;应用程序进程不可用（非预期）&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该类报错通常是由于停止或杀掉或重启中间件等进程导致的。&lt;/p&gt;
&lt;p&gt;可以直接在”事件”仪表板中查看，如下图：（告警开始时间就是停进程的时间；终止时间就是启动进程的时间）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYwhZNA/gEE3m.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_10"&gt;应用程序进程运行状况不佳&lt;a class="headerlink" href="#_10" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该类报错分析起来较为复杂，需要有丰富的中间件运维经验和dynaTrace使用经验。详细信息参考附件：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《应用程序进程运行状况不佳分析示例》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="jvm"&gt;可能挂起的JVM&lt;a class="headerlink" href="#jvm" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如上文所述：可能是由于heap/thread dump或者GC活动。原因未知需要手动分析。具体问题具体对待。&lt;/p&gt;
&lt;h3 id="_11"&gt;应用程序进程内存不足&lt;a class="headerlink" href="#_11" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如上文所述，通常是由于内存溢出或内存快满。分析流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过上文提到的入口--“监控”→点击“进程”→查看进程仪表板，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYKC06L/RD3sF.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYJdo4D/10CMzY.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;点击内存快照→创建内存快照→按需选择快照的类型并应用，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYMr7TG/RzIqA.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;dynaTrace会自动分析并给出结果，如下图：(至此已经定位到问题所在)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYO7UoS/jZMqd.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;如需进一步分析，可以点击内存快照分析的其他标签页。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYPQTpk/T02uX.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dynaTrace支持内存溢出时自动做内存快照，且默认开启，在生产环境建议关闭该功能，有需求可以针对性开启。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYRN2UG/H6NSX.jpg"&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="cpu_1"&gt;CPU运行状况不佳&lt;a class="headerlink" href="#cpu_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;从入口“监控”进入→主机列表→主机监控，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYV9u5l/aweYD.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;主机监控仪表图分析，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYVyY4X/NmNbr.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;做CPU采样与线程快照（步骤与做内存快照类似，见上文）。CPU采样与线程快照分析如下：(已经定位到告警原因)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYX1rCQ/RpJ2j.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;可以对线程快照进一步分析，定位到线程的堆栈以及当时线程执行的URL请求，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCYZHuqt/10KqLh.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_12"&gt;硬盘运行状况不佳&lt;a class="headerlink" href="#_12" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;直接进入主机仪表板，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCZ2mxAA/C7G0x.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_13"&gt;内存运行状况不佳&lt;a class="headerlink" href="#_13" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;直接进入主机仪表板查看内存使用率，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCZ3lGA6/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;分析占用物理内存的进程情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;JVM使用的JVM代码区、JVM数据区、heap区都应该是固定的。但是JVM进程所使用的线程栈区、永久代、内核内存是可能随着应用程序吞吐量、业务量、负载量的变化而变化的。&lt;/p&gt;
&lt;p&gt;JVM是作为一个进程运行在Linux上的。从进程的角度来看，进程能直接访问的用户内存（虚拟内存空间）被划分为5个部分：代码区、数据区、堆区、栈区、未使用区。代码区中存放应用程序的机器代码，运行过程中代码不能被修改，具有只读和固定大小的特点。数据区中存放了应用程序中的全局数据，静态数据和一些常量字符串等，其大小也是固定的。堆是运行时程序动态申请的空间，属于程序运行时直接申请、释放的内存资源。栈区用来存放函数的传入参数、临时变量，以及返回地址等数据。未使用区是分配新内存空间的预备区域。 &lt;/p&gt;
&lt;p&gt;JavaNIO使得JVM可以使用内核内存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_14"&gt;网络运行状况不佳&lt;a class="headerlink" href="#_14" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;直接进入主机仪表板查看网络利用率，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCZ2o2RS/hLaMM.jpg"&gt;&lt;/p&gt;
&lt;h1 id="dynatrace"&gt;dynaTrace告警确认及关闭&lt;a class="headerlink" href="#dynatrace" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;dynaTrace的告警确认及关闭需要登录客户端，进入到“事件”仪表板进行操作。具体如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FCZ6HvHe/eop6b.jpg"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 03 May 2019 14:54:12 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-03:/analyze-problems-with-dynatrace.html</guid><category>Dynatrace</category><category>Observability</category><category>性能调优</category></item><item><title>Dynatrace AppMon 实战手册 - 10.Dynatrace权限管理</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-10-authority-management.html</link><description>&lt;ol&gt;
&lt;li&gt;在Dynatrace Server设置 -&amp;gt; 用户面板，如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX8vxzug/YnE01.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;
&lt;p&gt;Dynatrace 关于权限管理方面，从3个层面实现对用户权限的精细化管理，从面到点依次为：&lt;strong&gt;角色、组、账户&lt;/strong&gt;。同时，Dynatrace的权限管理支持LDAP以及密码复杂度的配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“角色”层面，主要负责Dynatrace所有详细权限的配置。Dynatrace默认配置的有如下角色：Administrator（管理员）、Guest（访客）、Power User、User（普通用户）。其中，Administrator具有Dynatrace的所有权限。具体如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX8vuSXj/7BPLt.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;可以根据生产环境的实际需要，创建新的角色及配置详细的权限。如：创建应用项目组的角色--Project Team。权限包括应用分析的所有权限及保密字符串的查看权限，以及可以做线程快照进行分析。权限细节如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX8vuCTD/8Iu8o.png"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;
&lt;p&gt;“组”层面。对3个方面进行了细化，分别是：Dynatrace Server管理（指定角色权限）；系统配置文件（对具体的系统配置文件进行详细的角色权限配置）；仪表板（对具体的仪表板进行权限配置，分为：可读和读写权限。）默认的组有：Incident Email Group（事件邮件告警组）、Business Users。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据实际情况，创建新的组并配置详细的权限。如：创建ilog组--ilog。权限为Project Team，所有与ilog相关的仪表板都有可读权限。具体操作如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX8vuaV7/3bcPr.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX8vulJK/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX8vuvnf/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;“账户”层面。就是实际使用Dynatrace的账户。包括以下内容：用户ID、电子邮件、所属用户组。具体操作如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX8vuLrs/medium.jpg"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-10-authority-management.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 11.Dynatrace创建定时任务</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-11-create-shedule-task.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;操作步骤&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;创建月报，每月邮件发送&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynatrace可以设置在每隔一定时间后，执行指定的任务。&lt;/p&gt;
&lt;p&gt;Dynatrace配置定时任务主要是在&lt;strong&gt;System Profile&lt;/strong&gt;（系统配置文件）层面进行配置。与定时任务有关的配置项包括以下2类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Schedule&lt;/strong&gt;（计划）：主要是与时间相关的配置。计划可以用于创建&lt;strong&gt;Task&lt;/strong&gt; （任务）和&lt;strong&gt;Monitor&lt;/strong&gt;（监视器）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task&lt;/strong&gt; （任务）：主要是具体执行的操作。如：做内存快照、线程快照、CPU采样、Session存储以及定期报告等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;操作步骤&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_3"&gt;创建月报，每月邮件发送&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;创建计划&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;右击指定的System Profile（系统配置文件）-&amp;gt; 编辑系统配置文件。可以看到编辑系统配置文件首选项，在左面版中可以找到&lt;strong&gt;计划&lt;/strong&gt;和&lt;strong&gt;任务&lt;/strong&gt;标签页。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击计划，默认的计划有每10min、每10s、每小时、每分钟。根据需要，创建一个&lt;strong&gt;每月&lt;/strong&gt;的计划，每月计划细则为：从20160701 9:35开始执行，每一个月执行一次，直到永远。如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9Fcrwn/vbDWA.png"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;下边以创建更复杂的&lt;strong&gt;Every workday&lt;/strong&gt;来说明创建计划的具体操作。点击&lt;strong&gt;创建计划...&lt;/strong&gt;跳出创建计划对话框。对话框分为2部分，分别为&lt;strong&gt;运行计划&lt;/strong&gt;和&lt;strong&gt;排除&lt;/strong&gt;，如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FczTZ/A4ZZf.png"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;创建或编辑&lt;strong&gt;计划运行&lt;/strong&gt;，在对话框中可以选择&lt;strong&gt;开始&lt;/strong&gt;、&lt;strong&gt;结束&lt;/strong&gt;时间和&lt;strong&gt;重复周期&lt;/strong&gt;。开始时间可以指定具体到时分秒；结束有3种方式：指定时间结束、执行一定次数后结束、永不结束。如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FcLIJ/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;
&lt;p&gt;设置&lt;strong&gt;重复周期&lt;/strong&gt;，重复周期可以选择具体的重复时间单位和具体的月份。如上图。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建&lt;strong&gt;排除&lt;/strong&gt;。排除有3种方式：始终排除、排除时间（日期）、排除时间自-到。&lt;strong&gt;Every workday&lt;/strong&gt;可以根据需求，始终排除1-12月的周六、周日。如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FcVKB/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;至此，&lt;strong&gt;计划&lt;/strong&gt;创建完毕。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;创建任务&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;回到系统配置文件首选项。点击&lt;strong&gt;任务&lt;/strong&gt;标签页。任务标签页可以对任务进行挂起和恢复以及停止。具体内容如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9Fd93j/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;可以在标签页点击&lt;strong&gt;创建...&lt;/strong&gt;,在本页面可以创建的任务有：内存快照、CPU采样、线程快照、Session存储。注意：无法在本页面创建报告。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9Fdi7K/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;如果需要创建报告任务，可以在Dynatrace客户端 -&amp;gt; 仪表板 -&amp;gt; 打开需要创建为报告的仪表板。如某系统的月报仪表板。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FdrgC/FkwEk.png"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;
&lt;p&gt;在仪表板标签右击 -&amp;gt; 点击报告，如上图：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;弹出&lt;strong&gt;报告创建&lt;/strong&gt;对话框，点击&lt;strong&gt;创建计划...&lt;/strong&gt;，如下图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FdAUJ/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;弹出计划报告任务对话框，主要有3个标签页可以设置：任务、计划、报告设置。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FdNiy/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;任务&lt;/strong&gt;标签页可以指定发送邮件，邮件接收人，主题；或者存放到本机或远程主机磁盘上。本例通过邮件发送。如上图：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;计划&lt;/strong&gt;标签页可以选择之前创建好的&lt;strong&gt;Every Month&lt;/strong&gt;计划，计划执行于Dynatrace Server。如下图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FdPls/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="9"&gt;
&lt;li&gt;&lt;strong&gt;报告设置&lt;/strong&gt;可以选择报告格式，支持以下格式：PDF、WORD、HTML、XML、EXCEL、CSV。这里选择HTML格式，可以直接显示在邮件里。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FdWZP/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="10"&gt;
&lt;li&gt;
&lt;p&gt;在&lt;strong&gt;高级&lt;/strong&gt; -&amp;gt; &lt;strong&gt;详细信息&lt;/strong&gt; 中可以进行更多细节设置。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9Fe8zz/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以自定义logo、显示行数、显示的仪表图。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9Fecyh/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置完成后&lt;strong&gt;运行计划&lt;/strong&gt;，运行后月报效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FX9FejjI/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;至此，Dynatrace创建定时任务--月报全部完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-11-create-shedule-task.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 12.Dynatrace细节优化</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-12-appmon-optimization.html</link><description>&lt;h2 id="_1"&gt;应用响应时间失败率阈值优化&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_2"&gt;概述&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dynatrace的应用相关阈值（包括：响应时间、最慢响应时间、失败率）是由Dynatrace 的&lt;strong&gt;Smart Baseline&lt;/strong&gt; 功能来进行动态调整的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;备注:&lt;br&gt;
具体的实现原理可以查看官方文档：&lt;a href="https://community.dynatrace.com/community/display/DOCDT62/Baseline+and+Smart+Alerting+Explained"&gt;Baseline and Smart Alerting Explained&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大致是根据&lt;strong&gt;过去7天&lt;/strong&gt;的表现来进行动态调整。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在某些特殊应用中，Dynatrace的自动基线并不符合生产系统的实际情况，会出现较多的误报。具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXiRtsLv/5BIUQ.png"&gt;&lt;/p&gt;
&lt;p&gt;在这种情况下，我们需要根据应用的实际情况将动态基线改为静态基线。&lt;/p&gt;
&lt;h3 id="_3"&gt;操作步骤&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;下面以修改具体请求的响应时间基线为例，来说明如何对基线、阈值进行优化。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Dynatrace指定系统配置文件的&lt;strong&gt;监控&lt;/strong&gt;页面 -&amp;gt; 点击中下方的&lt;strong&gt;应用程序&lt;/strong&gt; -&amp;gt; 选择对应的应用 -&amp;gt; 选择需要调整的&lt;strong&gt;业务分析&lt;/strong&gt; -&amp;gt; 点击具体业务分析的&lt;strong&gt;齿轮&lt;/strong&gt;图标 -&amp;gt; 选择&lt;strong&gt;配置基准&lt;/strong&gt;。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXiRu0Af/aY6N4.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;跳出如下&lt;strong&gt;基准设置&lt;/strong&gt;对话框。可以设置失败率、响应时间、是否告警等内容。在此，我们将&lt;strong&gt;响应时间&lt;/strong&gt;设置为静态基准：1000ms。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXiRtDaw/nPr34.png"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;将&lt;strong&gt;最慢响应时间&lt;/strong&gt;（最慢的10%请求）的静态基准设为：10000ms。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXiRtFcD/WkmXY.png"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;至此设置完成，回到&lt;strong&gt;应用程序&lt;/strong&gt; -&amp;gt; 具体的业务分析页面。我们看到基准已经按照配置调整为静态。（绿色线条）。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXiRtNUs/QklZs.png"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-12-appmon-optimization.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 13.Dynatrace Agent 迁移</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-13-move-agent.html</link><description>&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在实际生产环境中，由于Dynatrace 的License有类型、数量上的限制（限制同时接入的agent数量），但是并不限制agent必须永远嵌入同一个JVM中。而且，根据生产环境中不同应用系统的上下线，也需要对Dynatrace 的Agent进行调整迁移，以最大化地发挥Dynatrace的监控价值。&lt;/p&gt;
&lt;h2 id="_2"&gt;操作步骤&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynatrace Agent迁移主要分为3大步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dynatrace迁移前相关告警项的临时关闭（即创建Dynatrace事件&lt;strong&gt;停机时间&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;Agent从原有JVM中移除，并重启对应JVM&lt;/li&gt;
&lt;li&gt;Agent嵌入新的JVM，并重启对应JVM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后生效。&lt;/p&gt;
&lt;h3 id="_3"&gt;创建停机时间&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在左侧&lt;strong&gt;驾驶舱&lt;/strong&gt;中，双击&lt;strong&gt;事件&lt;/strong&gt;，出现事件仪表板 -&amp;gt; 点击“旦”形的停机时间图标，可以看到已经创建好的停机时间规则。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXj3wRLW/iZTj3.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;右击&lt;strong&gt;停机时间&lt;/strong&gt;表格空白处 -&amp;gt; &lt;strong&gt;创建停机时间&lt;/strong&gt;，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXj3wEfp/6NQPj.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;跳出&lt;strong&gt;创建停机时间&lt;/strong&gt;对话框，包括：停机开始时间及持续时间；重复周期；结束时间。此处配置如下图，然后点击下一步。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXj3xe7v/11CaLh.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;选择对应的告警事件，此处需要选择对应的系统配置文件的告警事件：&lt;strong&gt;Application Process Unavailable (unexpected)&lt;/strong&gt; ，并点击下一步。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXj3xnC3/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;配置完成后，返回停机时间表查看，规则已存在，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXj3wJlM/QbX65.jpg"&gt;&lt;/p&gt;
&lt;h3 id="dynatrace-agent"&gt;移除Dynatrace Agent&lt;a class="headerlink" href="#dynatrace-agent" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;说明:&lt;br&gt;
以Weblogic为例。其他中间件操作类似。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;备份对应中间件实例启动脚本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取消对应中间件实例启动脚本中的Dynatrace Agent字段，移除启动脚本中的如下内容：&lt;code&gt;-agentpath:&amp;lt;DT_HOME&amp;gt;/agent/lib/libdtagent.so=name=&amp;lt;AgentName&amp;gt;, server=&amp;lt;dynaTraceCollectorName&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在重启窗口时间段内，重启对应中间件实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移除Dynatrace Agent已完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dynatrace-agent_1"&gt;安装Dynatrace Agent&lt;a class="headerlink" href="#dynatrace-agent_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;请参考文档：&lt;a href="http://cloud.189.cn/t/V7VZze3uqERv"&gt;dynaTrace安装文档- 6.4  Agent 配置&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装完成后，可以在Dynatrace客户端左边&lt;strong&gt;驾驶舱&lt;/strong&gt; -&amp;gt; 双击&lt;strong&gt;Agent概述&lt;/strong&gt; -&amp;gt; 查看迁移后的Agent是否存在及抓取的Purepath总数。&lt;/p&gt;
&lt;p&gt;至此，Dynatrace Agent迁移完成。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-13-move-agent.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 14.Dynatrace创建Server-side业务分析</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-14-create-server-side-bussiness-transaction.html</link><description>&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;业务分析（&lt;strong&gt;Business Transaction&lt;/strong&gt;）可以经过对应用的分析来跟踪一些特殊的交易（如：登陆和购买）。例如，你可以跟踪某应用特定用户群的登陆操作响应时间。业务分析包含过滤方法来检查指定的用户标签的出现（如：一个标记过的web请求测量）。默认会计算响应时间和计数。拆分方法默认是&lt;strong&gt;应用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;针对Dynatrace的业务分析又可以根据数据来源的不同，细分为以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于Server端数据的业务分析&lt;/li&gt;
&lt;li&gt;基于UEM用户访问数据的业务分析&lt;/li&gt;
&lt;li&gt;基于UEM用户行为数据的业务分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本次将介绍如何创建Server-side业务分析。&lt;/p&gt;
&lt;h2 id="_2"&gt;案例介绍&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;客户发现人寿显示影像资料频繁告警相应缓慢。怀疑与用户和具体的IP有关，希望创建针对&lt;strong&gt;显示影像&lt;/strong&gt;这一业务，按照用户名和IP地址进行拆分过滤。以进一步分析。&lt;/p&gt;
&lt;h2 id="_3"&gt;操作步骤&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;备注:&lt;br&gt;
推荐使用&lt;strong&gt;第一个&lt;/strong&gt;而不是&lt;strong&gt;最后一个&lt;/strong&gt;来作为业务分析的筛选条件。&lt;br&gt;
这2者的主要区别是：如果PurePath树很长的话，最后一个将导致每个方法都会查看一遍，如果是第一个，就只看第一个节点就行了&lt;br&gt;
所以&lt;strong&gt;第一个&lt;/strong&gt;作为筛选条件效率会高很多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;操作步骤分解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建特定业务的&lt;strong&gt;测量（measure）&lt;/strong&gt; -- &lt;em&gt;1-4步&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;创建作为过滤条件的&lt;strong&gt;测量&lt;/strong&gt;--客户端IP、用户名 -- &lt;em&gt;5-7步&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;创建&lt;strong&gt;业务分析&lt;/strong&gt; --  &lt;em&gt;8-11步&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;进入指定系统配置文件的&lt;strong&gt;编辑系统配置文件&lt;/strong&gt;菜单，在左面板找到&lt;strong&gt;测量&lt;/strong&gt;标签，如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkeeeHe/sgCJu.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;strong&gt;创建测量...&lt;/strong&gt; ，这里需要按照&lt;strong&gt;URI模式值&lt;/strong&gt;进行创建。如上图：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跳出创建新测量对话框，可以通过ctrl+f 直接查找关键字（在任何列表类界面都可以搜索） -&amp;gt; 点击&lt;strong&gt;web请求 - URI模式值&lt;/strong&gt;，需要根据实际需求填写：名称、URI模式和值、拆分等内容。如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkeeyWo/2g7eJ.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;配置好的&lt;strong&gt;显示影像&lt;/strong&gt;（showimage）的测量如下，并点击&lt;strong&gt;确定&lt;/strong&gt; ：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkeeWmD/x6wu1.jpg"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;再次点击&lt;strong&gt;创建测量...&lt;/strong&gt;,查找并选择&lt;strong&gt;Web请求 - 客户端IP&lt;/strong&gt;，并点击&lt;strong&gt;添加&lt;/strong&gt;，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkef6xe/SGhyA.jpg"&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;再次点击&lt;strong&gt;创建测量...&lt;/strong&gt;,查找并选择&lt;strong&gt;Web请求 - 会话属性值&lt;/strong&gt; ，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkefgJ3/mTATJ.jpg"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;并进行详细的配置，配置可以抓取到用户名的&lt;strong&gt;会话属性&lt;/strong&gt;，本例中的会话属性为：&lt;strong&gt;lifeuser.getUserName()&lt;/strong&gt;。关于具体的会话属性，可以询问应用项目组的成员，也可以通过Dynatrace进行配置后发现。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkefpPU/EZUFO.jpg"&gt;&lt;/p&gt;
&lt;ol start="8"&gt;
&lt;li&gt;回到&lt;strong&gt;系统配置文件首选项&lt;/strong&gt;，在左面版点击业务分析，点击&lt;strong&gt;创建...&lt;/strong&gt;，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkeeqoQ/whjeF.jpg"&gt;&lt;/p&gt;
&lt;ol start="9"&gt;
&lt;li&gt;跳出&lt;strong&gt;业务分析编辑器&lt;/strong&gt;对话框。先对&lt;strong&gt;筛选器&lt;/strong&gt;进行选择，点击“&lt;strong&gt;+&lt;/strong&gt;”按钮，选择之前创建好的&lt;strong&gt;showimage&lt;/strong&gt;测量。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkefBbi/10GYpe.jpg"&gt;&lt;/p&gt;
&lt;ol start="10"&gt;
&lt;li&gt;
&lt;p&gt;再对结果抓取结果进行拆分，在&lt;strong&gt;拆分结果&lt;/strong&gt;栏 -&amp;gt; 点击“&lt;strong&gt;+&lt;/strong&gt;”按钮，选择之前创建好的测量--用户名和客户端IP。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkefKdS/wNnu6.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置&lt;strong&gt;拆分选项&lt;/strong&gt;，按照需求进行拆分。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkefVOx/xWmhe.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;至此创建Server-side业务分析完成。可以选择按照&lt;strong&gt;平均响应时间&lt;/strong&gt;排序，排序后下方会显示出平均响应时间占比的饼图。如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkeg73O/5odkC.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;说明:&lt;br&gt;
关于第7步，如果需要测量该指标，则应该先抓取该指标。&lt;/p&gt;
&lt;p&gt;要抓取该指标，需要配置Servlet的传感器属性。具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXkrJrPK/PRzj5.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-14-create-server-side-bussiness-transaction.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 15.Dynatrace创建Server-side业务分析 - 实时抓取某系统大于30s的请求</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-15-create-serverside-bt-another-example.html</link><description>&lt;h2 id="_1"&gt;案例介绍&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;某系统是某保险公司的核心系统。需要对系统进行性能上的优化工作，开发及项目组同事想要抓取到系统上个月所有响应时间超过30s的请求，以及请求的详细信息（如请求的具体时间等）。&lt;/p&gt;
&lt;h2 id="_2"&gt;操作步骤&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;思路分解如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建针对 &lt;strong&gt;核心系统&lt;/strong&gt;响应时间&lt;strong&gt;大于30s&lt;/strong&gt;的&lt;strong&gt;web 请求&lt;/strong&gt;的测量； -- 第1-3步&lt;/li&gt;
&lt;li&gt;创建业务分析，用来筛选并按照URI拆分相应的请求；-- 第4-8步&lt;/li&gt;
&lt;li&gt;结果展示 -- 第9-10步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进入&lt;strong&gt;系统配置文件首选项&lt;/strong&gt; -&amp;gt; 左面版&lt;strong&gt;测量&lt;/strong&gt; -&amp;gt;  查找&lt;strong&gt;web请求&lt;/strong&gt;-&lt;strong&gt;时间&lt;/strong&gt; 测量 -&amp;gt; 复制&lt;strong&gt;web请求测量&lt;/strong&gt; ，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3gTEn/10SqYN.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;跳出编辑测量属性的对话框，在&lt;strong&gt;阈值&lt;/strong&gt; -&amp;gt; 严重级别上限值设置为 30000ms，如下图:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3hgdf/5lMEx.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;转到&lt;strong&gt;详细信息&lt;/strong&gt;标签页，选择要抓取请求的系统--&lt;strong&gt;核心系统&lt;/strong&gt;。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3hmv8/pTYrW.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;在&lt;strong&gt;系统配置文件首选项&lt;/strong&gt; -&amp;gt; &lt;strong&gt;创建...&lt;/strong&gt; ，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3hBdF/byLKG.jpg"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;跳出&lt;strong&gt;业务分析编辑器&lt;/strong&gt;，设置业务分析的&lt;strong&gt;名称&lt;/strong&gt;、&lt;strong&gt;描述&lt;/strong&gt;、&lt;strong&gt;筛选器&lt;/strong&gt;。点击筛选器右侧“+”按钮，选择之前创建的测量。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3hRyy/2DyIX.jpg"&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;选择业务分析拆分方式。点击&lt;strong&gt;拆分结果&lt;/strong&gt; -&amp;gt; 点击“+”按钮 -&amp;gt; 选择对应的拆封规则。本例中应该选择的拆分规则为：&lt;strong&gt;完整的URI&lt;/strong&gt;。（图片仅用作说明）如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3i4uG/HzFFm.jpg"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;选择拆分限制。点击&lt;strong&gt;拆分选项...&lt;/strong&gt; ，跳出拆分选项对话框，选择&lt;strong&gt;不限制&lt;/strong&gt;。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3ibxt/KIdRF.jpg"&gt;&lt;/p&gt;
&lt;ol start="8"&gt;
&lt;li&gt;配置完成后的&lt;strong&gt;业务分析&lt;/strong&gt;如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3hHP6/FMqWt.jpg"&gt;&lt;/p&gt;
&lt;ol start="9"&gt;
&lt;li&gt;至此，业务分析配置完成。显示效果如下图（该图展示的是关于符合条件的URI的统计信息，上表显示的结果按照完整的URI进行拆分，每个拆分项都有&lt;strong&gt;计数&lt;/strong&gt;、&lt;strong&gt;平均响应时间&lt;/strong&gt; 等统计数据；下图中按照需求可以对&lt;strong&gt;计数&lt;/strong&gt;、&lt;strong&gt;平均响应时间&lt;/strong&gt;等生成饼图。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXW3ijPU/14leMe.jpg"&gt;&lt;/p&gt;
&lt;ol start="10"&gt;
&lt;li&gt;如果需要查看每个URI执行的&lt;strong&gt;开始时间&lt;/strong&gt;、&lt;strong&gt;持续时间&lt;/strong&gt;、&lt;strong&gt;执行堆栈&lt;/strong&gt;、&lt;strong&gt;客户端IP&lt;/strong&gt;等详细信息，可以右击对应的URI，点击&lt;strong&gt;深入分析&lt;/strong&gt; -&amp;gt; PurePath 跳转到PurePath界面，以此来查看完整的信息。&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-15-create-serverside-bt-another-example.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 16.Dynatrace创建Server-side业务分析实战案例3</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-16-create-serverside-bt-3rd-example.html</link><description>&lt;h2 id="_1"&gt;案例介绍&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;某关键业务不仅仅需要URI进行过滤，同时需要对query字段&lt;em&gt;busiid&lt;/em&gt;和&lt;em&gt;showflag&lt;/em&gt;进行过滤。&lt;/p&gt;
&lt;h2 id="_2"&gt;操作步骤&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;思路分解如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置sensor属性 - &lt;strong&gt;Servlet&lt;/strong&gt; 的&lt;strong&gt;请求属性&lt;/strong&gt; -- 添加对应的query字段；&lt;/li&gt;
&lt;li&gt;创建业务分析，配置指定的POST的URI、query；&lt;/li&gt;
&lt;li&gt;将配置好的测量作为组合条件配置业务分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;说明:&lt;br&gt;
需要实现的业务分析示例如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/bt_1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;:heavy_exclamation_mark:不正确的配置示例如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/bt_2.jpg"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置&lt;strong&gt;servlet&lt;/strong&gt;传感器属性 -- &lt;strong&gt;请求参数&lt;/strong&gt; 来抓取对应的&lt;strong&gt;query&lt;/strong&gt;信息，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/bt_4.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;创建包含指定query的测量 -- busiid （通过&lt;strong&gt;Web请求 - 参数值&lt;/strong&gt; 这个模板测量）。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/bt_5.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;创建包含指定query的测量 -- showflag，如下图:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/bt_7.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;注意&lt;strong&gt;测量&lt;/strong&gt;的&lt;strong&gt;拆分阈值&lt;/strong&gt;要设置为超过&lt;strong&gt;1&lt;/strong&gt;就拆分。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/bt_6.jpg"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;通过组合3种测量 - post URI 、 query 字段 busiid、query字段showFlag 通过组合 &lt;strong&gt;与&lt;/strong&gt; 条件来创建业务分析。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/bt_3.jpg"&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;至此，通过query设置业务分析已经完成。&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-16-create-serverside-bt-3rd-example.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 17.Dynatrace与Tivoli整合</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-17-appmon-and-tivoli.html</link><description>&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynatrace与Tivoli整合是通过SNMP协议完成的。Dynatrace发送SNMP协议信息到Tivoli，Tivoli接收到信息后进行分析，根据Tivoli上相应的规则进行一系列的动作，如：发送告警邮件、告警短信等。&lt;/p&gt;
&lt;p&gt;Dynatrace上有&lt;strong&gt;SNMP Action Plugin&lt;/strong&gt; 插件，通过该插件来实现SNMP协议的发送。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXU473ky/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;要使用&lt;strong&gt;SNMP Action Plugin&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供MIB库文件给SNMP目标系统的管理员。管理员会为其系统解析该文件。MIB库文件也会提供SNMP trap和你目标系统间的接口。&lt;/li&gt;
&lt;li&gt;在Dynatrace Server设置里启用SNMP Action Plugin： &lt;strong&gt;Dynatrace Server设置&lt;/strong&gt; -&amp;gt; &lt;strong&gt;插件&lt;/strong&gt; -&amp;gt; &lt;strong&gt;SNMP Action Plugin&lt;/strong&gt;。启用之后，SNMP action出现在&lt;strong&gt;事件&lt;/strong&gt;行为列表中。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;说明:&lt;br&gt;
Dynatrace SNMP 映射说明文档：&lt;a href="http://cloud.189.cn/t/AfayAfvEjem2"&gt;Dynatrace SNMP Mapping&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当前MIB库文件地址：&lt;a href="https://community.dynatrace.com/community/download/attachments/221381746/DYNATRACE-TRAP-MIB-V2?version=1&amp;amp;modificationDate=1432016056067&amp;amp;api=v2"&gt;DYNATRACE-TRAP-MIB-V2&lt;/a&gt;。MIB为2种受支持的traps提供以下值：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dynaTraceIncidentStart TRAP-TYPE&lt;br&gt;
ENTERPRISE dynaTrace&lt;br&gt;
VARIABLES (name, message, description, severity, violation, server, systemprofile, starttime)&lt;br&gt;
DESCRIPTION "Indicates that a new dynaTrace incident has begun."&lt;br&gt;
::= 1&lt;/p&gt;
&lt;p&gt;dynaTraceIncidentEnd TRAP-TYPE&lt;br&gt;
ENTERPRISE dynaTrace&lt;br&gt;
VARIABLES (name, message, description, severity, violation, server, systemprofile, starttime, endtime, duration)&lt;br&gt;
DESCRIPTION "Indicates that a dynaTrace incident has ended."&lt;br&gt;
::= 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_2"&gt;配置步骤&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以配置&lt;strong&gt;失败率太高&lt;/strong&gt;事件为例，说明事件如何通过SNMP协议发送给Tivoli。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;右击指定系统配置文件，弹出系统配置文件首选项 -&amp;gt; 左面版选择&lt;strong&gt;事件&lt;/strong&gt; -&amp;gt; 右边点击&lt;strong&gt;失败率太高&lt;/strong&gt;事件 -&amp;gt; 点击&lt;strong&gt;编辑&lt;/strong&gt;，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXU47qEb/ZZaXa.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;跳出&lt;strong&gt;编辑事件规则&lt;/strong&gt;对话框。可以看到在下边&lt;strong&gt;设置&lt;/strong&gt;里，默认的是基本设置，点击&lt;strong&gt;高级配置&lt;/strong&gt;进入高级设置页面。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXU47xJD/c5CA3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXU47CET/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;在页面中点击&lt;strong&gt;添加&lt;/strong&gt;，跳出如下界面：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXU47az8/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;
&lt;p&gt;选中&lt;strong&gt;SNMP Action Plugin&lt;/strong&gt;，下边出现一系列相关属性。根据对应的目标SNMP系统（如Tivoli的信息）来进行填写：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Target Host&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Target Port&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SNMP Version&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maximum Number of Message Octets&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完成后点击确定，然后在高级设置里，选择新配置的SNMP插件，设置发送SNMP trap信息 的严重性级别（一般、警告、严重）以及执行的条件（开始时、结束时、开始和结束时）。严重性级别一般警告配置邮件告警，严重配置邮件和短信告警，执行条件一般选择&lt;strong&gt;开始和结束时&lt;/strong&gt;。如下图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FXU47iXN/PCCU0.jpg"&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;后续工作由SNMP接受系统的管理员进行进一步的配置。包括确认消息送达，编写告警规则等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_3"&gt;其他配置说明&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在某公司Dynatrace与Tivoli配置期间，出现了较多的问题。现在整理如下：&lt;/p&gt;
&lt;h3 id="_4"&gt;字符集编码&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dynatrace SNMP的编码格式为&lt;strong&gt;utf-8&lt;/strong&gt;，且不可更改。&lt;/p&gt;
&lt;p&gt;而该公司Tivoli的编码格式为&lt;strong&gt;GBK&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;由于编码格式的不同，导致Dynatrace通过SNMP协议发送到Tivoli的内容，在有中文的地方发生&lt;strong&gt;字段跳行&lt;/strong&gt;的情况。&lt;/p&gt;
&lt;p&gt;为了尽量减少该问题，Dynatrace测量、事件等相关内容的名称和描述都尽量修改为&lt;strong&gt;英文&lt;/strong&gt;，以此来减少跳行问题的发生。但是尽管所有的相关内容都改为英文，Dynatrace在发送告警的时候，会自动加入&lt;strong&gt;超过了&lt;/strong&gt; 和&lt;strong&gt;上限&lt;/strong&gt; 字样。具体见示例部分。&lt;/p&gt;
&lt;p&gt;为了解决该问题，确定了如下的方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;dynaTrace使用中文语言包（为了Dynatrace的易用性考虑）&lt;/li&gt;
&lt;li&gt;邮件告警使用dynaTrace自带的邮件告警服务&lt;/li&gt;
&lt;li&gt;Severe级别、静态阈值部分告警通过Tivoli来实现短信告警。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之所以静态阈值部分可以采用Tivoli告警，有以下原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;告警格式、字段、内容固定，即使有中文跳行，跳的行数也是相同的，可以通过Tivoli配置绕过该问题&lt;/li&gt;
&lt;li&gt;由于动态告警以及Dynatrace自带告警无法手动进行触发，且这些告警的格式与静态阈值告警格式不同，所以并未将这些告警发送到Tivoli。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;p&gt;Dynatrace发给Tivoli的信息：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HEX&lt;/strong&gt;格式内容：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;e8 b6 85 e8 bf 87 e4&lt;br&gt;
ba 86 20 57 65 62 4c 6f 67 69 63 20 39 2b 2f 45 4a 42 20 50 6f 6f 6c 20 54 69&lt;br&gt;
6d 65 6f 75 74 20 54 6f 74 61 6c 20 43 6f 75 6e 74 20 3a 20 3c 6c 69 66 65 2d&lt;br&gt;
73 65 72 76 69 63 65 5f 65 69 6e 73 75 3e 20 4a 44 42 43 5f 53 74 61 74 65 20 3c&lt;br&gt;
61 6c 6c 2d 61 70 70 6c 69 63 61 74 69 6f 6e 73 3e 20 28 54 50 4c 69 66 65 5f&lt;br&gt;
77 6c 73 5f 63 78 6a 6b 5f 6c 62 74 5f 33 36 5b 6c 62 74 61 70 70 53 65 72 76&lt;br&gt;
65 72 31 5d 40 73 68 74 70 6c 73 65 65 70 6f 72 74 6c 62 74 30 31 29 20 e4 b8&lt;br&gt;
8a e9 99 90&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;utf-8&lt;/strong&gt; 格式内容：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;超过了&lt;br&gt;
WebLogic 9+/EJB Pool Timeout Total Count : &lt;life-service_einsu&gt;&lt;br&gt;
JDBC_State &lt;all-applications&gt;&lt;br&gt;
(TPLife_wls_cxjk_lbt_36[lbtappServer1]@shtplseeportlbt01) 上限&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;GBK&lt;/strong&gt;内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;瓒呰繃浜?WebLogic9+/EJB Pool Timeout Total Count : &lt;life-service_einsu&gt; JDBC_State&lt;all-applications&gt;(TPLife_wls_cxjk_lbt_36[lbtappServer1]@shtplseeportlbt01) 涓婇檺&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经过排查，确定该字样位于：&lt;strong&gt;oracle jre的lib库--rt.jar包中&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/path/to/dynatrace/dynatrace-6.2/jre/lib/rt.jar&lt;/p&gt;
&lt;p&gt;具体位于：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;com/sun/org/apache/xalan/internal/xsltc/compiler/util/ErrorMessages_zh_CN.class&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只要Dynatrace Server选择了中文语言，就会自动加入该字样。&lt;/p&gt;
&lt;p&gt;同时，发现因为加入的字样类似，导致的&lt;strong&gt;跳行&lt;/strong&gt;都是跳了固定的行数，所以我们在Tivoli上对跳了之后的行进行解析，得到了正确的告警信息。通过该方法绕过了字符集冲突的问题。&lt;/p&gt;
&lt;h3 id="hostnameip"&gt;HOSTNAME与IP映射&lt;a class="headerlink" href="#hostnameip" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;由于Dynatrace发送的告警信息都是具体的HOSTNAME而不是对应的IP。而Tivoli是通过IP来找到对应的系统并告警。所以，为了正确地告警，在Tivoli中加入了Dynatrace所监控主机的&lt;strong&gt;HOSTNAME&lt;/strong&gt;和&lt;strong&gt;IP&lt;/strong&gt;的映射表。&lt;/p&gt;
&lt;p&gt;后续如有新增或调整监控主机，需要联系Tivoli的对应负责人进行相应调整。&lt;/p&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;appserverxxx 10.1.1.xxx&lt;/p&gt;
&lt;p&gt;dzbd-app1 10.x.x.x&lt;/p&gt;
&lt;p&gt;hostnamexxx01 10.1.x.x&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_5"&gt;短信告警&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;短信告警格式如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IP+服务器描述+系统+Weblogic Server+告警描述+当前值+发生时间&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例（短信告警内容）：&lt;/p&gt;
&lt;p&gt;[XXXX公司]10.1.129.36:xx系统xx应用服务器1；xx系统；Weblogic服务器：TPLife_wls_cxjk_xx_xx[appServer1]发生告警：&lt;life-service_einsu&gt; WLS JVM FreeMemory is low；当前值：1698.515644564548已恢复！；发生时间：2016-05-11&lt;br&gt;
18:40:31&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="severe"&gt;Severe级别静态告警阈值&lt;a class="headerlink" href="#severe" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;目前的Severe级别静态阈值告警有：（该级别使用短信告警。）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;TIPS：&lt;br&gt;
目前已经实现各个系统的测量参数、告警阈值、邮件通知人的自定义。（如针对核心系统，活动线程数告警阈值比其他大）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Weblogic Hogging线程数过高     &amp;gt;50 告警&lt;/li&gt;
&lt;li&gt;Weblogic JDBC连接池状态不正常&lt;/li&gt;
&lt;li&gt;JVM剩余内存过小                    &amp;lt;50M 告警&lt;/li&gt;
&lt;li&gt;WLS weblogic.kernel.System-MaxWaitTime 过长     &amp;gt;10min 告警&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="warning"&gt;Warning级别静态告警阈值&lt;a class="headerlink" href="#warning" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;以下为初始的设置，后续可以根据实际的告警情况进行调整和优化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;活动线程数     Warning：&amp;gt;250    （核心系统线程数为400，暂定：Warning： &amp;gt;300 )&lt;/li&gt;
&lt;li&gt;JDBC连接延迟时间    Warning：&amp;gt;5s  Severe:&amp;gt;10s&lt;/li&gt;
&lt;li&gt;JDBC失败重连        Warning：&amp;gt;5      Severe:&amp;gt;10&lt;/li&gt;
&lt;li&gt;JDBC泄漏连接数    Warning：&amp;gt;15   Severe:&amp;gt;30&lt;/li&gt;
&lt;li&gt;JDBC当前等待连接计数   Warning:&amp;gt;10  Severe:&amp;gt;30&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-17-appmon-and-tivoli.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 18.Dynatrace创建自定义告警事件</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-18-create-incidents.html</link><description>&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynatrace有以下概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Measure&lt;/strong&gt;（测量） -- 即需要监控的指标。（包括需要监控的指标、对应的Agent、阈值等）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incidents&lt;/strong&gt;（事件） -- 即告警事件。订阅了Measure，配置了Measure的阈值，然后才能创建Incidents，并且定义好根据哪个阈值来告警，以何种方式发送，产生告警该做的动作（如threaddump等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本次将介绍如何创建自定义告警事件。&lt;/p&gt;
&lt;h2 id="_2"&gt;操作步骤&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本次以创建&lt;strong&gt;指定系统&lt;/strong&gt;的&lt;strong&gt;WebLogic的Hogging线程数&lt;/strong&gt;告警为例。&lt;/p&gt;
&lt;p&gt;操作步骤分解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建需要监控的指标--&lt;strong&gt;Measure&lt;/strong&gt;(测量) -- 1-5步&lt;/li&gt;
&lt;li&gt;创建告警事件--&lt;strong&gt;Incidents&lt;/strong&gt; -- 6-8步&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;打开&lt;strong&gt;系统配置文件&lt;/strong&gt; -&amp;gt; &lt;strong&gt;测量结果&lt;/strong&gt;标签页 -&amp;gt; 点击&lt;strong&gt;创建测量&lt;/strong&gt;。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_1.JPG"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;默认有所有系统的Hogging线程数Measure。可以通过复制，并修改来创建。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_2.JPG"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;对复制出来的测量进行编辑。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_2-1.JPG"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;编辑Measure（测量）的相关属性。（包括：名称、具体的测量属性、阈值、对应的Agent组）。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_3.JPG"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_4.JPG"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_5.JPG"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;
&lt;p&gt;至此，Measure（测量）创建完毕。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始创建&lt;strong&gt;事件规则&lt;/strong&gt;，点击 &lt;strong&gt;事件&lt;/strong&gt;标签页 -&amp;gt; 点击 &lt;strong&gt;创建事件规则&lt;/strong&gt;。如下图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_6.JPG"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;
&lt;p&gt;告警&lt;strong&gt;条件&lt;/strong&gt;选择上文创建好的Measure（测量）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;告警&lt;strong&gt;动作&lt;/strong&gt;可以配置发邮件，做快照等。如下图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_7.JPG"&gt;&lt;/p&gt;
&lt;ol start="9"&gt;
&lt;li&gt;告警&lt;strong&gt;操作&lt;/strong&gt;可以进行更多的设置。另外，可以对告警的细粒度、严重性、告警抑制时间等进行设置。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_create_incidents_8.JPG"&gt;&lt;/p&gt;
&lt;ol start="10"&gt;
&lt;li&gt;至此，自定义告警创建完毕。&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-18-create-incidents.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 19.Dynatrace创建告警事件停机时间</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-19-create-downtime.html</link><description>&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynatrace在生产环境的使用中，往往会碰到所监控系统的正常生产重启（如停机窗口、发版本、维护等）导致的误告警。&lt;/p&gt;
&lt;p&gt;为了避免这种问题，可以通过设置告警&lt;strong&gt;停机时间&lt;/strong&gt;（downtime)来减少不必要的告警。&lt;/p&gt;
&lt;h2 id="_2"&gt;操作&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;点击&lt;strong&gt;事件&lt;/strong&gt;仪表板右上角按钮。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_downtime_1.JPG"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;点击后出现&lt;strong&gt;停机窗口&lt;/strong&gt;表。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_downtime_2.JPG"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;在表中点击右键&lt;strong&gt;创建停机时间&lt;/strong&gt;。勾选对应的系统配置文件中的对应的告警规则（如停机或重启时会出现的告警：应用关闭和应用进程不可用）。出现如下对话框：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_downtime_3.JPG"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;点击下一步，进行详细的设置，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_downtime_4.JPG"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;停机时间规则可以时临时性的一次。也可以根据生产重启窗口的要求，如设置为每月的第三周周六。如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_downtime_5.JPG"&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;配置完成后显示如下。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon_downtime_6.JPG"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 10 Apr 2019 17:45:51 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-10:/dynatrace-appmon-handbook-19-create-downtime.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 5.Dynatrace 客户端安装</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-5-install-client.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-dynatrace"&gt;1 Dynatrace客户端类型简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-web"&gt;2 Web 客户端安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-webstart32"&gt;3 WebStart客户端安装（推荐32位系统安装）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-64"&gt;4 富客户端安装（仅适用64位系统）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-webwebstart"&gt;5 Web端和客户端（WebStart 富客户端）联动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="1-dynatrace"&gt;1 Dynatrace客户端类型简介&lt;a class="headerlink" href="#1-dynatrace" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynatrace有3种类型的客户端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网页端&lt;/li&gt;
&lt;li&gt;WebStart客户端&lt;/li&gt;
&lt;li&gt;富客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三者有以下区别：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网页端&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过浏览器（最新版本IE/Firefox/Chrome等）访问&lt;/li&gt;
&lt;li&gt;默认端口：9911（HTTPS）&lt;/li&gt;
&lt;li&gt;具有基本的监控功能（包括仪表板、应用、运维的基本监控信息），进一步分析需要跳转到后两种客户端执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;WebStart客户端&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要JRE/JDK  7/8支持&lt;/li&gt;
&lt;li&gt;需要通过网页下载一个jnlp文件并打开&lt;/li&gt;
&lt;li&gt;具有完整的监控分析功能（与富客户端功能相同）&lt;/li&gt;
&lt;li&gt;支持32位、64位系统&lt;/li&gt;
&lt;li&gt;支持的系统取决于JRE/JDK所支持的系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;富客户端&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为安装包或绿色压缩包&lt;/li&gt;
&lt;li&gt;只支持64位系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-web"&gt;2 Web 客户端安装&lt;a class="headerlink" href="#2-web" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;访问IP地址：https://X.X.X.X:9911 ,并继续浏览。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVynxlr/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跳转到Dynatrace Web登录页，输入自己的账号密码，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVynKLL/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录后跳转到Dynatrace首页，最上从左到右依次为：（如下图）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;菜单&lt;/li&gt;
&lt;li&gt;仪表板&lt;/li&gt;
&lt;li&gt;筛选应用&lt;/li&gt;
&lt;li&gt;筛选时间范围&lt;/li&gt;
&lt;li&gt;分享&lt;/li&gt;
&lt;li&gt;用户信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyu6tA/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;日常使用的相关菜单及说明如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyCwo8/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="3-webstart32"&gt;3 WebStart客户端安装（推荐32位系统安装）&lt;a class="headerlink" href="#3-webstart32" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载并安装JRE/JDK 7/8，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyD3Kn/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyCVEm/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;浏览器访问Dynatrace Server IP：https://X.X.X.X:8021 ,如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyDEFL/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问后跳转到首页，点击&lt;strong&gt;Webstart客户端&lt;/strong&gt;，会下载一个client.jnlp文件。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyGvZ8/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开client.jnlp文件，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyTbtC/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;忽略告警并继续，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyTEQ2/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;之后会自动下载WebStart客户端，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyV7rn/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;之后会自动启动，忽略告警并继续，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVyWtVK/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WebStart客户端的界面显示，输入账号密码，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz0xXl/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WebStart的界面展示如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz1NOi/pFI7J.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="4-64"&gt;4 富客户端安装（仅适用64位系统）&lt;a class="headerlink" href="#4-64" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装包包括苹果OS安装包、windows安装包及绿色解压版、linux版（jar包）如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz8tVT/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下面以windows安装包为例（windows压缩包直接解压使用），点击安装包运行，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz2dG3/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接受协议，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz2Ruw/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择路径，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz3f0G/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装开始，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz3JQe/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装完成，运行客户端，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz47sp/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;填入IP+端口、账号密码，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz4RqZ/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录后会提示升级客户端，点击'YES'并继续，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz5flw/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载升级包，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz5sTF/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;升级后需重启客户端，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz5SVf/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启后会提示选择&lt;strong&gt;语言&lt;/strong&gt;，根据需要选择中文或英文，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz6OMI/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跳转到首界面，界面简介如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz7qPQ/12Mkk2.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="5-webwebstart"&gt;5 Web端和客户端（WebStart 富客户端）联动&lt;a class="headerlink" href="#5-webwebstart" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Web端无法深入分析，可以在分析指定事务的时候，直接点击&lt;strong&gt;OPEN IN CLIENT&lt;/strong&gt; 后在WebStart或富客户端中进行分析。具体操作如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在Web端分析具体的事务，需要深入分析，点击&lt;strong&gt;OPEN IN CLIENT&lt;/strong&gt;如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz7I3h/cFcZZ.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;首次因为https信任会失败，接受告警后再次点击会跳出客户端，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GeVz8dUA/FePWL.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 04 Apr 2019 21:22:03 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-04:/dynatrace-appmon-handbook-5-install-client.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 7.Dynatrace agent安装</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-7-install-agent.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#server"&gt;Server 端配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#agent"&gt;安装 Agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips"&gt;TIPS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="server"&gt;Server 端配置&lt;a class="headerlink" href="#server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;编辑系统配置文件&lt;br&gt;
&lt;img alt="编辑系统配置文件" src="./images/appmon-install-agent-1.png"&gt;&lt;/li&gt;
&lt;li&gt;新建Agent组&lt;br&gt;
&lt;img alt="新建agent组" src="./images/appmon-install-agent-2.png"&gt;&lt;/li&gt;
&lt;li&gt;设置传感器映射关系&lt;ol&gt;
&lt;li&gt;▽ 与agent名字匹配：&lt;br&gt;
&lt;img alt="与agent名字匹配" src="./images/appmon-install-agent-3.png"&gt;&lt;/li&gt;
&lt;li&gt;▽ 高级设置：取消自动生成heapdump，将解析度设为最低，降低系统开销：&lt;br&gt;
&lt;img alt="高级设置" src="./images/appmon-install-agent-4.png"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;▽ 设置放置哪些传感器, 根据实际需要选定传感器种类：&lt;br&gt;
&lt;img alt="传感器种类" src="./images/appmon-install-agent-5.png"&gt;&lt;/li&gt;
&lt;li&gt;配置上一步放置的传感器的属性&lt;br&gt;
&lt;img alt="传感器属性" src="./images/appmon-install-agent-6.png"&gt;&lt;ol&gt;
&lt;li&gt;▽ JDBC传感器设置：将SQL命令捕获长度设为10240：&lt;br&gt;
&lt;img alt="jdbc 10240" src="./images/appmon-install-agent-7.png"&gt;&lt;/li&gt;
&lt;li&gt;▽ Java Logging传感器设置，增加几种级别的日志捕获：&lt;br&gt;
&lt;img alt="java传感器配置" src="./images/appmon-install-agent-8.png"&gt;&lt;/li&gt;
&lt;li&gt;▽ Servlets传感器设置：&lt;br&gt;
&lt;img alt="servlet传感器设置" src="./images/appmon-install-agent-9.png"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其他传感器默认设置即可。&lt;/p&gt;
&lt;h2 id="agent"&gt;安装 Agent&lt;a class="headerlink" href="#agent" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;说明:&lt;br&gt;
此处以&lt;strong&gt;dynatrace appmon 6.2&lt;/strong&gt;版本举例, 请根据实际情况换成对应版本的安装包.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;上传&lt;code&gt;dynatrace-agent-6.2.0.1239-unix.jar&lt;/code&gt;.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;java  -jar dynatrace-agent-6.2.0.1239-unix.jar&lt;/code&gt; （java版本必须与app server使用的相同），安装过程中修改安装路&lt;br&gt;
径，eg:&lt;code&gt;/tpsys/dynatrace/dynatrace-6.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将agent嵌入到java中间件(如:weblogic)实例中：在启动脚本的环境变量&lt;code&gt;USER_MEM_ARGS&lt;/code&gt;中添加，&lt;code&gt;-agentpath:/tpsys/dynatrace/dynatrace-6.2/agent/lib64/libtagent.so=name=TPLife_wls_lbt_10.94.12.232_8001,server=10.94.21.140:9998&lt;/code&gt;（说明：name表示设置该agent的名字，server表示collector）&lt;/li&gt;
&lt;li&gt;重启java中间件生效。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="tips"&gt;TIPS&lt;a class="headerlink" href="#tips" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;确认agent与哪个collector相连&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon-install-agent-10.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/appmon-install-agent-11.png"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 04 Apr 2019 21:22:03 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-04:/dynatrace-appmon-handbook-7-install-agent.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 8.Dynatrace新增主机组&amp;添加应用程序定义</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-8-add-application.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;新增主机组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;应用程序定义&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;新增主机组&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;▽ 编辑系统配置文件--基础结构--创建&lt;br&gt;
&lt;img alt="基础结构" src="./images/appmon-add-application-1.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 输入主机组名称&lt;br&gt;
&lt;img alt="主机组" src="./images/appmon-add-application-2.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 根据主机hostname，添加主机组映射关系：有多重语法，“包含”、“开头为”、“结尾&lt;br&gt;
为”等等。&lt;br&gt;
&lt;img alt="主机名规则" src="./images/appmon-add-application-3.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 设置主机的告警阈值&lt;br&gt;
&lt;img alt="主机告警阈值" src="./images/appmon-add-application-4.png"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;应用程序定义&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;▽ 编辑系统配置文件--应用程序--创建&lt;br&gt;
&lt;img alt="创建应用程序" src="./images/appmon-add-application-5.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 添加应用程序的匹配关系：可以包含应用实例所在主机的IP、应用程序域名等。&lt;br&gt;
&lt;img alt="应用程序匹配规则" src="./images/appmon-add-application-6.png"&gt;&lt;/p&gt;
&lt;p&gt;配置完成后, 还要查看监控面板，如果发现仍有一些URI没有纳入到自定义的应用程序监控，可以查看web请&lt;br&gt;
求，进行全面的纳入。&lt;/p&gt;
&lt;p&gt;▽ 系统配置文件--web请求--右键更多：&lt;br&gt;
&lt;img alt="web请求" src="./images/appmon-add-application-7.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 根据“源”编辑筛选：&lt;br&gt;
&lt;img alt="筛选" src="./images/appmon-add-application-8.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 应用程序条目筛选：&lt;br&gt;
&lt;img alt="条目筛选" src="./images/appmon-add-application-9.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 将未包含的URI全部加入到定义的应用程序中：&lt;br&gt;
&lt;img alt="添加" src="./images/appmon-add-application-10.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 查看监控面板，直到Default Application监控信息为空、以及不再出现其他未纳入的URI为止。&lt;br&gt;
&lt;img alt="default" src="./images/appmon-add-application-11.png"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 04 Apr 2019 21:22:03 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-04:/dynatrace-appmon-handbook-8-add-application.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 6.Dynatrace 生产环境License导入</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-6-import-license.html</link><description>&lt;ol&gt;
&lt;li&gt;在Dynatrace eservices -&amp;gt; &lt;a href="https://eservices.dynatrace.com/eservices/customers-licenses.jsf"&gt;My Licenses&lt;/a&gt;找到对应的License Key的信息，点击&lt;strong&gt;Download License File&lt;/strong&gt;，如下图：(下载后得到License文件名示例：&lt;strong&gt;dynaTrace_license_201608031073.key&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="下载未激活License" src="http://pic.yupoo.com/east4ming_v/FMMHkMhr/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;进入到Dynatrace Server 设置 -&amp;gt; License，选择&lt;strong&gt;导入&lt;/strong&gt;，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="导入未激活License" src="http://pic.yupoo.com/east4ming_v/FMMGDsAH/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;点击&lt;strong&gt;下一步&lt;/strong&gt;，出现如下图所示，如果Dynatrace Server无法连接到Internet，点击&lt;strong&gt;跳过&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FMMGbuuD/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;跳过后需要手动导入之前下载的&lt;strong&gt;未激活的License文件&lt;/strong&gt;，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="从文件导入未激活License" src="http://pic.yupoo.com/east4ming_v/FMMGEfhk/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;导入&lt;strong&gt;未激活的License&lt;/strong&gt;后，会提示需要在网上进行&lt;strong&gt;激活&lt;/strong&gt;的操作，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="需要网上激活" src="http://pic.yupoo.com/east4ming_v/FMMGEMTr/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;点击下一步，会出现License激活的相关信息，主要的是&lt;strong&gt;Activation Key&lt;/strong&gt;信息，为25位的大写字母和数字的组合，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Activation Key" src="http://pic.yupoo.com/east4ming_v/FMMHj38Z/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;记下该激活码信息，登陆Dynatrace eservices -&amp;gt; &lt;a href="https://eservices.dynatrace.com/eservices/customers-licenses.jsf"&gt;My Licenses&lt;/a&gt;,输入激活码激活,如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FMMHj7UN/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="8"&gt;
&lt;li&gt;激活后会提示成功激活，并给出&lt;strong&gt;已激活的License下载地址&lt;/strong&gt;，如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/FMMGFUk2/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="9"&gt;
&lt;li&gt;下载&lt;strong&gt;已激活License&lt;/strong&gt;，（下载后的文件示例：&lt;strong&gt;dynaTrace_license_201608031073__activated.key&lt;/strong&gt;),再次导入，如下图：（导入&lt;strong&gt;未激活的License&lt;/strong&gt;会提示&lt;strong&gt;当前许可证尚未启用&lt;/strong&gt;；导入&lt;strong&gt;已激活的License&lt;/strong&gt;提示会消失）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="导入已激活License" src="http://pic.yupoo.com/east4ming_v/FMMGGbCZ/medium.jpg"&gt;&lt;/p&gt;
&lt;ol start="10"&gt;
&lt;li&gt;通过文件导入&lt;strong&gt;已激活License&lt;/strong&gt;文件，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="通过文件导入已激活License" src="http://pic.yupoo.com/east4ming_v/FMMGGsUD/medium.jpg"&gt;&lt;/p&gt;
&lt;p&gt;导入后成功激活，显示如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="成功激活" src="http://pic.yupoo.com/east4ming_v/FMMY9dbb/medium.jpg"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 04 Apr 2019 21:07:23 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-04:/dynatrace-appmon-handbook-6-import-license.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 9.Dynatrace自定义仪表板</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-9-customized-dashboard.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;▽ 仪表板 -&amp;gt; 新建&lt;br&gt;
&lt;img alt="新建仪表板" src="./images/appmon-add-dashboard-1.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 在对应的系统配置文件下，选择图标绘制——自定义，添加系列：&lt;br&gt;
&lt;img alt="添加系列" src="./images/appmon-add-dashboard-2.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 选择测量值，以下以“web页面请求——Purepath响应时间”为例，按应用程序拆分：&lt;br&gt;
&lt;img alt="web请求" src="./images/appmon-add-dashboard-3.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;备注:&lt;br&gt;
注：dynatrace上几乎所有地方都可以可以直接ctrl+F进行搜索。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;▽ 调整图表属性. 如重命名、选择时间范围、分辨率、图标类型、拆分模式、可视性等：&lt;br&gt;
&lt;img alt="图表属性" src="./images/appmon-add-dashboard-4.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 可以继续在该仪表板中添加系列，即将多个图表放在一个仪表板中：&lt;br&gt;
&lt;img alt="添加多个图表" src="./images/appmon-add-dashboard-5.png"&gt;&lt;/p&gt;
&lt;p&gt;▽ 拖动图表的标题，结合每个图表的属性，直到调到满意的效果。&lt;br&gt;
&lt;img alt="最终效果" src="./images/appmon-add-dashboard-6.png"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 04 Apr 2019 21:07:23 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-04:/dynatrace-appmon-handbook-9-customized-dashboard.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>监控JAVA JMX 指标 - 通过Dynatrace AppMon而无需Agent</title><link>https://www.EWhisper.cn/monitoring-java-soft-with-dynatrace-appmon-without-agent.html</link><description>&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在近期的中间件组会议中, 发现存在一个监控盲区, 即: &lt;strong&gt;JBoss EAP 6.X和Wildfly 10的监控&lt;/strong&gt;. 目前CA Wily和Zabbix(Zabbix应该可以监控的)暂时无法实现对其监控, 需要Dynatrace对其进行监控.(有Agent和无Agent两种方式). 本次主要介绍&lt;strong&gt;无Agent&lt;/strong&gt;的方式.&lt;/p&gt;
&lt;h2 id="_2"&gt;应用服务器端配置&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JBoss EAP 6.X或Wildfly 10配置调整, &lt;strong&gt;需要配置logmanager和暴露JMX Remote端口&lt;/strong&gt;. 如下:&lt;/p&gt;
&lt;p&gt;对于Wildfly 10.1.0  (windows脚本, Linux下按照shell语法做相应修改, 下同)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;rem # Set LogManager&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;JAVA_OPTS=&lt;/span&gt;&lt;span class="nv"&gt;%JAVA_OPTS%&lt;/span&gt;&lt;span class="s2"&gt; -Djboss.modules.system.pkgs=org.jboss.logmanager  -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Xbootclasspath/p:D:\wildfly-10.1.0.Final\wildfly-10.1.0.Final\modules\system\layers\base\org\jboss\logmanager\main\jboss-logmanager-2.0.4.Final.jar -Xbootclasspath/p:D:\wildfly-10.1.0.Final\wildfly-10.1.0.Final\modules\system\layers\base\org\jboss\log4j\logmanager\main\log4j-jboss-logmanager-1.1.2.Final.jar&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;rem # Set JMX Remote&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;JAVA_OPTS=&lt;/span&gt;&lt;span class="nv"&gt;%JAVA_OPTS%&lt;/span&gt;&lt;span class="s2"&gt; -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=1090 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;JBoss EAP 6.4&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;rem # Set LogManager&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;JAVA_OPTS=&lt;/span&gt;&lt;span class="nv"&gt;%JAVA_OPTS%&lt;/span&gt;&lt;span class="s2"&gt; -Djboss.modules.system.pkgs=org.jboss.logmanager -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Xbootclasspath/p:D:\EAP-6.4.0\modules\system\layers\base\org\jboss\logmanager\main\jboss-logmanager-1.5.4.Final-redhat-1.jar -Xbootclasspath/p:D:\EAP-6.4.0\modules\system\layers\base\org\jboss\log4j\logmanager\main\log4j-jboss-logmanager-1.1.1.Final-redhat-1.jar&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;rem # Set JMX Remote&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;JAVA_OPTS=&lt;/span&gt;&lt;span class="nv"&gt;%JAVA_OPTS%&lt;/span&gt;&lt;span class="s2"&gt; -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=1090 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改完成后重启对应的应用服务器.&lt;/p&gt;
&lt;h2 id="dynatrace"&gt;Dynatrace端配置&lt;a class="headerlink" href="#dynatrace" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dynatrace通过一个插件: &lt;strong&gt;JMX Enhanced Monitor&lt;/strong&gt;来实现对JMX数据的收集.&lt;/p&gt;
&lt;p&gt;要使用该插件, 需要做以下2步操作:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建&lt;strong&gt;任务&lt;/strong&gt;, 通过该任务, 根据不同的JVM类型来抓取所有想要抓取的&lt;strong&gt;监控指标&lt;/strong&gt;, 并生成一个包含相关&lt;strong&gt;监控指标&lt;/strong&gt;的jar包到指定目录.&lt;/li&gt;
&lt;li&gt;再把该jar包以插件形式安装到Dynatrace Server上.&lt;/li&gt;
&lt;li&gt;创建&lt;strong&gt;监视器&lt;/strong&gt;, 从对应的应用服务器上获取想要监控的指标.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后, 通过监控到的指标, 可以实现 &lt;strong&gt;监控面板展示/告警/报告导出&lt;/strong&gt;等功能.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;操作步骤:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在Dynatrace上, 通过安装插件&lt;strong&gt;JMX Enhanced Monitor&lt;/strong&gt;来实现对数据的收集. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="JMX监控插件" src="http://pic.yupoo.com/east4ming_v/ad38044d/358307e5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在具体的配置文件(如:CCIC2), 右键选择&lt;strong&gt;编辑系统配置文件&lt;/strong&gt; → &lt;strong&gt;任务&lt;/strong&gt; → &lt;strong&gt;创建任务&lt;/strong&gt;. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="创建任务1" src="http://pic.yupoo.com/east4ming_v/2310cada/9d4fc386.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;任务具体的配置如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/b2d66e68/e951a0be.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;strong&gt;Include MBeans Patterns&lt;/strong&gt;中, 编辑该配置, 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="包含MBeans" src="http://pic.yupoo.com/east4ming_v/3516c97c/54ece686.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑执行该任务的频率和具体的组件. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/bb7f8b32/d8dc5276.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;手动执行&lt;/strong&gt;该任务, 执行完成后, 右键查看该任务是否执行成功. 具体如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="执行任务" src="http://pic.yupoo.com/east4ming_v/384547c0/1d6444d6.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在第3步指定的路径的&lt;code&gt;mg/build&lt;/code&gt;下找到生成的jar包. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="生成的监控指标jar包" src="http://pic.yupoo.com/east4ming_v/0fe58827/9eef22a1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置&lt;/strong&gt; → Dynatrace Server → &lt;strong&gt;插件&lt;/strong&gt; → 安装插件, 选择上一步的jar包进行安装. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/b5e54e54/ad19a4c1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在具体的配置文件(如:CCIC2), 右键选择&lt;strong&gt;编辑系统配置文件&lt;/strong&gt; → &lt;strong&gt;监视器&lt;/strong&gt; → &lt;strong&gt;创建...&lt;/strong&gt;. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/dec10b0f/193276e5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;监视器的具体配置如下图:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JMX Service URL的通用写法示例: &lt;code&gt;service:jmx:rmi:///jndi/rmi://127.0.0.1:1090/jmxrmi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加要监控的主机.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/a7fc275c/04c867d4.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行频率和具体的执行组件配置如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/5e776a26/85260ee7.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;监控指标(测量结果)配置如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/72fd31d7/4a3b783d.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行该&lt;strong&gt;监视器&lt;/strong&gt;. 成功结果示例如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/058e36b4/86eae21e.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;至此, &lt;strong&gt;无Agent监控方式&lt;/strong&gt;已配置完成. 后续可以根据这些收集到的指标进行&lt;strong&gt;监控面板展示/告警/报告导出&lt;/strong&gt;等功能. 监控面板展示示例如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/da0ed9f8/2bbec94e.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_3"&gt;监控指标&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;主机信息(物理内存和CPU. 需要JDK支持)&lt;/li&gt;
&lt;li&gt;内存使用相关信息(如: heap, perm, new区, old区等)&lt;/li&gt;
&lt;li&gt;类加载相关信息&lt;/li&gt;
&lt;li&gt;GC相关信息&lt;/li&gt;
&lt;li&gt;线程相关信息(总线程,peak线程, 当前线程)&lt;/li&gt;
&lt;li&gt;JAVA软件特定JMX信息(如:jboss的jboss相关信息, ActiveMQ的队列信息, Mule ESB的处理能力相关信息)&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 03 Apr 2019 10:36:27 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-03:/monitoring-java-soft-with-dynatrace-appmon-without-agent.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 1.安装组件前必备工作</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-1-before-installation.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;安装前准备&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#size"&gt;Size&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynatrace-server"&gt;Dynatrace Server&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#indexagent"&gt;禁用Index唯一化Agent名称&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#purepath"&gt;PurePath超时时间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;业务分析最大分裂数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#server-side"&gt;Server Side报告限制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gc"&gt;GC告警设置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynatrace-analysis-server"&gt;Dynatrace Analysis Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynatrace"&gt;Dynatrace 数据库&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;不同分辨率细节说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sql-server"&gt;SQL Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#oracle"&gt;Oracle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynatrace-collector"&gt;Dynatrace Collector&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;最小需求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#indexagent_1"&gt;使用Index唯一化Agent名字&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynatrace-client"&gt;Dynatrace Client&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_5"&gt;客户端最小需求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#client-side"&gt;Client Side 报告限制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;安装前准备&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;禁用&lt;strong&gt;超线程&lt;/strong&gt;（Hyper-Threading）&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/proc/cpuinfo&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;这是开启了超线程: &lt;code&gt;threads per core: 2&lt;/code&gt;  processor = core * 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于&lt;strong&gt;Medium&lt;/strong&gt;及以上规模，CPU时钟频率需大于等于2.6GHz&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="size"&gt;Size&lt;a class="headerlink" href="#size" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="size1" src="http://pic.yupoo.com/east4ming_v/GcvZBqZN/2IfCJ.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="size2" src="http://pic.yupoo.com/east4ming_v/GcvZByIh/RicSG.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="size3" src="http://pic.yupoo.com/east4ming_v/GcvZBDNd/KGXM7.jpg"&gt;&lt;/p&gt;
&lt;h2 id="dynatrace-server"&gt;Dynatrace Server&lt;a class="headerlink" href="#dynatrace-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;语言及字符集必须为&lt;strong&gt;LANG=en_US.UTF-8&lt;/strong&gt; (否则可能仪表板、告警邮件会乱码)&lt;/li&gt;
&lt;li&gt;Linux修改 ~/.bash_profile （直接cd到软件目录或&lt;code&gt;export DT_HOME=/opt/dynatrace-6.5&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;Linux修改chkconfig（配置服务项）&lt;/li&gt;
&lt;li&gt;Linux关闭selinux&lt;/li&gt;
&lt;li&gt;6.3+ Linux用户注意语言设置为中文。&lt;/li&gt;
&lt;li&gt;Linux需要安装JRE 6+（推荐Oracle JRE 8）&lt;/li&gt;
&lt;li&gt;会话存储不要多于&lt;strong&gt;2T&lt;/strong&gt; （500tps，一天1TB空间）&lt;/li&gt;
&lt;li&gt;ulimit -n 2048或更高&lt;/li&gt;
&lt;li&gt;内存分析服务器：在dtanalysisserver.ini中设置-Xmx。&lt;/li&gt;
&lt;li&gt;Windows：电源选项设置为&lt;strong&gt;高性能&lt;/strong&gt; （Linux也需要查看: &lt;code&gt;/proc/cpuinfo&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;不建议SAN-based存储，&lt;strong&gt;可能&lt;/strong&gt;会成为瓶颈(需要测试性能)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么需要这么多核?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dynatrace 是一个复杂的软件解决方案，每时每刻都在后台进行海量的复杂计算。因此高性能的CPU是吞吐量的必要保障。下列列出Dynatrace Server需要较多CPU核数的一些原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关联引擎&lt;/li&gt;
&lt;li&gt;实时分析&lt;/li&gt;
&lt;li&gt;通信（Clients, Collectors, etc.）&lt;/li&gt;
&lt;li&gt;数据库&lt;/li&gt;
&lt;li&gt;存储&lt;/li&gt;
&lt;li&gt;分析缓存&lt;/li&gt;
&lt;li&gt;数据导出&lt;/li&gt;
&lt;li&gt;Web servers&lt;/li&gt;
&lt;li&gt;任务和监视器的job center&lt;/li&gt;
&lt;li&gt;事件（告警）中心&lt;/li&gt;
&lt;li&gt;垃圾收集&lt;/li&gt;
&lt;li&gt;自监控和检查&lt;/li&gt;
&lt;li&gt;操作系统&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="indexagent"&gt;禁用Index唯一化Agent名称&lt;a class="headerlink" href="#indexagent" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;要禁用这个功能，需要在Dynatrace Server的启动文件中加入一个布尔值。默认为true，需要将其设为false。如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Dcom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dynatrace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;diagnostics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;collector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;agentcenter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;unique_agent_names_with_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="purepath"&gt;PurePath超时时间&lt;a class="headerlink" href="#purepath" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;默认为600s（10min），最大可以设置到3600s（1 hour）。在&lt;strong&gt;dtserver.ini&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Dcom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dynatrace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;diagnostics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;completenessTimeout&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;valueInSeconds&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;业务分析最大分裂数&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在&lt;strong&gt;dtserver.ini&lt;/strong&gt;中，在 &lt;em&gt;-server&lt;/em&gt; 前一行添加如下内容：(第二个参数可以根据需要更改，如修改为75000)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Dcom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dynatrace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;diagnostics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;OverruleMaxSplittingsBTs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MeasureExplosionPreventionTest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;ManySplittingsTimeMillis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MeasureExplosionPreventionTest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;MeasureExplosionTriggeringBT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="server-side"&gt;Server Side报告限制&lt;a class="headerlink" href="#server-side" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在&lt;strong&gt;dtserver.ini&lt;/strong&gt;中，设置如下参数：(需要添加在&lt;em&gt;-vmargs&lt;/em&gt; 后一行)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vmargs&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Dcom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dynatrace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;diagnostics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reporting&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;maxTableRows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Xmx1920M&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;并行报告数设置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认为3&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-Dcom.dynatrace.diagnostics.reporting.maxConcurrentReports=5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;报告等待超时&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认60s&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-Dcom.dynatrace.diagnostics.reporting.reportWaitTimeout=120&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;报告等待队列长度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认为3&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-Dcom.dynatrace.diagnostics.reporting.maxWaitingReports=5&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;非拉丁语系PDF报告&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;-Dcom.dynatrace.diagnostics.reporting.pdf.english=false&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="gc"&gt;GC告警设置&lt;a class="headerlink" href="#gc" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;有以下3个参数可以进行设置，在&lt;strong&gt;dtserver.ini&lt;/strong&gt;中，使用-D&amp;lt;参数&amp;gt;=&amp;lt;值&amp;gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;com.dynatrace.diagnostics.maxRelativeGCActivity&lt;/td&gt;
&lt;td&gt;int (default = 15) %&lt;/td&gt;
&lt;td&gt;Set custom health threshold for max relative GC activity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;com.dynatrace.diagnostics.healthWatchPeriodGc&lt;/td&gt;
&lt;td&gt;int (default = 5) min&lt;/td&gt;
&lt;td&gt;Set custom process health threshold for the watch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;com.dynatrace.diagnostics. healthWatchPeriodViolationThresholdGc&lt;/td&gt;
&lt;td&gt;int (default = 4) min&lt;/td&gt;
&lt;td&gt;Set custom process health threshold for the watch&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="dynatrace-analysis-server"&gt;Dynatrace Analysis Server&lt;a class="headerlink" href="#dynatrace-analysis-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;按照监控的JVM的最大heap+25% 修改最大内存-Xmx&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dynatrace"&gt;Dynatrace 数据库&lt;a class="headerlink" href="#dynatrace" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_3"&gt;不同分辨率细节说明&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="分辨率细节" src="http://pic.yupoo.com/east4ming_v/GcvZCl1E/NcZPS.jpg"&gt;&lt;/p&gt;
&lt;h3 id="sql-server"&gt;SQL Server&lt;a class="headerlink" href="#sql-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;起始空间5G&lt;/li&gt;
&lt;li&gt;DBowner权限&lt;/li&gt;
&lt;li&gt;表排序规则要求：&lt;strong&gt;Chinese_PRC_CI_AS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="oracle"&gt;Oracle&lt;a class="headerlink" href="#oracle" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;dba&lt;/li&gt;
&lt;li&gt;字符集：&lt;strong&gt;UTF-8&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dynatrace-collector"&gt;Dynatrace Collector&lt;a class="headerlink" href="#dynatrace-collector" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;预置JDK 8（推荐Oracle）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux修改 ~/.bash_profile （直接cd到软件目录）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux修改chkconfig（配置服务项）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux关闭selinux&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果Collector和Server不在一块，在脚本或注册文件中加入&lt;code&gt;-server &amp;lt;dynaTraceServerName&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果要配置多实例，添加&lt;code&gt;./dtcollector -instance collector02 -listen :10001&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于服务项，拷贝$DT_HOME/init.d/dynaTraceCollector 脚本到/etc/init.d/dynatraceCollector02。并做以下修改：(2选1)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DT_OPTARGS="-instance collector02"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DT_INSTANCE=collector02&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;最小需求&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;50个Java或25个.Net Agents&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disk：30GB&lt;/li&gt;
&lt;li&gt;Memory：2GB（Collector组件需要的，OS要更多一点，3GB+）&lt;/li&gt;
&lt;li&gt;CPU Cores：1 （禁用超线程，推荐2Core+）&lt;/li&gt;
&lt;li&gt;limits.conf 打开文件数 最小为：(500+3×Agents数)×Collectors数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="indexagent_1"&gt;使用Index唯一化Agent名字&lt;a class="headerlink" href="#indexagent_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;要禁用这个功能，需要在Dynatrace Collector的启动文件&lt;strong&gt;dtcollector.ini&lt;/strong&gt;中加入一个布尔值。默认为true，需要将其设为false。如下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-Dcom.dynatrace.diagnostics.collector.agentcenter.unique_agent_names_with_index=false&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="dynatrace-client"&gt;Dynatrace Client&lt;a class="headerlink" href="#dynatrace-client" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_5"&gt;客户端最小需求&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;x64（Dynatrace 6.5+）&lt;/li&gt;
&lt;li&gt;Disk：100MB&lt;/li&gt;
&lt;li&gt;Memory：1GB&lt;/li&gt;
&lt;li&gt;分辨率：1024×768&lt;/li&gt;
&lt;li&gt;Webstart Client：&lt;ul&gt;
&lt;li&gt;IE 8+ Firefox 38-48是经过Dynatrace认证的&lt;/li&gt;
&lt;li&gt;Oracle JRE &amp;gt;= 1.8.0_45&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="client-side"&gt;Client Side 报告限制&lt;a class="headerlink" href="#client-side" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以在&lt;strong&gt;dtclient.ini&lt;/strong&gt;中修改如下参数：(参数得加在 &lt;em&gt;-vmargs&lt;/em&gt; 后一行，而不是最后。)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vmargs&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Dcom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dynatrace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;diagnostics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reporting&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;maxTableRows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Xmx512M&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于Webstart Client，需要设置&lt;strong&gt;JAVA_TOOL_OPTIONS&lt;/strong&gt;环境变量：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JAVA_TOOL_OPTIONS=-Dcom.dynatrace.diagnostics.reporting.maxTableRows=10000&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 02 Apr 2019 23:08:28 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-02:/dynatrace-appmon-handbook-1-before-installation.html</guid><category>Dynatrace</category><category>Observability</category><category>性能调优</category></item><item><title>Dynatrace AppMon 实战手册 - 2.证书创建</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-2-create-certificate.html</link><description>&lt;h2 id="_1"&gt;步骤&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;启动向导&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GaYOMaHa/7Bm8Z.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动内存分析服务器&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GaYOMkg2/WyzsU.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;填写组织名称&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GaYOMsh5/11IJkW.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建私钥成功&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GaYOMw10/1sjoN.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导出私钥和证书&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GaYOMBA4/pfPKT.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动部署到组件&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GaYOMEOc/medium.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组件重启&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GaYOMLBp/tJqrX.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署证书完成&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GaYOMLBp/tJqrX.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 02 Apr 2019 23:08:28 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-02:/dynatrace-appmon-handbook-2-create-certificate.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 3.创建系统配置文件模板</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-3-create-profile-template.html</link><description>&lt;h2 id="_1"&gt;步骤&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在左侧边栏中，右键&lt;strong&gt;系统配置文件模板&lt;/strong&gt; → &lt;strong&gt;创建系统配置文件模板&lt;/strong&gt;， 如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/Gcwcoiwt/hknCr.png"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;配置系统配置文件模板基本信息，如下图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcowF1/QOxbw.jpg"&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;
&lt;p&gt;选择对应的技术栈（Java、.NET、Web server、PHP、Native）,如上图。具体解释如下：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java  .NET  PHP无须解释&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Web server - 对应一系列Web server，如Apache、Nginx、IIS等&lt;/li&gt;
&lt;li&gt;Native - 对应的是Dynatrace的ADK，通过在应用中嵌入该ADK，可以实现对C++、Python等的监控。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_2"&gt;要点&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_3"&gt;事件（即告警）相关配置&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使某些事件活动或不活动&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下事件规则不需要启用，具体如下图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;部署&lt;/li&gt;
&lt;li&gt;测试违例&lt;/li&gt;
&lt;li&gt;事物整体失败率高（&lt;strong&gt;失败率太高&lt;/strong&gt;已经覆盖）&lt;/li&gt;
&lt;li&gt;数据库Agent相关（没有购买数据库Agent license则无需开启）&lt;/li&gt;
&lt;li&gt;页面操作失败率高（需要UEM license；&lt;strong&gt;失败率太高&lt;/strong&gt;有交集）&lt;/li&gt;
&lt;li&gt;应用程序进程关闭（根据需求确定是否开启）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcoCV4/M1i31.png"&gt;&lt;/p&gt;
&lt;h3 id="_4"&gt;错误检测配置&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;不要将日志标记为错误&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;删除&lt;strong&gt;重要的日志记录&lt;/strong&gt;规则。&lt;/p&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;p&gt;有的开发为了在生产上显示日志，会将一些Info等级别的信息设置为Error，而出现Error日志报错并不一定意味着&lt;strong&gt;事务&lt;/strong&gt;失败。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcoNLt/P7SbT.png"&gt;&lt;/p&gt;
&lt;h3 id="_5"&gt;错误规则创建&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以根据应用所特有的Exception、Logging等来创建，具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcsOkh/65iq5.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_6"&gt;应用程序定义&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dynatrace 6.5 可以通过Web/Mobile（6.5之前只有这一种定义方法）、Messaging、Entry Point来定义应用，可以进一步细化应用的定义。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcsTQp/R2lT9.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_7"&gt;用户体验&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果没有购买UEM license，则禁用UEM，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcoZMb/amzM1.png"&gt;&lt;/p&gt;
&lt;h3 id="schedule"&gt;Schedule&lt;a class="headerlink" href="#schedule" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;创建时间计划&lt;/strong&gt;，如创建&lt;strong&gt;每个工作日、每周、每月&lt;/strong&gt;计划。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/Gcwcp5kE/44NZA.jpg"&gt;&lt;/p&gt;
&lt;h3 id="agent-group-java"&gt;Agent Group - Java&lt;a class="headerlink" href="#agent-group-java" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;创建Java技术栈的Agent Group模板，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcpaOy/8KhP9.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择需要放置的Sensor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原则：最少最需要。如下图：&lt;/p&gt;
&lt;p&gt;必须的Sensor：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDBC&lt;/li&gt;
&lt;li&gt;Exceptions&lt;/li&gt;
&lt;li&gt;Java Logging&lt;/li&gt;
&lt;li&gt;JMX MBean Server&lt;/li&gt;
&lt;li&gt;JMS&lt;/li&gt;
&lt;li&gt;JMS Receive Entry Point&lt;/li&gt;
&lt;li&gt;Executor Tagging&lt;/li&gt;
&lt;li&gt;Thread Start Tagging&lt;/li&gt;
&lt;li&gt;Java Web Requests&lt;/li&gt;
&lt;li&gt;Servers&lt;/li&gt;
&lt;li&gt;Java Web Services&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/Gcwcpjjm/12bHs1.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Sensor - Exception (Java)&lt;/h4&gt;
&lt;p&gt;对Dynatrace默认的Exception定义进行细化，如下图：&lt;/p&gt;
&lt;p&gt;原因：原有的直接排除java.开头的Exception会排除大量我们需要获取的Exception，如网络相关的报错等。所以我们需要尽可能细化不需要抓取的Exception，如&lt;strong&gt;beans&lt;/strong&gt;、 &lt;strong&gt;方法找不到&lt;/strong&gt;相关异常。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcpAV9/YqhSj.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Sensor - JDBC&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;启用聚合（推荐生产环境开启，因为单个事务的SQL执行次数较多，如果不聚合分析起来很不方便。启用聚合了则无法获取&lt;strong&gt;绑定值&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;SQL长度跳大（如：10240）（默认512长度，经常会抓取到不完整的SQL，从而无法定位SQL问题。建议该值大于所监控的应用中的最大的SQL长度）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcpVjP/10a2Js.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Sensor - Logging (Java)&lt;/h4&gt;
&lt;p&gt;此处Log等级大小写敏感，我们可以添加我们监控的级别，如对于WebLogic，可以添加&lt;strong&gt;Error&lt;/strong&gt;等级别，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/Gcwcqeew/5M54W.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Sensor - Servlet&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;通常，我们认为静态资源不会对系统性能造成影响，无需监控，此处设置排除对静态资源的监控。&lt;/li&gt;
&lt;li&gt;此外，一些中间件、硬件设备，会有与应用无关的URI，我们也需要排除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/Gcwcqnte/hunpl.jpg"&gt;&lt;/p&gt;
&lt;h3 id="agent-group-net"&gt;Agent Group - .NET&lt;a class="headerlink" href="#agent-group-net" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;创建.NET Agent Group模板，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcquzV/Pc4ms.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择必要的Sensor&lt;/strong&gt;，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcqFMu/CkZXe.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Sensor - ADO.NET&lt;/h4&gt;
&lt;p&gt;与JDBC Sensor类似，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcqMPS/iVLgB.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Sensor - ASP.NET&lt;/h4&gt;
&lt;p&gt;与Servlet类似，见下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcqRLY/8DuGF.jpg"&gt;&lt;/p&gt;
&lt;h3 id="api"&gt;API&lt;a class="headerlink" href="#api" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以针对应用开发的需求，定义API，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcqXC8/th008.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/Gcwcr2YK/14SZ6f.jpg"&gt;&lt;/p&gt;
&lt;h3 id="measure"&gt;Measure&lt;a class="headerlink" href="#measure" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;根据应用监控的需求，进行相关Measure的定义，此类数据可以进一步作为&lt;strong&gt;过滤、聚合、拆分&lt;/strong&gt;等条件创建Business Transaction。&lt;/p&gt;
&lt;p&gt;如需要创建&lt;strong&gt;大于10s的web请求&lt;/strong&gt;的measure，则具体创建如下：(由&lt;strong&gt;web requests - time&lt;/strong&gt;复制修改而来，设置上限阈值)，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcsFyB/4pne8.jpg"&gt;&lt;/p&gt;
&lt;h3 id="business-transaction"&gt;Business Transaction&lt;a class="headerlink" href="#business-transaction" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如需要进行更为复杂的应用监控（如针对应用细节的监控、对关键业务的监控等），可以创建Business Transaction。&lt;/p&gt;
&lt;p&gt;如要抓取所有&lt;strong&gt;web响应时间大于10s&lt;/strong&gt;的请求，可以将之前创建的Measure作为过滤条件来创建。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/Gcwcrg0x/eFEUX.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TIPS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;勾选&lt;strong&gt;Active&lt;/strong&gt; 才会正式启用。&lt;/li&gt;
&lt;li&gt;勾选对应选项后结果会存放到数据库中。&lt;/li&gt;
&lt;li&gt;三大因子&lt;ul&gt;
&lt;li&gt;Filter&lt;/li&gt;
&lt;li&gt;Calculate Results&lt;/li&gt;
&lt;li&gt;Split Results&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Splitting 也是重要的选项&lt;/li&gt;
&lt;li&gt;基线设置用来设置动态或静态的告警阈值&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="monitor"&gt;Monitor&lt;a class="headerlink" href="#monitor" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Monitor这块内容待完善及丰富。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Unix Monitor&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcrlB8/kLc10.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;VMware Monitor&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Host System Performance Monitor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcrlB8/kLc10.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcrLyx/9Rh2b.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Virtual Machine Performance Monitor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcrU8l/7iHmE.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/Gcwcs3as/cUXUV.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Windows Performance Monitor&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="http://pic.yupoo.com/east4ming_v/GcwcsqFN/hKRir.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_8"&gt;总结&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;至此，系统配置文件模板及关于系统配置文件大部分要点已经配置完成，后续可以基于该模板创建正式的系统配置文件。&lt;/p&gt;
&lt;p&gt;正式的系统配置文件还需要配置的内容有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Agent基础配置（如mapping、分辨率等）&lt;/li&gt;
&lt;li&gt;观察层（Messaging、Load Balance等）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要细化的内容有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用定义&lt;/li&gt;
&lt;li&gt;Monitor&lt;/li&gt;
&lt;li&gt;任务（定时报告、定时采样等）&lt;/li&gt;
&lt;li&gt;Measure（中间件指标、JMX指标、应用其他指标等）&lt;/li&gt;
&lt;li&gt;Business Transaction （关键业务等）&lt;/li&gt;
&lt;li&gt;Sensor（应用特定Sensor，如关键方法--核保金额；定义入口点，如批处理、TCP Socket及其他）&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 02 Apr 2019 23:08:28 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-02:/dynatrace-appmon-handbook-3-create-profile-template.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>Dynatrace AppMon 实战手册 - 4.Dynatrace组件Linux系统配置为服务</title><link>https://www.EWhisper.cn/dynatrace-appmon-handbook-4-register-linux-system-service.html</link><description>&lt;p&gt;配置为服务，可以在主机启动的时候自启动。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;复制Dynatrace相关脚本（$DT_HOME/init.d）到 /etc/init.d&lt;/li&gt;
&lt;li&gt;在脚本中定义&lt;strong&gt;DT_RUNASUSER&lt;/strong&gt;及其他变量（如有必要，修改&lt;strong&gt;DT_OPTARGS&lt;/strong&gt;和&lt;strong&gt;DT_FE_OPTARGS&lt;/strong&gt;等）(&lt;strong&gt;必需&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;chkconfig --add dynaTraceServer&lt;/code&gt;  (如果是其他Linux版本，如Debian(Ubuntu,...)使用&lt;code&gt;sudo update -rc.d dynaTraceServerNonRoot defaults&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;如果Analysis Server和Server位于同一台，则先启动Analysis Server，过10s左右，再启动Server。（可以再Sever的脚本前加入sleep 10）&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 02 Apr 2019 23:08:28 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-02:/dynatrace-appmon-handbook-4-register-linux-system-service.html</guid><category>Dynatrace</category><category>Observability</category></item><item><title>什么是 AIOps?</title><link>https://www.EWhisper.cn/what-is-aiops.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#aiops"&gt;什么是 AIOps&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#aiops_1"&gt;AIOps 描述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aiops_2"&gt;典型AIOps 平台介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;上下文协作和知识捕获&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aiops_3"&gt;AIOps 诞生背景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;市场分析&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;数据摄取和处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;分析结果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;代表性供应商&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aiops_4"&gt;AIOps 平台建设建议&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#aiops_5"&gt;通过采用增量方法确保成功部署AIOps功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aiops_6"&gt;选择能够支持广泛的历史和流数据类型的AIOps平台&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;总结&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_7"&gt;建议&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="aiops"&gt;什么是 AIOps&lt;a class="headerlink" href="#aiops" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AIOps平台结合了&lt;strong&gt;大数据&lt;/strong&gt;和&lt;strong&gt;机器学习&lt;/strong&gt;功能, 通过可扩展的提取和分析IT不断增加的&lt;strong&gt;数据量(volume), 数据种类(variety)和数据生成速度(velocity)&lt;/strong&gt;来支持所有的主要IP运维功能. 该&lt;strong&gt;平台支持使用多个数据源(监控的数据源), 数据收集方法以及分析和演示技术.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="aiops_1"&gt;AIOps 描述&lt;a class="headerlink" href="#aiops_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;AIOps可以增强多种常见的IT运营流程和任务, 包括&lt;strong&gt;性能分析, 异常检测, 事件关联和分析, IT服务管理和自动化.&lt;/strong&gt;&lt;br&gt;
它们的核心功能是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提取数据&lt;/strong&gt; - 从与供应商有关或无关的多个源中提取数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据分析&lt;/strong&gt; - 通过以下2点启用数据分析:&lt;ul&gt;
&lt;li&gt;提取时的实时分析(流式数据引擎)&lt;/li&gt;
&lt;li&gt;存储数据的历史分析(大数据离线分析)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据访问&lt;/strong&gt; - 提供对数据的访问&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据存储&lt;/strong&gt; - 存储采集的数据&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;机器学习&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关联操作&lt;/strong&gt; - 根据分析结果启动操作或下一步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分析工作的目标是发现和建立模型 - 用于预测可能的事件和新出现的使用情况 - 并及时回看历史数据已确定当前系统行为的根本原因.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AIOps平台在IT运营管理(ITOM)中持续洞察" src="./images/340492_0001.png"&gt;&lt;/p&gt;
&lt;h3 id="aiops_2"&gt;典型AIOps 平台介绍&lt;a class="headerlink" href="#aiops_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;下面以典型的AIOps 平台为例, 对AIOps的相关功能进行一一介绍.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;br&gt;
截图来自: &lt;a href="https://www.moogsoft.com/"&gt;moogsoft&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;概览&lt;/h4&gt;
&lt;p&gt;下图为软件首页,  着重展示了功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;告警降噪&lt;/strong&gt; - 250000 的事件降噪为55个场景, 过滤噪声99.9%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="概览" src="./images/moogsoft-ai-ops-overview-in-situ@2x.png"&gt;&lt;/p&gt;
&lt;p&gt;以下是这个AIOps软件的主要功能:&lt;/p&gt;
&lt;h4&gt;集成&lt;/h4&gt;
&lt;p&gt;与IT监控，自动化，服务管理，通知和协作工具进行50多种开箱即用的集成; 通过REST，syslog，webhook，socket或SNMP，我们可以与数百个集成，为您在一个平台上的整个IT工具链提供可见的上下文。(集成, 源端集成监控, 目标端集成自动化, 通知工具等)&lt;/p&gt;
&lt;p&gt;集成接口:&lt;/p&gt;
&lt;p&gt;&lt;img alt="集成方式" src="./images/plug-graphics-logos-lg.png"&gt;&lt;/p&gt;
&lt;p&gt;集成的监控:&lt;/p&gt;
&lt;p&gt;&lt;img alt="集成监控" src="./images/Integrations-1.png"&gt;&lt;/p&gt;
&lt;h4&gt;降噪&lt;/h4&gt;
&lt;p&gt;通过对整个监控堆栈中的所有事件进行数学分析，将信号与噪声分离，将警报量降低90％或更多。&lt;/p&gt;
&lt;p&gt;&lt;img alt="降噪" src="./images/noise-reduction-eduction-reduced.png"&gt;&lt;/p&gt;
&lt;h4&gt;关联&lt;/h4&gt;
&lt;p&gt;关联整个监控堆栈中的相关警报，为运维人员提供上下文感知，以更快地发现事件。&lt;/p&gt;
&lt;p&gt;&lt;img alt="关联" src="./images/Asset-19@3x.png"&gt;&lt;/p&gt;
&lt;h4&gt;根因分析&lt;/h4&gt;
&lt;p&gt;机器学习和基于拓扑的算法在当前事件中列出可能根本原因。最重要的是，我们的技术从过去学习，所以如果问题再次出现，您会自动收到有关如何更快地修复它的说明。&lt;/p&gt;
&lt;p&gt;&lt;img alt="根因分析" src="./images/probable-root-cause-reduced.png"&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;上下文协作和知识捕获&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;将事件传递到合适的人员，以便他们可以一起更快地解决每个事件，同时记录相关恢复步骤，类似事件。我们的AIOps平台可以快速，轻松地跨团队和工具进行协作。&lt;/p&gt;
&lt;p&gt;&lt;img alt="协作1" src="./images/Collaboration-1-reduced.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="协作2" src="./images/Collaboration-2-reduced.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="协作3" src="./images/Collaboration-3-reduced.png"&gt;&lt;/p&gt;
&lt;h3 id="aiops_3"&gt;AIOps 诞生背景&lt;a class="headerlink" href="#aiops_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在过去二十年中，人工智能技术间歇性地影响了ITOM的发展，而AIOps平台只是这种影响的最新例证。IT运营一方面要求精细化运营, 降低成本，另一方面又增加了运营复杂性。可以在&lt;strong&gt;数据量(volume), 数据种类(variety)和数据生成速度(velocity)&lt;/strong&gt;的三个维度上定义复杂性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IT基础架构和应用程序产生的&lt;strong&gt;数据量&lt;/strong&gt;快速增长（每年增长2到3倍）&lt;/li&gt;
&lt;li&gt;机器和人类生成的&lt;strong&gt;数据类型越来越多&lt;/strong&gt;（例如，指标，日志，wire数据和文档[知识管理]）&lt;/li&gt;
&lt;li&gt;由于采用了云原生或其他敏捷架构，&lt;strong&gt;数据生成速度&lt;/strong&gt;不断提高，IT架构内的变化率也在不断提高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在处理大量，多样化和速度的数据时，现有的监控工具面临压力。更重要的是，监控工具不会跨越提取有用见解所需的多种数据类型。例如，企业需要大量数据，这些数据可能跨越&lt;strong&gt;基础架构&lt;/strong&gt;和&lt;strong&gt;应用程序指标&lt;/strong&gt;，&lt;strong&gt;用户体验数据&lt;/strong&gt;，&lt;strong&gt;业务交易数据&lt;/strong&gt;，&lt;strong&gt;拨测数据&lt;/strong&gt;以及来自各种&lt;strong&gt;系统的日志&lt;/strong&gt;，以获得更多分析, 洞察和见解。&lt;/p&gt;
&lt;p&gt;非IT团队如业务条线和IT运营团队（如应用程序开发人员和DevOps），越来越多地表现出对AIOps技术的兴趣，以便在多个数据集中表现出洞察力。&lt;br&gt;
此外，由于数字业务，IT需要采取行动的速度也在不断提高(敏捷快速)，因此需要可以提供以下帮助的工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;降低噪音&lt;/strong&gt;（例如，以误报或冗余事件的形式）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;根因分析&lt;/strong&gt; - 提供更好的因果关系，这有助于确定事故的可能原因&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态告警基线&lt;/strong&gt; - 捕获超出静态阈值的异常，以主动检测异常情况&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;故障预测&lt;/strong&gt; - 推断未来事件以防止潜在的故障&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集成处理&lt;/strong&gt;  - 启动解决问题的操作（直接或通过集成）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;迄今为止，AIOps功能主要用于支持IT运维流程，以便监控或观察IT基础架构，应用程序行为或数字体验。AIOps平台投资几乎总是基于其&lt;strong&gt;减少平均解决问题时间&lt;/strong&gt;(提高业务连续性)的能力而得到认可。无论是采用机器学习还是在事件管理上下文中对事件进行重复数据删除，还是在APM上下文中结合基于字节码检测的分布式跟踪数据来分析应用程序日志数据，它们都是合理的。&lt;/p&gt;
&lt;p&gt;AIOps正在逐渐演变，不仅可以提取数据进行分析，还可以&lt;strong&gt;根据分析启动相应操作&lt;/strong&gt;。这些操作（最有可能通过与其他ITOM和ITSM工具的集成）将采取多种形式，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;告警及告警处置&lt;/li&gt;
&lt;li&gt;问题自动分类及记录&lt;/li&gt;
&lt;li&gt;CMDB清洗, 修正和关联&lt;/li&gt;
&lt;li&gt;运行预定自动化动作&lt;/li&gt;
&lt;li&gt;应用程序发布编排&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AIOps工具在监控的四个阶段 - &lt;strong&gt;数据采集，聚合，分析和行动&lt;/strong&gt;（见图2） - 显示了“右移” - 具有数据聚合和分析的核心功能。随着技术的进一步发展，用户将能够利用平台的主动建议，实现行动操作的阶段。&lt;br&gt;
关于监控工具与AIOps的争论刚刚开始，而且可能会增长。然而，从长远来看，专家领域将存在专业监控工具，而对于IT运营通才(SRE团妒?)，主要的工具将是AIOps。&lt;/p&gt;
&lt;p&gt;&lt;img alt="监控的4个阶段" src="./images/340492_0002.png"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;市场分析&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;迄今为止，很少有供应商提供全面，集成的AIOps平台。然而，许多供应商提供了广泛的AIOps功能，其子集彼此集成。为了更清楚地了解市场如何发展以及供应商彼此之间的位置，Gartner将当前可用的AIOps功能划分为数据管理和分析结果两大类：&lt;/p&gt;
&lt;h3 id="_3"&gt;数据摄取和处理&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;历史和流数据管理 - 允许提取，索引和持久化存储日志数据，wire数据，指标和文档数据的软件或设备。由此产生的数据库大部分是非结构化的或多结构化的，而存储的数据集以高容量累积，以高速度变化并且根据高度变化的格式隐式地构造。这种历史数据管理功能可称为“大数据管理”。为了在IT运营用例下提供价值，该工具还必须将人类用户感知的时间尺度的数据呈现为实时，直接在摄取时提供数据无需访问持久数据库。它必须跨多个实时和历史数据流提供连贯的分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;分析结果&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本和高级统计分析&lt;/strong&gt;- 单变量和多变量分析的组合，包括对IT实体捕获的指标以及源头策划数据的相关性，聚类，分类和推断的使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动建立模型和预测&lt;/strong&gt; - 使用上述一种或多种类型的历史或流数据，以引出描述可以从数据集本身推断但不立即存在的新相关的数学或结构模式。然后可以使用这些模式及时前进并以不同程度的概率预测事件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异常检测&lt;/strong&gt; - 使用先前组件发现的模型首先确定什么构成正常的系统行为，然后辨别出与正常系统行为的偏差。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;根因分析&lt;/strong&gt; - 修剪由自动化模式发现和预测组件建立的相关性网络，以隔离代表真正因果关系的依赖性链接，从而提供有效干预的解决方案。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用性建议&lt;/strong&gt; - 对问题进行分类，将其分类为已知类别。然后，它可以挖掘先前解决方案的存储，分析这些解决方案的适用性并以优先级形式提供它们以用于补救。最终，这些将使用闭环方法，并在使用后对其有效性进行投票。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拓扑&lt;/strong&gt;- 对于AIOps检测到的相关且可操作的模式，必须围绕所摄取的数据放置上下文。该上下文是拓扑。如果没有拓扑的上下文和事实上的约束，检测到的模式虽然有效，但可能无益且分散注意力。从拓扑中的数据派生模式将减少模式的数量，建立相关性并说明隐藏的依赖性。使用拓扑作为因果关系确定的一部分可以大大提高其准确性和有效性。使用图形和瓶颈分析捕获事件发生的位置及其上下游依赖关系可以提供关于重点修复工作的重点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;代表性供应商&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;供应商&lt;/th&gt;
&lt;th&gt;成立年份&lt;/th&gt;
&lt;th&gt;总部&lt;/th&gt;
&lt;th&gt;网站&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Anodot&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;Israel&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.anodot.com/"&gt;https://www.anodot.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BigPanda&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.bigpanda.io/"&gt;https://www.bigpanda.io&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BMC&lt;/td&gt;
&lt;td&gt;1980&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.bmc.com/"&gt;https://www.bmc.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Brains Technology&lt;/td&gt;
&lt;td&gt;2008&lt;/td&gt;
&lt;td&gt;Japan&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.brains-tech.co.jp/en/"&gt;https://www.brains-tech.co.jp/en/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CA Technologies&lt;/td&gt;
&lt;td&gt;1974&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.ca.com/us.html"&gt;https://www.ca.com/us.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Devo (Logtrust)&lt;/td&gt;
&lt;td&gt;2011&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.devo.com/"&gt;https://www.devo.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Elastic&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.elastic.co/"&gt;https://www.elastic.co/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Evolven&lt;/td&gt;
&lt;td&gt;2007&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.evolven.com/"&gt;https://www.evolven.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FixStream&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fixstream.com/"&gt;https://fixstream.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IBM&lt;/td&gt;
&lt;td&gt;1911&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.ibm.com/"&gt;www.ibm.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;InfluxData&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.influxdata.com/"&gt;https://www.influxdata.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ITRS&lt;/td&gt;
&lt;td&gt;1993&lt;/td&gt;
&lt;td&gt;United Kingdom&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.itrsgroup.com/"&gt;https://www.itrsgroup.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jKool&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.jkoolcloud.com/"&gt;https://www.jkoolcloud.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Loom Systems&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.loomsystems.com/"&gt;https://www.loomsystems.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Moogsoft&lt;/td&gt;
&lt;td&gt;2011&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.moogsoft.com/"&gt;https://www.moogsoft.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scalyr&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.scalyr.com/"&gt;https://www.scalyr.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ScienceLogic&lt;/td&gt;
&lt;td&gt;2003&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://sciencelogic.com/"&gt;https://sciencelogic.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SignalFx&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://signalfx.com/"&gt;https://signalfx.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Splunk&lt;/td&gt;
&lt;td&gt;2004&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.splunk.com/"&gt;https://www.splunk.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stackstate&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;Netherlands&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.stackstate.com/"&gt;https://www.stackstate.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sumo Logic&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.sumologic.com/"&gt;https://www.sumologic.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="aiops_4"&gt;AIOps 平台建设建议&lt;a class="headerlink" href="#aiops_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="aiops_5"&gt;通过采用增量方法确保成功部署AIOps功能&lt;a class="headerlink" href="#aiops_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;AIOps功能的有效部署需要从根据数据源重组IT域开始的结构化方法。这种方法将所需的焦点转移到数据集而不是工具，这是传统的方法。Gartner发现，最好先掌握从各种来源获取的大型持久数据集的使用。只有在IT运营团队熟练掌握AIOps的大数据方面之后，才能尝试掌握能力类别。因此，在选择工具或服务时，企业应优先考虑那些允许部署数据提取，存储和访问的供应商，而不依赖于剩余的AIOps组件。鉴于AIOps将用于多个用例，I＆O领导者必须确保供应商支持逐步添加其他功能。&lt;/p&gt;
&lt;h3 id="aiops_6"&gt;选择能够支持广泛的历史和流数据类型的AIOps平台&lt;a class="headerlink" href="#aiops_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;现代IT运营旨在获得IT实体的综合可见性，包括应用程序，其关系，相互依赖性和过去的转换，以深入了解整体IT环境的现状。选择正确的数据源对于避免盲点至关重要。部署成熟度和不断变化的用例的渐进性需要准备好摄取各种数据源。I＆O领导者必须选择能够摄取和提供对各种历史和流数据类型的访问的AIOps平台（参见图3）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="AIOps获取的数据类型" src="./images/340492_0003.png"&gt;&lt;/p&gt;
&lt;h2 id="_6"&gt;总结&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_7"&gt;建议&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;负责优化IT运营的数据中心负责人应该:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过采用以历史数据开始的增量方法部署AIOps, 并逐步使用&lt;strong&gt;流数据&lt;/strong&gt;, 与不断改进的IT运营成熟度保持一致.&lt;/li&gt;
&lt;li&gt;要选择这样的 AIOps平台: 通过识别能够摄取和提供对文本和指标数据访问的AIOps平台, 能够全面了解IT系统过去和现在的平台.&lt;/li&gt;
&lt;li&gt;通过选择支持逐步部署面向IT运维的机器学习四个阶段的工具, 深化其IT运营团队的分析技能: 描述性, 诊断性, 主动性能力和根本原因分析, 以帮助避免高严重性中断.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 02 Apr 2019 22:21:31 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-02:/what-is-aiops.html</guid><category>gartner</category><category>aiops</category><category>可观察性</category><category>大数据</category><category>机器学习</category></item><item><title>SRE 宣言</title><link>https://www.EWhisper.cn/the-declaration-of-sre.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sre"&gt;SRE 宣言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sre_1"&gt;SRE 成立背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sre_2"&gt;何为SRE&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#sre_3"&gt;SRE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sre_4"&gt;SRE 的目标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sre_5"&gt;SRE 运维体系&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sre_6"&gt;SRE 建设阶段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="sre"&gt;SRE 宣言&lt;a class="headerlink" href="#sre" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今天(2019年4月1日)是个对于我来说值得永远铭记的日子.&lt;/p&gt;
&lt;p&gt;从今天起, 我由一名普通的运维转变为一名普通的SRE. 我们专注于: 提高效率, 提高业务连续性, 最终提高用户满意度. 无论是公司的客户, 还是分公司、子公司的用户, 亦或是IT开发分部的同事, 你们都是我们的服务"用户". 我会用我的十分努力, 来换得效率的+1%, 来换得业务连续性的+1s, 来换得你们点赞与笑脸的+1+1.&lt;/p&gt;
&lt;h2 id="sre_1"&gt;SRE 成立背景&lt;a class="headerlink" href="#sre_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;过去一段时间, 我们发现我们运维切实地存在以下问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运维和开发衔接不畅. 运维分部是专业组的组织架构, 就拿新系统上线来举例, 开发几乎需要问遍运维分部内的各个专业组, 从: 主机、中间件、数据库、网络再到安全、监控等等等等。而且时长面临着对方“不是我负责的，你找其他人吧”式的被踢皮球的感受。&lt;/li&gt;
&lt;li&gt;部署规模越来越庞大。随着各类私有云、公有云的引入，微服务架构的引入，以及数字化转型，竞争的激烈。近些年，系统的部署规模较前年甚至都有成倍数的增长，现有的运维模式对于越来越庞大的规模有些力不从心。&lt;/li&gt;
&lt;li&gt;新技术的引入。还是上面提到的，云的引入，容器的引入，开源技术栈（包括：web server，中间件，MQ，缓存，NoSQL...)的引入以及随之而来的工具链的引入(Ansible, SaltStack, Jenkins, Zabbix, ELK...)也带来技术链的爆炸式增长. 而这些也都是需要运维具有相应的技术储备的.&lt;/li&gt;
&lt;li&gt;开发分部DevOps. 开发分部也在推动DevOps的体系. 我们的体系也要和开发分部相对应.&lt;/li&gt;
&lt;li&gt;技术能力的积累和变现.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="sre_2"&gt;何为SRE&lt;a class="headerlink" href="#sre_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="sre_3"&gt;SRE&lt;a class="headerlink" href="#sre_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="SRE logo" src="./images/reliability-icon-t_0.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;定义:&lt;br&gt;
SRE 是谷歌针对DevOps的生产实践和运行模型. 软件由开发团队显示"交接给"运行软件的团队, 即Site Reliability Engineer(SRE, 网站可靠性工程团队). 在这个模型中, Dev团队需要向 SRE 团队提供测试证据(日志, 指标等), 证明他们的软件已经达到一个 SRE 团队认为足够好的标准.&lt;br&gt;
至关重要的是, SRE 团队可以拒绝不符合运维标准的软件(包括开发分部和运维分部的软件), 要求开发人员在投入生产之前改进代码. Dev 和 SRE之间的协作围绕着&lt;strong&gt;运维标准&lt;/strong&gt;展开, 但是, 一旦 SRE 团队对代码满意, 他们(而不是Dev团队)就会在生产环境中提供支持.&lt;/p&gt;
&lt;p&gt;这个模型只适用于工程和组织成熟度较高的组织, 如果运行不当, 可能变为 "Dev 和 Ops筒仓"的模式.&lt;br&gt;
节选自: &lt;a href="https://www.infoq.cn/article/DcIUD_gi17sQjvSt5XSS"&gt;DevOps团队结构类型汇总：总有一款适合你&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="SRE模型" src="./images/devops-models-type-7.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="dev ops 筒仓" src="./images/anti-devops-models-1.png"&gt;&lt;/p&gt;
&lt;h3 id="sre_4"&gt;SRE 的目标&lt;a class="headerlink" href="#sre_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;SRE的目标有"三化", 也是承接了实现公司的"三化"战略. SRE目标为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平台化&lt;/li&gt;
&lt;li&gt;服务化&lt;/li&gt;
&lt;li&gt;自动化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sre_5"&gt;SRE 运维体系&lt;a class="headerlink" href="#sre_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;SRE 运维体系有"三驾马车". &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SRE. 位于金字塔尖, 对外提供服务.&lt;/li&gt;
&lt;li&gt;技术服务. 即: 专业组. "使能"SRE团队.&lt;/li&gt;
&lt;li&gt;运维开发. 新成立(目前还未成立, 过渡期). "赋能"SRE团队. 打造以"三化"为目标的平台, 工具集.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="sre_6"&gt;SRE 建设阶段&lt;a class="headerlink" href="#sre_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这是公司运维分部近十年来的首次变革, 变革需要逐步稳步推进. SRE 建设也会分阶段进行:&lt;br&gt;
当前阶段的主要工作是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;扎口&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;监控告警扎口&lt;/li&gt;
&lt;li&gt;应用, 数据库发布扎口&lt;/li&gt;
&lt;li&gt;资源, 集成部署扎口&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工具平台建设&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自动化运维平台建设&lt;/li&gt;
&lt;li&gt;统一监控告警平台建设&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_1"&gt;总结&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;最终目标&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提高效率&lt;/li&gt;
&lt;li&gt;提高业务连续性&lt;/li&gt;
&lt;li&gt;最终提高客户满意度&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分阶段, 分步骤推进&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;运维团队以往积累了一些优秀的品质, 但也慢慢积累了惰性. 懒惰, 固步自封要被严肃处理.&lt;/li&gt;
&lt;li&gt;用于探索和实践. 敢于试错, 从失败中吸取经验教训.&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 02 Apr 2019 08:32:07 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-04-02:/the-declaration-of-sre.html</guid><category>DevOps</category><category>SRE</category></item><item><title>DevOps能力成熟度调查问卷</title><link>https://www.EWhisper.cn/devops-questionnaire.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;（一）配置管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;（二）构建与持续集成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;（三）构建与持续集成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;（四）测试管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;（五）部署与发布管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;（六）环境管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;（七）数据管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;（八）度量与反馈&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;（九）分布式应用架构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 问卷说明:&lt;/p&gt;
&lt;p&gt;本问卷来自互联网.&lt;br&gt;
本问卷由九个板块构成,一共73道题, 全部为单选题.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_1"&gt;（一）配置管理&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、版本控制系统&lt;/p&gt;
&lt;p&gt;·       A、未使用统一的版本控制系统，源代码分散在研发本地设备管理。&lt;/p&gt;
&lt;p&gt;·       B、使用集中式的版本控制系统并将所有源代码纳入系统管理。&lt;/p&gt;
&lt;p&gt;·       C、使用分布式的版本控制系统，并将所有源代码、配置文件、构建和部署等自动化脚本纳入系统管理。&lt;/p&gt;
&lt;p&gt;·       D、将数据库变更脚本和环境配置等纳入版本控制系统管理版本控制系统支持自动化的变更操作。&lt;/p&gt;
&lt;p&gt;·       E、将软件生命周期的所有配置项纳入版本控制系统管理，可完整回溯软件交付过程满足审计要求。&lt;/p&gt;
&lt;p&gt;2、分支管理&lt;/p&gt;
&lt;p&gt;·       A、缺乏明确的分支管理策略，分支生命周期混乱。&lt;/p&gt;
&lt;p&gt;·       B、采取长周期和大批量的方式进行代码提交，代码合并过程存在大量冲突和错误。&lt;/p&gt;
&lt;p&gt;·       C、采取短分支频繁提交的方式，研究人员至少每天完成一次代码提交，代码合并过程顺畅。&lt;/p&gt;
&lt;p&gt;·       D、分支策略满足持续交付需求，可灵活适应产品交付。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的分支管理策略，可支持团队高效协作。&lt;/p&gt;
&lt;p&gt;3、构建产物管理&lt;/p&gt;
&lt;p&gt;·       A、未使用统一的制品库，构建产物通过直接拷贝或本地共享等方式进行分发。&lt;/p&gt;
&lt;p&gt;·       B、使用统一的制品库管理构建产物，有清晰的分级和目录结构及权限管控并通过单一制品库地址进行分发。&lt;/p&gt;
&lt;p&gt;·       C、使用统一的制品库管理构建产物，并将二进制库文件和三方依赖软件工具等纳入只凭库管理。&lt;/p&gt;
&lt;p&gt;·       D、对制品库完成分级管理，有成熟的备份恢复清理策略，如采用分布式制品库。&lt;/p&gt;
&lt;p&gt;4、单一可信数据源&lt;/p&gt;
&lt;p&gt;·       A、版本控制系统和制品库作为单一可信数据源，覆盖生产部署环节。&lt;/p&gt;
&lt;p&gt;·       B、单一可信数据源进一步覆盖研发本地环境。&lt;/p&gt;
&lt;p&gt;·       C、单一可信数据源贯穿整个研发价值流交付过程，在组织内部开放共享，建立知识积累和经验复用体系。&lt;/p&gt;
&lt;p&gt;5、变更过程&lt;/p&gt;
&lt;p&gt;·       A、变更过程不受控且变更信变更问题定位困难且回滚操作具有高风险分散在每个系统内部，缺乏信息的有效共享机制。&lt;/p&gt;
&lt;p&gt;·       B、代码变更过程应附带变更管理信息。&lt;/p&gt;
&lt;p&gt;·       C、所有配置项变更由变更管理系统触发，并作为版本控制系统的强制要求。&lt;/p&gt;
&lt;p&gt;·       D、使用同一套变更管理系统覆盖从需求到部署发布全流程。&lt;/p&gt;
&lt;p&gt;·       E、可视化变更生命周期，支持全程数据分析管理和满足审计要求。&lt;/p&gt;
&lt;p&gt;6、变更追溯&lt;/p&gt;
&lt;p&gt;·       A、变更缺乏基本的可追溯性。&lt;/p&gt;
&lt;p&gt;·       B、有清晰定义的软件版本号规则，实现版本和代码的关联，可追溯版本构建对应的完整源代码信息。&lt;/p&gt;
&lt;p&gt;·       C、实现版本控制系统和变更管理系统的自动化关联，信息双向同步和实时可追溯。&lt;/p&gt;
&lt;p&gt;·       D、变更依赖被识别和标记，实现数据库和环境变更信息的可追溯。&lt;/p&gt;
&lt;p&gt;·       E、实现从需求到部署发布各个环节的相关全部信息的全程可追溯。&lt;/p&gt;
&lt;p&gt;7、变更回滚&lt;/p&gt;
&lt;p&gt;·       A、变更问题定位困难且回滚操作具有高风险。&lt;/p&gt;
&lt;p&gt;·       B、可支持版本间差异对比和代码级别问题定位和回滚。&lt;/p&gt;
&lt;p&gt;·       C、实现变更管理系统和版本控制系统的同步回滚，保证状态的一致性。&lt;/p&gt;
&lt;p&gt;·       D、可根据变更管理系统按需快速导出复用软件代码变更集，如建立从变更管理系统到软件代码变更集的关系数据库。&lt;/p&gt;
&lt;p&gt;·       E、支持任何时间点全部状态的自动化回滚需求。&lt;/p&gt;
&lt;h2 id="_2"&gt;（二）构建与持续集成&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、构建方式&lt;/p&gt;
&lt;p&gt;·       A、采用手工方式进行构建，构建过程不可重复。&lt;/p&gt;
&lt;p&gt;·       B、实现脚本自动化，通过手工配置完成构建。&lt;/p&gt;
&lt;p&gt;·       C、定义结构化构建脚本，实现模块级共享复用和统一维护。&lt;/p&gt;
&lt;p&gt;·       D、实现构建服务化，可按需提供接口和用户界面用于可视化构建编排。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的构建服务平台，持续改进服务易用性。&lt;/p&gt;
&lt;p&gt;2、构建环境&lt;/p&gt;
&lt;p&gt;·       A、使用本地设备，构建环境不可靠。&lt;/p&gt;
&lt;p&gt;·       B、有独立的构建服务器，多种任务共享构建环境。&lt;/p&gt;
&lt;p&gt;·       C、构建环境配置实现标准化，有独立的构建集群，单次构建控制在小时级。&lt;/p&gt;
&lt;p&gt;·       D、优化构建速度，实现增量化构建和模块化构建，单次构建控制在分钟级，如可采用分布式构建集群、构建缓存等技术。&lt;/p&gt;
&lt;p&gt;·       E、持续改进构建性能，实现构建资源共享和动态按需分配回收，如搭建基于云服务虚拟化和容器化的分布式构建集群。&lt;/p&gt;
&lt;p&gt;3、构建计划&lt;/p&gt;
&lt;p&gt;·       A、没有明确的版本号规则和构建任务计划。&lt;/p&gt;
&lt;p&gt;·       B、明确定义版本号规则，并根据发布策略细分构建类型，实现每日自动构建。&lt;/p&gt;
&lt;p&gt;·       C、明确定义构建计划和规则，实现代码提交触发构建和定期自动执行构建。&lt;/p&gt;
&lt;p&gt;·       D、分级构建计划，实现按需构建并达到资源和速度的有效平衡。&lt;/p&gt;
&lt;p&gt;·       E、分级构建计划，实现按需构建并达到资源和速度的有效平衡。&lt;/p&gt;
&lt;p&gt;4、构建职责&lt;/p&gt;
&lt;p&gt;·       A、构建工具和环境受限于团队人员能力，频繁手动干预维护。&lt;/p&gt;
&lt;p&gt;·       B、构建工具和环境由专人负责维护，并使用权限隔离。&lt;/p&gt;
&lt;p&gt;·       C、构建工具和环境由专门团队维护，并细分团队人员职责。&lt;/p&gt;
&lt;p&gt;·       D、构建系统服务化提供更多用户使用，构建不再局限于专业团队进行。&lt;/p&gt;
&lt;p&gt;·       E、将构建能力赋予全部团队成员，并按需触发构建实现快速反馈。&lt;/p&gt;
&lt;h2 id="_3"&gt;（三）构建与持续集成&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、集成服务&lt;/p&gt;
&lt;p&gt;·       A、没有搭建持续集成服务，团队成员缺乏对持续集成的理解。&lt;/p&gt;
&lt;p&gt;·       B、搭建统一的持续集成服务并对系统进 行日常维护和管理。&lt;/p&gt;
&lt;p&gt;·       C、组建专门的持续集成团队，负责优化持续集成系统和服务。&lt;/p&gt;
&lt;p&gt;·       D、持续集成嵌入每个研发团队日常活动，实现持续集成系统服务化和自助化。&lt;/p&gt;
&lt;p&gt;·       E、持续优化和改进团队持续集成服务，实现组织交付能力提升。&lt;/p&gt;
&lt;p&gt;2、集成频率&lt;/p&gt;
&lt;p&gt;·       A、长期本地开发代码集成频率几周或者几月一次。&lt;/p&gt;
&lt;p&gt;·       B、采用团队定期统一集成的策略，代码集成频率几天或者几周一次。&lt;/p&gt;
&lt;p&gt;·       C、研发人员至少每天向代码主干集成一次。&lt;/p&gt;
&lt;p&gt;·       D、研发人员每天多次向代码主干集成，每次集成代价较低。&lt;/p&gt;
&lt;p&gt;·       E、任何变更(代码，配置，环境)都会触发完整的持续集成流程。&lt;/p&gt;
&lt;p&gt;3、集成方式&lt;/p&gt;
&lt;p&gt;·       A、代码集成作为软件交付流程中的一个独立阶段。&lt;/p&gt;
&lt;p&gt;·       B、在部分分支上进行每天多次的定时构建。&lt;/p&gt;
&lt;p&gt;·       C、每次代码提交触发自动化构建，构建问题通过自动分析精准推送相关人员处理。&lt;/p&gt;
&lt;p&gt;·       D、每次代码提交构建触发自动化测试和静态代码检查，测试问题自动上报变更管理系统，测试结果作为版本质量标准要求，如：采取质量门禁等方式强化主干代码质量。&lt;/p&gt;
&lt;p&gt;·       E、实现持续集成分级和自动化测试分级，满足不同模块和集成阶段的差异化需求。&lt;/p&gt;
&lt;p&gt;4、反馈周期&lt;/p&gt;
&lt;p&gt;·       A、每次集成伴随大量的问题和冲突，集成期间主干分支长期不可用。&lt;/p&gt;
&lt;p&gt;·       B、集成问题反馈和解决需要半天或者更长时间。&lt;/p&gt;
&lt;p&gt;·       C、集成问题反馈和解决可以在几个小时内完成。&lt;/p&gt;
&lt;p&gt;·       D、集成问题反馈和解决控制在 30分钟以内完成。&lt;/p&gt;
&lt;p&gt;·       E、集成问题反馈和解决控制在 10分钟以内完成。&lt;/p&gt;
&lt;h2 id="_4"&gt;（四）测试管理&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、分层方法&lt;/p&gt;
&lt;p&gt;·       A、只进行用户/业务级的 UI 测试。&lt;/p&gt;
&lt;p&gt;·       B、采用接口/服务级测试对模块/服务进行覆盖全面的接口测试；采用代码级测试对核心模块的函数或类方法进行单元测试；对系统进行基本的性能测试。&lt;/p&gt;
&lt;p&gt;·       C、采用代码级测试对模块的函数或类方法进行覆盖全面的单元测试；系统全面的进行性能、容量、稳定性、可靠性、易用性、兼容性、安全性等非功能性测试。&lt;/p&gt;
&lt;p&gt;·       D、采用测试驱动开发的方式,进行代码级、接口级测试；采用探索性测试方法对需求进行深入挖掘测试&lt;/p&gt;
&lt;p&gt;·       E、采用验收测试驱动开发的方式进行用户/业务级的 UI测试。&lt;/p&gt;
&lt;p&gt;2、分层策略&lt;/p&gt;
&lt;p&gt;·       A、尚未建立测试分层策略，测试不分层。&lt;/p&gt;
&lt;p&gt;·       B、测试开始分层，但对测试分层策略缺乏系统的规划，对用户/业务级测试、接口/服务级、代码级测试分布比例由高到低，各层测试缺乏有效的设计。&lt;/p&gt;
&lt;p&gt;·       C、对测试分层策略进行系统的规划，用户/业务级、接口/服务级、代码级测试分布比例由低到高，充分设计;代码对非功能性测试进行全面系统的设计。&lt;/p&gt;
&lt;p&gt;·       D、测试分层策略的各层测试具有交叉互补性。&lt;/p&gt;
&lt;p&gt;·       E、定期验证测试分层策略，是否完整有效，持续优化策略。&lt;/p&gt;
&lt;p&gt;3、测试时机&lt;/p&gt;
&lt;p&gt;·       A、测试在软件交付过程中在开发完成后才介入。&lt;/p&gt;
&lt;p&gt;·       B、测试在持续交付过程中的介入时间提前到开发的集成阶段，接口/服务级测试在模块的接口开发完成后进行。&lt;/p&gt;
&lt;p&gt;·       C、测试在持续交付过程中的介入时间提前到开发的编码阶段，代码级测试在模块的函数或类方法开发完成后进行。&lt;/p&gt;
&lt;p&gt;·       D、代码级测试在模块的函数或类方法开发过程中同步进行和完成；接口/服务级测试在模块的接口开发过程中同步进行和完成。&lt;/p&gt;
&lt;p&gt;·       E、在需求阶段进行用户/业务级测定期验证测试设计，在需求特性并发、交付，整个过程中同步进行并完成测试。&lt;/p&gt;
&lt;p&gt;4、质量规约&lt;/p&gt;
&lt;p&gt;·       A、代码质量检查无任何规约。&lt;/p&gt;
&lt;p&gt;·       B、代码质量检查具备基本规约，但还缺乏完整性和有效性。&lt;/p&gt;
&lt;p&gt;·       C、代码质量检查具备完整、有效和强制执行的规约。&lt;/p&gt;
&lt;p&gt;·       D、代码质量检查规约根据需要可进行扩展和定制。&lt;/p&gt;
&lt;p&gt;·       E、定期验证代码质量规约的完整性和有效性，持续优化。&lt;/p&gt;
&lt;p&gt;5、检查策略&lt;/p&gt;
&lt;p&gt;·       A、代码质量检查无针对检查范围、质量门限等相关的策略。&lt;/p&gt;
&lt;p&gt;·       B、代码质量检查有针对检查范围、质量门限的策略，对代码规范、错误和圈复杂度、重复度等质量指标进。行检查分析&lt;/p&gt;
&lt;p&gt;·       C、代码质量检查将安全漏洞检查、合规检查纳入到检查范围。&lt;/p&gt;
&lt;p&gt;·       D、代码质量检查针对检查范围、质量门限的策略可根据需要灵活调整。&lt;/p&gt;
&lt;p&gt;·       E、定期验证代码质量策略的完整性和有效性，持续优化。&lt;/p&gt;
&lt;p&gt;6、检查方式&lt;/p&gt;
&lt;p&gt;·       A、代码质量检查采用人工方式进行评审。&lt;/p&gt;
&lt;p&gt;·       B、代码质量检查采用自动化结合手工方式进行。&lt;/p&gt;
&lt;p&gt;·       C、代码质量检查完全自动化，不需要手工干预。&lt;/p&gt;
&lt;p&gt;·       D、对代码质量检查发现的部分问题自动提出修改建议，支持可视化。&lt;/p&gt;
&lt;p&gt;·       E、具备企业级的代码质量管理平台，以服务的形式提供对代码质量的检查分析。&lt;/p&gt;
&lt;p&gt;7、反馈处理&lt;/p&gt;
&lt;p&gt;·       A、对代码质量检查结果处理不及时，遗留大量技术债。&lt;/p&gt;
&lt;p&gt;·       B、对代码质量检查结果给出反馈，根据反馈进行处理，对遗留的部分技术债乏跟踪和管理，导致遗漏。&lt;/p&gt;
&lt;p&gt;·       C、根据代码质量检查结果反馈及时处理，技术债仍有短期遗留，但进行有效的跟踪、管理和处理。&lt;/p&gt;
&lt;p&gt;·       D、将检查结果强制作为版本质量标准要求，根据代码质量检查提出的修改建议，对问题及时处理，在研发阶段主动解决技术债。&lt;/p&gt;
&lt;p&gt;·       E、对代码质量数据进行统一管理，可有效追溯并对代码质量进行有效度量。&lt;/p&gt;
&lt;p&gt;8、自动化设计&lt;/p&gt;
&lt;p&gt;·       A、未采用自动化方式测试，纯手工测试。&lt;/p&gt;
&lt;p&gt;·       B、尚未对测试用例中自动化部分进行规划和设计，覆盖不完整。&lt;/p&gt;
&lt;p&gt;·       C、根据需求、接口和代码对不同测试分层中自动化测试用例进行规划和设计，自动化覆盖比较完整。&lt;/p&gt;
&lt;p&gt;·       D、对性能、稳定性、可靠性、安全性等非功能性测试中自动化用例进行规划和设计，自动化覆盖完整。&lt;/p&gt;
&lt;p&gt;·       E、对故障和测试进行复盘，对遗漏的测试用例进行补充，不断优化和完善，持续提升覆盖率。&lt;/p&gt;
&lt;p&gt;9、自动化开发&lt;/p&gt;
&lt;p&gt;·       A、尚未对自动化测试脚本进行开发和管理，手工测试。&lt;/p&gt;
&lt;p&gt;·       B、对自动化测试脚本进行开发和本地管理。&lt;/p&gt;
&lt;p&gt;·       C、自动化测试脚本开发采用数据驱动、关键字驱动等方法；使用版本控制系统对自动化测试脚本进行有效管理。&lt;/p&gt;
&lt;p&gt;·       D、自动化测试用例脚本间具备独立性和大批量执行的健壮性。&lt;/p&gt;
&lt;p&gt;·       E、自动化脚本是测试用例设计的活文档，自动化脚本开发和测试用例设计完全统一。&lt;/p&gt;
&lt;p&gt;10、自动化执行&lt;/p&gt;
&lt;p&gt;·       A、手工测试执行效率低下，以周级为单位。&lt;/p&gt;
&lt;p&gt;·       B、对用户/业务级测试采用自动化测试，自动化测试的执行效率不高，以天级为单位。&lt;/p&gt;
&lt;p&gt;·       C、从代码级、接口级UI级测试实现了端到端的自动化测试打通；自动化测试执行效率较高，代码级测试分钟级，UI级测试小时级。&lt;/p&gt;
&lt;p&gt;·       D、有组织级的统一自动化测试平台，和上下游需求、故障系统打通；可以根据需求针对性自动关联选择自动化测试用例脚本执行；可以将由于版和故障关联。&lt;/p&gt;
&lt;p&gt;·       E、采用企业级统一的自动化测试平台，以云化的方式提供测试服务，进行分布式测试调度执行，提高测试执行效率和资源利用率；定期验证自动化执行策略,持续优化。&lt;/p&gt;
&lt;p&gt;11、自动化分析&lt;/p&gt;
&lt;p&gt;·       A、手工对测试结果进行分析判断，错误高，可信度低。&lt;/p&gt;
&lt;p&gt;·       B、对自动化测试结果具备一定的自动判断能力，存在一定的误报，可信度不足。&lt;/p&gt;
&lt;p&gt;·       C、对自动化测试结果具备较强的自动判断能力，误报少，可信度高。&lt;/p&gt;
&lt;p&gt;·       D、自动化测试数据模型标准化，和上下游需求、故障等研发数据关联，可以对自动化测试效果进行度量分析。例如：需求测试覆盖率、测试通过率和测试效率等。&lt;/p&gt;
&lt;p&gt;·       E、对自动化测试结果可以智能分析，自动分析失败用例的失败类型及原因，可以自动向故障管理系统提交故障，可信度高。&lt;/p&gt;
&lt;h2 id="_5"&gt;（五）部署与发布管理&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、部署方式&lt;/p&gt;
&lt;p&gt;·       A、运维人员手工完成所有环境的部署。&lt;/p&gt;
&lt;p&gt;·       B、运维人员通过自动化脚本实现部署过程部分自动化。&lt;/p&gt;
&lt;p&gt;·       C、部署和发布实现全自动化，同时支持数据库自动化部署。&lt;/p&gt;
&lt;p&gt;·       D、部署发布服务化，实现交付团队自助一键式多环境自动化。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的部署发布模式和工具系统平台。&lt;/p&gt;
&lt;p&gt;2、部署活动&lt;/p&gt;
&lt;p&gt;·       A、部署过程复杂不可控，伴随大量问题和较长的停机时间。&lt;/p&gt;
&lt;p&gt;·       B、部署过程通过流程文档定义实现标准化整体可控。&lt;/p&gt;
&lt;p&gt;·       C、使用相同的过程和工具完成所有环境部署，一次部署过程中使用相同的构建产物。&lt;/p&gt;
&lt;p&gt;·       D、部署过程可灵活响应业务需求变化通过合理组合高效编排。&lt;/p&gt;
&lt;p&gt;·       E、持续部署，每次变更都触发一次自动化生产环境部署过程。&lt;/p&gt;
&lt;p&gt;3、部署策略&lt;/p&gt;
&lt;p&gt;·       A、采用定期大批量部署策略。&lt;/p&gt;
&lt;p&gt;·       B、应用作为部署的最小单位，应用和数据库部署实现分离，实现测试环境的自动化部署。&lt;/p&gt;
&lt;p&gt;·       C、可运行的环境作为部署的最小单位，应用和配置进行分离。&lt;/p&gt;
&lt;p&gt;·       D、通过多种部署发布策略保证流程风险可控，如：蓝绿部署，金丝雀发布。&lt;/p&gt;
&lt;p&gt;·       E、软件交付团队自主进行安全可靠的部署和发布活动。&lt;/p&gt;
&lt;p&gt;4、部署质量&lt;/p&gt;
&lt;p&gt;·       A、部署整体失败率较高，并且无法实现回滚，生产问题只能在线上修复，修复时间不可控。&lt;/p&gt;
&lt;p&gt;·       B、实现应用部署的回滚操作，部署失败率中等，问题可及时修复。&lt;/p&gt;
&lt;p&gt;·       C、部署活动集成自动化测试功能，并以测试结果为部署前置条件每次部署活动提供变更对象范围报告和测试报告。&lt;/p&gt;
&lt;p&gt;·       D、建立监控体系跟踪和分析部署过程，出现问题自动化降级回滚，失败率较低。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的部署监控体系和测试体系，部署失败率维持在极低水平。&lt;/p&gt;
&lt;p&gt;5、协作模式&lt;/p&gt;
&lt;p&gt;·       A、整个软件交付过程严格遵循预先计划，存在复杂的部门间协作和等待，只有在开发完成后才进行测试和部署。&lt;/p&gt;
&lt;p&gt;·       B、通过定义完整的软件交付过程和清晰的交付规范，保证团队之间交付的有序。&lt;/p&gt;
&lt;p&gt;·       C、团队间交付按照约定由系统间调用完成，仅在必要环节进行手工确认。&lt;/p&gt;
&lt;p&gt;·       D、团队间依赖解耦，可实现独立安全的自主部署交付。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的交付业务组织灵活响应业务变化改善发布效率。&lt;/p&gt;
&lt;p&gt;6、流水线过程&lt;/p&gt;
&lt;p&gt;·       A、软件交付过程中的大部分工作通过手工方式完成。&lt;/p&gt;
&lt;p&gt;·       B、软件交付过程中的各个环节建立自动化能力以提升处理效率。&lt;/p&gt;
&lt;p&gt;·       C、打通软件交付过程中的各个环节，建立全流程的自动化能力，并根据自动化测试结果控制软件交付质量。&lt;/p&gt;
&lt;p&gt;·       D、建立可视化部署流水线，覆盖整个软件交付过程，每次变更都会触发完整的自动化部署流水线。&lt;/p&gt;
&lt;p&gt;·       E、持续部署流水线驱动持续改进。&lt;/p&gt;
&lt;p&gt;7、过程可视化&lt;/p&gt;
&lt;p&gt;·       A、交付过程中的信息是封闭的，交付状态不可追溯。&lt;/p&gt;
&lt;p&gt;·       B、交付过程在团队内部可见，信息在团队间共享，交付状态可追溯。&lt;/p&gt;
&lt;p&gt;·       C、交付过程组织内部可见，团队共享度量指标。&lt;/p&gt;
&lt;p&gt;·       D、部署流水线全员可见，对过程信息进行有效聚合分析展示趋势。&lt;/p&gt;
&lt;p&gt;·       E、部署流水线过程信息进行数据价值挖掘，推动业务改进。&lt;/p&gt;
&lt;h2 id="_6"&gt;（六）环境管理&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、环境类型&lt;/p&gt;
&lt;p&gt;·       A、环境类型只有生产环境和非生产环境的划分。&lt;/p&gt;
&lt;p&gt;·       B、IT交付过程意识到部分测试环境的重要性，开始提供功能测试环境。&lt;/p&gt;
&lt;p&gt;·       C、持续交付过程意识到研发环境的重要性，开始提供面向各类开发者独立的研发 工作区。&lt;/p&gt;
&lt;p&gt;·       D、全面的测试与灰度环境对于质量交付过程来说非常重要，有各类的环境类型划分，区分了开发者，技术测试及业务测试环境以及灰度发布环境等等。&lt;/p&gt;
&lt;p&gt;·       E、根据业务与应用的需要，弹性分配各类环境。&lt;/p&gt;
&lt;p&gt;2、环境架构&lt;/p&gt;
&lt;p&gt;·       A、环境的构建通过人工创建完成。&lt;/p&gt;
&lt;p&gt;·       B、环境构建通过一键化的脚本或者虚拟机来完成的，构建过程完全黑盒 化完成。&lt;/p&gt;
&lt;p&gt;·       C、环境的构建通过资源交付平台来完成，并且底层是由云来交付。&lt;/p&gt;
&lt;p&gt;·       D、环境的构建可以通过 Docker 容器化快速交付，低成本构建一个新的环境。&lt;/p&gt;
&lt;p&gt;·       E、环境的构建结合底层IT资源状况，采用了各类混合IT技术，根据业务及应用架构弹性构建。&lt;/p&gt;
&lt;p&gt;3、环境依赖与配置管理&lt;/p&gt;
&lt;p&gt;·       A、无依赖管理，环境的管理就是一个OS的交付。&lt;/p&gt;
&lt;p&gt;·       B、以应用为中心有OS级别的依赖和配置管理能力，比如说操作系统版本、组件版本、程序包版本等等。&lt;/p&gt;
&lt;p&gt;·       C、以应用为中心，有服务级依赖的配置管理能力，比如说依赖的关联服务，Mysql 服务、cache 服务、关联应用服务等等。&lt;/p&gt;
&lt;p&gt;·       D、环境和依赖配置管理可以资源化描述，类似dockerfile，大大提升其配置管理能力。&lt;/p&gt;
&lt;p&gt;·       E、环境依赖和配置可以做到实例级的动态配置管理能力，根据业务和应用架构的变化而变化。&lt;/p&gt;
&lt;h2 id="_7"&gt;（七）数据管理&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、数据来源&lt;/p&gt;
&lt;p&gt;·       A、每次测试时手工创建数据，测试数据都是临时性的。&lt;/p&gt;
&lt;p&gt;·       B、从生产环境导出一个子集并进行清洗后，形成基准的测试数据集，满足部分测试用例执行要求。&lt;/p&gt;
&lt;p&gt;·       C、从生产环境导出一个子集并进行清洗后，形成基准的测试数据集，满足部分测试用例执行要求。&lt;/p&gt;
&lt;p&gt;·       D、每个测试用例专属的测试数据都可以通过模拟或调用应用程序 API 的方式自动生成。&lt;/p&gt;
&lt;p&gt;·       E、所有的功能、非功能测试的测试数据，都可以通过模拟、数据库转储或调用应用程序 API 的方式自动生成。&lt;/p&gt;
&lt;p&gt;2、数据覆盖&lt;/p&gt;
&lt;p&gt;·       A、测试数据覆盖率低，仅支持部分测试场景，无法有效支持测试工作。&lt;/p&gt;
&lt;p&gt;·       B、测试数据覆盖主要场景，包括正常类型，错误类型以及边界类型，并进行初步的分类分级，满足不同测。试类型需要。&lt;/p&gt;
&lt;p&gt;·       C、建立体系化测试数据，进行数据依赖管理，覆盖更加复杂的业务场景。&lt;/p&gt;
&lt;p&gt;·       D、测试数据覆盖安全漏洞和开源合规等需求场景并建立定期更新机制。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的持续数据管理方式和策略。&lt;/p&gt;
&lt;p&gt;3、数据独立性&lt;/p&gt;
&lt;p&gt;·       A、测试数据没有版本控制和备份恢复机制。&lt;/p&gt;
&lt;p&gt;·       B、测试数据有明确备份恢复机制，实现测试数据复用和保证测试一致性。&lt;/p&gt;
&lt;p&gt;·       C、每个测试用例拥有专属的测试数据，有明确的测试初始状态测试用例的执行不依赖其他测试用例执行所。产生的数据。&lt;/p&gt;
&lt;p&gt;·       D、通过测试数据分级，实现专属测试数据和通用测试数据的有效管理和灵活组合，保证测试数据的独立性。&lt;/p&gt;
&lt;p&gt;·       E、通过测试数据分级，实现专属测试数据和通用测试数据的有效管理和灵活组合，保证测试数据的独立性。&lt;/p&gt;
&lt;p&gt;4、数据安全&lt;/p&gt;
&lt;p&gt;·       A、测试数据来源复杂，混入核心生产数据，带来信息安全风险&lt;/p&gt;
&lt;p&gt;·       B、测试数据经过清洗，不包含敏感信息，有效避免信息安全风险。&lt;/p&gt;
&lt;p&gt;·       C、测试数据经过清洗，不包含敏感信息，有效避免信息安全风险。&lt;/p&gt;
&lt;p&gt;·       D、测试数据经过清洗，不包含敏感信息，有效避免信息安全风险。&lt;/p&gt;
&lt;p&gt;·       E、测试数据经过清洗，不包含敏感信息，有效避免信息安全风险。&lt;/p&gt;
&lt;p&gt;5、变更过程&lt;/p&gt;
&lt;p&gt;·       A、数据变更由专业人员在后台手工完成 数据变更作为软件发布的一个独立环节，单独实施和交付&lt;/p&gt;
&lt;p&gt;·       B、数据变更通过文档实现标准化，使用自动化脚本完成变更。&lt;/p&gt;
&lt;p&gt;·       C、数据变更作为持续部署流水线的一个环节，随应用的部署自动化完成，无需专业人员单独执行。&lt;/p&gt;
&lt;p&gt;·       D、应用程序部署和数据库迁移解耦，可单独执行。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的数据管理方法，持续改进数据管理效率。&lt;/p&gt;
&lt;p&gt;6、兼容回滚&lt;/p&gt;
&lt;p&gt;·       A、没有识别数据库和应用版本，存在不兼容风险。&lt;/p&gt;
&lt;p&gt;·       B、建立数据库和应用的版本对应关系，并跟踪变更有效性。&lt;/p&gt;
&lt;p&gt;·       C、每次数据变更同时提供明确的恢复回滚机制，并进行变更测试，如：提供升级和回滚两个自动化脚本。&lt;/p&gt;
&lt;p&gt;·       D、数据变更具备向下兼容性，支持保留数据的回滚操作和零停机部署。&lt;/p&gt;
&lt;p&gt;7、版本控制&lt;/p&gt;
&lt;p&gt;·       A、数据变更没有纳入版本控制，变更过程不可重复。&lt;/p&gt;
&lt;p&gt;·       B、数据变更脚本纳入版本控制，并与数据库版本进行关联。&lt;/p&gt;
&lt;p&gt;8、数据监控&lt;/p&gt;
&lt;p&gt;·       A、没有建立变更监控体系，变更结果不可见。&lt;/p&gt;
&lt;p&gt;·       B、对变更日志进行收集分析，帮助问题快速定位。&lt;/p&gt;
&lt;p&gt;·       C、对数据变更进行流程分级定义，应对不同环境下的高危操作。&lt;/p&gt;
&lt;p&gt;·       D、对数据变更进行监控，自动发现异常变更状态。&lt;/p&gt;
&lt;p&gt;·       E、监控数据库性能并持续优化。&lt;/p&gt;
&lt;h2 id="_8"&gt;（八）度量与反馈&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、度量指标定义&lt;/p&gt;
&lt;p&gt;·       A、度量指标没有明确定义，对度量价值的理解是模糊的。&lt;/p&gt;
&lt;p&gt;·       B、在持续交付各个阶段定义度量指标，度量指标局限于职能部门内部。&lt;/p&gt;
&lt;p&gt;·       C、建立跨组织度量指标，进行跨领域综合维度的度量。&lt;/p&gt;
&lt;p&gt;·       D、整个研发团队共享业务价值导向的度量指标，实现指标的抽象分级，关注核心业务指标。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的度量指标，团队自我驱动持续改进。&lt;/p&gt;
&lt;p&gt;2、度量指标类型&lt;/p&gt;
&lt;p&gt;·       A、度量指标以结果指标为主，如变更频率，需求交付前置时间，变更失败率和平均修复时间。&lt;/p&gt;
&lt;p&gt;·       B、度量指标覆盖过程指标，客观反映组织研发现状。&lt;/p&gt;
&lt;p&gt;·       C、度量指标覆盖探索性指标，关注展示趋势和识别潜在改进。&lt;/p&gt;
&lt;p&gt;·       D、支持改进目标和试验结果的有效反馈，用于经验积累和指导下一阶段的改进工作。&lt;/p&gt;
&lt;p&gt;3、度量数据管理&lt;/p&gt;
&lt;p&gt;·       A、度量数据是临时性的，没有收集管理。&lt;/p&gt;
&lt;p&gt;·       B、度量数据的收集是离散的不连续的，历史度量数据没有进行有效理。&lt;/p&gt;
&lt;p&gt;·       C、度量数据的收集是连续的，历史度量数据有明确的管理规则。&lt;/p&gt;
&lt;p&gt;·       D、度量数据的收集是连续且优化的，对历史数据数据进行有效的挖掘分析。&lt;/p&gt;
&lt;p&gt;·       E、度量数据的收集是连续且优化的，对历史数据数据进行有效的挖掘分析。&lt;/p&gt;
&lt;p&gt;4、度量指标更新&lt;/p&gt;
&lt;p&gt;·       A、度量指标的设立和更新是固化的，度量指标没有明确的优先级。&lt;/p&gt;
&lt;p&gt;·       B、度量指标的设立和更新是动态的，可以按照组织需求定期变更，度量指标的优先级在团队内部可以达。&lt;/p&gt;
&lt;p&gt;·       C、建立完整的度量体系和成熟的度量框架，度量指标的设立和更新可按需实现快速定义并纳入度量体系，推动流程的持续改进。&lt;/p&gt;
&lt;p&gt;·       D、度量指标可基于大数据分析和人工智能自动识别推荐，并且动态调整指标优先级。&lt;/p&gt;
&lt;p&gt;5、报告生成方式&lt;/p&gt;
&lt;p&gt;·       A、度量报告通过手工方式生成，没有标准化的格式定义，内容缺乏细节。&lt;/p&gt;
&lt;p&gt;·       B、度量报告以自动化方式生成，通过预定义格式和内容标准化度量报告。&lt;/p&gt;
&lt;p&gt;·       C、度量报告进行分类分级，建立多种度量反馈渠道，内容按需生成。&lt;/p&gt;
&lt;p&gt;·       D、建立跨组织级统一的数据度量平台，数据看板内容可定制。&lt;/p&gt;
&lt;p&gt;·       E、持续优化的度量方法，平台和展现形式。&lt;/p&gt;
&lt;p&gt;6、报告有效性&lt;/p&gt;
&lt;p&gt;·       A、数据时效性无法保证节。&lt;/p&gt;
&lt;p&gt;·       B、数据体现报告生成时间点的最新状态。&lt;/p&gt;
&lt;p&gt;·       C、通过可视化看板实时展示数据。&lt;/p&gt;
&lt;p&gt;·       D、通过可视化看板聚合报告内容，自动生成趋势图，进行趋势分析。&lt;/p&gt;
&lt;p&gt;·       E、通过可视化看板聚合报告内容，自动生成趋势图，进行趋势分析。&lt;/p&gt;
&lt;p&gt;7、报告覆盖范围&lt;/p&gt;
&lt;p&gt;·       A、受众局限于报告生成人员及相关的小范围内部。&lt;/p&gt;
&lt;p&gt;·       B、由预先定义的事件触发自动化报告发送，受众覆盖团队内部成员。&lt;/p&gt;
&lt;p&gt;·       C、实现报告精准范围推送，支持主动订阅，受众覆盖跨部门团队。&lt;/p&gt;
&lt;p&gt;·       D、多维度产品状态实时信息展示。&lt;/p&gt;
&lt;p&gt;·       E、多维度产品状态实时信息展示。&lt;/p&gt;
&lt;p&gt;8、反馈改进&lt;/p&gt;
&lt;p&gt;·       A、报告发现的问题没有进行有效跟踪落实，问题长期无法改进。&lt;/p&gt;
&lt;p&gt;·       B、测试报告中反馈的问题录入问题追踪系统，进行持续跟踪。&lt;/p&gt;
&lt;p&gt;·       C、度量反馈问题纳入研发迭代的待办事项，作为持续改进的一部分。&lt;/p&gt;
&lt;p&gt;·       D、度量反馈的持续改进纳入研发日常工作，预留时间处理非功能性需求和技术债务，并且识别有效改进并扩展到整个组织，作为企业级知识体系积累保留。&lt;/p&gt;
&lt;p&gt;·       E、通过数据挖掘实现跨组织跨流程数据度量分析，分析结果作为业务决策的重要依据，帮助组织持续改进价值交付流程。&lt;/p&gt;
&lt;h2 id="_9"&gt;（九）分布式应用架构&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1、分布式应用数量&lt;/p&gt;
&lt;p&gt;·       A、20个以上&lt;/p&gt;
&lt;p&gt;·       B、10~20个&lt;/p&gt;
&lt;p&gt;·       C、5~10个&lt;/p&gt;
&lt;p&gt;·       D、5个以下&lt;/p&gt;
&lt;p&gt;2、实施计划&lt;/p&gt;
&lt;p&gt;·       A、大规模迁移&lt;/p&gt;
&lt;p&gt;·       B、保持现状&lt;/p&gt;
&lt;p&gt;·       C、可能回退&lt;/p&gt;
&lt;p&gt;3、技术成熟度&lt;/p&gt;
&lt;p&gt;·       A、稳定运行&lt;/p&gt;
&lt;p&gt;·       B、基本成熟&lt;/p&gt;
&lt;p&gt;·       C、前期探索&lt;/p&gt;
&lt;p&gt;·       D、研究阶段&lt;/p&gt;
&lt;p&gt;4、云技术&lt;/p&gt;
&lt;p&gt;·       A、虚拟化&lt;/p&gt;
&lt;p&gt;·       B、容器(K8S、MESOS等)&lt;/p&gt;
&lt;p&gt;·       C、物理机&lt;/p&gt;
&lt;p&gt;·       D、外部部署&lt;/p&gt;
&lt;p&gt;5、管理工具&lt;/p&gt;
&lt;p&gt;·       A、openstack系列&lt;/p&gt;
&lt;p&gt;·       B、openshift系列&lt;/p&gt;
&lt;p&gt;·       C、其他&lt;/p&gt;
&lt;p&gt;5、数据库&lt;/p&gt;
&lt;p&gt;·       A、UNIX数据库&lt;/p&gt;
&lt;p&gt;·       B、Linux商业数据库&lt;/p&gt;
&lt;p&gt;·       C、开源分布式数据库&lt;/p&gt;
&lt;p&gt;·       D、开源单数据库&lt;/p&gt;
&lt;p&gt;6、微服务框架&lt;/p&gt;
&lt;p&gt;·       A、dobbo/dobbox&lt;/p&gt;
&lt;p&gt;·       B、spring cloud&lt;/p&gt;
&lt;p&gt;·       C、都用&lt;/p&gt;
&lt;p&gt;·       D、其他&lt;/p&gt;
&lt;p&gt;7、开发&lt;/p&gt;
&lt;p&gt;·       A、完全敏捷&lt;/p&gt;
&lt;p&gt;·       B、部分敏捷&lt;/p&gt;
&lt;p&gt;·       C、传统方法&lt;/p&gt;
&lt;p&gt;8、自动化测试&lt;/p&gt;
&lt;p&gt;·       A、完整单元测试&lt;/p&gt;
&lt;p&gt;·       B、部分单元测试&lt;/p&gt;
&lt;p&gt;·       C、无单元测试&lt;/p&gt;
&lt;p&gt;9、部署策略&lt;/p&gt;
&lt;p&gt;·       A、灰度部署&lt;/p&gt;
&lt;p&gt;·       B、蓝绿部署&lt;/p&gt;
&lt;p&gt;·       C、AB部署&lt;/p&gt;
&lt;p&gt;·       D、直接替换&lt;/p&gt;
&lt;p&gt;10、部署工具&lt;/p&gt;
&lt;p&gt;·       A、SSH&lt;/p&gt;
&lt;p&gt;·       B、SALT&lt;/p&gt;
&lt;p&gt;·       C、容器编排工具&lt;/p&gt;
&lt;p&gt;·       D、其他&lt;/p&gt;
&lt;p&gt;11、回滚策略&lt;/p&gt;
&lt;p&gt;·       A、自动回滚&lt;/p&gt;
&lt;p&gt;·       B、手工回滚&lt;/p&gt;
&lt;p&gt;·       C、无回滚策略&lt;/p&gt;
&lt;p&gt;12、弹性部署&lt;/p&gt;
&lt;p&gt;·       A、自动扩容&lt;/p&gt;
&lt;p&gt;·       B、手工扩容&lt;/p&gt;
&lt;p&gt;·       C、无法扩容&lt;/p&gt;
&lt;p&gt;13、部署对象&lt;/p&gt;
&lt;p&gt;·       A、docker&lt;/p&gt;
&lt;p&gt;·       B、war&lt;/p&gt;
&lt;p&gt;·       C、其他&lt;/p&gt;
&lt;p&gt;14、部署方式&lt;/p&gt;
&lt;p&gt;·       A、虚拟化+docker&lt;/p&gt;
&lt;p&gt;·       B、虚拟化+war&lt;/p&gt;
&lt;p&gt;·       C、容器+docker&lt;/p&gt;
&lt;p&gt;15、部署数量&lt;/p&gt;
&lt;p&gt;·       A、1000+&lt;/p&gt;
&lt;p&gt;·       B、500~1000&lt;/p&gt;
&lt;p&gt;·       C、100~500&lt;/p&gt;
&lt;p&gt;·       D、100以下&lt;/p&gt;
&lt;p&gt;16、更新频率&lt;/p&gt;
&lt;p&gt;·       A、月更新&lt;/p&gt;
&lt;p&gt;·       B、周更新&lt;/p&gt;
&lt;p&gt;·       C、日更新&lt;/p&gt;
&lt;p&gt;·       D、每日多次&lt;/p&gt;
&lt;p&gt;17、更新方式&lt;/p&gt;
&lt;p&gt;·       A、全量更新&lt;/p&gt;
&lt;p&gt;·       B、局部更新&lt;/p&gt;
&lt;p&gt;18、部署工作量&lt;/p&gt;
&lt;p&gt;·       A、比以前复杂&lt;/p&gt;
&lt;p&gt;·       B、较以前简单&lt;/p&gt;
&lt;p&gt;·       C、非常简单&lt;/p&gt;
&lt;p&gt;·       D、几乎自动化&lt;/p&gt;
&lt;p&gt;19、最大障碍&lt;/p&gt;
&lt;p&gt;·       A、分析复杂&lt;/p&gt;
&lt;p&gt;·       B、技术复杂&lt;/p&gt;
&lt;p&gt;·       C、运维复杂&lt;/p&gt;
&lt;p&gt;·       D、成本提高&lt;/p&gt;
&lt;p&gt;·       E、其他&lt;/p&gt;
&lt;p&gt;20、综合效果&lt;/p&gt;
&lt;p&gt;·       A、不明显&lt;/p&gt;
&lt;p&gt;·       B、明显提高&lt;/p&gt;
&lt;p&gt;·       C、效果变差&lt;/p&gt;
&lt;p&gt;·       D、部分提高&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sat, 30 Mar 2019 19:43:07 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-30:/devops-questionnaire.html</guid><category>DevOps</category></item><item><title>苹果ATS合规对Web服务器的影响</title><link>https://www.EWhisper.cn/apple-ats-effect-on-web-server.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;一 前言&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#11-ats"&gt;1.1 ATS要求&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;二 检查项&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#21-apache"&gt;2.1 Apache 检查项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#22-nginx"&gt;2.2 NGINX检查项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#23-weblogic"&gt;2.3 WebLogic 检查项&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;三 修改配置项&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#31-apache"&gt;3.1 Apache 配置项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#32-nginx"&gt;3.2 NGINX 配置项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#33-weblogic"&gt;3.3 WebLogic 配置项&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;四 注意项&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;一 前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;这篇文章是在太平保险期间, 我和同时Huang Wentao一起收集资料并实验后协作完成的.&lt;/p&gt;
&lt;p&gt;本文写于2年前, 时至今日可能规范, 软件版本或配置项都发生变化. 如果要应用, 请应用前进行完善测试.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="11-ats"&gt;1.1 ATS要求&lt;a class="headerlink" href="#11-ats" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;协商的传输层安全（TLS）版本必须为TLS 1.2;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连接必须使用AES-128或AES-256对称密码，协商的秘钥交换协议必须是以下之一：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leaf server（设备服务器）证书必须使用以下类型的密钥之一签名&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rivest-Shamir-Adleman (RSA)秘钥，长度至少为2048位&lt;/li&gt;
&lt;li&gt;Elliptic-Curve Cryptography (ECC) 秘钥，长度至少为256位&lt;/li&gt;
&lt;li&gt;此外，leaf server证书散列算法必须是具有至少256（即SHA-256或更大）的摘要长度（有时称为“指纹”）的安全散列算法2（SHA-2）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_2"&gt;二 检查项&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="21-apache"&gt;2.1 Apache 检查项&lt;a class="headerlink" href="#21-apache" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;OpenSSL版本: 需要大于 &lt;a href="https://www.openssl.org/news/changelog.txt"&gt;1.0.1&lt;/a&gt; (OpenSSL从1.0.1以后开始支持TLS 1.2)&lt;/li&gt;
&lt;li&gt;当前加密套件使用的密钥交换协议.&lt;ol&gt;
&lt;li&gt;查看当前加密套件支持的协议. 要保证支持的协议中有以上ATS 中所要求的.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;当前密钥长度/指纹算法是否满足:&lt;ol&gt;
&lt;li&gt;如果是RSA密钥, 则至少要为2048位;&lt;/li&gt;
&lt;li&gt;如果是ECC密钥, 则至少为256位.&lt;/li&gt;
&lt;li&gt;指纹安全散列算法要为 SHA-2&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Apache版本:&lt;ol&gt;
&lt;li&gt;&lt;a href="http://svn.apache.org/repos/asf/httpd/httpd/branches/2.2.x/CHANGES"&gt;Apache 2.2.23&lt;/a&gt; 或&lt;a href="http://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x/CHANGES"&gt;2.4.0&lt;/a&gt; 以上版本都是支持的.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="22-nginx"&gt;2.2 NGINX检查项&lt;a class="headerlink" href="#22-nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;OpenSSL 版本: 需要大于1.0.1&lt;/li&gt;
&lt;li&gt;当前加密套件使用的密钥交换协议.&lt;ol&gt;
&lt;li&gt;查看当前加密套件支持的协议. 要保证支持的协议中有以上ATS 中所要求的.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;当前密钥长度/指纹算法是否满足:&lt;ol&gt;
&lt;li&gt;如果是RSA密钥, 则至少要为2048位;&lt;/li&gt;
&lt;li&gt;如果是ECC密钥, 则至少为256位.&lt;/li&gt;
&lt;li&gt;指纹安全散列算法要为 SHA-2&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;NGINX版本: 建议使用&lt;a href="http://nginx.org/en/CHANGES-1.12"&gt;1.1.13&lt;/a&gt;以上版本.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="23-weblogic"&gt;2.3 WebLogic 检查项&lt;a class="headerlink" href="#23-weblogic" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;JDK版本: 需要版本为JDK 7 以上.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_3"&gt;三 修改配置项&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;除了以上检查项中版本不符合的需要升级、证书的算法、秘钥长度需要达到要求外，还有其他配置项要进行配置.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="31-apache"&gt;3.1 Apache 配置项&lt;a class="headerlink" href="#31-apache" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;示例: Apache版本2.2.23(~~待确定~~)，OpenSSL版本1.0.1e. (最大兼容性配置)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="err"&gt;*:443&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
    SSLEngine on
    SSLCertificateFile      /path/to/signed_certificate
    SSLCertificateChainFile /path/to/intermediate_certificate
    SSLCertificateKeyFile   /path/to/private/key

    # Uncomment the following directive when using client certificate authentication
    #SSLCACertificateFile    /path/to/ca_certs_for_client_authentication


    # HSTS (mod_headers is required) (15768000 seconds = 6 months)
    Header always set Strict-Transport-Security &amp;quot;max-age=15768000&amp;quot;
    ...
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;

# old configuration, tweak to your needs
SSLProtocol             all -SSLv2
SSLCipherSuite          ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:DES-CBC3-SHA:HIGH:SEED:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!RSAPSK:!aDH:!aECDH:!EDH-DSS-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!SRP
SSLHonorCipherOrder     on
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="32-nginx"&gt;3.2 NGINX 配置项&lt;a class="headerlink" href="#32-nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;举例：Nginx版本1.11.0，OpenSSL版本1.0.1e (最大兼容性配置)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="s"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="s"&gt;[::]:80&lt;/span&gt; &lt;span class="s"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.&lt;/span&gt;
    &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt; &lt;span class="s"&gt;https://&lt;/span&gt;&lt;span class="nv"&gt;$host$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;443&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt; &lt;span class="s"&gt;http2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="s"&gt;[::]:443&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt; &lt;span class="s"&gt;http2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# certs sent to the client in SERVER HELLO are concatenated in ssl_certificate&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_certificate&lt;/span&gt; &lt;span class="s"&gt;/path/to/signed_cert_plus_intermediates&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_certificate_key&lt;/span&gt; &lt;span class="s"&gt;/path/to/private_key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_session_timeout&lt;/span&gt; &lt;span class="s"&gt;1d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_session_cache&lt;/span&gt; &lt;span class="s"&gt;shared:SSL:50m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_session_tickets&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_dhparam&lt;/span&gt; &lt;span class="s"&gt;/path/to/dhparam.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# old configuration. tweak to your needs.&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_protocols&lt;/span&gt; &lt;span class="s"&gt;SSLv3&lt;/span&gt; &lt;span class="s"&gt;TLSv1&lt;/span&gt; &lt;span class="s"&gt;TLSv1.1&lt;/span&gt; &lt;span class="s"&gt;TLSv1.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_ciphers&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:DES-CBC3-SHA:HIGH:SEED:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!RSAPSK:!aDH:!aECDH:!EDH-DSS-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!SRP&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)&lt;/span&gt;
    &lt;span class="kn"&gt;add_header&lt;/span&gt; &lt;span class="s"&gt;Strict-Transport-Security&lt;/span&gt; &lt;span class="s"&gt;max-age=15768000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# OCSP Stapling ---&lt;/span&gt;
    &lt;span class="c1"&gt;# fetch OCSP records from URL in ssl_certificate and cache them&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_stapling&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_stapling_verify&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;## verify chain of trust of OCSP response using Root CA and Intermediate certs&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_trusted_certificate&lt;/span&gt; &lt;span class="s"&gt;/path/to/root_CA_cert_plus_intermediates&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;resolver&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;IP&lt;/span&gt; &lt;span class="s"&gt;DNS&lt;/span&gt; &lt;span class="s"&gt;resolver&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;....&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="33-weblogic"&gt;3.3 WebLogic 配置项&lt;a class="headerlink" href="#33-weblogic" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;需要在Oracle官网下载java 7相关的policyfile&lt;br&gt;
解压后，替换&lt;code&gt;JAVA_HOME/jre/lib/security&lt;/code&gt;下的&lt;code&gt;local_policy.jar&lt;/code&gt;、&lt;code&gt;US_export_policy.jar&lt;/code&gt;文件。&lt;/p&gt;
&lt;h2 id="_4"&gt;四 注意项&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;升级OpenSSL，可能会影响sftp、ssh等和ssl有关的协议，需谨慎操作。&lt;/li&gt;
&lt;li&gt;考虑到旧的ssl版本漏洞，以及兼容性，建议都要禁用掉ssl V2及以下版本协议。(最新的建议是SSL v3也禁用)&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sat, 30 Mar 2019 19:37:41 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-30:/apple-ats-effect-on-web-server.html</guid><category>ATS</category><category>apple</category><category>ssl</category><category>nginx</category><category>apache</category><category>tls</category><category>openssl</category></item><item><title>使用 Ansible 批量管理 Windows</title><link>https://www.EWhisper.cn/use-ansible-manage-multi-windows.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;安装指南&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;服务器端的要求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ansible"&gt;服务器端安装Ansible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#windows"&gt;Windows 指南&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#windows_1"&gt;设置Windows主机&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ansiblewindows"&gt;Ansible服务器端配置并管理Windows&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ping-windows"&gt;ping 远程windows主机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;创建目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;下发文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;删除文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;删除目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cmd"&gt;执行cmd命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#windows_2"&gt;重启windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;创建用户&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#windows_3"&gt;windows服务管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ansible是自动化运维工具，基于Python开发，实现了批量系统配置、批量程序部署、批量运行命令等功能。Ansible是基于模块(module)和剧本(playbook)工作。&lt;/p&gt;
&lt;h2 id="_2"&gt;安装指南&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本次在Ubuntu上安装Ansible 2.7 . 更详细安装方式参见: &lt;a href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html"&gt;Ansible 安装指南&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_3"&gt;服务器端的要求&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;目前Ansible可以从安装了Python 2（2.7版）或Python 3（3.5及更高版本）的任何机器上运行。控制计算机&lt;strong&gt;不支持Windows&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这包括Red Hat，Debian，CentOS，macOS，任何BSD等等。&lt;/p&gt;
&lt;h3 id="ansible"&gt;服务器端安装Ansible&lt;a class="headerlink" href="#ansible" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;通过Apt (Ubuntu)安装最新版本&lt;/h4&gt;
&lt;p&gt;这里有&lt;a href="https://launchpad.net/~ansible/+archive/ubuntu/ansible"&gt;一个PPA&lt;/a&gt;版本的Ubuntu源。&lt;/p&gt;
&lt;p&gt;要在您的计算机上配置PPA并安装ansible，请运行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
sudo apt-get install software-properties-common
sudo apt-add-repository --yes --update ppa:ansible/ansible
sudo apt-get install ansible
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;注意:&lt;/p&gt;
&lt;p&gt;在较旧的Ubuntu发行版中，“software-properties-common”被称为“python-software-properties”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="windows"&gt;Windows 指南&lt;a class="headerlink" href="#windows" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="windows_1"&gt;设置Windows主机&lt;a class="headerlink" href="#windows_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;主机要求&lt;/h4&gt;
&lt;p&gt;要使Ansible与Windows主机通信并使用Windows模块，Windows主机必须满足以下要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ansible支持的Windows版本通常与Microsoft当前和扩展支持下的版本相匹配。支持的桌面操作系统包括&lt;strong&gt;Windows 7,8.1和10&lt;/strong&gt;，受支持的服务器操作系统包括&lt;strong&gt;Windows Server 2008,2008 R2,2012,2012 R2和2016&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;Ansible需要&lt;strong&gt;PowerShell 3.0&lt;/strong&gt;或更高版本，并且至少要在Windows主机上安装&lt;strong&gt;.NET 4.0&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;应创建并激活&lt;strong&gt;WinRM listener &lt;/strong&gt;。更多细节可以在下面找到。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;注意:&lt;/p&gt;
&lt;p&gt;虽然这些是Ansible连接的基本要求，但是一些Ansible模块还有其他要求，例如较新的OS或PowerShell版本。请参阅模块的文档页面以确定主机是否满足这些要求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;升级PowerShell和.NET框架&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;升级powershell需要&lt;strong&gt;重启服务器&lt;/strong&gt;才能生效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ansible需要PowerShell 3.0版和.NET Framework 4.0或更高版本才能在较旧的操作系统（如Server 2008和Windows 7）上运行。基本OS镜像不符合此要求。您可以使用&lt;a href="https://github.com/jborean93/ansible-windows/blob/master/scripts/Upgrade-PowerShell.ps1"&gt;Upgrade-PowerShell.ps1&lt;/a&gt;脚本来更新这些脚本。&lt;/p&gt;
&lt;p&gt;这是如何从PowerShell运行此脚本的示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://raw.githubusercontent.com/jborean93/ansible-windows/master/scripts/Upgrade-PowerShell.ps1&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$env:temp\Upgrade-PowerShell.ps1&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Administrator&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Password&amp;quot;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;New-Object&lt;/span&gt; &lt;span class="n"&gt;-TypeName&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WebClient&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;DownloadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;Set-ExecutionPolicy&lt;/span&gt; &lt;span class="n"&gt;-ExecutionPolicy&lt;/span&gt; &lt;span class="n"&gt;Unrestricted&lt;/span&gt; &lt;span class="n"&gt;-Force&lt;/span&gt;

&lt;span class="c"&gt;# version can be 3.0, 4.0 or 5.1&lt;/span&gt;
&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="n"&gt;-Version&lt;/span&gt; &lt;span class="n"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt; &lt;span class="n"&gt;-Username&lt;/span&gt; &lt;span class="nv"&gt;$username&lt;/span&gt; &lt;span class="n"&gt;-Password&lt;/span&gt; &lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="n"&gt;-Verbose&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成后，您将需要删除自动登录并将执行策略设置回默认值&lt;code&gt;Restricted&lt;/code&gt;。您可以使用以下PowerShell命令执行此操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# this isn&amp;#39;t needed but is a good security practice to complete&lt;/span&gt;
&lt;span class="nb"&gt;Set-ExecutionPolicy&lt;/span&gt; &lt;span class="n"&gt;-ExecutionPolicy&lt;/span&gt; &lt;span class="n"&gt;Restricted&lt;/span&gt; &lt;span class="n"&gt;-Force&lt;/span&gt;

&lt;span class="nv"&gt;$reg_winlogon_path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;Set-ItemProperty&lt;/span&gt; &lt;span class="n"&gt;-Path&lt;/span&gt; &lt;span class="nv"&gt;$reg_winlogon_path&lt;/span&gt; &lt;span class="n"&gt;-Name&lt;/span&gt; &lt;span class="n"&gt;AutoAdminLogon&lt;/span&gt; &lt;span class="n"&gt;-Value&lt;/span&gt; &lt;span class="n"&gt;0&lt;/span&gt;
&lt;span class="nb"&gt;Remove-ItemProperty&lt;/span&gt; &lt;span class="n"&gt;-Path&lt;/span&gt; &lt;span class="nv"&gt;$reg_winlogon_path&lt;/span&gt; &lt;span class="n"&gt;-Name&lt;/span&gt; &lt;span class="n"&gt;DefaultUserName&lt;/span&gt; &lt;span class="n"&gt;-ErrorAction&lt;/span&gt; &lt;span class="n"&gt;SilentlyContinue&lt;/span&gt;
&lt;span class="nb"&gt;Remove-ItemProperty&lt;/span&gt; &lt;span class="n"&gt;-Path&lt;/span&gt; &lt;span class="nv"&gt;$reg_winlogon_path&lt;/span&gt; &lt;span class="n"&gt;-Name&lt;/span&gt; &lt;span class="n"&gt;DefaultPassword&lt;/span&gt; &lt;span class="n"&gt;-ErrorAction&lt;/span&gt; &lt;span class="n"&gt;SilentlyContinue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该脚本的工作原理是检查需要安装哪些程序（例如.NET Framework 4.5.2）以及需要什么样的PowerShell版本。如果&lt;strong&gt;需要重新启动&lt;/strong&gt;并且设置了&lt;code&gt;username&lt;/code&gt;和&lt;code&gt;password&lt;/code&gt;参数，则脚本将在重新启动时自动重新启动并登录。该脚本将继续，直到不再需要执行任何操作且PowerShell版本与目标版本匹配为止。如果未设置&lt;code&gt;username&lt;/code&gt;和 &lt;code&gt;password&lt;/code&gt;参数，脚本将提示用户手动重新引导并在需要时登录。当用户下次登录时，脚本将从停止的位置继续，并且该过程将继续，直到不再需要其他操作为止。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;注意:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在Server 2008上运行，则必须安装SP2。如果在Server 2008 R2或Windows 7上运行，则必须安装SP1。&lt;/li&gt;
&lt;li&gt;Windows Server 2008只能安装PowerShell 3.0; 指定较新的版本将导致脚本失败。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt;和&lt;code&gt;password&lt;/code&gt;参数都是存储在注册表中的纯文本。确保在脚本完成后运行清理命令，以确保主机上仍未存储凭据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4&gt;WinRM内存补丁&lt;/h4&gt;
&lt;p&gt;在PowerShell v3.0上运行时，WinRM服务存在一个错误，它限制了WinRM可用的内存量。如果未安装此补丁，Ansible将无法在Windows主机上执行某些命令。这些补丁应作为系统引导或映像过程的一部分安装。&lt;a href="https://github.com/jborean93/ansible-windows/blob/master/scripts/Install-WMF3Hotfix.ps1"&gt;Install-WMF3Hotfix.ps1&lt;/a&gt;脚本可用于在受影响的主机上安装此修补程序。&lt;/p&gt;
&lt;p&gt;以下PowerShell命令将安装此修补程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://raw.githubusercontent.com/jborean93/ansible-windows/master/scripts/Install-WMF3Hotfix.ps1&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$env:temp\Install-WMF3Hotfix.ps1&amp;quot;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;New-Object&lt;/span&gt; &lt;span class="n"&gt;-TypeName&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WebClient&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;DownloadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;powershell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="n"&gt;-ExecutionPolicy&lt;/span&gt; &lt;span class="n"&gt;ByPass&lt;/span&gt; &lt;span class="o"&gt;-File&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="n"&gt;-Verbose&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;WinRM设置&lt;/h4&gt;
&lt;p&gt;一旦Powershell升级到至少3.0版本，最后一步是配置WinRM服务，以便Ansible可以连接到它。WinRM服务有两个主要组件，用于管理Ansible如何与Windows主机连接：&lt;code&gt;listener&lt;/code&gt;和&lt;code&gt;service&lt;/code&gt;配置设置。&lt;/p&gt;
&lt;p&gt;可以在下面阅读有关每个组件的详细信息，也可以使用脚本&lt;a href="https://github.com/ansible/ansible/blob/devel/examples/scripts/ConfigureRemotingForAnsible.ps1"&gt;ConfigureRemotingForAnsible.ps1&lt;/a&gt;来进行基本设置。此脚本使用自签名证书设置HTTP和HTTPS侦听器，并在服务上启用&lt;code&gt;Basic&lt;/code&gt; 身份验证选项。&lt;/p&gt;
&lt;p&gt;要使用此脚本，请在PowerShell中运行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$env:temp\ConfigureRemotingForAnsible.ps1&amp;quot;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;New-Object&lt;/span&gt; &lt;span class="n"&gt;-TypeName&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WebClient&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;DownloadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;powershell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="n"&gt;-ExecutionPolicy&lt;/span&gt; &lt;span class="n"&gt;ByPass&lt;/span&gt; &lt;span class="o"&gt;-File&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;注意:&lt;/p&gt;
&lt;p&gt;ConfigureRemotingForAnsible.ps1脚本仅用于培训和开发目的，不应在生产环境中使用，因为它启用了&lt;code&gt;Basic&lt;/code&gt; 这本质上不安全（如身份验证）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;WinRM Listener&lt;/h4&gt;
&lt;p&gt;WinRM服务侦听一个或多个端口上的请求。每个端口都必须创建并配置一个侦听器。&lt;/p&gt;
&lt;p&gt;要查看在WinRM服务上运行的当前侦听器，请运行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;winrm&lt;/span&gt; &lt;span class="n"&gt;quickconfig&lt;/span&gt;
&lt;span class="n"&gt;winrm&lt;/span&gt; &lt;span class="n"&gt;enumerate&lt;/span&gt; &lt;span class="n"&gt;winrm&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Listener&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行后输出如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Listener&lt;/span&gt;
    &lt;span class="n"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;
    &lt;span class="n"&gt;Transport&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTP&lt;/span&gt;
    &lt;span class="n"&gt;Port&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;5985&lt;/span&gt;
    &lt;span class="n"&gt;Hostname&lt;/span&gt;
    &lt;span class="n"&gt;Enabled&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;URLPrefix&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wsman&lt;/span&gt;
    &lt;span class="n"&gt;CertificateThumbprint&lt;/span&gt;
    &lt;span class="n"&gt;ListeningOn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;127&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;192&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;168&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;56&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;155&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;5efe&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;15&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;5efe&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;192&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;168&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;56&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;155&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
&lt;span class="n"&gt;ffff&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ffff&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fffe&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;203d&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;7d97&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;c2ed&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ec78&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;e8ea&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;d765&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;2c69&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;7756&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;7&lt;/span&gt;

&lt;span class="n"&gt;Listener&lt;/span&gt;
    &lt;span class="n"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;
    &lt;span class="n"&gt;Transport&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPS&lt;/span&gt;
    &lt;span class="n"&gt;Port&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;5986&lt;/span&gt;
    &lt;span class="n"&gt;Hostname&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SERVER2016&lt;/span&gt;
    &lt;span class="n"&gt;Enabled&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;URLPrefix&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wsman&lt;/span&gt;
    &lt;span class="n"&gt;CertificateThumbprint&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;E6CDAA82EEAF2ECE8546E05DB7F3E01AA47D76CE&lt;/span&gt;
    &lt;span class="n"&gt;ListeningOn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;127&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;192&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;168&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;56&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;155&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;5efe&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;15&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;5efe&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;192&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;168&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;56&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;155&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
&lt;span class="n"&gt;ffff&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ffff&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fffe&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;203d&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;7d97&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;c2ed&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ec78&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fe80&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;e8ea&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;d765&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;2c69&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;7756&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改winrm配置，启用远程连接认证&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;winrm&lt;/span&gt; &lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="n"&gt;winrm&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@{Basic=&amp;quot;true&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;winrm&lt;/span&gt; &lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="n"&gt;winrm&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@{AllowUnencrypted=&amp;quot;true&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;windows 防火墙配置&lt;/h4&gt;
&lt;p&gt;配置防火墙:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加防火墙信任规则，允许5985-5986端口通过&lt;/li&gt;
&lt;li&gt;打开防火墙高级配置，选择&lt;strong&gt;入站规则&lt;/strong&gt;，在点击新建规则&lt;/li&gt;
&lt;li&gt;填写一下信息&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;TCP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;信任端口&lt;strong&gt;5985-5986&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;填写新建规则名称&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="ansiblewindows"&gt;Ansible服务器端配置并管理Windows&lt;a class="headerlink" href="#ansiblewindows" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;添加windows客户端连接信息: 编辑&lt;code&gt;/etc/ansible/hosts&lt;/code&gt;, 添加客户端主机信息(ansible服务端的配置)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[windows]&lt;/span&gt;

&lt;span class="na"&gt;192.168.2.2 ansible_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Administrator&amp;quot; ansible_password=&amp;quot;Password&amp;quot; ansible_port=5986 ansible_connection=&amp;quot;winrm&amp;quot; ansible_winrm_server_cert_validation=ignore ansible_winrm_transport=basic&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="ping-windows"&gt;ping 远程windows主机&lt;a class="headerlink" href="#ping-windows" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ansible &lt;span class="m"&gt;192&lt;/span&gt;.168.2.2 -m win_ping
&lt;span class="m"&gt;192&lt;/span&gt;.168.2.2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false,
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_4"&gt;创建目录&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ansible &lt;span class="m"&gt;192&lt;/span&gt;.168.2.2 -m win_file -a &lt;span class="s1"&gt;&amp;#39;path=D:\\test state=directory&amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;192&lt;/span&gt;.168.2.2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;CHANGED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_5"&gt;下发文件&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ansible &lt;span class="m"&gt;192&lt;/span&gt;.168.2.2 -m win_copy -a &lt;span class="s1"&gt;&amp;#39;src=/etc/hosts dest=D:\\hosts.txt&amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;192&lt;/span&gt;.168.2.2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;CHANGED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: true,
    &lt;span class="s2"&gt;&amp;quot;checksum&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;f6d471689e1233342a8e43a130ff40a6ea0b9f51&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;dest&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;D:\\hosts.txt&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;operation&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;file_copy&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;original_basename&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;hosts&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;635&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;/etc/hosts&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_6"&gt;删除文件&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ansible 192.168.2.2 -m win_file -a &amp;#39;dest=d:\\config_dir\\hosts.txt state=absent&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_7"&gt;删除目录&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ansible 192.168.2.2 -m win_file -a &amp;#39;dest=d:\\config_dir2 state=absent&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="cmd"&gt;执行cmd命令&lt;a class="headerlink" href="#cmd" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ansible 192.168.2.2 -m win_shell -a &amp;#39;ipconfig&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="windows_2"&gt;重启windows&lt;a class="headerlink" href="#windows_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ansible 192.168.2.2 -m win_reboot&lt;/span&gt;
&lt;span class="c1"&gt;# ansible 192.168.2.2 -m win_shell -a &amp;#39;shutdown -r -t 0&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_8"&gt;创建用户&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;远程在windows客户端上创建用户&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ansible 192.168.2.2 -m win_user -a &amp;quot;name=testuser1 passwd=123456&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="windows_3"&gt;windows服务管理&lt;a class="headerlink" href="#windows_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ansible 192.168.2.2 -m win_shell -a “net stop|start zabbix_agent”&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt;说明:&lt;/p&gt;
&lt;p&gt;完整的windows module见: &lt;a href="https://docs.ansible.com/ansible/latest/modules/list_of_windows_modules.html"&gt;Windows modules&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sat, 30 Mar 2019 19:37:41 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-30:/use-ansible-manage-multi-windows.html</guid><category>ansible</category><category>windows</category><category>devops</category></item><item><title>HTTPS基础原理和配置 - 加密协议SSL和TLS</title><link>https://www.EWhisper.cn/https-101-chapter-1.html</link><description>&lt;blockquote&gt;
&lt;p&gt;近期又碰到了SSL相关的事情, 就心血来潮开个新专题 - 《HTTPS基础原理和配置》&lt;/p&gt;
&lt;p&gt;本文是第一篇文章， 主要介绍SSL TLS加密协议的相关内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_1"&gt;加密协议历史概要&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;SSL TLS加密协议其实并没有很长的历史，1995年&lt;strong&gt;网景&lt;/strong&gt;发布了SSL v2.0，这也是web加密的开始。这使得电子商务领域，人们可以在线提交密码和信用卡，并且至少是相当安全的。&lt;/p&gt;
&lt;p&gt;SSLv3.0很快发布，这版被保罗·柯克（Paul Coker）及其他人完全重写。这是一个非常坚实的协议。事实上，IETF采用SSL v3.0，并使它成为并不是网景独有的协议，叫做TLS（Transport Layer Security）。SSL意思是安全套接字层，但现在叫传输层安全。&lt;/p&gt;
&lt;p&gt;所以，TLS v1.0几乎和SSL v3.0 一模一样，只是进行了一两个小优化，并且IAF使之标准化。如果你深究这些协议，TLS v1.0实际上就是SSL v3.1；所以你可以认为他们是连续的。&lt;/p&gt;
&lt;p&gt;但是最终IETF提出了新版本v1.1（一些小优化），然后是v1.2，引入了一些新的加密算法。但是看到这你可能会想“好吧，有些客户端支持这些，有些客户端支持更新的，这取决于它们发布的时间. 安全性上可能差不太多". 但实际在安全意义上，这些中的大多数已经以被破解了。&lt;/p&gt;
&lt;h3 id="_2"&gt;关键历史节点&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SSL v2.0 1995年 网景 发布&lt;/li&gt;
&lt;li&gt;SSL v3.0 1996年发布 修复v2的主要问题&lt;/li&gt;
&lt;li&gt;TLS v1.0 1999年 IETF发布；对SSLv3小优化&lt;/li&gt;
&lt;li&gt;TLS v1.1 2006年 发布 小优化&lt;/li&gt;
&lt;li&gt;TLS v1.2 2008年发布 改进hash和AEAD模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;&lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f602.png" title=":joy:" width="20px"&gt;被破解历史概要&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先是SSL v2.0, 设计之初就被破解&lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f602.png" title=":joy:" width="20px"&gt;&lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f602.png" title=":joy:" width="20px"&gt;&lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f602.png" title=":joy:" width="20px"&gt;, 所以，ssl v2.0确实不推荐使用；已经被破解很长很长时间了，不安全。 我们经常听到的支持的SSL版本一般也是从SSL v3.0开始的.&lt;/p&gt;
&lt;p&gt;SSL v3.0呢, 之前一直在用，直到2014年11月被破解。&lt;/p&gt;
&lt;p&gt;TLS呢, v1.0和v1.1基本安全。&lt;/p&gt;
&lt;p&gt;最新的v1.2(其实现在已经不算最新的了, TLS v1.3已经出来了, 但是目前主流的最新协议还是1.2), 是唯一一个还没有针对性攻击的版本(PS: 当然, 近期也有针对TLS v1.2的漏洞爆出, 但还算OK)。&lt;/p&gt;
&lt;p&gt;TLS有一个混乱的历史，并没有真正最好的安全记录，但TLS v1.2一直还是最好的，当涉及到与浏览器和服务的交互，它内置在几乎一切的浏览器和服务器中(最新的)。&lt;/p&gt;
&lt;p&gt;所以，TLS v1.2是大势所趋, 如果涉及到关键业务数据交互, 如&lt;strong&gt;用户关键信息&lt;/strong&gt; &lt;strong&gt;支付&lt;/strong&gt; &lt;strong&gt;金融&lt;/strong&gt;等场景, TLS v1.2才能真正有保障, 而其他老的加密协议, 都已经被破解了, 黑客想拿到你的数据(如果你用老的加密协议)只是时间问题, 并不存在技术上的难点。所以评估ATS(苹果的安全相关要求)合规也要求该版本。&lt;/p&gt;
&lt;h3 id="_4"&gt;&lt;img align="absmiddle" alt="😂" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f602.png" title=":joy:" width="20px"&gt;被破解关键历史节点&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;SSL v2.0 1995发布 - 设计之初被破解&lt;/li&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;SSL v3.0 1996发布 – 被POODLE破解（2014 .11）&lt;/li&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;TSL v1.0 1999发布 – BEAST(2011)和Lucky 13(2013)发现漏洞&lt;/li&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;T​LS v1.1 2006发布 – 被Lucky 13(2013)和RC4(2013,2015)发现漏洞&lt;/li&gt;
&lt;li&gt;TLS v1.2 2008发布 – 只有在AEAD模式下是安全的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;客户端兼容性&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 注意:&lt;/p&gt;
&lt;p&gt;如果有条件, 强烈建议&lt;strong&gt;只选择 TLS v1.2&lt;/strong&gt;版本. (对于传统企业, 真的挺难做到的)​&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据以上的内容来看, 那我只选择TLS v1.2协议好了, 但实际情况是, TLS v1.2 是&lt;strong&gt;2008&lt;/strong&gt;年才发布的(标注发布), 而真正要落到实处所需要的时间更长. 所以很多客户端并不支持TLS v1.2. &lt;/p&gt;
&lt;p&gt;这些客户端, 是&lt;strong&gt;广义&lt;/strong&gt;的客户端, 包括: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作系统&lt;/li&gt;
&lt;li&gt;浏览器&lt;/li&gt;
&lt;li&gt;手机&lt;/li&gt;
&lt;li&gt;胖客户端(如Java客户端)&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，如果你计划服务器只选择1.2版本，你就可能失去了很多潜在客户(还在用旧的客户端的客户, 当然, 说不定用着旧电脑的员工也被拒之门外了...)。这并不是最好的举动，除非对绝对安全非常敏感。否则的话, 还是建议支持更多的安全协议让更多的客户可以兼容. 是吧? 毕竟比起http这种裸奔, 其他旧的协议好歹还是穿着衣服的.&lt;img align="absmiddle" alt="😏" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f60f.png" title=":smirk:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;但是, 另一些大平台, 已经开始倾向于v1.2。比如ios之前的&lt;a href="https://developer.apple.com/news/?id=12212016b&amp;amp;1482372961"&gt;ATS合规要求&lt;/a&gt;, 比如&lt;a href="https://www.microsoft.com/security/blog/2017/06/20/tls-1-2-support-at-microsoft/"&gt;微软建议你放弃TLS v1.0和 TLS v1.1的支持&lt;/a&gt;。因此，行业正在朝着标准迈进。&lt;/p&gt;
&lt;h3 id="tls-v12"&gt;支持TLS v1.2客户端列表&lt;a class="headerlink" href="#tls-v12" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows 8 以上 (Windows Server 2008以上 - 2017年下半年才支持) (&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; win7不支持! 更别提win xp了)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://access.redhat.com/blogs/766093/posts/1976123"&gt;RHEL 或 CentOS ≥ 6.5&lt;/a&gt; (&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;用CentOS 5.X的注意了啊, 不支持TLS v1.2 ​)&lt;/li&gt;
&lt;li&gt;Chrome ≥ 30&lt;/li&gt;
&lt;li&gt;安卓 ≥ 5.0&lt;/li&gt;
&lt;li&gt;火狐浏览器 ≥ 27&lt;/li&gt;
&lt;li&gt;IE/Edge ≥ 11 (&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;主流的IE8 9 10都不支持!)&lt;/li&gt;
&lt;li&gt;iOS ≥ 5&lt;ul&gt;
&lt;li&gt;注意：iOS 9应用需要TLS 1.2支持。(ATS合规要求, 当时后来好像很难推下去)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tls-10"&gt;支持TLS 1.0 客户端列表&lt;a class="headerlink" href="#tls-10" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TLS 1.0 （真正安全的最老版本）几乎都支持（除了win xp sp2)。&lt;/p&gt;
&lt;p&gt;&lt;img alt="win xp sp2" src="./images/winxpsp2.png"&gt;&lt;/p&gt;
&lt;h2 id="_6"&gt;配置建议&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;再次推荐&lt;a href="https://www.ssllabs.com/"&gt;SSL Labs&lt;/a&gt;, 打分如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="SSL Labs打分示例" src="./images/ssl-labs-example.png"&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_7"&gt;高安全性 低兼容性&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SSLProtocol             all -SSLv3 -TLSv1 -TLSv1.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只支持TLS v1.2.&lt;/strong&gt; 当你配置加密协议时，如果只选择TLS&lt;br&gt;
1.2,得分会是&lt;strong&gt;A&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id="_8"&gt;中安全性 高兼容性&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SSLProtocol             all -SSLv3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;只支持&lt;strong&gt;TLS&lt;/strong&gt;协议, 得分也会是&lt;strong&gt;A&lt;/strong&gt;. (之前的, 近期不确定, 感兴趣的可以测一下).&lt;/p&gt;
&lt;h3 id="_9"&gt;低安全性 最大兼容性&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SSLProtocol             all&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果使用SSLv3.0，有风险，得C。&lt;/p&gt;
&lt;h2 id="_10"&gt;总结&lt;a class="headerlink" href="#_10" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;选择加密协议, 要根据具体的需求, 有侧重, 也要做到安全性和兼容性的兼顾.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我之前有个相关的PPT, 感兴趣的话后续发上来.&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sat, 30 Mar 2019 00:08:23 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-30:/https-101-chapter-1.html</guid><category>linux</category><category>openssl</category><category>ssl</category><category>nginx</category><category>centos</category></item><item><title>CentOS 7.5 安装X11桌面和中文支持</title><link>https://www.EWhisper.cn/centos-7-install-x11-desktop-and-chinese-support.html</link><description>&lt;h1 id="_1"&gt;概述&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;通过在CentOS 7.5 上安装X11桌面环境和中文语言、字体、输入法来将云服务器打造成 Python 集成开发环境。&lt;/p&gt;
&lt;p&gt;需要安装的软件或软件包有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;X Window System&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Fonts&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;input-methods&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="x11"&gt;安装 X11 桌面系统&lt;a class="headerlink" href="#x11" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;软件包组: X Window System 包含的信息如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum group info &lt;span class="s2"&gt;&amp;quot;X Window System&amp;quot;&lt;/span&gt;
Loaded plugins: fastestmirror, langpacks
Loading mirror speeds from cached hostfile

Group: X Window System
 Group-Id: x11
 Description: X Window System Support.
 Mandatory Packages:
   &lt;span class="o"&gt;=&lt;/span&gt;glx-utils
   &lt;span class="o"&gt;=&lt;/span&gt;initial-setup-gui
   &lt;span class="o"&gt;=&lt;/span&gt;mesa-dri-drivers
   &lt;span class="o"&gt;=&lt;/span&gt;plymouth-system-theme
   &lt;span class="o"&gt;=&lt;/span&gt;spice-vdagent
   &lt;span class="o"&gt;=&lt;/span&gt;xorg-x11-drivers
   &lt;span class="o"&gt;=&lt;/span&gt;xorg-x11-server-Xorg
   &lt;span class="o"&gt;=&lt;/span&gt;xorg-x11-utils
   &lt;span class="o"&gt;=&lt;/span&gt;xorg-x11-xauth
   &lt;span class="o"&gt;=&lt;/span&gt;xorg-x11-xinit
   &lt;span class="o"&gt;=&lt;/span&gt;xvattr
 Optional Packages:
   mesa-libGLES
   tigervnc-server
   wayland-protocols-devel
   xorg-x11-drv-keyboard
   xorg-x11-drv-libinput
   xorg-x11-drv-mouse
   xorg-x11-drv-openchrome
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum group install -y &lt;span class="s2"&gt;&amp;quot;X Window System&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_2"&gt;安装字体&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;软件包组: "Fonts"包含以下包:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum group info &lt;span class="s2"&gt;&amp;quot;Fonts&amp;quot;&lt;/span&gt;
Loaded plugins: fastestmirror, langpacks
Loading mirror speeds from cached hostfile

Group: Fonts
 Group-Id: fonts
 Description: Fonts &lt;span class="k"&gt;for&lt;/span&gt; rendering text in a variety of languages and scripts.
 Default Packages:
   &lt;span class="o"&gt;=&lt;/span&gt;cjkuni-uming-fonts
    dejavu-sans-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;dejavu-sans-mono-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;dejavu-serif-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;gnu-free-mono-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;gnu-free-sans-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;gnu-free-serif-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;google-crosextra-caladea-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;google-crosextra-carlito-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;google-noto-emoji-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;jomolhari-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;khmeros-base-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;liberation-mono-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;liberation-sans-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;liberation-serif-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lklug-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-assamese-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-bengali-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-devanagari-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-gujarati-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-kannada-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-malayalam-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-marathi-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-nepali-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-oriya-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-punjabi-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-tamil-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;lohit-telugu-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;madan-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;nhn-nanum-gothic-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;open-sans-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;overpass-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;paktype-naskh-basic-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;paratype-pt-sans-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;sil-abyssinica-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;sil-nuosu-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;sil-padauk-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;smc-meera-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;stix-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;thai-scalable-waree-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;ucs-miscfixed-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;vlgothic-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;wqy-microhei-fonts
   &lt;span class="o"&gt;=&lt;/span&gt;wqy-zenhei-fonts
 Optional Packages:
   aajohan-comfortaa-fonts
   bitmap-fixed-fonts
   bitmap-lucida-typewriter-fonts
   bpg-chveulebrivi-fonts
   bpg-courier-fonts
   bpg-glaho-fonts
   cjkuni-ukai-fonts
   comic-neue-fonts
   culmus-aharoni-clm-fonts
   culmus-caladings-clm-fonts
   culmus-david-clm-fonts
   culmus-drugulin-clm-fonts
   culmus-ellinia-clm-fonts
   culmus-frank-ruehl-clm-fonts
   culmus-hadasim-clm-fonts
   culmus-keteryg-fonts
   culmus-miriam-clm-fonts
   culmus-miriam-mono-clm-fonts
   culmus-nachlieli-clm-fonts
   culmus-simple-clm-fonts
   culmus-stamashkenaz-clm-fonts
   culmus-stamsefarad-clm-fonts
   culmus-yehuda-clm-fonts
   freefont
   ghostscript-chinese
   google-noto-sans-armenian-fonts
   google-noto-sans-devanagari-fonts
   google-noto-sans-devanagari-ui-fonts
   google-noto-sans-ethiopic-fonts
   google-noto-sans-fonts
   google-noto-sans-georgian-fonts
   google-noto-sans-hebrew-fonts
   google-noto-sans-khmer-fonts
   google-noto-sans-khmer-ui-fonts
   google-noto-sans-lao-fonts
   google-noto-sans-lao-ui-fonts
   google-noto-sans-tamil-fonts
   google-noto-sans-tamil-ui-fonts
   google-noto-sans-thai-fonts
   google-noto-sans-thai-ui-fonts
   google-noto-sans-ui-fonts
   google-noto-serif-armenian-fonts
   google-noto-serif-fonts
   google-noto-serif-georgian-fonts
   google-noto-serif-lao-fonts
   google-noto-serif-thai-fonts
   gubbi-fonts
   horai-ume-gothic-fonts
   horai-ume-mincho-fonts
   horai-ume-pgothic-fonts
   horai-ume-pmincho-fonts
   horai-ume-uigothic-fonts
   ipa-gothic-fonts
   ipa-mincho-fonts
   ipa-pgothic-fonts
   ipa-pmincho-fonts
   kacst-art-fonts
   kacst-book-fonts
   kacst-decorative-fonts
   kacst-digital-fonts
   kacst-farsi-fonts
   kacst-letter-fonts
   kacst-naskh-fonts
   kacst-office-fonts
   kacst-one-fonts
   kacst-pen-fonts
   kacst-poster-fonts
   kacst-qurn-fonts
   kacst-screen-fonts
   kacst-title-fonts
   kacst-titlel-fonts
   khmeros-battambang-fonts
   khmeros-bokor-fonts
   khmeros-handwritten-fonts
   khmeros-metal-chrieng-fonts
   khmeros-muol-fonts
   khmeros-siemreap-fonts
   kurdit-unikurd-web-fonts
   liberation-narrow-fonts
   nafees-web-naskh-fonts
   navilu-fonts
   nhn-nanum-brush-fonts
   nhn-nanum-myeongjo-fonts
   nhn-nanum-pen-fonts
   paktype-naqsh-fonts
   paktype-tehreer-fonts
   pothana2000-fonts
   saab-fonts
   samyak-devanagari-fonts
   samyak-gujarati-fonts
   samyak-malayalam-fonts
   samyak-oriya-fonts
   samyak-tamil-fonts
   smc-anjalioldlipi-fonts
   smc-dyuthi-fonts
   smc-kalyani-fonts
   smc-rachana-fonts
   smc-raghumalayalam-fonts
   smc-suruma-fonts
   thai-scalable-garuda-fonts
   thai-scalable-kinnari-fonts
   thai-scalable-loma-fonts
   thai-scalable-norasi-fonts
   thai-scalable-purisa-fonts
   thai-scalable-sawasdee-fonts
   thai-scalable-tlwgmono-fonts
   thai-scalable-tlwgtypewriter-fonts
   thai-scalable-tlwgtypist-fonts
   thai-scalable-tlwgtypo-fonts
   thai-scalable-umpush-fonts
   tibetan-machine-uni-fonts
   vemana2000-fonts
   vlgothic-p-fonts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum group install -y &lt;span class="s2"&gt;&amp;quot;Fonts&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;安装完成后可以手动刷新字体缓存:&lt;/p&gt;
&lt;p&gt;安装字体相关的包:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo yum install -y fontconfig mkfontscale&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;执行下面3条命令刷新字体缓存:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ mkfontscale&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ mkfontdir&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ fc-cache -fv&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="_3"&gt;安装输入法&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;软件包组: "input-methods"包含:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum group info &lt;span class="s2"&gt;&amp;quot;input-methods&amp;quot;&lt;/span&gt;
Loaded plugins: fastestmirror, langpacks
Loading mirror speeds from cached hostfile

Group: Input Methods
 Group-Id: input-methods
 Description: Software &lt;span class="k"&gt;for&lt;/span&gt; the input of international text.
 Default Packages:
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-chewing
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-hangul
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-kkc
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-libpinyin
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-m17n
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-rawcode
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-sayura
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-table
   &lt;span class="o"&gt;=&lt;/span&gt;ibus-table-chinese
   &lt;span class="o"&gt;=&lt;/span&gt;m17n-contrib
   &lt;span class="o"&gt;=&lt;/span&gt;m17n-db
 Optional Packages:
   ibus-typing-booster
   iok
 Conditional Packages:
    gtk2-immodule-xim
    gtk3-immodule-xim
    ibus-gtk2
    ibus-gtk3
   -ibus-qt
   -imsettings-cinnamon
   -imsettings-gsettings
   -imsettings-qt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$  sudo yum group install -y &lt;span class="s2"&gt;&amp;quot;input-methods&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="x11forwarding"&gt;启用 X11Forwarding&lt;a class="headerlink" href="#x11forwarding" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;修改&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;X11Forwarding yes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启服务生效:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl restart sshd.service
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_4"&gt;配置输入法&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;启用了 X11Forwarding之后, 就可以配置输入法 ibus 了, 选择使用中文pinyin输入法.&lt;/p&gt;
&lt;h2 id="_5"&gt;英文环境下使用中文输入法&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;因为我个人买个了服务器, 打算既作为开发环境, 又作为网站博客使用. 所以语言环境就选择默认的: &lt;em&gt;en_US.utf8&lt;/em&gt; . 而并没有改为中文环境. 英文环境下使用中文输入法步骤如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将安装到文件复制到英文环境下: (注意是&lt;code&gt;ibus*&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo cp /usr/share/locale/zh_CN/LC_MESSAGES/ibus* /usr/share/locale/en_US/LC_MESSAGES&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将ibus设置为英文环境的开机启动项, 编辑文件&lt;code&gt;/etc/X11/xinit/xinputrc&lt;/code&gt;, 加入如下一行:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_im_language_list=”en zh”&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="ibus"&gt;输入法 ibus 配置&lt;a class="headerlink" href="#ibus" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;输入如下ibus 输入法命令&lt;br&gt;
&lt;code&gt;$ ibus-setup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;ibus-deamon&lt;/code&gt; 没有运行, 会弹出如下界面提示, 点击&lt;em&gt;Yes&lt;/em&gt;. 会后台执行命令: &lt;code&gt;ibus-daemon --xim&lt;/code&gt;&lt;br&gt;
&lt;img alt="ibus-daemon 提示运行" src="images/1552980351961.png"&gt;&lt;/li&gt;
&lt;li&gt;启动后会弹出如下提示:&lt;br/&gt;&lt;br&gt;
&lt;img alt="ibus加入bashrc" src="images/1552981039781.png"&gt;&lt;br/&gt;&lt;br&gt;
    以下需要加入到&lt;code&gt;~/.bashrc&lt;/code&gt;  或 &lt;code&gt;~/.zshrc&lt;/code&gt;中:&lt;br&gt;
&lt;code&gt;export GTK_IM_MODULE=ibus&lt;/code&gt;&lt;br&gt;
&lt;code&gt;export XMODIFIERS=@im=ibus&lt;/code&gt;&lt;br&gt;
&lt;code&gt;export QT_IM_MODULE=ibus&lt;/code&gt;&lt;br&gt;
&lt;code&gt;ibus-daemon -rdx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;点击&lt;em&gt;OK&lt;/em&gt;后会弹出 ibus 的配置界面, 如下:&lt;br&gt;
&lt;img alt="ibus 首选项" src="images/1552981185401.png"&gt;&lt;/li&gt;
&lt;li&gt;点击&lt;em&gt;输入法&lt;/em&gt; → &lt;em&gt;添加&lt;/em&gt; → &lt;em&gt;Chinese&lt;/em&gt; → &lt;em&gt;pinyin&lt;/em&gt; 来添加拼音输入法, 如下图:&lt;br&gt;
&lt;img alt="添加输入法" src="images/1552981294294.png"&gt;&lt;br&gt;
&lt;img alt="添加拼音输入法" src="images/1552981424476.png"&gt;&lt;/li&gt;
&lt;li&gt;添加完成后, 可以通过X11启动, firefox 或 pycharm等来测试拼音输入法是否生效. 默认可以通过: &lt;code&gt;&amp;lt;Super&amp;gt;+&amp;lt;Space&amp;gt;&lt;/code&gt;按键来切换输入法.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;查看后台 ibus相关进程, 如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="ibus 相关进程" src="images/1552981628167.png"&gt;&lt;/p&gt;
&lt;p&gt;另外, 如果某些配置不生效, 可以通过以下操作来使之生效:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt; 对应的文件. 如: &lt;code&gt;source ~/.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重新登陆&lt;/li&gt;
&lt;li&gt;重启相关服务, 如: &lt;code&gt;ibus-daemon -rdx&lt;/code&gt; 或 &lt;code&gt;sudo systemctl restart sshd.service&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;重启主机.&lt;br&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后, 就是安装自己喜欢的编辑器和IDE了, 推荐VSCODE和PyCharm.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 29 Mar 2019 11:01:50 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-29:/centos-7-install-x11-desktop-and-chinese-support.html</guid><category>linux</category><category>腾讯云</category><category>云</category></item><item><title>腾讯云申请免费SSL证书</title><link>https://www.EWhisper.cn/tencentyun-apply-ssl-certificate.html</link><description>&lt;h2 id="_1"&gt;前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;现在申请SSL证书的门槛和费用都大大降低了. 出现了很多免费提供加密证书的机构, 比较知名的是国外的&lt;a href="https://letsencrypt.org/"&gt;Let’s Encrypt&lt;/a&gt;, 免费, 自动化, 开放. 国内的云服务商也会提供免费的SSL证书. 下面是我在腾讯云上申请SSL证书的步骤.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SSL" src="./images/SSL-Certificate.png"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;步骤&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;进入腾讯云&lt;a href="https://console.cloud.tencent.com/ssl"&gt;SSL证书管理页面&lt;/a&gt;, 点击 &lt;strong&gt;申请免费证书&lt;/strong&gt;, 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="申请免费证书" src="./images/tencentyun_app_ssl_1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目前腾讯云上提供的免费证书是 &lt;strong&gt;TRUSTAsia&lt;/strong&gt;家的, 选择并确定. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="TRUSTAsia" src="./images/tencentyun_app_ssl_2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来就填写证书需要的相关信息, 很简单, 只有2项必填项:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通用名称, 具体的&lt;strong&gt;单域名&lt;/strong&gt;. (&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 如: www.ewhisper.cn, blog.ewhisper.cn. 不能是*.ewhisper.cn 这种通用域名.)&lt;/li&gt;
&lt;li&gt;申请邮箱&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="证书信息" src="./images/tencentyun_app_ssl_3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来是域名身份验证. 腾讯云一套的话, 直接选择 &lt;strong&gt;自动DNS验证&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="域名身份验证" src="./images/tencentyun_app_ssl_4.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这样就完成申请了, 接下来就是等待审核了. 我的ssl审核的非常快, 也就十几分钟就下来了. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="等待审核" src="./images/tencentyun_app_ssl_5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;证书详情如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="证书详情" src="./images/tencentyun_app_ssl_6.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;证书信息列表如下, 证书有效期一年. 可以选择部署到CDN和负载均衡上. (如果有的话) 也可以下载部署到nginx上.&lt;/p&gt;
&lt;p&gt;&lt;img alt="证书信息列表" src="./images/tencentyun_app_ssl_7.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载的是个证书压缩包. 包括各类web server的证书类型:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Apache: key, crt, 和bundle.crt&lt;/li&gt;
&lt;li&gt;IIS: pfx&lt;/li&gt;
&lt;li&gt;Nginx: crt, key&lt;/li&gt;
&lt;li&gt;Tomcat: jks&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来就是NGINX配置的事情了. &lt;a href="https://www.EWhisper.cn/nginx-conf-add-ssl-support.html"&gt;戳这儿查看&lt;img align="absmiddle" alt="👉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f449.png" title=":point_right:" width="20px"&gt;&lt;/a&gt; &lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 29 Mar 2019 10:41:49 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-29:/tencentyun-apply-ssl-certificate.html</guid><category>SSL</category><category>腾讯云</category><category>云</category><category>安全</category></item><item><title>Docker 学习笔记 - 镜像</title><link>https://www.EWhisper.cn/docker-handbook-image.html</link><description>&lt;h2 id="_1"&gt;获取镜像&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker pull&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;查看镜像信息&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker inspect &amp;lt;images id&amp;gt;  # 获取镜像的详细信息&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_3"&gt;搜寻镜像&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker search&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_4"&gt;删除镜像&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker rmi&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当一个镜像拥有多个标签，&lt;code&gt;docker rmi&lt;/code&gt;只是删除该镜像指定的标签，并不影响镜像文件&lt;br&gt;
当镜像只剩下一个标签时，再使用会彻底删除该镜像&lt;br&gt;
先删除该镜像的所有容器，再删除镜像&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_5"&gt;创建镜像&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;3种方法：&lt;br&gt;
- 基于已有镜像的&lt;strong&gt;容器&lt;/strong&gt;创建&lt;br&gt;
- 基于本地模板导入&lt;br&gt;
- 基于Dockerfile创建&lt;/p&gt;
&lt;h3 id="_6"&gt;基于已有镜像的容器创建&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker commit&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-a: 作者信息&lt;br&gt;
-m: 提交信息&lt;br&gt;
-p 提交时暂停容器运行&lt;br&gt;
-c changelist&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_7"&gt;基于本地模板的导入&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;推荐使用OpenVZ 提供的模板来创建。下载地址：https://openvz.org/Download/template/precreated&lt;br&gt;
&lt;code&gt;sudo cat ubuntu-16.04-x86_64.tar.gz | docker import - ubuntu:16.04&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_8"&gt;导出和载入镜像&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;导出&lt;/strong&gt;：&lt;code&gt;sudo docker save -o ubuntu_16.04.tar ubuntu:16.04&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;载入&lt;/strong&gt;：&lt;code&gt;sudo docker load --input ubuntu_16.04.tar&lt;/code&gt; 或者 &lt;code&gt;sudo docker load &amp;lt; ubuntu_16.04.tar&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该指令会载入镜像，以及其相关的元数据信息（包括标签等）. 关于&lt;code&gt;docker load&lt;/code&gt;和&lt;code&gt;docker import&lt;/code&gt;指令的区别见下一章.&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Thu, 28 Mar 2019 22:17:48 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-28:/docker-handbook-image.html</guid><category>docker</category></item><item><title>在云服务器上搭建集成开发环境</title><link>https://www.EWhisper.cn/build-ide-on-tencentyun.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#python"&gt;python优化配置&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-36"&gt;安装python 3.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pipenv-python-36"&gt;安装pipenv: (主要使用python 3.6)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-37"&gt;编译安装Python 3.7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#docker"&gt;Docker 配置&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;修改仓库源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;开机启动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;使用腾讯云容器的相关服务&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="python"&gt;python优化配置&lt;a class="headerlink" href="#python" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;安装相关软件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install -y --setopt&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;tsflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nodocs gcc make patch  &lt;span class="c1"&gt;# 安装编译软件&lt;/span&gt;
sudo yum group install -y development  &lt;span class="c1"&gt;# 安装开发包组&lt;/span&gt;
sudo yum install -y --setopt&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;tsflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nodocs gdbm-devel openssl-libs openssl-devel openssl-devel ncurses-devel libsqlite3x-devel sqlite-devel readline-devel zlib-devel bzip2-devel python2-bz2file db4-devel libpcap-devel xz-devel libffi-devel sqlite3 sqlite python-ujson  &lt;span class="c1"&gt;# 安装依赖&lt;/span&gt;

sudo yum install -y mariadb mariadb-server redis memcached &lt;span class="c1"&gt;# 安装mariadb&lt;/span&gt;
sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; mariadb.service redis.service  &lt;span class="c1"&gt;# mariadb redis 开机启动&lt;/span&gt;
sudo systemctl start mariadb.service redis.service  &lt;span class="c1"&gt;# 启动mariadb服务&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="python-36"&gt;安装python 3.6&lt;a class="headerlink" href="#python-36" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install -y python36
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum -y install python-pip python34-pip python36-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pip conf: &lt;/p&gt;
&lt;p&gt;在文件&lt;code&gt;~/.pip/pip.conf&lt;/code&gt;中添加或修改:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[global]&lt;/span&gt;
&lt;span class="na"&gt;index-url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http://mirrors.tencentyun.com/pypi/simple&lt;/span&gt;
&lt;span class="na"&gt;trusted-host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;mirrors.tencentyun.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;参考文章:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cloud.tencent.com/document/product/213/8623"&gt;腾讯云软件源加速软件包下载和更新&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="pipenv-python-36"&gt;安装pipenv: (主要使用python 3.6)&lt;a class="headerlink" href="#pipenv-python-36" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3.6 install pipenv --user
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编辑&lt;code&gt;~/.zshrc&lt;/code&gt;, 加入以下内容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/casey/.local/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;后续使用&lt;code&gt;pipenv&lt;/code&gt;管理文件, 有以下几个要点:&lt;br&gt;
1. 安装时候根据需要, 根据OS现有python指定, 如: &lt;code&gt;pipenv install --python /usr/bin/python36&lt;/code&gt;&lt;br&gt;
2. 可以修改&lt;code&gt;Pipfile&lt;/code&gt;的以下配置, 加快依赖下载:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[source]]&lt;/span&gt;
&lt;span class="na"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://mirrors.tencentyun.com/pypi/simple --trusted-host mirrors.tencentyun.com&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;verify_ssl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="python-37"&gt;编译安装Python 3.7&lt;a class="headerlink" href="#python-37" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;需要先yum安装&lt;code&gt;libffi-devel&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 下载源码包并解压&lt;/span&gt;
wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tgz
tar -xvzf Python-3.7.2.tgz
&lt;span class="nb"&gt;cd&lt;/span&gt; Python-3.7.2
&lt;span class="c1"&gt;# configure &lt;/span&gt;
sudo mkdir -p /usr/lib64/python3.7
sudo ./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib64/python3.7
&lt;span class="c1"&gt;# install&lt;/span&gt;
sudo make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo make install
&lt;span class="c1"&gt;# 创建软连接&lt;/span&gt;
sudo rm -f /usr/bin/python3
sudo ln -s /usr/lib64/python3.7/bin/python3 /usr/bin/python3
&lt;span class="c1"&gt;# 加入PATH&lt;/span&gt;
vi ~/.zshrc
&lt;span class="c1"&gt;# .zshrc修改为以下内容&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib64/python3.7/bin:/home/casey/.local/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="c1"&gt;# 使得配置生效&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/.zshrc
&lt;span class="c1"&gt;# 验证&lt;/span&gt;
python3 -V 
&lt;span class="c1"&gt;# 输出: Python 3.7.2&lt;/span&gt;
pip3 -V                     
&lt;span class="c1"&gt;# 输出: pip 18.1 from /usr/lib64/python3.7/lib/python3.7/site-packages/pip (python 3.7)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="docker"&gt;Docker 配置&lt;a class="headerlink" href="#docker" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_1"&gt;安装&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install -y --setopt&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;tsflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nodocs docker docker-compose docker-distribution docker-logrotate docker-lvm-plugin 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;修改仓库源&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;适用于 CentOS 7 版本。&lt;/p&gt;
&lt;p&gt;修改 Docker 配置文件 &lt;code&gt;sudo vi /etc/sysconfig/docker&lt;/code&gt;，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--registry-mirror=https://mirror.ccs.tencentyun.com&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;参考文章:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cloud.tencent.com/document/product/457/9113"&gt;使用 DockerHub 加速器&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_3"&gt;开机启动&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; docker
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_4"&gt;使用腾讯云容器的相关服务&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;控制台, 进入&lt;strong&gt;容器服务&lt;/strong&gt; → &lt;strong&gt;镜像仓库&lt;/strong&gt; → &lt;strong&gt;我的镜像&lt;/strong&gt; , 输入镜像仓库的个人密码. (账号是AppID)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(可选): 在&lt;strong&gt;访问管理&lt;/strong&gt; → &lt;strong&gt;用户组&lt;/strong&gt; → &lt;strong&gt;当前用户组&lt;/strong&gt;里 → &lt;strong&gt;关联策略&lt;/strong&gt; : &lt;a href="https://console.cloud.tencent.com/cam/policy/detail/419082&amp;amp;QcloudCCRFullAccess&amp;amp;2"&gt;QcloudCCRFullAccess&lt;/a&gt; (镜像仓库全读写权限)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;云服务器使用如下命令登录:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo docker login --username=appid ccr.ccs.tencentyun.com&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载镜像:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo docker pull ccr.ccs.tencentyun.com/[namespace]/[ImageName]:[镜像版本号]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 27 Mar 2019 09:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-27:/build-ide-on-tencentyun.html</guid><category>腾讯云</category><category>云</category><category>python</category><category>pipenv</category><category>docker</category></item><item><title>腾讯云服务器初始化操作</title><link>https://www.EWhisper.cn/initialize-my-tencentyun-server.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;重装系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;设置监控告警&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;创建密钥并绑定主机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;安全组配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#centos-75"&gt;CentOS 7.5 优化配置&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_5"&gt;用户/登录相关优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;更新系统和软件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git"&gt;安装及配置 Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#shell"&gt;优化配置shell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-oh-my-zsh"&gt;Using Oh My Zsh&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#themes"&gt;Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;重装系统&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;因为我买的时候, CentOS最新只提供到7.3, 我希望使用CentOS 7.5. 看到镜像库里有(什么毛病, 买的时候为啥不提供&lt;img align="absmiddle" alt="😕" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f615.png" title=":confused:" width="20px"&gt;&lt;img align="absmiddle" alt="😕" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f615.png" title=":confused:" width="20px"&gt;&lt;img align="absmiddle" alt="😕" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f615.png" title=":confused:" width="20px"&gt;), 所以重新安装下系统.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;选中实例, 点击&lt;strong&gt;更多&lt;/strong&gt;, 选择&lt;strong&gt;重装系统&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="重装系统" src="./images/init_tencentyun_install_os_1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择&lt;strong&gt;公共镜像&lt;/strong&gt; -&amp;gt; &lt;strong&gt;CentOS&lt;/strong&gt; -&amp;gt; &lt;strong&gt;CentOS 7.5 64位&lt;/strong&gt; -&amp;gt; 输入root密码. 点击&lt;strong&gt;开始重装&lt;/strong&gt;. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="重装系统具体选项" src="./images/init_tencentyun_install_os_2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等待重装完毕即可.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_2"&gt;设置监控告警&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;strong&gt;监控&lt;/strong&gt;图标:&lt;/p&gt;
&lt;p&gt;&lt;img alt="点击监控" src="./images/init_tencentyun_monitor_1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有以下监控指标, 如下图, 点击&lt;strong&gt;设置告警&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;li&gt;内存&lt;/li&gt;
&lt;li&gt;宽带(内外网)&lt;/li&gt;
&lt;li&gt;磁盘IO&lt;/li&gt;
&lt;li&gt;分区使用请看&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="设置告警" src="./images/init_tencentyun_monitor_2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据自己的需要, 定制告警策略. 示例如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="告警策略" src="./images/init_tencentyun_monitor_3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要配置告警通知渠道, 需要先&lt;strong&gt;新增用户组&lt;/strong&gt;. 如下(我和其他人合用, 所以建立一个用户组还是有必要的):&lt;/p&gt;
&lt;p&gt;&lt;img alt="新增用户组" src="./images/init_tencentyun_monitor_4.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新增用户组的操作如下, 先直接使用预设策略 - 管理员就可以了.&lt;/p&gt;
&lt;p&gt;&lt;img alt="新增用户组" src="./images/init_tencentyun_groupuser_3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来关联到具体的用户组&lt;/p&gt;
&lt;p&gt;&lt;img alt="关联接受组" src="./images/init_tencentyun_monitor_5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;strong&gt;完成&lt;/strong&gt;, 配置完成后如下所示: (可以把默认的禁用掉了)&lt;/p&gt;
&lt;p&gt;&lt;img alt="告警策略" src="./images/init_tencentyun_monitor_6.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_3"&gt;创建密钥并绑定主机&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在&lt;strong&gt;SSH密钥&lt;/strong&gt; 菜单, 点击&lt;strong&gt;创建密钥&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="创建密钥" src="./images/init_tencentyun_key_1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建密钥(&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;  密钥请妥善保存, 勿外传).&lt;/p&gt;
&lt;p&gt;&lt;img alt="创建密钥" src="./images/init_tencentyun_key_2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建后, 先关闭主机(关闭后的主机才能绑定密钥, 很好, 关机也受到告警了👌), 再选择&lt;strong&gt;绑定/解绑实例&lt;/strong&gt;, 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="绑定实例" src="./images/init_tencentyun_key_3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_4"&gt;安全组配置&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;类似于防火墙权限.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;strong&gt;安全组&lt;/strong&gt; -&amp;gt; &lt;strong&gt;新建&lt;/strong&gt;. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="新建安全组" src="./images/init_tencentyun_securegroup_1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择&lt;strong&gt;立即设置规则&lt;/strong&gt;. 具体原因如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="设置规则" src="./images/init_tencentyun_securegroup_2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以先关联到我自己的云主机实例. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="关联到实例" src="./images/init_tencentyun_securegroup_3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后再配置出/入站规则, 先配置入站, 先选择&lt;strong&gt;一键放通&lt;/strong&gt;. 放通以下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Linux SSH登录: 22端口&lt;/li&gt;
&lt;li&gt;Windows登录: 3389&lt;/li&gt;
&lt;li&gt;ping: ICMP协议&lt;/li&gt;
&lt;li&gt;HTTP: 80&lt;/li&gt;
&lt;li&gt;HTTPS: 443&lt;/li&gt;
&lt;li&gt;FTP: 20和21&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="一键放通入站" src="./images/init_tencentyun_securegroup_4.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再根据自己需要添加规则, 如下: (放通TCP的8000端口)&lt;/p&gt;
&lt;p&gt;&lt;img alt="自定义规则" src="./images/init_tencentyun_securegroup_5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后配置出站规则, 选择&lt;strong&gt;一键放通&lt;/strong&gt;. 以后再慢慢细化, 如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="一键放通出栈" src="./images/init_tencentyun_securegroup_6.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此, 控制台上该配置的就配置的差不多了, 接下来登录主机进行配置.&lt;/p&gt;
&lt;h2 id="centos-75"&gt;CentOS 7.5 优化配置&lt;a class="headerlink" href="#centos-75" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_5"&gt;用户/登录相关优化&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;创建普通用户 基于公钥登录&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建普通用户: &lt;code&gt;useradd -m  -p yourpassword casey&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;普通用户基于公钥登录: (因为之前&lt;strong&gt;创建密钥并绑定主机&lt;/strong&gt;, 公钥已经存在于主机上了, 所以不需要keygen了, 直接复制就可以了)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cp /root/.ssh/authorized_keys /home/casey/.ssh &amp;amp;&amp;amp; chown -R casey:casey /home/casey/.ssh/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确认基于ssh公钥的登录是否工作&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;完整的&lt;strong&gt;基于公钥&lt;/strong&gt;登录的步骤如下: (前提是刚开始该账户能通过账号密码方式登录)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在云主机上创建普通用户: &lt;code&gt;useradd -m -p yourpassword hellowordomain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 ssh-keygen命令在云主机上创建密匙对: &lt;code&gt;ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_tencent_$(date +%Y-%m-%d) -C "tencent key for hellowordomain"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 ssh-copy-id 命令安装公匙：&lt;code&gt;ssh-copy-id -i /path/to/public-key-file user@host&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;确认基于ssh公钥的登录是否工作&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4&gt;普通用户配置sudo权限&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;在 CentOS/RHEL 系统中如何将用户 vivek 添加到 sudo 组中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 CentOS/RHEL 和 Fedora 系统中允许 wheel 组中的用户执行所有的命令。使用 usermod 命令将用户 vivek 添加到 wheel 组中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo usermod -aG wheel vivek
$ id vivek
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;sudo无需输入密码&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# root用户&lt;/span&gt;
visudo

&lt;span class="c1"&gt;# 修改如下内容后保存退出&lt;/span&gt;
&lt;span class="c1"&gt;## Allows people in group wheel to run all commands&lt;/span&gt;
&lt;span class="c1"&gt;# %wheel        ALL=(ALL)       ALL&lt;/span&gt;

&lt;span class="c1"&gt;## Same thing without a password&lt;/span&gt;
%wheel  &lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;ALL&lt;span class="o"&gt;)&lt;/span&gt;       NOPASSWD: ALL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试并确保用户 vivek 可以以 root 身份登录执行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -i  &lt;span class="c1"&gt;# 切换到root用户&lt;/span&gt;
sudo systemctl status sshd  &lt;span class="c1"&gt;# 查看sshd的状态&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;code&gt;sshd_config&lt;/code&gt; 优化&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 禁用root登录
PermitRootLogin no
ChallengeResponseAuthentication no
PasswordAuthentication no
UsePAM no
# 禁用密码登录 仅留下公匙登录
AuthenticationMethods publickey
PubkeyAuthentication yes
# 禁用空密码
PermitEmptyPasswords no
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后测试 &lt;code&gt;sshd_config&lt;/code&gt; 文件并重启/重新加载 SSH 服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo sshd -t
sudo systemctl restart sshd.service
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_6"&gt;更新系统和软件&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum upgrade -y  &lt;span class="c1"&gt;# 升级所有软件&lt;/span&gt;
sudo yum clean all -y  &lt;span class="c1"&gt;# 清理缓存&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="git"&gt;安装及配置 Git&lt;a class="headerlink" href="#git" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装Git&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo yum install -y --setopt=tsflags=nodocs git&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置git&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git config --global user.name "east4ming"&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git config --global user.email "cuikaidong@foxmail.com"&lt;/code&gt;&lt;br&gt;
&lt;code&gt;ssh-keygen -t rsa -b 4096 -C "cuikaidong@foxmail.com"  # 已有私钥也可以重复使用&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cat .ssh/id_rsa.pub&lt;/code&gt; 并复制 (id_rsa.pub是对应的公钥信息)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;打开github网页登入账户进入账户settings左边找到SSH，可以清理一下没用的SSH keys，然后新建一个 ，取名任意，粘贴进去cat产生的所有字符。保存即可。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓存HTTPS方式的密码: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ git config --global credential.helper 'cache --timeout=3600'  # Set the cache to timeout after 1 hour (setting is in seconds)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="shell"&gt;优化配置shell&lt;a class="headerlink" href="#shell" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;安装zsh&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install -y --setopt&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;tsflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nodocs zsh
zsh --version
sudo chsh -s &lt;span class="k"&gt;$(&lt;/span&gt;which zsh&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 注销&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装powerline&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install powerline-status --user
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;安装&lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;&lt;strong&gt;oh-my-zsh&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh -c &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="using-oh-my-zsh"&gt;Using Oh My Zsh&lt;a class="headerlink" href="#using-oh-my-zsh" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;以下内容来自 oh-my-zsh github&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="plugins"&gt;Plugins&lt;a class="headerlink" href="#plugins" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Oh My Zsh comes with a shitload of plugins to take advantage of. You can take a look in the &lt;a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins"&gt;plugins&lt;/a&gt; directory and/or the &lt;a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins"&gt;wiki&lt;/a&gt;to see what's currently available.&lt;/p&gt;
&lt;h4&gt;Enabling Plugins&lt;/h4&gt;
&lt;p&gt;Once you spot a plugin (or several) that you'd like to use with Oh My Zsh, you'll need to enable them in the &lt;code&gt;.zshrc&lt;/code&gt; file. You'll find the zshrc file in your &lt;code&gt;$HOME&lt;/code&gt; directory. Open it with your favorite text editor and you'll see a spot to list all the plugins you want to load.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi ~/.zshrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example, this might begin to look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;plugins=(
git
bundler
dotenv
osx
rake
rbenv
ruby
)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Using Plugins&lt;/h4&gt;
&lt;p&gt;Most plugins (should! we're working on this) include a &lt;strong&gt;README&lt;/strong&gt;, which documents how to use them.&lt;/p&gt;
&lt;h3 id="themes"&gt;Themes&lt;a class="headerlink" href="#themes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We'll admit it. Early in the Oh My Zsh world, we may have gotten a bit too theme happy. We have over one hundred themes now bundled. Most of them have &lt;a href="https://wiki.github.com/robbyrussell/oh-my-zsh/themes"&gt;screenshots&lt;/a&gt; on the wiki. Check them out!&lt;/p&gt;
&lt;h4&gt;Selecting a Theme&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Robby's theme is the default one. It's not the fanciest one. It's not the simplest one. It's just the right one (for him).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Once you find a theme that you'd like to use, you will need to edit the &lt;code&gt;~/.zshrc&lt;/code&gt; file. You'll see an environment variable (all caps) in there that looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;ZSH_THEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;robbyrussell&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To use a different theme, simply change the value to match the name of your desired theme. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;ZSH_THEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;agnoster&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# (this is one of the fancy ones)&lt;/span&gt;
&lt;span class="c1"&gt;# see https://github.com/robbyrussell/oh-my-zsh/wiki/Themes#agnoster&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Note: many themes require installing the Powerline Fonts in order to render properly.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Open up a new terminal window and your prompt should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Agnoster theme" src="https://cloud.githubusercontent.com/assets/2618447/6316862/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png"&gt;&lt;/p&gt;
&lt;p&gt;In case you did not find a suitable theme for your needs, please have a look at the wiki for &lt;a href="https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes"&gt;more of them&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you're feeling feisty, you can let the computer select one randomly for you each time you open a new terminal window.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ZSH_THEME=&amp;quot;random&amp;quot; # (...please let it be pie... please be some pie..)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And if you want to pick random theme from a list of your favorite themes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ZSH_THEME_RANDOM_CANDIDATES=(
&amp;quot;robbyrussell&amp;quot;
&amp;quot;agnoster&amp;quot;
)
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 26 Mar 2019 21:09:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-26:/initialize-my-tencentyun-server.html</guid><category>腾讯云</category><category>云</category><category>centos</category><category>监控</category><category>告警</category><category>可观察性</category><category>安全</category><category>密钥</category><category>git</category><category>shell</category></item><item><title>Oracle WebLogic Server 11.1.1.9发布说明</title><link>https://www.EWhisper.cn/oracle-webLogic-server-11.1.1.9-release-notes.html</link><description>&lt;p&gt;&lt;a href="https://docs.oracle.com/middleware/11119/wls/WLSRN/issues.htm#WLSRN114"&gt;参照链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="oracle-weblogic-server"&gt;Oracle WebLogic Server问题&lt;a class="headerlink" href="#oracle-weblogic-server" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本章节描述了Oracle WebLogic Server相关的问题。它包含以下主题。&lt;br&gt;
一般性问题和解决办法&lt;br&gt;
管理控制台问题和解决办法&lt;br&gt;
Apache Beehive支持问题和解决办法&lt;br&gt;
集群问题和解决办法&lt;br&gt;
配置问题和解决办法&lt;br&gt;
连接器（资源适配器）问题和解决办法&lt;br&gt;
控制台扩展问题和解决办法&lt;br&gt;
核心服务器和核心工作管理器问题和解决办法&lt;br&gt;
部署问题和解决办法&lt;br&gt;
EJB问题和解决办法&lt;br&gt;
示例问题和解决办法&lt;br&gt;
HTTP问题发布/订阅服务器问题和解决办法&lt;br&gt;
安装问题和解决办法&lt;br&gt;
JavaEE问题和解决办法&lt;br&gt;
JDBC问题和解决办法&lt;br&gt;
JMS问题和解决办法&lt;br&gt;
JBDI问题和解决办法&lt;br&gt;
JSP和Servlet问题和解决办法&lt;br&gt;
JTA问题和解决办法&lt;br&gt;
Java虚拟机（JVM）和解决办法&lt;br&gt;
监测问题和解决办法&lt;br&gt;
节点管理器问题和解决办法&lt;br&gt;
操作、管理和受管理问题及解决办法&lt;br&gt;
Oracle Kodo问题和解决办法&lt;br&gt;
插件问题和解决办法&lt;br&gt;
协议问题和解决办法&lt;br&gt;
RMI-IIOP问题和解决办法&lt;br&gt;
安全问题和解决办法&lt;br&gt;
SNMP问题和解决办法&lt;br&gt;
WebLogic Server上Spring框架的问题和解决办法&lt;br&gt;
系统组件体系解救（SCA）问题和解决办法&lt;br&gt;
升级问题和解决办法&lt;br&gt;
Web应用程序问题和解决办法&lt;br&gt;
WebLogic Server脚本工具（WLST）问题及解决办法&lt;br&gt;
!!!&lt;br&gt;
Web服务器插件问题和解决方法&lt;br&gt;
Web服务和XML问题及解决办法&lt;br&gt;
文件 Errata&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：&lt;br&gt;
获取WebLogic Server 11g（10.3.6）修复的Bug列表，请在直属库字段中输入以下文档ID 1302753.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;一般性问题和解决办法&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本章节介绍以下问题和解决办法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Safari时，多字节字符在文件名中显示错误&lt;/li&gt;
&lt;li&gt;Oracle WebLogic的版本号&lt;/li&gt;
&lt;li&gt;Oracle ojdbc14.jar文件更改为ojdbc6.jar&lt;/li&gt;
&lt;li&gt;强密码强制执行可能导致WLST离线脚本出现问题&lt;/li&gt;
&lt;li&gt;在土耳其地区，mds初始化失败&lt;/li&gt;
&lt;li&gt;管理服务器在EM控制台上报告“太多打开文件”消息&lt;/li&gt;
&lt;li&gt;适用于10.3.5.0 Oracle WLS通用安装的Sun JDK 6 U35-B52的可用性。&lt;/li&gt;
&lt;li&gt;IBM JDK SR16 FP3或 JDK 7.0 SR8 FP10修复程序的可用性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;使用Safari时，多字节字符在文件名中显示错误&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;平台：&lt;/strong&gt; 全部&lt;br&gt;
当使用Safari浏览器下载内容时，如果文件名包含多字节字符，则这些字符在文件中显示为乱码&lt;br&gt;
&lt;strong&gt;解决方案&lt;/strong&gt;&lt;br&gt;
在受管服务器上设置&lt;code&gt;UserHeaderEncoding&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; .&lt;br&gt;
使用如下WLST命令实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;connect(&amp;quot;admin_name&amp;quot;, &amp;quot;admin_password&amp;quot;, &amp;quot;t3://localhost:port&amp;quot;)
edit()
startEdit()
cd(&amp;quot;Servers/server_name/WebServer/server_name&amp;quot;)
set(&amp;quot;UseHeaderEncoding&amp;quot;, &amp;quot;true&amp;quot;)
save()
activate()
exit()
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Oracle WebLogic Server 版本号&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;平台：&lt;/strong&gt; 全部&lt;br&gt;
Oracle融合中间件11g包含Oracle WebLogic Server 11g. Oracle WebLogic Server版本为10.3.6.&lt;/p&gt;
&lt;h4&gt;Oracle ojdbc14.jar文件更改为ojdbc6.jar&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;平台：&lt;/strong&gt; 全部&lt;br&gt;
Oracle ojdbc14.jar 更改为为ojdbc6.jar，使用JDK 5或者JDK 6，因此，您对ojdbc14.jar的任何显示引用都必须更改为ojdbc6.jar&lt;/p&gt;
&lt;h4&gt;强密码强制执行可能导致WLST离线脚本出现问题&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;平台：&lt;/strong&gt; 全部&lt;br&gt;
在此版本的WebLogic Server中实施强密码实施（最少8个字符，带有一个数字或特殊字符），现有脚本可能遇到问题。&lt;br&gt;
&lt;strong&gt;解决方案&lt;/strong&gt;&lt;br&gt;
&lt;em&gt; 将&lt;code&gt;ACKWARD_COMPAT_PW_CHECK&lt;/code&gt;境变量设置为&lt;code&gt;ture&lt;/code&gt;.&lt;br&gt;
&lt;/em&gt; 使用WLST时，引用参数&lt;code&gt;-Dbackward.compat.pw.check=true&lt;/code&gt;&lt;br&gt;
&amp;lt;未完待续&amp;gt;&lt;br&gt;
Oracle建议您更改密码以复核新的密码要求，因为此变量和选项将在未来的WebLogic Server版本中删除。&lt;/p&gt;
&lt;h4&gt;在土耳其地区，mds初始化失败&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;平台：&lt;/strong&gt; 全部&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">HelloWorDomain</dc:creator><pubDate>Thu, 14 Mar 2019 22:06:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-14:/oracle-webLogic-server-11.1.1.9-release-notes.html</guid><category>WebLogic</category><category>译文</category><category>java</category></item><item><title>使用 Dynatrace AppMon 监控 Docker 应用</title><link>https://www.EWhisper.cn/monitoring-docker-app-with-dynatrace.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#appmon-dockerized-apps-basic"&gt;使用AppMon 监控 dockerized apps (basic)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;基于组合的方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;基于继承的方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#qa"&gt;Q&amp;amp;A&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#appmon-dockerized-apps-kubernetes-openshift"&gt;使用AppMon 监控 dockerized apps - Kubernetes 和 OpenShift&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#a"&gt;方案A: 基于继承的方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#b"&gt;B方案: 基于组合的方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;可以配置 AppMon 来监控包裹在docker 容器里的应用:&lt;/p&gt;
&lt;h2 id="appmon-dockerized-apps-basic"&gt;使用AppMon 监控 dockerized apps (basic)&lt;a class="headerlink" href="#appmon-dockerized-apps-basic" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本章节介绍了将&lt;a href="https://www.dynatrace.com/solutions/application-monitoring/"&gt;AppMon&lt;/a&gt; agent与dockerized应用程序集成的两种方案。这些方案在本页面上被称为&lt;strong&gt;基于组合&lt;/strong&gt;和&lt;strong&gt;基于继承&lt;/strong&gt;的方案。每个方案的利弊都会列出. 但是，建议不要使用&lt;strong&gt;基于继承&lt;/strong&gt;的方法，而是将其用于演示目的。&lt;/p&gt;
&lt;h3 id="_1"&gt;基于组合的方案&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用基于组合的方案，您可以使用&lt;a href="https://hub.docker.com/r/dynatrace/agent/"&gt;AppMon/agent&lt;/a&gt; Docker镜像(示例见下), 该镜像包含所有的AppMon agent, 你可以配置附加到你的现有的Docker容器中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AppMon 6.5 示例:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;#DOCKERFILE FOR DYNATRACE AGENT&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; alpine:3.5&lt;/span&gt;

&lt;span class="k"&gt;LABEL&lt;/span&gt; &lt;span class="nv"&gt;maintainer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Blazej Tomaszewski &amp;lt;blazej.tomaszewski@dynatrace.com&amp;gt;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;ARG&lt;/span&gt; DT_HOME
&lt;span class="k"&gt;ARG&lt;/span&gt; BUILD_VERSION
&lt;span class="k"&gt;ARG&lt;/span&gt; VERSION
&lt;span class="k"&gt;ARG&lt;/span&gt; CUID
&lt;span class="k"&gt;ARG&lt;/span&gt; CGID

&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;AGENT_INSTALLER_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dynatrace-agent-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-unix.jar
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;WSAGENT_INSTALLER32_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dynatrace-wsagent-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-linux-x86-32.tar
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;WSAGENT_INSTALLER64_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dynatrace-wsagent-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-linux-x86-64.tar
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;NODE_AGENT_INSTALLER_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dynatrace-one-agent-nodejs-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-linux-x86.tgz
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;AGENT_INSTALLER_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://files.dynatrace.com/downloads/OnPrem/dynaTrace/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AGENT_INSTALLER_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;WSAGENT_INSTALLER32_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://files.dynatrace.com/downloads/OnPrem/dynaTrace/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;WSAGENT_INSTALLER32_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;WSAGENT_INSTALLER64_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://files.dynatrace.com/downloads/OnPrem/dynaTrace/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;WSAGENT_INSTALLER64_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;NODE_AGENT_INSTALLER_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://files.dynatrace.com/downloads/OnPrem/dynaTrace/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NODE_AGENT_INSTALLER_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;SLAVE_AGENT_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8001&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;DT_INSTALL_DEPS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;curl&lt;span class="se"&gt;\ &lt;/span&gt;openjdk8-jre-base
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;DT_RUNTIME_DEPS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bash

&lt;span class="k"&gt;COPY&lt;/span&gt; build/scripts/install-agent.sh /usr/bin
&lt;span class="k"&gt;COPY&lt;/span&gt; build/scripts/install-node-agent.sh /usr/bin
&lt;span class="k"&gt;COPY&lt;/span&gt; build/scripts/install-wsagent.sh /usr/bin

&lt;span class="k"&gt;RUN&lt;/span&gt;  apk update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add --no-cache &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_INSTALL_DEPS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_RUNTIME_DEPS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     mkdir -p &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     /usr/bin/install-agent.sh &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AGENT_INSTALLER_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     /usr/bin/install-wsagent.sh &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;WSAGENT_INSTALLER32_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     /usr/bin/install-wsagent.sh &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;WSAGENT_INSTALLER64_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     /usr/bin/install-node-agent.sh &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NODE_AGENT_INSTALLER_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     mkdir -p &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/log/agent &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     apk del &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_INSTALL_DEPS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;ADD&lt;/span&gt;  build/bin/dtnginx_offsets.json.tar.gz &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/agent/conf
&lt;span class="k"&gt;COPY&lt;/span&gt; build/scripts/run-wsagent.sh &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt; build/scripts/create-user.sh /tmp
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;CUID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CUID&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;CGID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CGID&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; /bin/sh -c /tmp/create-user.sh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf /tmp/*
&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; ${CUID}:${CGID}&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; true&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; sleep &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从技术上讲，这种方法使用了docker的一个特性，它允许docker容器将其文件系统的一部分导出为&lt;a href="https://docs.docker.com/engine/tutorials/dockervolumes/"&gt;docker卷&lt;/a&gt;，从而使其可以被其他感兴趣的容器获得。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://www.EWhisper.cn/images/dynatrace_docker_1.png"&gt;&lt;/p&gt;
&lt;h4&gt;示例&lt;/h4&gt;
&lt;p&gt;以下示例假定您已经运行&lt;code&gt;dynatrace/agent&lt;/code&gt; Docker容器, 通过名字 &lt;code&gt;dtagent&lt;/code&gt; 导入到&lt;code&gt;/dynatrace&lt;/code&gt;安装目录作为一个卷. GitHub上的&lt;a href="https://github.com/Dynatrace/Dynatrace-AppMon-Docker"&gt;AppMon in Docker&lt;/a&gt; 项目包含脚本来完成这个任务，甚至允许你在docker中方便地设置一个完整的appmon环境。更多的信息可以在以下的"性能诊所"(视频)找到。&lt;/p&gt;
&lt;h5&gt;示例: Apache Tomcat&lt;/h5&gt;
&lt;p&gt;下边的&lt;code&gt;docker-compose.yml&lt;/code&gt; 挂载容器&lt;code&gt;dtagent&lt;/code&gt; 导入的卷, 并且使用合适的&lt;code&gt;-agentpath&lt;/code&gt;来初始化&lt;code&gt;CATALINA_OPTS&lt;/code&gt;环境变量.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;tomcat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tomcat&lt;/span&gt;
  &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080&lt;/span&gt;
  &lt;span class="nt"&gt;volumes_from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;dtagent&lt;/span&gt;
  &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;CATALINA_OPTS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-agentpath:/dynatrace/agent/lib64/libdtagent.so=name=tomcat,collector=127.0.0.1:9998&amp;quot;&lt;/span&gt;
  &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;catalina.sh run&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;示例: NGINX&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;待补充&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;分析&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;: 这种方法有助于巧妙地清晰地分离关注点，这是Docker世界的设计原则。此外，您不需要将agent放入您的基本映像中。在运行时进行一个简单的配置就可以监控您需要的容器的一切。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;: 虽然Docker运行时对容器之间交换volumes有很大的支持，但在容器编排平台（如kubernetes或openshift）上这样做会使您的应用程序配置过于复杂。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;基于继承的方案&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不建议使用此方法，仅在此处进行演示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从技术角度而言，Docker化应用程序通常涉及两个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个基本镜像, 如:&lt;code&gt;java:8&lt;/code&gt;或&lt;code&gt;node:7&lt;/code&gt;, 提供基础的执行环境&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;Dockerfile&lt;/code&gt;, 用特定于应用程序的安装指令来扩充选定的基本镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用你的&lt;code&gt;Dockerfile&lt;/code&gt;, 运行&lt;code&gt;docker build&lt;/code&gt;命令来创建需要的Docker 镜像.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt;上提供了一整套的基础镜像. 你可以阅读&lt;a href="https://www.digitalocean.com/community/tutorials/docker-explained-using-dockerfiles-to-automate-building-of-images"&gt;使用Dockerfiles自动化镜像构建&lt;/a&gt;和&lt;a href="https://docs.docker.com/articles/dockerfile_best-practices/"&gt;写Dockerfiles的最佳实践&lt;/a&gt;获取更多信息.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://www.EWhisper.cn/images/dynatrace_docker_2.png"&gt;&lt;/p&gt;
&lt;h4&gt;示例&lt;/h4&gt;
&lt;p&gt;你可以为准备监控的应用创建基础镜像. 把agent打包为基础的自动启用监控的镜像。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://www.EWhisper.cn/images/dynatrace_docker_3.png"&gt;&lt;/p&gt;
&lt;h5&gt;示例: Java&lt;/h5&gt;
&lt;p&gt;本例子展示了一个&lt;code&gt;Dockerfile&lt;/code&gt;, 来扩展官方的&lt;a href="https://github.com/docker-library/openjdk"&gt;openJDK Docker镜像&lt;/a&gt; 基础镜像, 并下载对应的agent. 为了遍历, 需要设置一些环境变量, 如&lt;code&gt;DT_AGENT_NAME&lt;/code&gt;和&lt;code&gt;DT_AGENT_COLLECTOR&lt;/code&gt;, 以后可以在这些变量中填入你自己的数据. 另外, &lt;code&gt;JAVA_OPTS&lt;/code&gt;添加一个指向&lt;code&gt;DT_AGENT_LIB64&lt;/code&gt;的&lt;code&gt;-agentpath&lt;/code&gt;参数.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; openjdk:8&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt; DT_AGENT_INSTALLER_URL &lt;span class="s2"&gt;&amp;quot;http://files.dynatrace.com/downloads/OnPrem/dynaTrace/6.5/6.5.0.1289/dynatrace-agent-6.5.0.1289-unix.jar&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt; DT                     &lt;span class="s2"&gt;&amp;quot;/dynatrace&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; DT_AGENT_LIB32         &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/agent/lib/libdtagent.so&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; DT_AGENT_LIB64         &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/agent/lib64/libdtagent.so&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt; DT_AGENT_NAME          &lt;span class="s2"&gt;&amp;quot;java&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; DT_AGENT_COLLECTOR     &lt;span class="s2"&gt;&amp;quot;127.0.0.1:9998&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt; JAVA_OPTS              &lt;span class="s2"&gt;&amp;quot;-agentpath:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_AGENT_LIB64&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;=name=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_AGENT_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,collector=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_AGENT_COLLECTOR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Install the Agent&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; curl -L -o /tmp/&lt;span class="sb"&gt;`&lt;/span&gt;basename &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_AGENT_INSTALLER_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_AGENT_INSTALLER_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    java -jar /tmp/&lt;span class="sb"&gt;`&lt;/span&gt;basename &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_AGENT_INSTALLER_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; -t &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm -f /tmp/&lt;span class="sb"&gt;`&lt;/span&gt;basename &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DT_AGENT_INSTALLER_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;构建该Dockerfile使用&lt;code&gt;docker build . -t openjdk:8-dtappmon -f ./Dockerfile&lt;/code&gt;在本地Docker仓库创建一个新的Docker镜像, 名字为&lt;code&gt;openjdk&lt;/code&gt;, 标签为&lt;code&gt;8-dtappmon&lt;/code&gt;. 每个应用构建, 你可以通过扩展&lt;code&gt;openjdk:8-dtappmon&lt;/code&gt;来创建应用镜像(如下所示, &lt;code&gt;repo.internal&lt;/code&gt;指的是虚拟仓库, &lt;code&gt;my-app&lt;/code&gt;是虚拟应用.) 你也可以覆盖&lt;code&gt;DT_AGENT_NAME&lt;/code&gt;环境变量来在该镜像里更准确的配置.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; openjdk:8-dtappmon&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt; DT_AGENT_NAME &lt;span class="s2"&gt;&amp;quot;my-app&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt; https://repo.internal/my-app/builds/latest.tar.gz /app

&lt;span class="k"&gt;CMD&lt;/span&gt; java &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JAVA_OPTS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -jar /app/my-app.jar
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;示例: Nginx&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;待补充&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;分析&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;: 一旦agent已经被放入你的Docker基础映像中，在哪个容器平台上运行你的应用程序并不重要. 此外，这种方案减少了appmon整合的准备工作，不会增加频繁building，shipping和running Dockerized 应用程序过程的任何开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;: 根据您的特定用例和您所使用的技术,您必须手动集成这些技术. 因为这个方案会在特定技术的基础镜像上, 与特定技术的agent(如Java agent)紧密绑定, 当切换到另一种技术或appmon的新版本时，这些基本镜像可能需要被全部重新创建. (其实这个不算什么大问题, 就是定期更新agent)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="qa"&gt;Q&amp;amp;A&lt;a class="headerlink" href="#qa" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;我能监控运行在docker, alpine上的程序么?&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;待补充&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;我能监控在kubernetes或OpenShift上单 docker化应用么?&lt;/h4&gt;
&lt;p&gt;是的. 参见下一章节.&lt;/p&gt;
&lt;h4&gt;我能在docker中运行easyTravel(AppMon的demo程序)么?&lt;/h4&gt;
&lt;p&gt;EasyTravel已经在GitHub的&lt;a href="https://github.com/dynatrace/Dynatrace-easytravel-docker"&gt;EasyTravel in Docker &lt;/a&gt;完全实现容器化了. 你可以使用&lt;a href="https://github.com/Dynatrace/Dynatrace-AppMon-Docker"&gt;Dynatrace in Docker&lt;/a&gt;项目来注入监控.&lt;/p&gt;
&lt;h2 id="appmon-dockerized-apps-kubernetes-openshift"&gt;使用AppMon 监控 dockerized apps - Kubernetes 和 OpenShift&lt;a class="headerlink" href="#appmon-dockerized-apps-kubernetes-openshift" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上一章描述了如何使用&lt;a href="https://www.dynatrace.com/solutions/application-monitoring/"&gt;AppMon&lt;/a&gt;监控 普通的Docker环境中的Dockerized apps.&lt;/p&gt;
&lt;p&gt;本章阐述了如何监控在&lt;a href="http://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;和&lt;a href="https://www.openshift.com/"&gt;Red Hat OpenShift(v3)&lt;/a&gt;的 Dockerized 应用. (OpenShift算是Kubernetes的商业化).&lt;/p&gt;
&lt;p&gt;如上章"如何使用AppMon监控dockerized apps"所述, 根据于你的实际情况,  你可能会发现下列的方案更适合. 每种方案的利弊都已列出.&lt;/p&gt;
&lt;h3 id="a"&gt;方案A: 基于继承的方案&lt;a class="headerlink" href="#a" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;基于继承的方案的目标是把AppMon的agent放到你的Docker基础镜像里. 因为Kubernetes和OpenShift都是容器平台, 这种方案允许你来在这些平台上复用你的启用监控的镜像. 然而, 因为OpenShift是一个安全加固的容器平台, 使用root运行容器和执行进程(大部分Docker都是这么构建的)默认会被禁止.  参考&lt;a href="https://docs.openshift.org/latest/creating_images/guidelines.html"&gt;OpenShift 容器镜像向导&lt;/a&gt;来学习如何为OpenShift准备你的Docker镜像. 参见&lt;a href="https://www.dynatrace.com/support/doc/appmon/application-monitoring/monitor-specific-applications/monitor-docker-apps/monitor-dockerized-apps-with-appmon/"&gt;如何使用AppMon监控dockerized apps&lt;/a&gt;获取如何应用本方案到你的Docker镜像.&lt;/p&gt;
&lt;h4&gt;示例: Java&lt;/h4&gt;
&lt;p&gt;因为在你的基础镜像中的特定技术已被appmon监控，因此只需简单的运行时配置设置即可将agent绑定到appmon collector。&lt;/p&gt;
&lt;p&gt;下列例子为一个运行在&lt;a href="http://kubernetes.io/docs/user-guide/pods/"&gt;Pod&lt;/a&gt;上的一个叫做&lt;em&gt;catalog&lt;/em&gt;的容器定义了一个&lt;a href="http://kubernetes.io/docs/user-guide/replication-controller/"&gt;ReplicationController&lt;/a&gt;. 环境变量&lt;code&gt;DT_AGENT_NAME&lt;/code&gt;和&lt;code&gt;DT_AGENT_COLLECTOR&lt;/code&gt;(&lt;a href="https://www.dynatrace.com/support/doc/appmon/application-monitoring/monitor-specific-applications/monitor-docker-apps/monitor-dockerized-apps-with-appmon/"&gt;如何使用AppMon监控dockerized apps&lt;/a&gt;中已定义好)覆盖掉由基础的&lt;code&gt;acmeco/my-app&lt;/code&gt;镜像提供的各自的对应值.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ReplicationController&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-app&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;my-app&lt;/span&gt;
        &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;acmeco/my-app&lt;/span&gt;
        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;DT_AGENT_NAME&lt;/span&gt;
          &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;my-app&amp;quot;&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;DT_AGENT_COLLECTOR&lt;/span&gt;
          &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dtappmon-collector.acmeco.com:9998&amp;quot;&lt;/span&gt;
        &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;containerPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;示例: Nginx&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;待补充&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;分析&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;: 一旦agent已经被放入你的Docker基础映像中，在哪个容器平台上运行你的应用程序并不重要. 此外，这种方案减少了appmon整合的准备工作，不会增加频繁building，shipping和running Dockerized 应用程序过程的任何开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;: 根据您的特定用例和您所使用的技术,您必须手动集成这些技术. 因为这个方案会在特定技术的基础镜像上, 与特定技术的agent(如Java agent)紧密绑定, 当切换到另一种技术或appmon的新版本时，这些基本镜像可能需要被全部重新创建. (其实这个不算什么大问题, 就是定期更新agent)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="b"&gt;B方案: 基于组合的方案&lt;a class="headerlink" href="#b" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;待补充.&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 12 Mar 2019 10:58:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-12:/monitoring-docker-app-with-dynatrace.html</guid><category>APM</category><category>Dynatrace</category><category>docker</category></item><item><title>8种Java 内存溢出之一:Java Heap Space</title><link>https://www.EWhisper.cn/java-oom-1-java-heap-space.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#11-javalangoutofmemoryerror-java-heap-space"&gt;1.1  java.lang.OutOfMemoryError: Java heap space 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#12"&gt;1.2 原因&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#13"&gt;1.3 示例&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#131-1"&gt;1.3.1 示例1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#132"&gt;1.3.2 内存泄漏示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#14"&gt;1.4 解决方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="11-javalangoutofmemoryerror-java-heap-space"&gt;1.1  java.lang.OutOfMemoryError: Java heap space 概述&lt;a class="headerlink" href="#11-javalangoutofmemoryerror-java-heap-space" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Java 应用只允许使用有限的内存。这个限制是在应用启动的时候指定的。展开来说， Java内存分成2个不同的区域。这两个区域叫做Heap Space （堆内存）和 Permgen （Permanent Generation，即永久代）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="java内存结构" src="https://www.EWhisper.cn/images/java_memory.png"&gt;&lt;/p&gt;
&lt;p&gt;这两个区的大小是在JVM启动的时候设置, 可以通过JVM参数&lt;code&gt;-Xmx&lt;/code&gt; 和 &lt;code&gt;-XX:MaxPermSize&lt;/code&gt;进行设置. 如果你没欧进行特别的设置, &lt;strong&gt;平台指定&lt;/strong&gt;的默认配置会被使用.&lt;br&gt;
&lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt; 错误会在应用尝试添加更多的数据到heap space, 但是heap区没有足够的空间时触发.&lt;/p&gt;
&lt;p&gt;需要注意的是即使&lt;strong&gt;物理内存&lt;/strong&gt;可能有很多剩余, 但是只要JVM达到了heap size的限制, 就会抛出该错误.&lt;/p&gt;
&lt;h2 id="12"&gt;1.2 原因&lt;a class="headerlink" href="#12" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对于 &lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt; , 最常见的原因很简单 -- 你把一个XXL号的应用放到了一个S号的Java heap space里了. 也就是说 -- 应用需要更多的Java heap space 来让它正常运行. 对于这个OutOfMemory, 其他的原因会更复杂, 通常是由于编程错误引起的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户/数据量出现峰值&lt;/strong&gt; 该应用被设计来处理一定数量的用户和一定数量的数据. 当用户数或数据量突然冲高, 并且超过了期望的阈值, 在出现峰值停止之前的正常运行时的操作触发了 &lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt; 错误.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存泄漏&lt;/strong&gt; 一种特定类型的编程错误导致应用频繁消耗更多的内存. 每当应用的泄漏的功能被使用时, 它就会在Java heap space种生成一些对象. 随着时间推移, 泄漏的对象消耗了所有可用的Java heap space, 并且触发了常见的&lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt;  错误.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="13"&gt;1.3 示例&lt;a class="headerlink" href="#13" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="131-1"&gt;1.3.1 示例1&lt;a class="headerlink" href="#131-1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;第一个例子相当简单 -- 下列的Java 代码尝试分配200万个(2M) 整数数组. 当你编译该代码, 用一个12MB大小的Java heap space (&lt;code&gt;java -Xmx12m OOM&lt;/code&gt;)运行. 它会运行失败, 抛出 &lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt;  消息. 有13MB Java heap space, 这个程序就能正常运行...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OOM&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="132"&gt;1.3.2 内存泄漏示例&lt;a class="headerlink" href="#132" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;第二个, 更现实一点的例子是内存泄漏. 在Java里, 当开发创建和使用新对象, 如: &lt;code&gt;new Integer(5)&lt;/code&gt;, 他们不必自己分派内存 -- 这通过JVM来处理. 在应用生命周期种, JVM会周期性地检查内存中的哪个对象仍在使用, 哪个没有. 没有被使用的对象会被丢弃, 然后内存重新声明并重新使用. 这个过程叫做&lt;strong&gt;垃圾回收&lt;/strong&gt;. 对应的JVM里的模块叫做&lt;strong&gt;垃圾收集器&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Java的自动内存管理机制以来与GC来周期性地查找没用的对象并移除他们. 简而言之, Java内存泄漏是这么一种场景, 一些对象应用已经不用了, 但是GC却没有检查出来. 结果就是这些没用的对象仍然无限期地存在在Java heap space 中. 如此往复, 最终触发&lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt;错误.&lt;/p&gt;
&lt;p&gt;构造一个满足内存泄漏定义的Java程序也相当容易:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;KeylessEntry&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Key&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsKey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)))&lt;/span&gt;
          &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Nmber:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当执行上面的代码时，您可能期望它永远运行而没有任何问题，假设原始缓存解决方案只将Map扩展到10,000个元素，除此之外，HashMap中已经包含了所有键. 然而, 事实上元素会持续增加因为Key这个类没有在它的&lt;code&gt;hashCode()&lt;/code&gt;种包含一个适当的&lt;code&gt;equals()&lt;/code&gt;实现.&lt;/p&gt;
&lt;p&gt;结果, 随着时间推移, 因为泄漏代码的不断的使用, "缓存"的结果会消耗大量的Java heap space. 当泄漏的内存填满了heap区的所有的可用内存, 并且垃圾收集器无法清理, 会抛出&lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;解决办法也简单 -- 添加个&lt;code&gt;equals()&lt;/code&gt;方法的实现在下边, 就能很好的运行了. 但是在你最终找到这个bug之前, 你会西欧爱好相当多的脑细胞.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="14"&gt;1.4 解决方案&lt;a class="headerlink" href="#14" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;显然第一个解决方案就是 -- 当你的JVM特定资源耗尽了, 你应该增加那个资源的量. 在这个案例种: 当你的应用没有足够的Java heap space内存来正常运行, 只需要在运行JVM的时候配置并添加(或修改现有的)如下参数:&lt;br&gt;
&lt;code&gt;-Xmx1024m&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上述配置会给应用1024M的Java heap space. 你可以使用&lt;code&gt;g&lt;/code&gt;或者&lt;code&gt;G&lt;/code&gt;(单位是GB), &lt;code&gt;m&lt;/code&gt;或&lt;code&gt;M&lt;/code&gt;(MB), &lt;code&gt;k&lt;/code&gt;或&lt;code&gt;K&lt;/code&gt;(KB). 例如下列都是设置最大Java heap space为1GB:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java -Xmx1073741824 com.mycompany.MyClass
java -Xmx1048576k com.mycompany.MyClass
java -Xmx1024m com.mycompany.MyClass
java -Xmx1g com.mycompany.MyClass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然而, 在很多案例种, 提供更多的Java heap space只是饮鸩止渴. 例如, 如果你的应用存在内存泄漏, 添加更多的heap只是延缓&lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt;错误的出现, 并不能解决问题. 另外, 增加Java heap space也会导致GC暂停时间的增加, 从而影响你的应用的&lt;a href="https://plumbr.eu/blog/gc-impact-on-throughput-and-latency"&gt;吞吐量和延迟&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;如果你希望解决潜在的问题, 而不是头痛医头, 联系我就是最好的方式(＠￣ー￣＠). 当然, 有几个工具适合你. &lt;strong&gt;Debuggers&lt;/strong&gt;, &lt;strong&gt;profiles&lt;/strong&gt;, &lt;strong&gt;heap dump analyzers&lt;/strong&gt; -- 供你选择.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题外话:&lt;br&gt;
Dynatrace 也是个分析OOM问题的好工具.感兴趣的可以参考这篇文章:&lt;br&gt;
《案例: Dynatrace分析某财险承保系统内存泄漏问题》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;喜欢我的博客吗? 打赏一杯&lt;img align="absmiddle" alt="☕" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2615.png" title=":coffee:" width="20px"&gt;吧。您的支持是对我的最大鼓励～ 另外记得给我留言或订阅哦 &lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.EWhisper.cn/pages/about.html"&gt;点击这里打赏&lt;img align="absmiddle" alt="👉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f449.png" title=":point_right:" width="20px"&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 12 Mar 2019 10:48:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-12:/java-oom-1-java-heap-space.html</guid><category>jvm</category><category>java</category><category>oom</category></item><item><title>如何编写Python Web框架（三）</title><link>https://www.EWhisper.cn/write-python-framework-part-three.html</link><description>&lt;blockquote&gt;
&lt;p&gt;本文为译文&lt;/p&gt;
&lt;p&gt;原文链接: &lt;a href="http://rahmonov.me/posts/write-python-framework-part-three/"&gt;How to write a Python web framework. Part III.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者: Jahongir Rahmonov&lt;/p&gt;
&lt;p&gt;Github仓库: &lt;a href="https://github.com/rahmonov/alcazar"&gt;alcazar&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在本系列之前的博客文章中，我们开始编写自己的Python框架并实现以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WSGI兼容&lt;/li&gt;
&lt;li&gt;请求处理程序&lt;/li&gt;
&lt;li&gt;路由：简单和参数化&lt;/li&gt;
&lt;li&gt;检查重复的路径&lt;/li&gt;
&lt;li&gt;基于类的处理程序&lt;/li&gt;
&lt;li&gt;单元测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这部分中，我们将为列表添加一些很棒的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试客户端&lt;/li&gt;
&lt;li&gt;添加路径的替代方式（如类似Django的实现）&lt;/li&gt;
&lt;li&gt;支持模板&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;测试客户端&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在第&lt;a href="https://www.EWhisper.cn/write-python-framework-part-two.html"&gt;2部分中&lt;/a&gt;，我们编写了几个单元测试。但是，当我们需要向处理程序发送HTTP请求时，我们停止了，因为我们没有可以执行此操作的测试客户端。我们先添加一个。&lt;/p&gt;
&lt;p&gt;到目前为止，在Python中发送HTTP请求最流行的方式是&lt;a href="https://twitter.com/kennethreitz"&gt;Kenneth Reitz&lt;/a&gt;的&lt;a href="https://github.com/kennethreitz/requests"&gt;&lt;code&gt;Requests&lt;/code&gt;&lt;/a&gt;库。但是，为了能够在单元测试中使用它，我们应该始终启动并运行我们的应用程序（即在运行测试之前启动gunicorn）。原因是&lt;a href="http://docs.python-requests.org/en/master/user/advanced/#transport-adapters"&gt;&lt;code&gt;Requests&lt;/code&gt;只附带一个Transport Adaptter: HTTPAdapter&lt;/a&gt;。这违背了单元测试的目的。单元测试应该是自我维持的。对我们来说幸运的是，&lt;a href="https://github.com/seanbrant"&gt;Sean Brant&lt;/a&gt;编写了一个&lt;a href="https://github.com/seanbrant/requests-wsgi-adapter"&gt;WSGI Transport Adapter，用于&lt;/a&gt;创建测试客户端。让我们先编写代码再进行讨论。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 译者注:&lt;/p&gt;
&lt;p&gt;先安装2个库:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install requests&lt;/code&gt;&lt;br&gt;
&lt;code&gt;pip install requests-wsgi-adapter&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将以下方法添加到&lt;code&gt;api.py&lt;/code&gt;主类&lt;code&gt;API&lt;/code&gt;中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;RequestsSession&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wsgiadapter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WSGIAdapter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;RequestsWSGIAdapter&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://testserver&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RequestsSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;RequestsWSGIAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此&lt;a href="http://docs.python-requests.org/en/master/user/advanced/#transport-adapters"&gt;处所述&lt;/a&gt;，要使用Requests WSGI Adapter，我们需要将其mount到Session对象。这样，使用&lt;code&gt;test_session&lt;/code&gt;,其URL以给定前缀开头的任何请求都将使用给定的RequestsWSGIAdapter。太好了，现在我们可以用&lt;code&gt;test_session&lt;/code&gt;来创建一个测试客户端。创建一个&lt;code&gt;conftest.py&lt;/code&gt;文件并将&lt;code&gt;api&lt;/code&gt; fixture 移动到此文件，使其如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# conftest.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;api&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此文件的&lt;code&gt;pytest&lt;/code&gt;默认情况下会查找fixture 。现在，让我们在这里创建测试客户端fixture ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# conftest.py&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们的&lt;code&gt;client&lt;/code&gt;需要&lt;code&gt;api&lt;/code&gt; fixture 并返回我们之前编写的内容&lt;code&gt;test_session&lt;/code&gt;。现在我们可以在单元测试中使用这个&lt;code&gt;client&lt;/code&gt; fixture 。让我们直接进入&lt;code&gt;test_bumbo.py&lt;/code&gt;文件并编写一个单元测试，测试是否&lt;code&gt;client&lt;/code&gt;可以发送请求：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_bumbo.py&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_bumbo_test_client_can_send_requests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;RESPONSE_TEXT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;THIS IS COOL&amp;quot;&lt;/span&gt;

    &lt;span class="nd"&gt;@api.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/hey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RESPONSE_TEXT&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://testserver/hey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RESPONSE_TEXT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行单元测试&lt;code&gt;pytest test_bumbo.py&lt;/code&gt;并观察。我们看到所有的测试都通过了。让我们为最重要的部分添加几个单元测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_bumbo.py&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_parameterized_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@api.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/{name}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hey {name}&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://testserver/matthew&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hey matthew&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://testserver/ashley&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hey ashley&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个测试我们在url中发送的参数是否正常工作。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_bumbo.py&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_default_404_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://testserver/doesnotexist&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not found.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个测试如果请求被发送到不存在的路由，则返回404（未找到）响应。&lt;/p&gt;
&lt;p&gt;剩下的我会留给你。如果您需要任何帮助，请尝试编写更多测试并在评论中告诉我。以下是单元测试的一些想法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试基于类的处理程序GET请求是否正常运行&lt;/li&gt;
&lt;li&gt;测试基于类的处理程序POST请求是否正常运行&lt;/li&gt;
&lt;li&gt;测试如果使用无效的请求方法，基于类的处理程序返回响应&lt;code&gt;Method Not Allowed.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;测试是否正确返回状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;添加路径的替代方式&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;现在，这是添加路径的方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@api.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;YOLO&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也就是说，路由被添加为装饰器，就像在Flask中一样。有些人可能喜欢Django注册网址的方式。所以，让我们给他们这样添加路径的选择：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;YOLO&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;YOLO2&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/about&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;add_route&lt;/code&gt;方法应该做两件事。检查路径是否已经注册，如果没有，则注册：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Such route already exists.&amp;quot;&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很简单。这段代码看起来很熟悉吗？这是因为我们已经在&lt;code&gt;route&lt;/code&gt;装饰器中编写了这样的代码。我们现在可以遵循DRY原则并在&lt;code&gt;route&lt;/code&gt;装饰器中使用&lt;code&gt;add_route&lt;/code&gt;方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Such route already exists.&amp;quot;&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;让我们添加一个单元测试来检查它是否正常工作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_bumbo.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_alternative_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Alternative way to add a route&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response_text&lt;/span&gt;

    &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/alternative&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://testserver/alternative&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;response_text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行您的测试，您将看到所有测试都通过。&lt;/p&gt;
&lt;h2 id="_3"&gt;模板支持&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当我实现新的东西时，我喜欢做一些叫做README驱动的开发。这是一种技术，您可以在实施之前记下API是什么样子。让我们来实现。假设我们要在我们的处理程序中使用此模板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ title }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        The name of the framework is {{ name }}
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;{{ title }}&lt;/code&gt;和&lt;code&gt;{{ name }}&lt;/code&gt;是从处理程序发送的变量，这是处理程序的样子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;templates_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;templates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@api.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/template&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Awesome Framework&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Alcazar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我希望它尽可能简单，所以我只需要一个方法，将模板名和上下文作为参数，并用给定的参数呈现该模板。另外，我们希望模板目录可以像上面一样配置。&lt;/p&gt;
&lt;p&gt;通过设计API，我们现在可以实现它。&lt;/p&gt;
&lt;p&gt;对于模板支持，我认为&lt;a href="http://jinja.pocoo.org/docs/2.10/"&gt;Jinja2&lt;/a&gt;是最佳选择。它是一个现代的，设计师友好的Python模板语言，模仿Django的模板。所以，如果你知道Django, 那么使用Jinja2应该感觉一样。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Jinja2&lt;/code&gt;使用称为模板&lt;code&gt;Environment&lt;/code&gt;的中心对象。我们将在应用程序初始化和借助此Environment 加载模板的基础上配置此环境。以下是如何创建和配置一个：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;

&lt;span class="n"&gt;templates_env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;templates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;FileSystemLoader&lt;/code&gt;从文件系统加载模板。此加载程序可以在文件系统上的文件夹中查找模板，并且是加载它们的首选方法。它将模板目录的路径作为参数。现在我们可以这样使用&lt;code&gt;templates_env&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;templates_env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Awesome Framework&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Alcazar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;既然我们了解了Jinja2中的所有工作原理，那么我们就将其添加到我们自己的框架中。首先，让我们安装jinja2：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install Jinja2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后，在我们的&lt;code&gt;API&lt;/code&gt;类的&lt;code&gt;__init__&lt;/code&gt;方法中创建&lt;code&gt;Environment&lt;/code&gt; 对象：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;templates_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;templates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;templates_env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;templates_dir&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们做了几乎与上面相同的事情，除了我们为&lt;code&gt;templates_dir&lt;/code&gt;提供了一个默认值，&lt;code&gt;templates&lt;/code&gt;以便用户不必写它。现在我们有了实现我们之前设计的&lt;code&gt;template&lt;/code&gt;方法的所有方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;templates_env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我认为这里没有必要解释任何事情。你唯一想知道的是为什么我给了&lt;code&gt;context&lt;/code&gt;一个默认值&lt;code&gt;None&lt;/code&gt;，检查它是否是&lt;code&gt;None&lt;/code&gt;，然后将值设置为空字典&lt;code&gt;{}&lt;/code&gt;。你可能会说我可以在声明中给它默认值&lt;code&gt;{}&lt;/code&gt;。但是&lt;code&gt;dict&lt;/code&gt;它是一个可变对象，在Python中将可变对象设置为默认值是一种不好的做法。&lt;a href="https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"&gt;在这里&lt;/a&gt;阅读更多相关信息。&lt;/p&gt;
&lt;p&gt;随着一切准备就绪，我们可以创建模板和处理程序。首先，创建&lt;code&gt;templates&lt;/code&gt;文件夹：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir templates
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过执行&lt;code&gt;touch templates/index.html&lt;/code&gt;创建文件&lt;code&gt;index.html&lt;/code&gt;并将以下内容放入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ title }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The name of the framework is {{ name }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在我们可以在我们的&lt;code&gt;app.py&lt;/code&gt;创建处理程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/template&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;template_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Alcazar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Best Framework&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就是这样（好吧，差不多）。启动&lt;code&gt;gunicorn&lt;/code&gt;然后访问&lt;code&gt;http://localhost:8000/template&lt;/code&gt;。你会看到一个大大的&lt;code&gt;Internal Server Error&lt;/code&gt;。那是因为&lt;code&gt;resp.body&lt;/code&gt;期望bytes, 而我们的&lt;code&gt;template&lt;/code&gt;方法返回一个unicode字符串。因此，我们需要对其进行编码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;

&lt;span class="nd"&gt;@api.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/template&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;template_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Alcazar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Best Framework&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重新启动gunicorn，你将看到我们的模板的所有荣耀。在后续的文章中，我们将不再需要&lt;code&gt;encode&lt;/code&gt;并使我们的API更漂亮。&lt;/p&gt;
&lt;h2 id="_4"&gt;结论&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们在这篇文章中实现了三个新功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试客户端&lt;/li&gt;
&lt;li&gt;添加路径的替代方式（如Django的实现方式）&lt;/li&gt;
&lt;li&gt;支持模板&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请务必在评论中告诉我们应该在本系列中实现的其他功能。对于下一部分，我们肯定会添加对静态文件的支持，但我不确定我们应该添加哪些其他功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;稍微提醒一下，这个系列是基于我为学习目的而编写的&lt;a href="https://github.com/rahmonov/alcazar"&gt;Alcazar框架&lt;/a&gt;。如果你喜欢这个系列，&lt;a href="https://github.com/rahmonov/alcazar"&gt;请在这儿&lt;/a&gt;查看博客中的内容，一定要通过star该repo来表达你的喜爱。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fight on!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 06 Mar 2019 11:03:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-06:/write-python-framework-part-three.html</guid><category>python</category><category>web框架</category></item><item><title>如何编写Python Web框架（二）</title><link>https://www.EWhisper.cn/write-python-framework-part-two.html</link><description>&lt;blockquote&gt;
&lt;p&gt;本文为译文&lt;/p&gt;
&lt;p&gt;原文链接: &lt;a href="http://rahmonov.me/posts/write-python-framework-part-two/"&gt;How to write a Python web framework. Part II.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者: Jahongir Rahmonov&lt;/p&gt;
&lt;p&gt;Github仓库: &lt;a href="https://github.com/rahmonov/alcazar"&gt;alcazar&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;a href="https://www.EWhisper.cn/write-python-framework-part-one.html"&gt;第一部分中&lt;/a&gt;，我们开始编写自己的Python框架并实现以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WSGI兼容&lt;/li&gt;
&lt;li&gt;请求处理程序&lt;/li&gt;
&lt;li&gt;路由：简单和参数化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请务必在此之前阅读系列的&lt;a href="https://www.EWhisper.cn/write-python-framework-part-one.html"&gt;第一部分&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这部分同样令人兴奋，我们将在其中添加以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查重复的路径&lt;/li&gt;
&lt;li&gt;基于类的处理程序&lt;/li&gt;
&lt;li&gt;单元测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ready? 让我们开始吧。&lt;/p&gt;
&lt;h2 id="_1"&gt;重复的路径&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;现在，我们的框架允许添加任意次数相同的路由。因此，以下内容将起作用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello from the HOME page&amp;quot;&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello from the SECOND HOME page&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;框架不会抱怨，因为我们使用Python字典来存储路由，只有最后一个才能使用&lt;code&gt;http://localhost:8000/home/&lt;/code&gt;。显然，这并不好。我们希望确保框架在用户尝试添加现有路由时会抛出信息。您可以想象，实施起来并不是很困难。因为我们使用Python dict来存储路由，所以我们可以简单地检查字典中是否已存在给定路径。如果是，我们抛出异常，如果不是，我们让它添加一个路由。在我们编写任何代码之前，让我们回忆下我们的主要&lt;code&gt;API&lt;/code&gt;类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;parse_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parse_result&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parse_result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;named&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not found.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们需要更改&lt;code&gt;route&lt;/code&gt;函数，以便在再次添加现有路由时抛出异常：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Such route already exists.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，尝试添加相同的路径两次并重新启动你的gunicorn。您应该看到抛出以下异常：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
...
AssertionError: Such route already exists.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们可以重构它以将其减少到一行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Such route already exists.&amp;quot;&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完工！进入下一个功能。&lt;/p&gt;
&lt;h2 id="_2"&gt;基于类的处理程序&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果你了解Django，你知道它支持基于函数和基于类的视图（即我们的处理程序）。我们已经有了基于函数的处理程序。现在我们将添加基于类的，适用于更复杂, 更大的处理程序。我们基于类的处理程序将如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BooksHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Books Page&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Endpoint to create a book&amp;quot;&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这意味着我们存储路径的dict:  &lt;code&gt;self.routes&lt;/code&gt;可以包含类和函数作为值。因此，当我们在&lt;code&gt;handle_request()&lt;/code&gt;方法中找到一个处理程序时，我们需要检查处理程序是一个函数还是一个类。如果它是一个函数，它应该像现在一样工作。如果它是一个类，根据请求方法，我们应该调用该类的对应方法。也就是说，如果请求方法是&lt;code&gt;GET&lt;/code&gt;，我们应该调用类的&lt;code&gt;get()&lt;/code&gt;方法，如果是&lt;code&gt;POST&lt;/code&gt;我们应该调用&lt;code&gt;post&lt;/code&gt;方法等。这是&lt;code&gt;handle_request()&lt;/code&gt;方法现在的样子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们要做的第一件事是检查找到的处理程序是否是一个类。为此，我们使用&lt;code&gt;inspect&lt;/code&gt;模块：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;   &lt;span class="c1"&gt;# class based handler is being used&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，如果正在使用基于类的处理程序，我们需要根据请求方法找到类的适当方法。为此，我们可以使用内置的&lt;code&gt;getattr&lt;/code&gt;函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;handler_function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;getattr&lt;/code&gt;接受一个对象实例作为第一个参数，将属性名称作为第二个参数。第三个参数是如果没有找到则返回的值。因此，&lt;code&gt;GET&lt;/code&gt;将返回&lt;code&gt;get&lt;/code&gt;，&lt;code&gt;POST&lt;/code&gt;返回&lt;code&gt;post&lt;/code&gt;, &lt;code&gt;some_other_attribute&lt;/code&gt;返回&lt;code&gt;None&lt;/code&gt;。如果&lt;code&gt;handler_function&lt;/code&gt;是&lt;code&gt;None&lt;/code&gt;，则表示此类函数未在类中实现，并且不允许此请求方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;handler_function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler_function&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Method not allowed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果实际找到了handler_function，那么我们只需调用它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;handler_function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler_function&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Method now allowed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;handler_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在整个方法看起来像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;handler_function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler_function&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Method now allowed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;handler_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我不喜欢我们有两个&lt;code&gt;handler_function&lt;/code&gt;和&lt;code&gt;handler&lt;/code&gt;。我们可以重构它们以使它更优雅：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Method now allowed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就是这样。我们现在可以测试对基于类的处理程序的支持。首先，如果你还没有, 请将此处理程序添加到&lt;code&gt;app.py&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BooksHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Books Page&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，重新启动你的gunicorn并转到页面&lt;code&gt;http://localhost:8000/book&lt;/code&gt;，你应该看到消息&lt;code&gt;Books Page&lt;/code&gt;。就这样, 我们增加了对基于类的处理程序的支持。可以试试实现其他方法(例如&lt;code&gt;post&lt;/code&gt;和&lt;code&gt;delete&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;进入下一个功能！&lt;/p&gt;
&lt;h2 id="_3"&gt;单元测试&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果没有单元测试，哪个项目是可靠的，对吧？所以让我们添加几个。我喜欢使用&lt;code&gt;pytest&lt;/code&gt;，所以让我们安装它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pytest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;并创建一个文件，我们将编写测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch test_bumbo.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;提醒一下，&lt;code&gt;bumbo&lt;/code&gt;是框架的名称。您可能以不同的方式命名。另外，如果您不知道&lt;a href="https://docs.pytest.org/en/latest/"&gt;pytest&lt;/a&gt;是什么，我强烈建议您查看它以了解如何编写单元测试。&lt;/p&gt;
&lt;p&gt;首先，让我们为我们的&lt;code&gt;API&lt;/code&gt;类创建一个我们可以在每个测试中使用的工具：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_bumbo.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;api&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，对于我们的第一次单元测试，让我们从简单的开始。让我们测试一下我们是否可以添加路径。如果它没有抛出异常，则表示测试成功通过：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_basic_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@api.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;YOLO&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;像这样运行测试：&lt;code&gt;pytest test_bumbo.py&lt;/code&gt;你应该看到如下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;collected 1 item

test_bumbo.py .                                                                                                                                                            [100%]

====== 1 passed in 0.09 seconds ======
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，让我们测试它是否会在我们尝试添加现有路由时抛出异常：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_bumbo.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_route_overlap_throws_exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@api.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;YOLO&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nd"&gt;@api.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;YOLO&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再次运行测试，您将看到它们都通过了。&lt;/p&gt;
&lt;p&gt;我们可以添加更多测试，例如默认响应，参数化路由，状态代码等。但是，所有测试都要求我们向处理程序发送HTTP请求。为此，我们需要一个测试客户端。但是如果我们在这里做的话，我认为这篇文章会变得太大了。我们将在这些系列的下一篇文章中完成。我们还将添加对模板和其他一些有趣内容的支持。所以，请继续关注。&lt;/p&gt;
&lt;p&gt;像往常一样，如果您想看一些功能实现，请在评论部分告诉我。&lt;/p&gt;
&lt;p&gt;P.S. 这些博客文章基于我正在构建的&lt;a href="https://github.com/rahmonov/alcazar"&gt;Python Web框架&lt;/a&gt;。因此，&lt;a href="https://github.com/rahmonov/alcazar"&gt;请在这儿&lt;/a&gt;查看博客中的内容，一定要通过star该repo来表达你的喜爱。&lt;/p&gt;
&lt;p&gt;Fight on!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 01 Mar 2019 15:51:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-01:/write-python-framework-part-two.html</guid><category>python</category><category>web框架</category></item><item><title>如何编写Python Web框架（一）</title><link>https://www.EWhisper.cn/write-python-framework-part-one.html</link><description>&lt;blockquote&gt;
&lt;p&gt;译文:&lt;/p&gt;
&lt;p&gt;原文链接: &lt;a href="http://rahmonov.me/posts/write-python-framework-part-one/"&gt;How to write a Python web framework. Part I.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者: Jahongir Rahmonov&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“不要重新发明轮子”是我们每天听到的最常见的咒语之一。但是如果我想了解更多有关车轮的信息怎么办？如果我想学习如何制作这个该死的车轮怎么办？我认为为了学习而重新发明它是一个好主意。因此，在这些系列中，我们将编写自己的Python Web框架，以了解在Flask，Django和其他框架中如何完成所有这些魔术。&lt;/p&gt;
&lt;p&gt;在本系列的第一部分中，我们将构建框架中最重要的部分。最后，我们将有请求处理程序(request handlers)（类似Django 视图 views）和路由(routing)：既有简单（如&lt;code&gt;/books/&lt;/code&gt;）请求也有参数化（如&lt;code&gt;/greet/{name}&lt;/code&gt;）请求。&lt;/p&gt;
&lt;p&gt;在我开始做新事物之前，我想考虑最终结果。在这种情况下，在一天结束时，我们希望能够在生产中使用此框架，因此我们希望我们的框架由快速，轻量级的生产级应用程序服务器提供服务。在过去的几年里，我一直在我的所有项目中使用&lt;a href="https://gunicorn.org/"&gt;gunicorn&lt;/a&gt;，我对结果非常满意。那么，让我们一起来用&lt;code&gt;gunicorn&lt;/code&gt;吧。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Gunicorn&lt;/code&gt;是一个&lt;a href="http://rahmonov.me/posts/what-the-hell-is-wsgi-anyway-and-what-do-you-eat-it-with/"&gt;WSGI&lt;/a&gt; HTTP服务器，因此它需要应用程序的特定入口点。如果你不知道什么&lt;code&gt;WSGI&lt;/code&gt;是什么, &lt;a href="http://rahmonov.me/posts/what-the-hell-is-wsgi-anyway-and-what-do-you-eat-it-with/"&gt;可以阅读这篇文章&lt;/a&gt;，我会等待。否则，你无法理解这篇博文的大部分内容。&lt;/p&gt;
&lt;p&gt;您是否了解了WSGI是什么？如果了解了。那我们就继续吧。&lt;/p&gt;
&lt;p&gt;要与WSGI兼容，我们需要一个可调用的对象（函数或类），它需要两个参数（&lt;code&gt;environ&lt;/code&gt;和&lt;code&gt;start_response&lt;/code&gt;）并返回一个WSGI兼容的响应。那么，让我们开始写代码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 译者注:&lt;/p&gt;
&lt;p&gt;编程环境: Linux或MacOS (windows系统不适用该教程)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;想一个框架的名称并创建具有该名称的文件夹。我把它命名为&lt;code&gt;bumbo&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir bumbo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进入此文件夹，创建一个虚拟环境并激活它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; bumbo
python3.6 -m venv venv
&lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，创建一个名为&lt;code&gt;app.py&lt;/code&gt; 的文件，我们将在这个文件里存储我们的&lt;code&gt;gunicorn&lt;/code&gt;入口点：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch app.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个&lt;code&gt;app.py&lt;/code&gt;内部，让我们编写一个简单的函数来查看它是否可以和&lt;code&gt;gunicorn&lt;/code&gt;一起工作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response_body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;200 OK&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;response_body&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如上所述，这个可调用的入口点接收两个参数。其中之一&lt;code&gt;environ&lt;/code&gt;是存储有关请求的各种信息，例如请求方法，URL，查询参数等。第二个&lt;code&gt;start_response&lt;/code&gt;顾名思义是开始响应的。现在，让我们尝试用&lt;code&gt;gunicorn&lt;/code&gt;运行此代码。对于&lt;code&gt;gunicorn&lt;/code&gt;安装和运行如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install gunicorn
gunicorn app:app
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一个&lt;code&gt;app&lt;/code&gt;是我们创建的文件，第二个&lt;code&gt;app&lt;/code&gt;是我们刚刚编写的函数的名称。如果一切都很好，您将在输出中看到如下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[2019-02-09 17:58:56 +0500] [30962] [INFO] Starting gunicorn 19.9.0
[2019-02-09 17:58:56 +0500] [30962] [INFO] Listening at: http://127.0.0.1:8000 (30962)
[2019-02-09 17:58:56 +0500] [30962] [INFO] Using worker: sync
[2019-02-09 17:58:56 +0500] [30966] [INFO] Booting worker with pid: 30966
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果您看到此内容，请打开浏览器并转到&lt;code&gt;http://localhost:8000&lt;/code&gt;。你应该看到我们的老朋友：&lt;code&gt;Hello, World!&lt;/code&gt;信息。真棒！&lt;/p&gt;
&lt;p&gt;现在，让我们将这个函数变成一个类，因为我们需要很多辅助方法，并且它们更容易在类中编写。创建一个&lt;code&gt;api.py&lt;/code&gt;文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch api.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在此文件中，创建以下&lt;code&gt;API&lt;/code&gt;类。我会解释一下它的作用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response_body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;200 OK&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;response_body&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，删除&lt;code&gt;app.py&lt;/code&gt;里面的所有内容并编写以下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重新启动&lt;code&gt;gunicorn&lt;/code&gt;并在浏览器中检查结果。它应该和以前一样，因为我们只是简单地将我们的&lt;code&gt;app&lt;/code&gt;函数改为一个被调用的类&lt;code&gt;API&lt;/code&gt;并在调用此类实例时覆盖它的&lt;code&gt;__call__&lt;/code&gt;方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app = API()
app()   #  this is where __call__ is called
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在我们创建了我们的类，我希望使代码更加优雅，因为所有这些字节（&lt;code&gt;b"Hello World"&lt;/code&gt;）和&lt;code&gt;start_response&lt;/code&gt;似乎让我感到困惑。值得庆幸的是，有一个名为&lt;a href="https://docs.pylonsproject.org/projects/webob/en/stable/index.html"&gt;WebOb&lt;/a&gt;的酷包，它通过包装&lt;code&gt;WSGI&lt;/code&gt;请求环境和响应状态，标题和正文来为HTTP请求和响应提供对象。通过使用这个包，我们可以通过此包中提供的类传递&lt;code&gt;environ&lt;/code&gt;和&lt;code&gt;start_response&lt;/code&gt;，而不必自己处理。在我们继续之前，我建议你看一下&lt;a href="https://docs.pylonsproject.org/projects/webob/en/stable/index.html"&gt;WebOb&lt;/a&gt;的&lt;a href="https://docs.pylonsproject.org/projects/webob/en/stable/index.html"&gt;文档&lt;/a&gt;来理解我在说什么以及&lt;code&gt;WebOb&lt;/code&gt;更多的API 。&lt;/p&gt;
&lt;p&gt;以下是我们将如何重构此代码。首先，安装&lt;code&gt;WebOb&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install webob
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在&lt;code&gt;api.py&lt;/code&gt;文件开头导入&lt;code&gt;Request&lt;/code&gt;和&lt;code&gt;Response&lt;/code&gt;类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在我们可以在&lt;code&gt;__call__&lt;/code&gt;方法中使用它们：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看起来好多了！重新启动&lt;code&gt;gunicorn&lt;/code&gt;，您应该看到与以前相同的结果。最好的部分是我不必解释这里正在做什么。这一切都是不言自明的。我们正在创建一个请求，一个响应，然后返回该响应。真棒！我必须注意到&lt;code&gt;request&lt;/code&gt;这里还没有使用，因为我们没有对它做任何事情。所以，让我们利用这个机会来使用请求对象。另外，让我们将&lt;code&gt;response&lt;/code&gt;创建重构为它自己的方法。我们稍后会看到为什么这么做会更好：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;user_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;HTTP_USER_AGENT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;No User Agent Found&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, my friend with this user agent: {user_agent}&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启你的&lt;code&gt;gunicorn&lt;/code&gt;，你应该在浏览器中看到这条新消息。你看见了吗？酷。我们继续。&lt;/p&gt;
&lt;p&gt;此时，我们以相同的方式处理所有请求。无论我们收到什么请求，我们只返回在&lt;code&gt;handle_request&lt;/code&gt;方法中创建的相同响应。最终，我们希望它是动态的。也就是说，我们希望提供的来自&lt;code&gt;/home/&lt;/code&gt;的请求不同于来自&lt;code&gt;/about/&lt;/code&gt;的。&lt;/p&gt;
&lt;p&gt;为此，在&lt;code&gt;app.py&lt;/code&gt;内部，让我们创建两个处理这两个请求的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;api.py&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello from the HOME page&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;about&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello from the ABOUT page&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，我们需要以某种方式将这两种方法与上述路径联系起来：&lt;code&gt;/home/&lt;/code&gt;和&lt;code&gt;/about/&lt;/code&gt;。我喜欢Flask的做法，看起来像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;api.py&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello from the HOME page&amp;quot;&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/about&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;about&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello from the ABOUT page&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你觉得怎么样？看起来不错？然后让我们实现这个bad boy吧！&lt;/p&gt;
&lt;p&gt;如您所见，该&lt;code&gt;route&lt;/code&gt;方法是一个装饰器，接受一个路径并包装方法。实施起来应该不会太难：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是我们在这里所做的。在该&lt;code&gt;__init__&lt;/code&gt;方法中，在被调用的&lt;code&gt;self.routes&lt;/code&gt;的地方我们简单地定义了一个&lt;code&gt;dict&lt;/code&gt;，我们将路径存储为键, 处理程序handlers作为值。它看起来像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1100a70c8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;/about&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1101a80c3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在该&lt;code&gt;route&lt;/code&gt;方法中，我们将路径作为参数，并且在装饰器方法中，只需将&lt;code&gt;self.routes&lt;/code&gt;路径作为键放在字典中，将处理程序作为值。&lt;/p&gt;
&lt;p&gt;在这一点上，我们有所有的拼图。我们有处理程序和与之关联的路径。现在，当一个请求进来时，我们需要检查它的&lt;code&gt;path&lt;/code&gt;，找到一个合适的处理程序，调用该处理程序并返回一个适当的响应。我们这样做：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不是太难了，是吗？我们简单地迭代&lt;code&gt;self.routes&lt;/code&gt;，将路径与请求的路径进行比较，如果存在匹配，则调用与该路径关联的处理程序。&lt;/p&gt;
&lt;p&gt;重新启动&lt;code&gt;gunicorn&lt;/code&gt;并在浏览器中尝试这些路径。首先，访问&lt;code&gt;http://localhost:8000/home/&lt;/code&gt;，然后去&lt;code&gt;http://localhost:8000/about/&lt;/code&gt;。您应该看到相应的消息。很酷，对吗？&lt;/p&gt;
&lt;p&gt;下一步，我们可以回答“如果找不到路径会怎么样？”的问题。让我们创建一个返回“Not found.”的简单HTTP响应的方法。状态代码为404：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not found.&amp;quot;&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，让我们在我们的&lt;code&gt;handle_request&lt;/code&gt;方法中使用它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重新启动&lt;code&gt;gunicorn&lt;/code&gt;并尝试一些不存在的路由。你应该看到这个可爱的“Not found.” 页。现在，为了便于阅读，让我们重构一下找到自己方法的处理程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就像之前一样，它只是迭代&lt;code&gt;self.route&lt;/code&gt;，将路径与请求路径进行比较，如果路径相同则返回对应处理程序。如果没有找到处理程序，则返回&lt;code&gt;None&lt;/code&gt;。现在，我们可以在我们的&lt;code&gt;handle_request&lt;/code&gt;方法中使用它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我认为它看起来好多了，并且非常容易解释。重启&lt;code&gt;gunicorn&lt;/code&gt;，看看一切都像以前一样有效。&lt;/p&gt;
&lt;p&gt;此时，我们有路由和处理程序。它非常棒，但我们的路径很简单。它们不支持url路径中的关键字参数。如果我们想拥有&lt;code&gt;@app.route("/hello/{person_name}")&lt;/code&gt;这条路径并且能够在我们的处理程序中使用&lt;code&gt;person_name&lt;/code&gt;这样的内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, {person_name}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为此，如果有人访问&lt;code&gt;/hello/Matthew/&lt;/code&gt;，我们需要能够将&lt;code&gt;/hello/{person_name}/&lt;/code&gt;路径与已注册的路径匹配并找到适当的处理程序。值得庆幸的是，已经有一个名为&lt;code&gt;parse&lt;/code&gt;的包正确地为我们做了。让我们继续安装它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install parse
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;让我们试一下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, {name}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, Matthew&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;named&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Matthew&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如您所见，它解析了字符串&lt;code&gt;Hello, Matthew&lt;/code&gt;，并能够识别出&lt;code&gt;Matthew&lt;/code&gt;是与我们提供的字符串&lt;code&gt;{name}&lt;/code&gt;相对应的字符串。&lt;/p&gt;
&lt;p&gt;让我们在我们的&lt;code&gt;find_handler&lt;/code&gt;方法中使用它，不仅可以找到与路径对应的方法，还可以找到提供的关键字参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;parse_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parse_result&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parse_result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;named&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们仍在迭代&lt;code&gt;self.routes&lt;/code&gt;，现在不是比较请求路径的路径，而是尝试解析它，如果有结果，我们将处理程序和关键字参数作为字典返回。现在，我们可以在&lt;code&gt;handle_request&lt;/code&gt;内部使用这个将这些参数传递给处理程序，如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;唯一的变化是，我们得到了两个&lt;code&gt;handler&lt;/code&gt;和&lt;code&gt;kwargs&lt;/code&gt;从&lt;code&gt;self.find_handler&lt;/code&gt;，并传递一个&lt;code&gt;kwargs&lt;/code&gt;像这样的处理&lt;code&gt;**kwargs&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;让我们用这种类型的路径编写一个处理程序并试一试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/hello/{name}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, {name}&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启你的&lt;code&gt;gunicorn&lt;/code&gt;访问&lt;code&gt;http://localhost:8000/hello/Matthew/&lt;/code&gt;。你应该有这个美妙的信息: &lt;code&gt;Hello, Matthew&lt;/code&gt;。太棒了吧？再添加几个这样的处理程序。您还可以指出给定参数的类型。例如，您可以将处理程序内的&lt;code&gt;@app.route("/tell/{age:d}")&lt;/code&gt;参数&lt;code&gt;age&lt;/code&gt;作为数字。&lt;/p&gt;
&lt;h2 id="_1"&gt;结论&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这是一个漫长的旅程，但我认为这很棒。我写这篇文章时亲自学到了很多东西。如果你喜欢这篇博文，请在评论中告诉我们我们应该在框架中实现的其他功能。我在考虑基于类的处理程序，支持模板和静态文件。&lt;/p&gt;
&lt;p&gt;Fight on!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 01 Mar 2019 14:44:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-01:/write-python-framework-part-one.html</guid><category>python</category><category>web框架</category></item></channel></rss>