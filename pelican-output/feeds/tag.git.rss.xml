<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>东风微鸣 Blog - git</title><link>https://www.EWhisper.cn/</link><description>Focus on Python/Java/DevOps/Observability</description><lastBuildDate>Sun, 26 May 2019 21:24:52 +0800</lastBuildDate><item><title>使用 Docker 安装 Gitlab</title><link>https://www.EWhisper.cn/install-gitlab-with-docker.html</link><description>&lt;h2 id="docker"&gt;Docker 安装&lt;a class="headerlink" href="#docker" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;官网链接:&lt;a href="https://docs.gitlab.com/omnibus/docker/"&gt;GitLab Docker images&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/docker/Dockerfile"&gt;官网 Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker pull gitlab/gitlab-ce  &lt;span class="c1"&gt;# 下载&lt;/span&gt;
sudo docker run --detach &lt;span class="se"&gt;\&lt;/span&gt;
  --hostname gitlab.example.com &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;443&lt;/span&gt;:443 --publish &lt;span class="m"&gt;80&lt;/span&gt;:80 --publish &lt;span class="m"&gt;22&lt;/span&gt;:22 &lt;span class="se"&gt;\&lt;/span&gt;
  --name gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --restart always &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/config:/etc/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/logs:/var/log/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/data:/var/opt/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  gitlab/gitlab-ce:latest  &lt;span class="c1"&gt;# 运行容器&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_1"&gt;数据存在哪儿:&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;本地位置&lt;/th&gt;
&lt;th align="left"&gt;容器位置&lt;/th&gt;
&lt;th align="left"&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;/srv/gitlab/data&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;/var/opt/gitlab&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;用于存储应用数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;/srv/gitlab/logs&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;/var/log/gitlab&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;用于存储日志&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;/srv/gitlab/config&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;/etc/gitlab&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;用于存储GitLab配置文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="gitlab"&gt;配置Gitlab:&lt;a class="headerlink" href="#gitlab" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;配置文件位于: &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;几种配置方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo docker exec -it gitlab /bin/bash&lt;/code&gt; 进入到容器内, 然后通过&lt;code&gt;vi&lt;/code&gt;编辑保存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo docker exec -it gitlab editor /etc/gitlab/gitlab.rb&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编辑完之后, 重启容器:&lt;code&gt;sudo docker restart gitlab&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="docker_1"&gt;预配置 Docker 容器&lt;a class="headerlink" href="#docker_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;也可以通过将环境变量&lt;code&gt;GITLAB_OMNIBUS_CONFIG&lt;/code&gt;添加到docker run命令来预配置GitLab Docker映像。此变量可以包含任何&lt;code&gt;gitlab.rb&lt;/code&gt;设置，并在加载容器&lt;code&gt;gitlab.rb&lt;/code&gt;文件之前进行加载。&lt;/p&gt;
&lt;p&gt;示例如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker run --detach &lt;span class="se"&gt;\&lt;/span&gt;
  --hostname gitlab.example.com &lt;span class="se"&gt;\&lt;/span&gt;
  --env &lt;span class="nv"&gt;GITLAB_OMNIBUS_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;external_url &amp;#39;http://my.domain.com/&amp;#39;; gitlab_rails[&amp;#39;lfs_enabled&amp;#39;] = true;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;443&lt;/span&gt;:443 --publish &lt;span class="m"&gt;80&lt;/span&gt;:80 --publish &lt;span class="m"&gt;22&lt;/span&gt;:22 &lt;span class="se"&gt;\&lt;/span&gt;
  --name gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --restart always &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/config:/etc/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/logs:/var/log/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/data:/var/opt/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  gitlab/gitlab-ce:latest
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;启动容器后&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以通过&lt;a href="http://localhost"&gt;http://localhost&lt;/a&gt; 进行访问.&lt;/p&gt;
&lt;p&gt;可以通过 &lt;code&gt;sudo docker logs -f gitlab&lt;/code&gt; 查看日志.&lt;/p&gt;
&lt;h3 id="ip"&gt;发布到公网IP&lt;a class="headerlink" href="#ip" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker run --detach &lt;span class="se"&gt;\&lt;/span&gt;
  --hostname gitlab.example.com &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;198&lt;/span&gt;.51.100.1:443:443 &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;198&lt;/span&gt;.51.100.1:80:80 &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;198&lt;/span&gt;.51.100.1:22:22 &lt;span class="se"&gt;\&lt;/span&gt;
  --name gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --restart always &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/config:/etc/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/logs:/var/log/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/data:/var/opt/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  gitlab/gitlab-ce:latest
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="docker-composegitlab"&gt;使用docker-compose安装GitLab&lt;a class="headerlink" href="#docker-composegitlab" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;安装 docker compose&lt;/li&gt;
&lt;li&gt;创建&lt;code&gt;docker-compose.yml&lt;/code&gt; 文件（或&lt;a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/docker/docker-compose.yml"&gt;下载示例&lt;/a&gt;）: &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="nt"&gt;web&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gitlab/gitlab-ce:latest&amp;#39;&lt;/span&gt;
   &lt;span class="nt"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
   &lt;span class="nt"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gitlab.example.com&amp;#39;&lt;/span&gt;
   &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="nt"&gt;GITLAB_OMNIBUS_CONFIG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
       &lt;span class="no"&gt;external_url &amp;#39;https://gitlab.example.com&amp;#39;&lt;/span&gt;
       &lt;span class="no"&gt;# Add any other gitlab.rb configuration here, each on its own line&lt;/span&gt;
   &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;80:80&amp;#39;&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;443:443&amp;#39;&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;22:22&amp;#39;&lt;/span&gt;
   &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/srv/gitlab/config:/etc/gitlab&amp;#39;&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/srv/gitlab/logs:/var/log/gitlab&amp;#39;&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/srv/gitlab/data:/var/opt/gitlab&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;确保您&lt;code&gt;docker-compose.yml&lt;/code&gt;与运行&lt;code&gt;docker-compose up -d&lt;/code&gt; 在同一目录中以运行GitLab&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="openshift"&gt;OpenShift 安装&lt;a class="headerlink" href="#openshift" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 注意:&lt;/p&gt;
&lt;p&gt;目前Gitlab通过OpenShift 安装, 有一些已知的问题. 并且只在OpenShift 3.11版本上测试通过.&lt;/p&gt;
&lt;p&gt;另外, 安装是通过 Helm Chart方式进行安装的. 还是有点复杂的...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_3"&gt;已知的问题&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以下问题是已知的，并且预计适用于OpenShift上的GitLab安装：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;anyuid&lt;/code&gt;scc的要求：(OpenShift 的安全加固导致的)&lt;ul&gt;
&lt;li&gt;GitLab的不同组件，如Sidekiq，unicorn等，使用UID 1000来运行服务。&lt;/li&gt;
&lt;li&gt;PostgreSQL chart以&lt;code&gt;root&lt;/code&gt;用户身份运行服务。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/charts/gitlab/issues/752"&gt;问题＃752&lt;/a&gt;是open状态，以调查更多有关解决此问题的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果使用&lt;code&gt;hostpath&lt;/code&gt;卷，则需要为主机中的持久性卷目录授予&lt;code&gt;0777&lt;/code&gt;权限，以授予所有用户对卷的访问权限。&lt;/li&gt;
&lt;li&gt;OpenShift的内置router 不支持通过SSH进行Git操作。 &lt;a href="https://gitlab.com/charts/gitlab/issues/892"&gt;问题＃892&lt;/a&gt; 是oepn状态，以调查更多有关解决此问题的信息。&lt;/li&gt;
&lt;li&gt;众所周知，GitLab Registry不能与OpenShift的内置router配合使用。 &lt;a href="https://gitlab.com/charts/gitlab/issues/893"&gt;问题＃893&lt;/a&gt;是open状态，以调查更多有关修复此问题的信息。&lt;/li&gt;
&lt;li&gt;从Let's Encrypt自动发出SSL证书不适用于OpenShift router。我们建议&lt;a href="https://docs.gitlab.com/charts/installation/tls.html#option-2-use-your-own-wildcard-certificate"&gt;您使用自己的证书&lt;/a&gt;。 &lt;a href="https://gitlab.com/charts/gitlab/issues/894"&gt;问题＃894&lt;/a&gt;开放，以调查更多有关解决此问题的信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_4"&gt;先决条件步骤&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;请参阅&lt;a href="https://www.okd.io/download.html#oc-platforms"&gt;官方文档&lt;/a&gt; 以安装和配置群集。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行&lt;code&gt;oc cluster status&lt;/code&gt;并确认群集正在运行：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc cluster status
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;输出应类似于：
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Web console URL: https://gitlab.example.com:8443/console/

Config is at host directory
Volumes are at host directory
Persistent volumes are at host directory /home/okduser/openshift/openshift.local.clusterup/openshift.local.pv
Data will be discarded when cluster is destroyed
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;请注意主机中Persistent Volumes的位置（在上例中`/home/okduser/openshift/openshift.local.clusterup/openshift.local.pv`）。以下命令需要`PV_HOST_DIRECTORY`环境变量中的路径。
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;修改PV目录的权限（用以上值替换以下命令中的路径）：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chmod -R a+rwx &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PV_HOST_DIRECTORY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/*
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;切换到系统管理员用户：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc login -u system:admin
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="5"&gt;
&lt;li&gt;将&lt;code&gt;anyuid&lt;/code&gt;scc 添加到系统用户：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc adm policy add-scc-to-group anyuid system:authenticated
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;**警告**：此设置将应用于所有namespace，并将导致Docker镜像未明确指定USER作为`root`用户运行。 [问题＃895](https://gitlab.com/charts/gitlab/issues/895)是开放的，用于记录所需的不同服务帐户，并描述仅将scc添加到这些服务帐户，因此影响可能有限。
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="6"&gt;
&lt;li&gt;创建服务帐户和&lt;code&gt;rolebinding&lt;/code&gt;RBAC并&lt;a href="https://docs.gitlab.com/charts/installation/tools.html#helm"&gt;安装Tiller&lt;/a&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create -f https://gitlab.com/charts/gitlab/raw/master/doc/installation/examples/rbac-config.yaml
helm init --service-account tiller
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_5"&gt;下一步&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在群集启动并运行后，继续&lt;a href="https://docs.gitlab.com/charts/installation/deployment.html"&gt;安装chart&lt;/a&gt;，并准备好静态IP和DNS条目。&lt;/p&gt;
&lt;p&gt;在此之前，请注意常规 chart安装过程中的以下更改：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们将使用OpenShift的内置router，因此需要禁用chart中包含的nginx-ingress服务。将以下标志传递给&lt;code&gt;helm install&lt;/code&gt;命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--set nginx-ingress.enabled&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;由于已知内置注册表不能使用Helm Chart与OpenShift一起使用，因此请禁用注册表服务。将以下标志传递给 &lt;code&gt;helm install&lt;/code&gt;命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--set registry.enabled=false
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;&lt;a href="https://docs.gitlab.com/charts/installation/tls.html#option-2-use-your-own-wildcard-certificate"&gt;使用您自己的SSL证书&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 26 May 2019 21:24:52 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-26:/install-gitlab-with-docker.html</guid><category>docker</category><category>openshift</category><category>k8s</category><category>containers</category><category>git</category></item><item><title>使用OpenShift进行二进制构建</title><link>https://www.EWhisper.cn/binary-builds-with-openshift.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;介绍&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;用例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;限制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;教程概述&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_5"&gt;教程：构建本地代码更改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;教程：构建私有代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pipeline"&gt;教程：来自 pipeline 的二进制工件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;介绍&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;OpenShift 推荐和常用的构建方式是: 直接从代码仓库(如GIT 或SVN)中拉取源码进行构建(即源码构建). 但是这一种构建方式并不能满足所有的需求, 所以还有一种构建方式就是: 二进制构建. 二进制构建适用于以下2个场景:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发人员本地开发调试代码并构建;&lt;/li&gt;
&lt;li&gt;OpenShift和 CI/CD的pipeline进行整合, 获取从前边平台(如自动化开发平台或测试平台)传过来的工件(即二进制包)并构建为镜像.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OpenShift中的二进制构建功能允许开发人员将源代码或工件直接上传到构建(build)，而不是从Git存储库URL pull需要构建的源。通过源代码，Docker或自定义构建策略的 BuildConfig 都可以作为二进制构建启动。从本地工件启动构建时，现有源引用将替换为来自本地用户计算机的源。&lt;/p&gt;
&lt;p&gt;可以使用几种方式提供源，这些方式对应于使用&lt;code&gt;start-build&lt;/code&gt;命令时可用的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从文件（&lt;code&gt;--from-file&lt;/code&gt;）：当构建的整个源包含单个文件时就是这种情况。例如，它可能是用于Docker构建的&lt;code&gt;Dockerfile&lt;/code&gt;，用于Java应用构建的&lt;code&gt;pom.xml&lt;/code&gt;，或用于Ruby构建的&lt;code&gt;Gemfile&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;从目录（&lt;code&gt;--from-directory&lt;/code&gt;）：当源在本地目录中并且未提交到Git存储库时使用此目录。&lt;code&gt;start-build&lt;/code&gt; 命令将创建给定目录的存档，并将其作为源上传到构建器(builder)。&lt;/li&gt;
&lt;li&gt;从存档（&lt;code&gt;--from-archive&lt;/code&gt;）：当具有源的存档已存在时使用此选项。该存档可以是&lt;code&gt;tar&lt;/code&gt;，&lt;code&gt;tar.gz&lt;/code&gt;或&lt;code&gt;zip&lt;/code&gt;格式。&lt;/li&gt;
&lt;li&gt;从Git存储库（&lt;code&gt;--from-repo&lt;/code&gt;）：源是当前用户本地计算机上的Git存储库的一部分。当前存储库的HEAD commit将被存档并发送到OpenShift进行构建。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;用例&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;二进制构建适用于无法从现有Git存储库中提取源的需求。使用二进制构建的原因包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建和测试本地代码的变更。克隆来自公共存储库的源，并将本地变更上传到OpenShift进行构建。而无需在任何地方提交或推送本地更改。&lt;/li&gt;
&lt;li&gt;构建私有代码。新构建可以作为二进制构建从头开始。然后可以将源直接从本地工作站上传到OpenShift，而无需将其签入SCM。&lt;/li&gt;
&lt;li&gt;使用其他来源的工件构建镜像。通过Jenkins pipeline，二进制构建可以用于整合使用Maven或C编译器等工具构建的工件，以及使用这些构建的运行时镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;限制&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;二进制构建无法重复。由于二进制构建依赖于在构建开始时用户上传工件，因此OpenShift无法重复相同的构建而无需用户每次都重复相同的上载。&lt;/li&gt;
&lt;li&gt;无法自动触发二进制生成。它们只能在用户上传所需的二进制工件时手动启动。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;以二进制构建方式启动的构建版本也可能具有已配置的源URL。如果是这种情况，触发器会成功启动构建，但源将来自配置的源URL，而不是来自上次构建运行时用户提供的源。(比如: 用户先从Git仓库下载了源码并修改, 用本地修改后的源码手动上传、构建，那么OpenShift会获取到Git仓库的URL, 如果配置了触发器, 下次构建就直接通过Git URL pull源码并自动构建, 而不是自动获取本地的源码.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_4"&gt;教程概述&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下教程假设您有一个可用的OpenShift集群，并且您有一个可以创建工件的项目。它要求您拥有本地&lt;code&gt;git&lt;/code&gt;和&lt;code&gt;oc&lt;/code&gt;客户端。&lt;/p&gt;
&lt;h3 id="_5"&gt;教程：构建本地代码更改&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;基于现有源存储库创建新应用程序并为其创建路由：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app https://github.com/openshift/ruby-hello-world.git
oc expose svc/ruby-hello-world
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;等待初始构建完成并通过route来查看应用程序的页面。你应该得到一个欢迎页面：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc get route ruby-hello-world
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;在本地克隆存储库：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/openshift/ruby-hello-world.git
&lt;span class="nb"&gt;cd&lt;/span&gt; ruby-hello-world
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;
&lt;p&gt;更改应用程序的视图。使用您喜欢的编辑器编辑 &lt;code&gt;views/main.rb&lt;/code&gt;：将&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;标签更改为&lt;code&gt;&amp;lt;body style="background-color:blue"&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用本地修改的源启动新构建。在存储库的本地目录中，运行：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc start-build ruby-hello-world --from-dir&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; --follow
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;构建完成并重新部署应用程序后，指向应用程序主机的route应该会生成一个蓝色背景的页面。&lt;/p&gt;
&lt;p&gt;您可以继续在本地进行更改并使用&lt;code&gt;oc start-build --from-dir&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;您还可以创建代码分支，在本地提交更改，并使用存储库的HEAD作为构建的源：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout -b my_branch
git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;My changes&amp;quot;&lt;/span&gt;
oc start-build ruby-hello-world --from-repo&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; --follow
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_6"&gt;教程：构建私有代码&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;创建一个本地目录来保存您的代码：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir myapp
&lt;span class="nb"&gt;cd&lt;/span&gt; myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;在目录中创建一个名为&lt;code&gt;Dockerfile&lt;/code&gt;的文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; centos:centos7&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8080&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; index.html /var/run/web/index.html
&lt;span class="k"&gt;CMD&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /var/run/web &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; python -m SimpleHTTPServer &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;创建一个&lt;code&gt;index.html&lt;/code&gt;文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My local app&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is my local application&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;为您的应用程序创建一个新的构建：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-build --strategy docker --binary --docker-image centos:centos7 --name myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="5"&gt;
&lt;li&gt;使用本地目录的内容启动二进制构建：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc start-build myapp --from-dir . --follow
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="6"&gt;
&lt;li&gt;使用&lt;code&gt;new-app&lt;/code&gt;部署应用程序，然后为其创建路由：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app myapp
oc expose svc/myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="7"&gt;
&lt;li&gt;获取指向对应应用主机的路由：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc get route myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在构建和部署代码之后，您可以通过更改本地文件并通过&lt;code&gt;oc start-build myapp --from-dir&lt;/code&gt;再次调用启动新构建来进行迭代。构建完成后，代码将自动部署，更新的内容将在刷新页面时反映在浏览器中。&lt;/p&gt;
&lt;h3 id="pipeline"&gt;教程：来自 pipeline 的二进制工件&lt;a class="headerlink" href="#pipeline" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;OpenShift上的Jenkins允许使用带有合适工具的slave镜像来构建代码。例如，您可以使用&lt;code&gt;maven&lt;/code&gt; slave镜像来从代码存储库构建WAR包。但是，一旦构建了此工件，您需要将其提交到包含正确的运行时工件的镜像以运行您的代码。可以使用二进制构建将这些工件添加到运行时映像。在下面的教程中，我们将创建一个Jenkins pipeline，该pipeline使用&lt;code&gt;maven&lt;/code&gt; slave构建WAR，然后使用带有&lt;code&gt;Dockerfile&lt;/code&gt;的二进制构建将WAR添加到 wildfly 运行时映像。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为您的应用程序创建一个新目录：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir mavenapp
&lt;span class="nb"&gt;cd&lt;/span&gt; mavenapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;创建一个&lt;code&gt;Dockerfile&lt;/code&gt;将WAR复制到wildfly镜像内的适当位置以供执行。将以下内容复制到名为的本地文件 &lt;code&gt;Dockerfile&lt;/code&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; wildfly:latest&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; ROOT.war /wildfly/standalone/deployments/ROOT.war
&lt;span class="k"&gt;CMD&lt;/span&gt;  &lt;span class="nv"&gt;$STI_SCRIPTS_PATH&lt;/span&gt;/run
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;为该&lt;code&gt;Dockerfile&lt;/code&gt;创建一个新的BuildConfig：&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;这将自动启动一个构建, 刚开始会构建失败，因为 &lt;code&gt;ROOT.war&lt;/code&gt;工件尚不可用。下面的pipeline将使用二进制构建将该WAR包传递给构建。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat Dockerfile &lt;span class="p"&gt;|&lt;/span&gt; oc new-build -D - --name mavenapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;创建1个使用Jenkins pipeline的BuildConfig, 这个BuildConfig将构建1个WAR包，然后使用该WAR包和先前创建的&lt;code&gt;Dockerfile&lt;/code&gt;来构建镜像。相同的模式可用于其他平台，其中二进制工件由一组工具构建，然后与最终的包含不同运行时的镜像组合。将以下代码保存到&lt;code&gt;mavenapp-pipeline.yml&lt;/code&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;BuildConfig&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mavenapp-pipeline&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;jenkinsPipelineStrategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;jenkinsfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|-&lt;/span&gt;
        &lt;span class="no"&gt;pipeline {&lt;/span&gt;
          &lt;span class="no"&gt;agent { label &amp;quot;maven&amp;quot; }&lt;/span&gt;
          &lt;span class="no"&gt;stages {&lt;/span&gt;
            &lt;span class="no"&gt;stage(&amp;quot;Clone Source&amp;quot;) {&lt;/span&gt;
              &lt;span class="no"&gt;steps {&lt;/span&gt;
                &lt;span class="no"&gt;checkout([$class: &amp;#39;GitSCM&amp;#39;,&lt;/span&gt;
                            &lt;span class="no"&gt;branches: [[name: &amp;#39;*/master&amp;#39;]],&lt;/span&gt;
                            &lt;span class="no"&gt;extensions: [&lt;/span&gt;
                              &lt;span class="no"&gt;[$class: &amp;#39;RelativeTargetDirectory&amp;#39;, relativeTargetDir: &amp;#39;mavenapp&amp;#39;]&lt;/span&gt;
                            &lt;span class="no"&gt;],&lt;/span&gt;
                            &lt;span class="no"&gt;userRemoteConfigs: [[url: &amp;#39;https://github.com/openshift/openshift-jee-sample.git&amp;#39;]]&lt;/span&gt;
                        &lt;span class="no"&gt;])&lt;/span&gt;
              &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;stage(&amp;quot;Build WAR&amp;quot;) {&lt;/span&gt;
              &lt;span class="no"&gt;steps {&lt;/span&gt;
                &lt;span class="no"&gt;dir(&amp;#39;mavenapp&amp;#39;) {&lt;/span&gt;
                  &lt;span class="no"&gt;sh &amp;#39;mvn clean package -Popenshift&amp;#39;&lt;/span&gt;
                &lt;span class="no"&gt;}&lt;/span&gt;
              &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;stage(&amp;quot;Build Image&amp;quot;) {&lt;/span&gt;
              &lt;span class="no"&gt;steps {&lt;/span&gt;
                &lt;span class="no"&gt;dir(&amp;#39;mavenapp/target&amp;#39;) {&lt;/span&gt;
                  &lt;span class="no"&gt;sh &amp;#39;oc start-build mavenapp --from-dir . --follow&amp;#39;&lt;/span&gt;
                &lt;span class="no"&gt;}&lt;/span&gt;
              &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;}&lt;/span&gt;
          &lt;span class="no"&gt;}&lt;/span&gt;
        &lt;span class="no"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;JenkinsPipeline&lt;/span&gt;
  &lt;span class="nt"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="5"&gt;
&lt;li&gt;创建pipeline 构建。如果Jenkins未部署到您的项目中，则使用管道创建的BuildConfig会先部署Jenkins。在Jenkins准备建立您的管道之前可能需要几分钟来启动。您可以通过调用&lt;code&gt;oc rollout status dc/jenkins&lt;/code&gt;来检查Jenkins的状态：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc create -f ./mavenapp-pipeline.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="6"&gt;
&lt;li&gt;一旦Jenkins准备就绪，启动之前定义的管道：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc start-build mavenapp-pipeline
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="7"&gt;
&lt;li&gt;管道构建完成后，使用&lt;code&gt;new-app&lt;/code&gt;部署新应用程序并公开其route：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app mavenapp
oc expose svc/mavenapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="8"&gt;
&lt;li&gt;使用浏览器，导航到应用程序的路径：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc get route mavenapp
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 08 May 2019 18:41:34 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-08:/binary-builds-with-openshift.html</guid><category>openshift</category><category>docker</category><category>devops</category><category>git</category><category>containers</category></item><item><title>腾讯云服务器初始化操作</title><link>https://www.EWhisper.cn/initialize-my-tencentyun-server.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;重装系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;设置监控告警&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;创建密钥并绑定主机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;安全组配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#centos-75"&gt;CentOS 7.5 优化配置&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_5"&gt;用户/登录相关优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;更新系统和软件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git"&gt;安装及配置 Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#shell"&gt;优化配置shell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-oh-my-zsh"&gt;Using Oh My Zsh&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#themes"&gt;Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;重装系统&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;因为我买的时候, CentOS最新只提供到7.3, 我希望使用CentOS 7.5. 看到镜像库里有(什么毛病, 买的时候为啥不提供&lt;img align="absmiddle" alt="😕" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f615.png" title=":confused:" width="20px"&gt;&lt;img align="absmiddle" alt="😕" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f615.png" title=":confused:" width="20px"&gt;&lt;img align="absmiddle" alt="😕" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f615.png" title=":confused:" width="20px"&gt;), 所以重新安装下系统.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;选中实例, 点击&lt;strong&gt;更多&lt;/strong&gt;, 选择&lt;strong&gt;重装系统&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="重装系统" src="./images/init_tencentyun_install_os_1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择&lt;strong&gt;公共镜像&lt;/strong&gt; -&amp;gt; &lt;strong&gt;CentOS&lt;/strong&gt; -&amp;gt; &lt;strong&gt;CentOS 7.5 64位&lt;/strong&gt; -&amp;gt; 输入root密码. 点击&lt;strong&gt;开始重装&lt;/strong&gt;. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="重装系统具体选项" src="./images/init_tencentyun_install_os_2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等待重装完毕即可.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_2"&gt;设置监控告警&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;strong&gt;监控&lt;/strong&gt;图标:&lt;/p&gt;
&lt;p&gt;&lt;img alt="点击监控" src="./images/init_tencentyun_monitor_1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有以下监控指标, 如下图, 点击&lt;strong&gt;设置告警&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;li&gt;内存&lt;/li&gt;
&lt;li&gt;宽带(内外网)&lt;/li&gt;
&lt;li&gt;磁盘IO&lt;/li&gt;
&lt;li&gt;分区使用请看&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="设置告警" src="./images/init_tencentyun_monitor_2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据自己的需要, 定制告警策略. 示例如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="告警策略" src="./images/init_tencentyun_monitor_3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要配置告警通知渠道, 需要先&lt;strong&gt;新增用户组&lt;/strong&gt;. 如下(我和其他人合用, 所以建立一个用户组还是有必要的):&lt;/p&gt;
&lt;p&gt;&lt;img alt="新增用户组" src="./images/init_tencentyun_monitor_4.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新增用户组的操作如下, 先直接使用预设策略 - 管理员就可以了.&lt;/p&gt;
&lt;p&gt;&lt;img alt="新增用户组" src="./images/init_tencentyun_groupuser_3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来关联到具体的用户组&lt;/p&gt;
&lt;p&gt;&lt;img alt="关联接受组" src="./images/init_tencentyun_monitor_5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;strong&gt;完成&lt;/strong&gt;, 配置完成后如下所示: (可以把默认的禁用掉了)&lt;/p&gt;
&lt;p&gt;&lt;img alt="告警策略" src="./images/init_tencentyun_monitor_6.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_3"&gt;创建密钥并绑定主机&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在&lt;strong&gt;SSH密钥&lt;/strong&gt; 菜单, 点击&lt;strong&gt;创建密钥&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="创建密钥" src="./images/init_tencentyun_key_1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建密钥(&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;  密钥请妥善保存, 勿外传).&lt;/p&gt;
&lt;p&gt;&lt;img alt="创建密钥" src="./images/init_tencentyun_key_2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建后, 先关闭主机(关闭后的主机才能绑定密钥, 很好, 关机也受到告警了👌), 再选择&lt;strong&gt;绑定/解绑实例&lt;/strong&gt;, 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="绑定实例" src="./images/init_tencentyun_key_3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_4"&gt;安全组配置&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;类似于防火墙权限.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;strong&gt;安全组&lt;/strong&gt; -&amp;gt; &lt;strong&gt;新建&lt;/strong&gt;. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="新建安全组" src="./images/init_tencentyun_securegroup_1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择&lt;strong&gt;立即设置规则&lt;/strong&gt;. 具体原因如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="设置规则" src="./images/init_tencentyun_securegroup_2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以先关联到我自己的云主机实例. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="关联到实例" src="./images/init_tencentyun_securegroup_3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后再配置出/入站规则, 先配置入站, 先选择&lt;strong&gt;一键放通&lt;/strong&gt;. 放通以下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Linux SSH登录: 22端口&lt;/li&gt;
&lt;li&gt;Windows登录: 3389&lt;/li&gt;
&lt;li&gt;ping: ICMP协议&lt;/li&gt;
&lt;li&gt;HTTP: 80&lt;/li&gt;
&lt;li&gt;HTTPS: 443&lt;/li&gt;
&lt;li&gt;FTP: 20和21&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="一键放通入站" src="./images/init_tencentyun_securegroup_4.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再根据自己需要添加规则, 如下: (放通TCP的8000端口)&lt;/p&gt;
&lt;p&gt;&lt;img alt="自定义规则" src="./images/init_tencentyun_securegroup_5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后配置出站规则, 选择&lt;strong&gt;一键放通&lt;/strong&gt;. 以后再慢慢细化, 如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="一键放通出栈" src="./images/init_tencentyun_securegroup_6.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此, 控制台上该配置的就配置的差不多了, 接下来登录主机进行配置.&lt;/p&gt;
&lt;h2 id="centos-75"&gt;CentOS 7.5 优化配置&lt;a class="headerlink" href="#centos-75" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_5"&gt;用户/登录相关优化&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;创建普通用户 基于公钥登录&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建普通用户: &lt;code&gt;useradd -m  -p yourpassword casey&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;普通用户基于公钥登录: (因为之前&lt;strong&gt;创建密钥并绑定主机&lt;/strong&gt;, 公钥已经存在于主机上了, 所以不需要keygen了, 直接复制就可以了)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cp /root/.ssh/authorized_keys /home/casey/.ssh &amp;amp;&amp;amp; chown -R casey:casey /home/casey/.ssh/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确认基于ssh公钥的登录是否工作&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;完整的&lt;strong&gt;基于公钥&lt;/strong&gt;登录的步骤如下: (前提是刚开始该账户能通过账号密码方式登录)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在云主机上创建普通用户: &lt;code&gt;useradd -m -p yourpassword hellowordomain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 ssh-keygen命令在云主机上创建密匙对: &lt;code&gt;ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_tencent_$(date +%Y-%m-%d) -C "tencent key for hellowordomain"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 ssh-copy-id 命令安装公匙：&lt;code&gt;ssh-copy-id -i /path/to/public-key-file user@host&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;确认基于ssh公钥的登录是否工作&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4&gt;普通用户配置sudo权限&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;在 CentOS/RHEL 系统中如何将用户 vivek 添加到 sudo 组中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 CentOS/RHEL 和 Fedora 系统中允许 wheel 组中的用户执行所有的命令。使用 usermod 命令将用户 vivek 添加到 wheel 组中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo usermod -aG wheel vivek
$ id vivek
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;sudo无需输入密码&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# root用户&lt;/span&gt;
visudo

&lt;span class="c1"&gt;# 修改如下内容后保存退出&lt;/span&gt;
&lt;span class="c1"&gt;## Allows people in group wheel to run all commands&lt;/span&gt;
&lt;span class="c1"&gt;# %wheel        ALL=(ALL)       ALL&lt;/span&gt;

&lt;span class="c1"&gt;## Same thing without a password&lt;/span&gt;
%wheel  &lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;ALL&lt;span class="o"&gt;)&lt;/span&gt;       NOPASSWD: ALL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试并确保用户 vivek 可以以 root 身份登录执行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -i  &lt;span class="c1"&gt;# 切换到root用户&lt;/span&gt;
sudo systemctl status sshd  &lt;span class="c1"&gt;# 查看sshd的状态&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;code&gt;sshd_config&lt;/code&gt; 优化&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 禁用root登录
PermitRootLogin no
ChallengeResponseAuthentication no
PasswordAuthentication no
UsePAM no
# 禁用密码登录 仅留下公匙登录
AuthenticationMethods publickey
PubkeyAuthentication yes
# 禁用空密码
PermitEmptyPasswords no
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后测试 &lt;code&gt;sshd_config&lt;/code&gt; 文件并重启/重新加载 SSH 服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo sshd -t
sudo systemctl restart sshd.service
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_6"&gt;更新系统和软件&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum upgrade -y  &lt;span class="c1"&gt;# 升级所有软件&lt;/span&gt;
sudo yum clean all -y  &lt;span class="c1"&gt;# 清理缓存&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="git"&gt;安装及配置 Git&lt;a class="headerlink" href="#git" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装Git&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo yum install -y --setopt=tsflags=nodocs git&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置git&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git config --global user.name "east4ming"&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git config --global user.email "cuikaidong@foxmail.com"&lt;/code&gt;&lt;br&gt;
&lt;code&gt;ssh-keygen -t rsa -b 4096 -C "cuikaidong@foxmail.com"  # 已有私钥也可以重复使用&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cat .ssh/id_rsa.pub&lt;/code&gt; 并复制 (id_rsa.pub是对应的公钥信息)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;打开github网页登入账户进入账户settings左边找到SSH，可以清理一下没用的SSH keys，然后新建一个 ，取名任意，粘贴进去cat产生的所有字符。保存即可。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓存HTTPS方式的密码: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ git config --global credential.helper 'cache --timeout=3600'  # Set the cache to timeout after 1 hour (setting is in seconds)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="shell"&gt;优化配置shell&lt;a class="headerlink" href="#shell" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;安装zsh&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install -y --setopt&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;tsflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nodocs zsh
zsh --version
sudo chsh -s &lt;span class="k"&gt;$(&lt;/span&gt;which zsh&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 注销&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装powerline&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install powerline-status --user
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;安装&lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;&lt;strong&gt;oh-my-zsh&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh -c &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="using-oh-my-zsh"&gt;Using Oh My Zsh&lt;a class="headerlink" href="#using-oh-my-zsh" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;以下内容来自 oh-my-zsh github&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="plugins"&gt;Plugins&lt;a class="headerlink" href="#plugins" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Oh My Zsh comes with a shitload of plugins to take advantage of. You can take a look in the &lt;a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins"&gt;plugins&lt;/a&gt; directory and/or the &lt;a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins"&gt;wiki&lt;/a&gt;to see what's currently available.&lt;/p&gt;
&lt;h4&gt;Enabling Plugins&lt;/h4&gt;
&lt;p&gt;Once you spot a plugin (or several) that you'd like to use with Oh My Zsh, you'll need to enable them in the &lt;code&gt;.zshrc&lt;/code&gt; file. You'll find the zshrc file in your &lt;code&gt;$HOME&lt;/code&gt; directory. Open it with your favorite text editor and you'll see a spot to list all the plugins you want to load.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi ~/.zshrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example, this might begin to look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;plugins=(
git
bundler
dotenv
osx
rake
rbenv
ruby
)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Using Plugins&lt;/h4&gt;
&lt;p&gt;Most plugins (should! we're working on this) include a &lt;strong&gt;README&lt;/strong&gt;, which documents how to use them.&lt;/p&gt;
&lt;h3 id="themes"&gt;Themes&lt;a class="headerlink" href="#themes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We'll admit it. Early in the Oh My Zsh world, we may have gotten a bit too theme happy. We have over one hundred themes now bundled. Most of them have &lt;a href="https://wiki.github.com/robbyrussell/oh-my-zsh/themes"&gt;screenshots&lt;/a&gt; on the wiki. Check them out!&lt;/p&gt;
&lt;h4&gt;Selecting a Theme&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Robby's theme is the default one. It's not the fanciest one. It's not the simplest one. It's just the right one (for him).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Once you find a theme that you'd like to use, you will need to edit the &lt;code&gt;~/.zshrc&lt;/code&gt; file. You'll see an environment variable (all caps) in there that looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;ZSH_THEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;robbyrussell&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To use a different theme, simply change the value to match the name of your desired theme. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;ZSH_THEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;agnoster&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# (this is one of the fancy ones)&lt;/span&gt;
&lt;span class="c1"&gt;# see https://github.com/robbyrussell/oh-my-zsh/wiki/Themes#agnoster&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Note: many themes require installing the Powerline Fonts in order to render properly.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Open up a new terminal window and your prompt should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Agnoster theme" src="https://cloud.githubusercontent.com/assets/2618447/6316862/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png"&gt;&lt;/p&gt;
&lt;p&gt;In case you did not find a suitable theme for your needs, please have a look at the wiki for &lt;a href="https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes"&gt;more of them&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you're feeling feisty, you can let the computer select one randomly for you each time you open a new terminal window.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ZSH_THEME=&amp;quot;random&amp;quot; # (...please let it be pie... please be some pie..)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And if you want to pick random theme from a list of your favorite themes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ZSH_THEME_RANDOM_CANDIDATES=(
&amp;quot;robbyrussell&amp;quot;
&amp;quot;agnoster&amp;quot;
)
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 26 Mar 2019 21:09:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-03-26:/initialize-my-tencentyun-server.html</guid><category>腾讯云</category><category>云</category><category>centos</category><category>监控</category><category>告警</category><category>可观察性</category><category>安全</category><category>密钥</category><category>git</category><category>shell</category></item></channel></rss>