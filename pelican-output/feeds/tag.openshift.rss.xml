<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>东风微鸣 Blog - openshift</title><link>https://www.EWhisper.cn/</link><description>Focus on Python/Java/DevOps/Observability</description><lastBuildDate>Sun, 26 May 2019 21:24:52 +0800</lastBuildDate><item><title>使用 Docker 安装 Gitlab</title><link>https://www.EWhisper.cn/install-gitlab-with-docker.html</link><description>&lt;h2 id="docker"&gt;Docker 安装&lt;a class="headerlink" href="#docker" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;官网链接:&lt;a href="https://docs.gitlab.com/omnibus/docker/"&gt;GitLab Docker images&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/docker/Dockerfile"&gt;官网 Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker pull gitlab/gitlab-ce  &lt;span class="c1"&gt;# 下载&lt;/span&gt;
sudo docker run --detach &lt;span class="se"&gt;\&lt;/span&gt;
  --hostname gitlab.example.com &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;443&lt;/span&gt;:443 --publish &lt;span class="m"&gt;80&lt;/span&gt;:80 --publish &lt;span class="m"&gt;22&lt;/span&gt;:22 &lt;span class="se"&gt;\&lt;/span&gt;
  --name gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --restart always &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/config:/etc/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/logs:/var/log/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/data:/var/opt/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  gitlab/gitlab-ce:latest  &lt;span class="c1"&gt;# 运行容器&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_1"&gt;数据存在哪儿:&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;本地位置&lt;/th&gt;
&lt;th align="left"&gt;容器位置&lt;/th&gt;
&lt;th align="left"&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;/srv/gitlab/data&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;/var/opt/gitlab&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;用于存储应用数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;/srv/gitlab/logs&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;/var/log/gitlab&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;用于存储日志&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;/srv/gitlab/config&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;/etc/gitlab&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;用于存储GitLab配置文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="gitlab"&gt;配置Gitlab:&lt;a class="headerlink" href="#gitlab" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;配置文件位于: &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;几种配置方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo docker exec -it gitlab /bin/bash&lt;/code&gt; 进入到容器内, 然后通过&lt;code&gt;vi&lt;/code&gt;编辑保存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo docker exec -it gitlab editor /etc/gitlab/gitlab.rb&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编辑完之后, 重启容器:&lt;code&gt;sudo docker restart gitlab&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="docker_1"&gt;预配置 Docker 容器&lt;a class="headerlink" href="#docker_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;也可以通过将环境变量&lt;code&gt;GITLAB_OMNIBUS_CONFIG&lt;/code&gt;添加到docker run命令来预配置GitLab Docker映像。此变量可以包含任何&lt;code&gt;gitlab.rb&lt;/code&gt;设置，并在加载容器&lt;code&gt;gitlab.rb&lt;/code&gt;文件之前进行加载。&lt;/p&gt;
&lt;p&gt;示例如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker run --detach &lt;span class="se"&gt;\&lt;/span&gt;
  --hostname gitlab.example.com &lt;span class="se"&gt;\&lt;/span&gt;
  --env &lt;span class="nv"&gt;GITLAB_OMNIBUS_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;external_url &amp;#39;http://my.domain.com/&amp;#39;; gitlab_rails[&amp;#39;lfs_enabled&amp;#39;] = true;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;443&lt;/span&gt;:443 --publish &lt;span class="m"&gt;80&lt;/span&gt;:80 --publish &lt;span class="m"&gt;22&lt;/span&gt;:22 &lt;span class="se"&gt;\&lt;/span&gt;
  --name gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --restart always &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/config:/etc/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/logs:/var/log/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/data:/var/opt/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  gitlab/gitlab-ce:latest
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;启动容器后&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以通过&lt;a href="http://localhost"&gt;http://localhost&lt;/a&gt; 进行访问.&lt;/p&gt;
&lt;p&gt;可以通过 &lt;code&gt;sudo docker logs -f gitlab&lt;/code&gt; 查看日志.&lt;/p&gt;
&lt;h3 id="ip"&gt;发布到公网IP&lt;a class="headerlink" href="#ip" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker run --detach &lt;span class="se"&gt;\&lt;/span&gt;
  --hostname gitlab.example.com &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;198&lt;/span&gt;.51.100.1:443:443 &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;198&lt;/span&gt;.51.100.1:80:80 &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;198&lt;/span&gt;.51.100.1:22:22 &lt;span class="se"&gt;\&lt;/span&gt;
  --name gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --restart always &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/config:/etc/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/logs:/var/log/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/data:/var/opt/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  gitlab/gitlab-ce:latest
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="docker-composegitlab"&gt;使用docker-compose安装GitLab&lt;a class="headerlink" href="#docker-composegitlab" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;安装 docker compose&lt;/li&gt;
&lt;li&gt;创建&lt;code&gt;docker-compose.yml&lt;/code&gt; 文件（或&lt;a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/docker/docker-compose.yml"&gt;下载示例&lt;/a&gt;）: &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="nt"&gt;web&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gitlab/gitlab-ce:latest&amp;#39;&lt;/span&gt;
   &lt;span class="nt"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
   &lt;span class="nt"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gitlab.example.com&amp;#39;&lt;/span&gt;
   &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="nt"&gt;GITLAB_OMNIBUS_CONFIG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
       &lt;span class="no"&gt;external_url &amp;#39;https://gitlab.example.com&amp;#39;&lt;/span&gt;
       &lt;span class="no"&gt;# Add any other gitlab.rb configuration here, each on its own line&lt;/span&gt;
   &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;80:80&amp;#39;&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;443:443&amp;#39;&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;22:22&amp;#39;&lt;/span&gt;
   &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/srv/gitlab/config:/etc/gitlab&amp;#39;&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/srv/gitlab/logs:/var/log/gitlab&amp;#39;&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/srv/gitlab/data:/var/opt/gitlab&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;确保您&lt;code&gt;docker-compose.yml&lt;/code&gt;与运行&lt;code&gt;docker-compose up -d&lt;/code&gt; 在同一目录中以运行GitLab&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="openshift"&gt;OpenShift 安装&lt;a class="headerlink" href="#openshift" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 注意:&lt;/p&gt;
&lt;p&gt;目前Gitlab通过OpenShift 安装, 有一些已知的问题. 并且只在OpenShift 3.11版本上测试通过.&lt;/p&gt;
&lt;p&gt;另外, 安装是通过 Helm Chart方式进行安装的. 还是有点复杂的...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_3"&gt;已知的问题&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以下问题是已知的，并且预计适用于OpenShift上的GitLab安装：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;anyuid&lt;/code&gt;scc的要求：(OpenShift 的安全加固导致的)&lt;ul&gt;
&lt;li&gt;GitLab的不同组件，如Sidekiq，unicorn等，使用UID 1000来运行服务。&lt;/li&gt;
&lt;li&gt;PostgreSQL chart以&lt;code&gt;root&lt;/code&gt;用户身份运行服务。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/charts/gitlab/issues/752"&gt;问题＃752&lt;/a&gt;是open状态，以调查更多有关解决此问题的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果使用&lt;code&gt;hostpath&lt;/code&gt;卷，则需要为主机中的持久性卷目录授予&lt;code&gt;0777&lt;/code&gt;权限，以授予所有用户对卷的访问权限。&lt;/li&gt;
&lt;li&gt;OpenShift的内置router 不支持通过SSH进行Git操作。 &lt;a href="https://gitlab.com/charts/gitlab/issues/892"&gt;问题＃892&lt;/a&gt; 是oepn状态，以调查更多有关解决此问题的信息。&lt;/li&gt;
&lt;li&gt;众所周知，GitLab Registry不能与OpenShift的内置router配合使用。 &lt;a href="https://gitlab.com/charts/gitlab/issues/893"&gt;问题＃893&lt;/a&gt;是open状态，以调查更多有关修复此问题的信息。&lt;/li&gt;
&lt;li&gt;从Let's Encrypt自动发出SSL证书不适用于OpenShift router。我们建议&lt;a href="https://docs.gitlab.com/charts/installation/tls.html#option-2-use-your-own-wildcard-certificate"&gt;您使用自己的证书&lt;/a&gt;。 &lt;a href="https://gitlab.com/charts/gitlab/issues/894"&gt;问题＃894&lt;/a&gt;开放，以调查更多有关解决此问题的信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_4"&gt;先决条件步骤&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;请参阅&lt;a href="https://www.okd.io/download.html#oc-platforms"&gt;官方文档&lt;/a&gt; 以安装和配置群集。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行&lt;code&gt;oc cluster status&lt;/code&gt;并确认群集正在运行：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc cluster status
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;输出应类似于：
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Web console URL: https://gitlab.example.com:8443/console/

Config is at host directory
Volumes are at host directory
Persistent volumes are at host directory /home/okduser/openshift/openshift.local.clusterup/openshift.local.pv
Data will be discarded when cluster is destroyed
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;请注意主机中Persistent Volumes的位置（在上例中`/home/okduser/openshift/openshift.local.clusterup/openshift.local.pv`）。以下命令需要`PV_HOST_DIRECTORY`环境变量中的路径。
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;修改PV目录的权限（用以上值替换以下命令中的路径）：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chmod -R a+rwx &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PV_HOST_DIRECTORY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/*
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;切换到系统管理员用户：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc login -u system:admin
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="5"&gt;
&lt;li&gt;将&lt;code&gt;anyuid&lt;/code&gt;scc 添加到系统用户：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc adm policy add-scc-to-group anyuid system:authenticated
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;**警告**：此设置将应用于所有namespace，并将导致Docker镜像未明确指定USER作为`root`用户运行。 [问题＃895](https://gitlab.com/charts/gitlab/issues/895)是开放的，用于记录所需的不同服务帐户，并描述仅将scc添加到这些服务帐户，因此影响可能有限。
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="6"&gt;
&lt;li&gt;创建服务帐户和&lt;code&gt;rolebinding&lt;/code&gt;RBAC并&lt;a href="https://docs.gitlab.com/charts/installation/tools.html#helm"&gt;安装Tiller&lt;/a&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create -f https://gitlab.com/charts/gitlab/raw/master/doc/installation/examples/rbac-config.yaml
helm init --service-account tiller
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_5"&gt;下一步&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在群集启动并运行后，继续&lt;a href="https://docs.gitlab.com/charts/installation/deployment.html"&gt;安装chart&lt;/a&gt;，并准备好静态IP和DNS条目。&lt;/p&gt;
&lt;p&gt;在此之前，请注意常规 chart安装过程中的以下更改：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们将使用OpenShift的内置router，因此需要禁用chart中包含的nginx-ingress服务。将以下标志传递给&lt;code&gt;helm install&lt;/code&gt;命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--set nginx-ingress.enabled&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;由于已知内置注册表不能使用Helm Chart与OpenShift一起使用，因此请禁用注册表服务。将以下标志传递给 &lt;code&gt;helm install&lt;/code&gt;命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--set registry.enabled=false
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;&lt;a href="https://docs.gitlab.com/charts/installation/tls.html#option-2-use-your-own-wildcard-certificate"&gt;使用您自己的SSL证书&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 26 May 2019 21:24:52 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-26:/install-gitlab-with-docker.html</guid><category>docker</category><category>openshift</category><category>k8s</category><category>containers</category><category>git</category></item><item><title>OpenShift企业测试环境应用部署实战</title><link>https://www.EWhisper.cn/deploy-app-with-openshift-in-enterprise-env.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;总览&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;禅道简介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;实战步骤&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;具体步骤&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;总览&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今天领导交给我个小任务 - 把项目管理软件&lt;a href="https://www.zentao.net/download/80137.html"&gt;"禅道"&lt;/a&gt;开源版 部署到测试环境. 大概研究了下禅道开源版的官方文档, 决定通过Docker容器的方式把它部署到测试环境. &lt;/p&gt;
&lt;p&gt;除去研究的时间, 实际上2小时就把禅道开源版部署到测试环境, 无需申请主机、存储、数据库、中间件和域名。真是丝般顺滑, 挺舒服的.&lt;/p&gt;
&lt;h3 id="_2"&gt;禅道简介&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;禅道&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;是专业的研发项目管理软件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;细分需求、任务、缺陷和用例&lt;/li&gt;
&lt;li&gt;完整覆盖研发项目核心流程&lt;/li&gt;
&lt;li&gt;完整软件生命周期管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;实战步骤&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_4"&gt;概述&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;简单归纳起来, 就以下几步:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建"禅道"开源版的Docker 镜像&lt;/li&gt;
&lt;li&gt;在OpenShift上, 创建"禅道"项目, 并通过Docker 镜像创建"禅道"应用.&lt;/li&gt;
&lt;li&gt;将"禅道"应用通过域名发布到企业内网.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然, 由于OpenShift的安全增强, 以及企业测试环境的部分安全限制以及其他客观条件, 实际上执行起来需要的步骤更多:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建"禅道"开源版的Docker 镜像&lt;ol&gt;
&lt;li&gt;在云主机上, 通过Dockerfile 构建Docker镜像. 并导出&lt;/li&gt;
&lt;li&gt;在企业OpenShift 测试环境上, 上传并导入Docker 镜像&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;在OpenShift上, 创建"禅道"项目, 并通过Docker 镜像创建"禅道"应用.&lt;ol&gt;
&lt;li&gt;创建"禅道" - &lt;strong&gt;zentao&lt;/strong&gt; 项目&lt;ol&gt;
&lt;li&gt;(可选) 指定该项目只能被调度到特定主机上;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;(可选) 创建OpenShift useroot 服务账户 &lt;/li&gt;
&lt;li&gt;创建"禅道" app 应用&lt;/li&gt;
&lt;li&gt;持久化"禅道"应用和数据库数据.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;将"禅道"应用通过域名发布到企业内网.&lt;ol&gt;
&lt;li&gt;创建"禅道" 服务(service)&lt;/li&gt;
&lt;li&gt;创建"禅道" 路由(route)&lt;/li&gt;
&lt;li&gt;添加DNS记录.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_5"&gt;具体步骤&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;1-1 Dockerfile 构建镜像并导出&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;我是在我的云主机上构建的. &lt;/p&gt;
&lt;p&gt;之所以选择云主机, 原因有2:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有网, 有Docker镜像下载加速;&lt;/li&gt;
&lt;li&gt;已安装 Docker 组件和服务&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;创建 &lt;code&gt;Dockerfile&lt;/code&gt; (可以直接通过&lt;a href="http://dl.cnezsoft.com/zentao/docker/docker_zentao.zip"&gt;官网下载连接&lt;/a&gt;下载),&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ubuntu:16.04&lt;/span&gt;
&lt;span class="k"&gt;MAINTAINER&lt;/span&gt;&lt;span class="s"&gt; yidong &amp;lt;yidong@cnezsoft.com&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y apache2 mariadb-server php php-curl php-gd php-ldap php-mbstring php-mcrypt php-mysql php-xml php-zip php-cli php-json curl unzip libapache2-mod-php locales

&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en_US.UTF8&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;LANG=\&amp;quot;en_US.UTF-8\&amp;quot;\nLANGUAGE=\&amp;quot;en_US:en\&amp;quot;&amp;quot;&lt;/span&gt; &amp;gt; /etc/default/locale &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; locale-gen en_US.UTF-8

&lt;span class="k"&gt;RUN&lt;/span&gt; mkdir -p /app/zentaopms
&lt;span class="k"&gt;COPY&lt;/span&gt; docker-entrypoint.sh /app
&lt;span class="k"&gt;RUN&lt;/span&gt; &lt;span class="nv"&gt;random&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date +%s&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; curl http://cdn.zentaopm.com/latest/zentao.zip?rand&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$random&lt;/span&gt; -o /var/www/zentao.zip
&lt;span class="k"&gt;RUN&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /var/www/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; unzip -q zentao.zip &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm zentao.zip
&lt;span class="k"&gt;RUN&lt;/span&gt; a2enmod rewrite

&lt;span class="k"&gt;RUN&lt;/span&gt; rm -rf /etc/apache2/sites-enabled/000-default.conf /var/lib/mysql/*
&lt;span class="k"&gt;RUN&lt;/span&gt; sed -i &lt;span class="s1"&gt;&amp;#39;1i ServerName 127.0.0.1&amp;#39;&lt;/span&gt; /etc/apache2/apache2.conf
&lt;span class="k"&gt;COPY&lt;/span&gt; config/apache.conf /etc/apache2/sites-enabled/000-default.conf
&lt;span class="k"&gt;COPY&lt;/span&gt; config/ioncube_loader_lin_7.0.so /usr/lib/php/20151012/ioncube_loader_lin_7.0.so
&lt;span class="k"&gt;COPY&lt;/span&gt; config/00-ioncube.ini /etc/php/7.0/apache2/conf.d/
&lt;span class="k"&gt;COPY&lt;/span&gt; config/00-ioncube.ini /etc/php/7.0/cli/conf.d/

&lt;span class="k"&gt;VOLUME&lt;/span&gt;&lt;span class="s"&gt; /app/zentaopms /var/lib/mysql&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/app/docker-entrypoint.sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;此时, 该项目目录包含以下内容:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tree docker_zentao
docker_zentao
&lt;span class="p"&gt;|&lt;/span&gt;-- config
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;-- &lt;span class="m"&gt;00&lt;/span&gt;-ioncube.ini
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;-- apache.conf
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="sb"&gt;`&lt;/span&gt;-- ioncube_loader_lin_7.0.so
&lt;span class="p"&gt;|&lt;/span&gt;-- docker-entrypoint.sh
&lt;span class="p"&gt;|&lt;/span&gt;-- Dockerfile
&lt;span class="p"&gt;|&lt;/span&gt;-- docker_zentao.tar.gz
&lt;span class="sb"&gt;`&lt;/span&gt;-- README.md

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;7&lt;/span&gt; files
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;使用&lt;code&gt;Dockerfile&lt;/code&gt; 构建docker 镜像:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; docker_zentao
docker build -t zentao .
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;(可选) 可以运行一下以测试构建的镜像是否可以正常运行:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run --name zentao-test -p &lt;span class="m"&gt;8000&lt;/span&gt;:80 -e &lt;span class="nv"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;123456&lt;/span&gt; -d zentao  &lt;span class="c1"&gt;# 后台运行该docker容器&lt;/span&gt;
docker ps  &lt;span class="c1"&gt;# 查看容器是否正常运行, 有无crash&lt;/span&gt;
docker stop zentao-test  &lt;span class="c1"&gt;# 测试完毕, 停止该容器&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="5"&gt;
&lt;li&gt;将镜像导出为tar包.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker save -o docker_zentao.tar zentao
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;1-2 上传并导入docker 镜像&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;为什么要通过tar包导入镜像?&lt;/p&gt;
&lt;p&gt;因为企业的OpenShift测试环境不通外网, 但是有个测试内网的镜像仓库.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;把镜像tar包, 上传到可以连接到OpenShift企业测试环境的任意节点(本例子通过sftp上传)&lt;/li&gt;
&lt;li&gt;导入到企业测试环境的镜像仓库:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker load -i docker_zentao.tar
docker push txocp-registry.example.com/ewhisper/zentao
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2-1 创建"禅道" - &lt;strong&gt;zentao&lt;/strong&gt; 项目&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明1:&lt;/p&gt;
&lt;p&gt;"项目"(project) 是OpenShift中的概念, project可以理解为对应K8S的&lt;code&gt;namespace&lt;/code&gt;. 通过这个实现了多租户的隔离.&lt;/p&gt;
&lt;p&gt;所以每启动一个新项目, 就应该在OpenShift上创建一个单独的项目.&lt;/p&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明2:&lt;/p&gt;
&lt;p&gt;(可选) 指定该项目只能被调度到特定主机上;&lt;/p&gt;
&lt;p&gt;由于是测试环境, 为了方便配置, 会通过&lt;code&gt;HostPath&lt;/code&gt; (就是把文件持久化到本机的本地磁盘)来实现持久化. 那么就要保证"禅道"(zentao)这个项目的容器都要调度到一台指定的node(节点)服务器. 所以要通过下文的&lt;code&gt;node-selector&lt;/code&gt;来实现该功能.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc adm new-project zentao &lt;span class="se"&gt;\&lt;/span&gt;
    --node-selector&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kubernetes.io/hostname=txocp.node02.example.com&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上边的命令中, &lt;code&gt;oc adm new-project zentao&lt;/code&gt; 就是创建一个新项目 - zentao.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--node-selector&lt;/code&gt; 就是通过&lt;code&gt;node-selector&lt;/code&gt; 后边的条件来指定该项目如何调度.(应用场景是: 调度到高IO节点, 或者调度到上海区域...)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubernetes.io/hostname=txocp.node02.example.com&lt;/code&gt; 前边的&lt;code&gt;xxxhostname&lt;/code&gt;是条件, 即根据hostname 调度, 后边的是判定. 总的来说, 即该项目要被调度到:hostname为&lt;code&gt;txocp.node02.example.com&lt;/code&gt;的节点. (该节点肯定只有一个). &lt;/p&gt;
&lt;h5&gt;2-1-1 创建OpenShift useroot 服务账户&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;之所以创建OpenShift 服务账户, 是因为 OpenShift 作为企业级容器平台, 进行了安全加固,  默认不允许容器以&lt;strong&gt;root&lt;/strong&gt; 用户启动和运行. 所以要通过创建一个服务账户 &lt;code&gt;useroot&lt;/code&gt;, 为此账户添加"允许容器以root启动和运行的"的权限, 并应用到"zentao" 项目. 以此来使得容器可以正常启动.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在zentao项目中, 创建 服务账户(serviceaccount) - useroot&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc create serviceaccount useroot
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;使用OpenShift集群管理员用户, 为&lt;code&gt;useroot&lt;/code&gt;赋予&lt;code&gt;anyuid&lt;/code&gt;的权限:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc adm policy add-scc-to-user anyuid -z useroot
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;(可选) 如果已经启动过应用, 则通过&lt;code&gt;oc patch&lt;/code&gt;来更新应用的dc (部署配置)内容:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc patch dc/zentao --patch &lt;span class="s1"&gt;&amp;#39;{&amp;quot;spec&amp;quot;:{&amp;quot;template&amp;quot;:{&amp;quot;spec&amp;quot;:{&amp;quot;serviceAccountName&amp;quot;: &amp;quot;useroot&amp;quot;}}}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;此后, 容器内就可以通过root运行.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;2-2 创建"禅道" - zentao 应用&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;一个&lt;strong&gt;项目&lt;/strong&gt; 中, 可以包括多个应用, 比如: 禅道web server, 禅道app server, 禅道缓存服务器, 禅道数据库...&lt;/p&gt;
&lt;p&gt;本次为测试环境, 禅道的所有组件统统打进一个docker镜像里了, 所以就只有一个应用 - zentao. 里边其实就包括了禅道的: web server, app server和db.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app --name&lt;span class="o"&gt;=&lt;/span&gt;zentao &lt;span class="se"&gt;\&lt;/span&gt;
--docker-image&lt;span class="o"&gt;=&lt;/span&gt;txocp-registry.example.com/ewhisper/zentao &lt;span class="se"&gt;\&lt;/span&gt;
-e &lt;span class="nv"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;123456&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--insecure-registry&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上边的命令, 通过&lt;code&gt;oc new-app&lt;/code&gt;来创建新应用. 通过&lt;code&gt;--docker-image&lt;/code&gt;来指定镜像的地址, 通过&lt;code&gt;--e xxx&lt;/code&gt; 来指定环境变量.&lt;/p&gt;
&lt;p&gt;由于测试环境的registry没有配置https, 所以要添加&lt;code&gt;--insecure-registy=true&lt;/code&gt;, 否则默认是通过https访问, 会找不到镜像.&lt;/p&gt;
&lt;p&gt;运行命令后, OpenShift会默认创建:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;deployment configuration (dc, 部署配置) - zentao &lt;/li&gt;
&lt;li&gt;build configuration (bc, 构建配置)&lt;/li&gt;
&lt;li&gt;pod(容器)&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过&lt;code&gt;oc get&lt;/code&gt; 后边跟 &lt;code&gt;dc&lt;/code&gt;  &lt;code&gt;bc&lt;/code&gt;   &lt;code&gt;pod&lt;/code&gt;等来获取应用的创建和部署状态.&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;oc status&lt;/code&gt; 或者&lt;code&gt;oc logs&lt;/code&gt;来查看相关事件和日志.&lt;/p&gt;
&lt;p&gt;至此, 应用已经部署好了, 但是目前还存在2个问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;"禅道"的应用和数据库数据是临时性的, 还没有进行持久化;&lt;/li&gt;
&lt;li&gt;"禅道"只能通过docker内部访问, 用户无法访问.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;后续来一一解决这2个问题. 首先解决数据没有持久化的问题.&lt;/p&gt;
&lt;h4&gt;2-3 持久化应用和数据库数据&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;OpenShift 是一个容器编排调度系统, 理论上来说一个pod在哪儿我们完全不知道, 所以OpenShift推荐的持久化方案是通过PV和PVC来实现的.&lt;/p&gt;
&lt;p&gt;PV的具体实现可以是: NFS之类的公有存储, 而不应该是本地路径. (OpenShift默认不允许本地路径(即: hostPath)实现方式)&lt;/p&gt;
&lt;p&gt;本例中, 为了避免一切不必要的资源申请流程(当前OpenShift测试环境没有现成的nfs这类公有存储), 所以就直接用本地路径来实现持久化. 但还是要强调, 这不是最佳实践, 不推荐这么做. &lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于OpenShift不允许本地路径持久化, 所以首先要更改配置使其允许. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个名为&lt;code&gt;hostpath&lt;/code&gt;的SCC (SCC可以简单的理解为安全限制策略). 先创建一个&lt;code&gt;scc-hostpath.yaml&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;SecurityContextConstraints&lt;/span&gt;
&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hostpath&lt;/span&gt;
&lt;span class="nt"&gt;allowPrivilegedContainer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;span class="nt"&gt;runAsUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;RunAsAny&lt;/span&gt;
&lt;span class="nt"&gt;seLinuxContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;RunAsAny&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;通过yaml 创建SCC:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc create -f scc-hostpath.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;把&lt;code&gt;allowHostDirVolumePlugin&lt;/code&gt; 参数配给&lt;code&gt;hostpath&lt;/code&gt; :&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc patch scc hostpath -p &lt;span class="s1"&gt;&amp;#39;{&amp;quot;allowHostDirVolumePlugin&amp;quot;: true}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;把&lt;code&gt;hostpath&lt;/code&gt;这个SCC赋权给所有用户: (&lt;code&gt;system:authenticated&lt;/code&gt; 就是所有用户)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc adm policy add-scc-to-group hostpath system:authenticated
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至此, 所有用户就都可以挂载&lt;code&gt;hostPath&lt;/code&gt; 卷了.&lt;/p&gt;
&lt;p&gt;接下来, 就是要配置持久化了:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在对应的node节点, 创建对应的持久化目录, 如:&lt;code&gt;/data/mysql&lt;/code&gt; 和&lt;code&gt;/data/zentaopms&lt;/code&gt; (禅道 镜像, 包含了2个需要持久化的目录, 分别为: &lt;code&gt;/var/lib/mysql&lt;/code&gt; 和&lt;code&gt;/app/zentaopms&lt;/code&gt;, 分别持久化到前边的2个目录)&lt;/li&gt;
&lt;li&gt;编辑创建 zentao app时自动生成的&lt;code&gt;dc&lt;/code&gt; 配置, &lt;code&gt;oc edit dc zentao&lt;/code&gt;, 修改完成后如下:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apps.openshift.io/v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;DeploymentConfig&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;openshift.io/generated-by&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;OpenShiftNewApp&lt;/span&gt;
  &lt;span class="nt"&gt;creationTimestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2019-05-16T10:24:25Z&amp;#39;&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
  &lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
  &lt;span class="nt"&gt;resourceVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;12345678&amp;#39;&lt;/span&gt;
  &lt;span class="nt"&gt;selfLink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/apis/apps.openshift.io/v1/namespaces/zentao/deploymentconfigs/zentao&lt;/span&gt;
  &lt;span class="nt"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;c7xxxxxd-77c4-11e9-xxxx-faxxxxxxxfa&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;replicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
  &lt;span class="nt"&gt;revisionHistoryLimit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt;
  &lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
    &lt;span class="nt"&gt;deploymentconfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
  &lt;span class="nt"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;activeDeadlineSeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;21600&lt;/span&gt;
    &lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{}&lt;/span&gt;
    &lt;span class="nt"&gt;rollingParams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;intervalSeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
      &lt;span class="nt"&gt;maxSurge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;25%&lt;/span&gt;
      &lt;span class="nt"&gt;maxUnavailable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;25%&lt;/span&gt;
      &lt;span class="nt"&gt;timeoutSeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;600&lt;/span&gt;
      &lt;span class="nt"&gt;updatePeriodSeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
    &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Rolling&lt;/span&gt;
  &lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;openshift.io/generated-by&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;OpenShiftNewApp&lt;/span&gt;
      &lt;span class="nt"&gt;creationTimestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;null&lt;/span&gt;
      &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
        &lt;span class="nt"&gt;deploymentconfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
    &lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;
              &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;123456&lt;/span&gt;
          &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;&amp;gt;-&lt;/span&gt;
            &lt;span class="no"&gt;txocp-registry.example.com/ewhisper/zentao@sha256:......&lt;/span&gt;
          &lt;span class="nt"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Always&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
          &lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{}&lt;/span&gt;
          &lt;span class="nt"&gt;terminationMessagePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/dev/termination-log&lt;/span&gt;
          &lt;span class="nt"&gt;terminationMessagePolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;File&lt;/span&gt;
          &lt;span class="nt"&gt;volumeMounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;mountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/app/zentaopms&lt;/span&gt;
              &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-1&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;mountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/lib/mysql&lt;/span&gt;
              &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-2&lt;/span&gt;
      &lt;span class="nt"&gt;dnsPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ClusterFirst&lt;/span&gt;
      &lt;span class="nt"&gt;restartPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Always&lt;/span&gt;
      &lt;span class="nt"&gt;schedulerName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;default-scheduler&lt;/span&gt;
      &lt;span class="nt"&gt;securityContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{}&lt;/span&gt;
      &lt;span class="nt"&gt;serviceAccount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;useroot&lt;/span&gt;
      &lt;span class="nt"&gt;serviceAccountName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;useroot&lt;/span&gt;
      &lt;span class="nt"&gt;terminationGracePeriodSeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;30&lt;/span&gt;
      &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hostPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/cuikaidong/zentao/zentaopms&lt;/span&gt;
            &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-1&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hostPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/cuikaidong/zentao/mysql&lt;/span&gt;
            &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-2&lt;/span&gt;
  &lt;span class="nt"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;
  &lt;span class="nt"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ConfigChange&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;imageChangeParams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;automatic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
        &lt;span class="nt"&gt;containerNames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
        &lt;span class="nt"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ImageStreamTag&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;zentao:latest&amp;#39;&lt;/span&gt;
          &lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao&lt;/span&gt;
        &lt;span class="nt"&gt;lastTriggeredImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;&amp;gt;-&lt;/span&gt;
          &lt;span class="no"&gt;txocp-registry.example.com/ewhisper/zentao@sha256:......&lt;/span&gt;
      &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ImageChange&lt;/span&gt;
&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;availableReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
  &lt;span class="nt"&gt;conditions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;lastTransitionTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2019-05-16T10:26:16Z&amp;#39;&lt;/span&gt;
      &lt;span class="nt"&gt;lastUpdateTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2019-05-16T10:26:16Z&amp;#39;&lt;/span&gt;
      &lt;span class="nt"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deployment config has minimum availability.&lt;/span&gt;
      &lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;True&amp;#39;&lt;/span&gt;
      &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Available&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;lastTransitionTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2019-05-16T11:54:24Z&amp;#39;&lt;/span&gt;
      &lt;span class="nt"&gt;lastUpdateTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2019-05-16T11:54:26Z&amp;#39;&lt;/span&gt;
      &lt;span class="nt"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;replication controller &amp;quot;zentao-5&amp;quot; successfully rolled out&lt;/span&gt;
      &lt;span class="nt"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;NewReplicationControllerAvailable&lt;/span&gt;
      &lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;True&amp;#39;&lt;/span&gt;
      &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Progressing&lt;/span&gt;
  &lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;causes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ConfigChange&lt;/span&gt;
    &lt;span class="nt"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;config change&lt;/span&gt;
  &lt;span class="nt"&gt;latestVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5&lt;/span&gt;
  &lt;span class="nt"&gt;observedGeneration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;6&lt;/span&gt;
  &lt;span class="nt"&gt;readyReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
  &lt;span class="nt"&gt;replicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
  &lt;span class="nt"&gt;unavailableReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
  &lt;span class="nt"&gt;updatedReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不要被这个配置文件吓到, 其实这些都是自动生成的. 关键信息是如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          &lt;span class="nt"&gt;volumeMounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;mountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/app/zentaopms&lt;/span&gt;
              &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-1&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;mountPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/lib/mysql&lt;/span&gt;
              &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;△ 即2个容器内的需要挂载的路径, 分别被自动命名为: &lt;code&gt;zentao-volume-1&lt;/code&gt;和 &lt;code&gt;zentao-volume-2&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;对应的外部挂载, 原始情况是&lt;code&gt;EmptyDir&lt;/code&gt; (即没有挂载), 容器重启了数据就没了. 具体如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;emptyDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-1&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;emptyDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改后如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hostPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/cuikaidong/zentao/zentaopms&lt;/span&gt;
            &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-1&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hostPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/var/cuikaidong/zentao/mysql&lt;/span&gt;
            &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;zentao-volume-2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后, pod会自动进行重启, 把对应的数据通过&lt;code&gt;hostPath&lt;/code&gt; 挂载到本地目录来实现持久化.&lt;/p&gt;
&lt;h4&gt;3-1 创建"禅道" 服务(service)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务&lt;/strong&gt;(Service) 是OpenShift或K8S 的专有概念, 简单理解就是把pod内的指定接口暴露给OpenShift或K8S集群内部使用的一种方法. (比如把: mysql容器内的3306端口暴露到OpenShift SDN网络的 172.X.X.X:3306).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc expose dc zentao --port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把 zentao 应用的http服务端口80 暴露给OpenShift集群内部. (会创建一个叫 zentao 的 svc)&lt;/p&gt;
&lt;h4&gt;3-2 创建"禅道" 路由(route)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;路由&lt;/strong&gt; (route)是OpenShift的专有概念, 类似于K8S的Ingress, 作用都是把服务暴露给OpenShift之外的网络, 使得用户可以通过域名或其他方式访问到该应用. (如: 通过&lt;code&gt;zentao.apps.example.com&lt;/code&gt; 访问到 "禅道" 项目管理工具首页)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc expose svc zentao --hostname&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zentao.apps.example.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过上边的命令, 就创建了一条路由, 实现了通过&lt;code&gt;zentao.apps.example.com&lt;/code&gt; 访问到 "禅道" 项目管理工具首页. (如果不加&lt;code&gt;--hostname&lt;/code&gt;, 默认的hostname前缀为&lt;code&gt;appname-projectname&lt;/code&gt;, 即"zentao-zentao")&lt;/p&gt;
&lt;h4&gt;3-3 添加DNS记录&lt;/h4&gt;
&lt;p&gt;由于我们企业的OpenShift 测试环境DNS 的客观情况. 无法实现泛解析, 所以还需要请相关专业组手动添加DNS记录. 办公电脑添加DNS测试域等操作. &lt;/p&gt;
&lt;p&gt;做完这些操作后, 才能通过域名访问到禅道系统.&lt;/p&gt;
&lt;p&gt;至此, 我们就可以通过域名访问 "禅道" 页面​, ​而​我们​使用​的​数据​也会​保留在​指定​的​node​节点​上.​ &lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="禅道首页" src="./images/zentao_openshift.png"&gt;&lt;/p&gt;
&lt;h2 id="_6"&gt;总结&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;整体使用下来, 部分地方还存在使用不畅的情况, 可以继续优化提升使用体验, 大概总结一下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部镜像仓库镜像资源太匮乏. 导致构建镜像不太方便. 后续内部的镜像仓库可以从docker hub, 红帽官方定期拉取较为流行的镜像.&lt;/li&gt;
&lt;li&gt;在OpenShift上, 多挂载一个或多个公有存储(如NFS, NAS, 对象存储等), 方便进行数据持久化&lt;ul&gt;
&lt;li&gt;跟进一步, 希望OpenShift可以直接调用下一层数据存储的相关接口, 实现自动申请&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用通过域名发布出来, 还需要经过域控或F5或个人电脑进行进一步配置才能生效. 后续可以考虑:&lt;ul&gt;
&lt;li&gt;配置某二级域名的泛解析, 实现相关域名的自动发布. &lt;/li&gt;
&lt;li&gt;更进一步, 可以考虑OpenShift直接和F5深度整合, 将F5作为其router使用. (当前是: F5 -&amp;gt; HAProxy(router) )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;https://www.zentao.net&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Mon, 20 May 2019 00:04:46 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-20:/deploy-app-with-openshift-in-enterprise-env.html</guid><category>openshift</category><category>docker</category></item><item><title>容器自动伸缩</title><link>https://www.EWhisper.cn/openshift-pod-autoscaling.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;概览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#horizontal-pod-autoscalers"&gt;使用Horizontal Pod Autoscalers的要求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;支持的指标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;自动缩放&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpu"&gt;根据CPU利用率自动扩展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;根据内存利用率自动缩放&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#horizontal-pod-autoscaler"&gt;查看Horizontal Pod Autoscaler&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#horizontal-pod-autoscaler-status-conditions"&gt;查看Horizontal Pod Autoscaler Status Conditions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;概览&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="./images/Matrix-agent-Smith-clones.jpg"&gt;&lt;/p&gt;
&lt;p&gt;由&lt;code&gt;HorizontalPodAutoscaler&lt;/code&gt;对象定义的横向pod自动伸缩器(autoscaler)指定系统应如何根据从属于该复制控制器(replication controller)或部署配置(deployment configuration)的pod收集的度量标准(metrics)自动增加或减少复制控制器或部署配置的规模。&lt;/p&gt;
&lt;h2 id="horizontal-pod-autoscalers"&gt;使用Horizontal Pod Autoscalers的要求&lt;a class="headerlink" href="#horizontal-pod-autoscalers" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;要使用横向pod自动伸缩器(horizontal pod autoscalers)，您需要安装OpenShift Container Platform度量服务器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ansible-playbook &lt;span class="se"&gt;\&lt;/span&gt;
/usr/share/ansible/openshift-ansible/playbooks/metrics-server/config.yml &lt;span class="se"&gt;\&lt;/span&gt;
-e &lt;span class="nv"&gt;openshift_metrics_server_install&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;您可以通过运行以下命令验证服务器是否已正确安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc adm top node
$ oc adm top pod
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有关这些命令的其他信息，请参阅 &lt;a href="https://docs.openshift.com/container-platform/3.11/admin_guide/manage_nodes.html#viewing-nodes"&gt;查看Nodes&lt;/a&gt;和 &lt;a href="https://docs.openshift.com/container-platform/3.11/admin_guide/managing_pods.html#viewing-pods"&gt;查看Pods&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="_2"&gt;支持的指标&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Horizontal pod autoscalers支持以下度量标准：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;指标&lt;/th&gt;
&lt;th align="left"&gt;描述&lt;/th&gt;
&lt;th align="left"&gt;API版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;CPU利用率&lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/compute_resources.html#dev-cpu-requests"&gt;请求的CPU的&lt;/a&gt;百分比&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;autoscaling/v1&lt;/code&gt;， &lt;code&gt;autoscaling/v2beta1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;内存利用率&lt;/td&gt;
&lt;td align="left"&gt;请求的内存百分比&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;autoscaling/v2beta1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_3"&gt;自动缩放&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;您可以使用&lt;code&gt;oc autoscale&lt;/code&gt;命令创建horizontal pod autoscaler，并指定要运行的pod 的最小和最大数量，以及pod应指向的 &lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/pod_autoscaling.html#creating-a-hpa"&gt;CPU利用率&lt;/a&gt;或&lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/pod_autoscaling.html#pod-autoscaling-memory"&gt;内存利用率&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;创建horizontal pod autoscaler后，它开始尝试查询Heapster以获取pod上的指标。在Heapster获得初始指标之前可能需要一到两分钟。&lt;/p&gt;
&lt;p&gt;在Heapster中提供度量标准后，horizontal pod autoscaler将计算当前度量标准利用率与所需度量标准利用率的比率，并相应地向上或向下扩展。缩放将定期发生，但在指标进入Heapster之前可能需要一到两分钟。&lt;/p&gt;
&lt;p&gt;对于复制控制器(replication controller)，此扩展直接对应于复制控制器的副本。对于部署配置(deployment configuration)，此扩展直接对应于部署配置的副本计数。请注意，自动缩放仅适用于&lt;code&gt;Complete&lt;/code&gt;阶段中的最新部署。&lt;/p&gt;
&lt;p&gt;OpenShift Container Platform自动对资源进行核算，并防止在资源激增期间（例如启动期间）进行不必要的自动扩展。在向上扩展时，&lt;code&gt;unready&lt;/code&gt;状态中的pod的CPU使用率为&lt;code&gt;0 CPU&lt;/code&gt;，并且autoscaler在向下伸缩时会忽略这些pod。无法获取到指标的pod在向上伸缩时CPU使用率为0%，向下伸缩时CPU使用率为100%。这样可以在HPA决策期间实现更高的稳定性。要使用此功能，您必须配置 &lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/application_health.html#dev-guide-application-health"&gt;readiness checks&lt;/a&gt; 以确定是否可以使用新容器。&lt;/p&gt;
&lt;h2 id="cpu"&gt;根据CPU利用率自动扩展&lt;a class="headerlink" href="#cpu" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;oc autoscale&lt;/code&gt;命令并指定在任何给定时间至少要运行的最大pod数。您可以选择指定pod的最小数量以及pod应该定位的平均CPU利用率，否则将从OpenShift Container Platform服务器获得这些默认值。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc autoscale dc/frontend --min &lt;span class="m"&gt;1&lt;/span&gt; --max &lt;span class="m"&gt;10&lt;/span&gt; --cpu-percent&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;
deploymentconfig &lt;span class="s2"&gt;&amp;quot;frontend&amp;quot;&lt;/span&gt; autoscaled
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的示例在使用&lt;code&gt;autoscaling/v1&lt;/code&gt;版本的horizontal pod autoscaler时会创建一个具有以下定义的horizontal pod autoscaler：&lt;/p&gt;
&lt;p&gt;例1. Horizontal Pod Autoscaler 对象定义&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;autoscaling/v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;HorizontalPodAutoscaler&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;frontend&lt;/span&gt; 
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;scaleTargetRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;DeploymentConfig&lt;/span&gt; 
    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;frontend&lt;/span&gt; 
    &lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apps/v1&lt;/span&gt; 
    &lt;span class="nt"&gt;subresource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;scale&lt;/span&gt;
  &lt;span class="nt"&gt;minReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt; 
  &lt;span class="nt"&gt;maxReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt; 
  &lt;span class="nt"&gt;cpuUtilization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;targetCPUUtilizationPercentage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;metadata.name&lt;/td&gt;
&lt;td&gt;这个horizontal pod autoscaler 对象的名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kind&lt;/td&gt;
&lt;td&gt;要伸缩的对象类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.name&lt;/td&gt;
&lt;td&gt;要伸缩的对象的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.apiVersion&lt;/td&gt;
&lt;td&gt;要扩展的对象的API版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;minReplicas&lt;/td&gt;
&lt;td&gt;向下伸缩时的最小副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maxReplicas&lt;/td&gt;
&lt;td&gt;向上扩展时的最大副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;targetCPUUtilizationPercentage&lt;/td&gt;
&lt;td&gt;理想情况下每个pod应使用的请求CPU的百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;或者，在&lt;code&gt;oc autoscale&lt;/code&gt;使用horizontal pod autoscaler的&lt;code&gt;v2beta1&lt;/code&gt;版本时，该命令会创建一个具有以下定义的horizontal pod autoscaler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;autoscaling/v2beta1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;HorizontalPodAutoscaler&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hpa-resource-metrics-cpu&lt;/span&gt; 
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;scaleTargetRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apps/v1&lt;/span&gt; 
    &lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ReplicationController&lt;/span&gt; 
    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hello-hpa-cpu&lt;/span&gt; 
  &lt;span class="nt"&gt;minReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt; 
  &lt;span class="nt"&gt;maxReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt; 
  &lt;span class="nt"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Resource&lt;/span&gt;
    &lt;span class="nt"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cpu&lt;/span&gt;
      &lt;span class="nt"&gt;targetAverageUtilization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;50&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;metadata.name&lt;/td&gt;
&lt;td&gt;这个horizontal pod autoscaler 对象的名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.apiVersion&lt;/td&gt;
&lt;td&gt;要扩展的对象的API版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kind&lt;/td&gt;
&lt;td&gt;要扩展的对象类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.name&lt;/td&gt;
&lt;td&gt;要缩放的对象的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;minReplicas&lt;/td&gt;
&lt;td&gt;向下伸缩时的最小副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maxReplicas&lt;/td&gt;
&lt;td&gt;向上扩展时的最大副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;targetAverageUtilization&lt;/td&gt;
&lt;td&gt;每个pod应使用的请求CPU的平均百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_4"&gt;根据内存利用率自动缩放&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;与基于CPU的自动缩放不同，基于内存的自动缩放需要使用YAML而不是使用&lt;code&gt;oc autoscale&lt;/code&gt;命令来指定自动缩放器。（可选）您可以指定pod的最小数量以及pod应该定位的平均内存利用率，否则将从OpenShift Container Platform服务器获得这些默认值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于内存的自动扩展仅适用&lt;code&gt;v2beta1&lt;/code&gt;的自动扩展API 的版本。通过将以下内容添加到群集的&lt;code&gt;master-config.yaml&lt;/code&gt;文件来启用基于内存的自动缩放：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="nt"&gt;apiServerArguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;runtime-config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apis/autoscaling/v2beta1=true&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;将以下内容放在一个文件中，例如&lt;code&gt;hpa.yaml&lt;/code&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;autoscaling/v2beta1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;HorizontalPodAutoscaler&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hpa-resource-metrics-memory&lt;/span&gt; 
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;scaleTargetRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apps/v1&lt;/span&gt; 
    &lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ReplicationController&lt;/span&gt; 
    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hello-hpa-memory&lt;/span&gt; 
  &lt;span class="nt"&gt;minReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt; 
  &lt;span class="nt"&gt;maxReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt; 
  &lt;span class="nt"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Resource&lt;/span&gt;
    &lt;span class="nt"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;memory&lt;/span&gt;
      &lt;span class="nt"&gt;targetAverageUtilization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;50&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;metadata.name&lt;/td&gt;
&lt;td&gt;这个horizontal pod autoscaler 对象的名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.apiVersion&lt;/td&gt;
&lt;td&gt;要扩展的对象的API版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kind&lt;/td&gt;
&lt;td&gt;要扩展的对象类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.name&lt;/td&gt;
&lt;td&gt;要缩放的对象的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;minReplicas&lt;/td&gt;
&lt;td&gt;向下缩小时的最小副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maxReplicas&lt;/td&gt;
&lt;td&gt;向上扩展时的最大副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;targetAverageUtilization&lt;/td&gt;
&lt;td&gt;每个pod应使用的请求内存的平均百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start="3"&gt;
&lt;li&gt;然后，从上面的文件创建自动缩放器：&lt;code&gt;$ oc create -f hpa.yaml&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;注意:&lt;/p&gt;
&lt;p&gt;要使基于内存的自动缩放工作，内存使用量必须与副本计数成比例地增加和减少。一般：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;副本计数的增加必然导致每个pod的内存（工作集 working set）使用率整体下降。&lt;/li&gt;
&lt;li&gt;副本计数的减少必然导致每个pod的内存使用量整体增加。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用OpenShift Web控制台检查应用程序的内存行为，并确保在使用基于内存的自动缩放之前，您的应用程序满足这些要求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="horizontal-pod-autoscaler"&gt;查看Horizontal Pod Autoscaler&lt;a class="headerlink" href="#horizontal-pod-autoscaler" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;要查看Horizontal Pod Autoscaler的状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;oc get&lt;/code&gt;命令可以查看有关CPU利用率和容器 limits 的信息：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
$ oc get hpa/hpa-resource-metrics-cpu
NAME                         REFERENCE                                 TARGET    CURRENT  MINPODS        MAXPODS    AGE
hpa-resource-metrics-cpu     DeploymentConfig/default/frontend/scale   80%       79%      1              10         8d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输出包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目标(Target)&lt;/strong&gt;。由部署配置控制(deployment configuration)的所有pod的目标平均CPU利用率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Current&lt;/strong&gt;。由部署配置(deployment configuration)控制的所有pod的当前CPU利用率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minpods/Maxpods&lt;/strong&gt;。autoscaler可以设置的最小和最大副本数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;oc describe&lt;/code&gt;命令获取有关Horizontal Pod Autoscaler对象的详细信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc describe hpa/hpa-resource-metrics-cpu
Name:                           hpa-resource-metrics-cpu
Namespace:                      default
Labels:                         &amp;lt;none&amp;gt;
CreationTimestamp:              Mon, &lt;span class="m"&gt;26&lt;/span&gt; Oct &lt;span class="m"&gt;2015&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:13:47 -0400
Reference:                      DeploymentConfig/default/frontend/scale
Target CPU utilization:         &lt;span class="m"&gt;80&lt;/span&gt;% 
Current CPU utilization:        &lt;span class="m"&gt;79&lt;/span&gt;% 
Min replicas:                   &lt;span class="m"&gt;1&lt;/span&gt; 
Max replicas:                   &lt;span class="m"&gt;4&lt;/span&gt; 
ReplicationController pods:     &lt;span class="m"&gt;1&lt;/span&gt; current / &lt;span class="m"&gt;1&lt;/span&gt; desired
Conditions: 
  Type                  Status  Reason                  Message
  ----                  ------  ------                  -------
  AbleToScale           True    ReadyForNewScale        the last scale &lt;span class="nb"&gt;time&lt;/span&gt; was sufficiently old as to warrant a new scale
  ScalingActive         True    ValidMetricFound        the HPA was able to successfully calculate a replica count from pods metric http_requests
  ScalingLimited        False   DesiredWithinRange      the desired replica count is within the acceptable range
Events:
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Target CPU utilization&lt;/td&gt;
&lt;td&gt;每个pod应使用的请求内存的平均百分比。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Current CPU utilization&lt;/td&gt;
&lt;td&gt;由部署配置(deployment configuration)控制的所有pod的当前CPU利用率。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Min replicas&lt;/td&gt;
&lt;td&gt;要缩小到的最小副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Max replicas&lt;/td&gt;
&lt;td&gt;要扩展到的最大副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Conditions&lt;/td&gt;
&lt;td&gt;如果对象使用&lt;code&gt;v2alpha1&lt;/code&gt;API，则显示&lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/pod_autoscaling.html#viewing-a-hpa-status"&gt;status conditions&lt;/a&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="horizontal-pod-autoscaler-status-conditions"&gt;查看Horizontal Pod Autoscaler Status Conditions&lt;a class="headerlink" href="#horizontal-pod-autoscaler-status-conditions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;您可以使用设置的状态条件(status conditions)来确定Horizontal Pod Autoscaler 是否能够进行缩放以及当前是否以任何方式限制它。&lt;/p&gt;
&lt;p&gt;自动扩展API &lt;code&gt;v2beta1&lt;/code&gt;的版本提供Horizontal Pod Autoscaler Status Conditions：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;kubernetesMasterConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiServerArguments&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runtime-config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apis/autoscaling/v2beta1=true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置以下状态条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AbleToScale&lt;/code&gt; 指示Horizontal Pod Autoscaler 是否能够获取和更新 scales，以及是否有任何backoff 条件阻止缩放。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;表示缩放是允许的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt;表示对指定的原因缩放不允许。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScalingActive&lt;/code&gt; 指示是否启用Horizontal Pod Autoscaler （目标的副本计数不为零）并且能够计算所需的比例。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;状态表示度量工作正常。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt;条件通常表明与获取指标时遇到问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScalingLimited&lt;/code&gt; 表示不允许自动缩放，因为达到了最大或最小副本计数。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;条件表明，为了进行缩放你需要提高或降低最小或最大副本数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt;状态表明请求的比例是允许的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果您需要添加或编辑此行，请重新启动OpenShift Container Platform服务：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#master-restart api&lt;/span&gt;
&lt;span class="c1"&gt;#master-restart controllers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要查看影响Horizontal Pod Autoscaler 的条件，请使用&lt;code&gt;oc describe hpa&lt;/code&gt;。条件出现在&lt;code&gt;status.conditions&lt;/code&gt;字段中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc describe hpa cm-test
Name:                           cm-test
Namespace:                      prom
Labels:                         &amp;lt;none&amp;gt;
Annotations:                    &amp;lt;none&amp;gt;
CreationTimestamp:              Fri, &lt;span class="m"&gt;16&lt;/span&gt; Jun &lt;span class="m"&gt;2017&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:09:22 +0000
Reference:                      ReplicationController/cm-test
Metrics:                        &lt;span class="o"&gt;(&lt;/span&gt; current / target &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;http_requests&amp;quot;&lt;/span&gt; on pods:      66m / 500m
Min replicas:                   &lt;span class="m"&gt;1&lt;/span&gt;
Max replicas:                   &lt;span class="m"&gt;4&lt;/span&gt;
ReplicationController pods:     &lt;span class="m"&gt;1&lt;/span&gt; current / &lt;span class="m"&gt;1&lt;/span&gt; desired
Conditions: 
  Type                  Status  Reason                  Message
  ----                  ------  ------                  -------
  AbleToScale       True      ReadyForNewScale    the last scale &lt;span class="nb"&gt;time&lt;/span&gt; was sufficiently old as to warrant a new scale
  ScalingActive     True      ValidMetricFound    the HPA was able to successfully calculate a replica count from pods metric http_request
  ScalingLimited    False     DesiredWithinRange  the desired replica count is within the acceptable range
Events:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Horizontal Pod Autoscaler Status Conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AbleToScale&lt;/code&gt;条件指示HPA是否能够获取和更新比例，以及任何与backoff相关的条件是否会阻止扩展。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScalingActive&lt;/code&gt;状况指示HPA是否被启用（例如，目标的副本数不为零），并能够计算所需的scales。&lt;code&gt;False&lt;/code&gt;状态通常表示获取指标的问题。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScalingLimited&lt;/code&gt;条件指示期望scale由Horizontal Pod Autoscaler的最大或最小上限。&lt;code&gt;True&lt;/code&gt;状态一般预示着你可能需要在你的水平荚自动配置器升高或降低的最小或最大副本数量的限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是无法扩展的pod的示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Conditions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Type&lt;/span&gt;           &lt;span class="n"&gt;Status&lt;/span&gt;    &lt;span class="n"&gt;Reason&lt;/span&gt;            &lt;span class="n"&gt;Message&lt;/span&gt;
  &lt;span class="o"&gt;----&lt;/span&gt;           &lt;span class="o"&gt;------&lt;/span&gt;    &lt;span class="o"&gt;------&lt;/span&gt;            &lt;span class="o"&gt;-------&lt;/span&gt;
  &lt;span class="n"&gt;AbleToScale&lt;/span&gt;    &lt;span class="n"&gt;False&lt;/span&gt;     &lt;span class="n"&gt;FailedGetScale&lt;/span&gt;    &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;HPA&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;replicationcontrollers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;extensions&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello-hpa-cpu&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下是无法获取缩放所需pod的指标示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Conditions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Type&lt;/span&gt;                  &lt;span class="n"&gt;Status&lt;/span&gt;    &lt;span class="n"&gt;Reason&lt;/span&gt;                    &lt;span class="n"&gt;Message&lt;/span&gt;
  &lt;span class="o"&gt;----&lt;/span&gt;                  &lt;span class="o"&gt;------&lt;/span&gt;    &lt;span class="o"&gt;------&lt;/span&gt;                    &lt;span class="o"&gt;-------&lt;/span&gt;
  &lt;span class="n"&gt;AbleToScale&lt;/span&gt;           &lt;span class="n"&gt;True&lt;/span&gt;     &lt;span class="n"&gt;SucceededGetScale&lt;/span&gt;          &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;HPA&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;
  &lt;span class="n"&gt;ScalingActive&lt;/span&gt;         &lt;span class="n"&gt;False&lt;/span&gt;    &lt;span class="n"&gt;FailedGetResourceMetric&lt;/span&gt;    &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;HPA&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;compute&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;replica&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt; &lt;span class="n"&gt;returned&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;heapster&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下是请求的自动缩放小于所需最小值的pod示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Conditions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Type&lt;/span&gt;              &lt;span class="n"&gt;Status&lt;/span&gt;    &lt;span class="n"&gt;Reason&lt;/span&gt;              &lt;span class="n"&gt;Message&lt;/span&gt;
  &lt;span class="o"&gt;----&lt;/span&gt;              &lt;span class="o"&gt;------&lt;/span&gt;    &lt;span class="o"&gt;------&lt;/span&gt;              &lt;span class="o"&gt;-------&lt;/span&gt;
  &lt;span class="n"&gt;AbleToScale&lt;/span&gt;       &lt;span class="n"&gt;True&lt;/span&gt;      &lt;span class="n"&gt;ReadyForNewScale&lt;/span&gt;    &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;sufficiently&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;warrant&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;
  &lt;span class="n"&gt;ScalingActive&lt;/span&gt;     &lt;span class="n"&gt;True&lt;/span&gt;      &lt;span class="n"&gt;ValidMetricFound&lt;/span&gt;    &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;HPA&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;successfully&lt;/span&gt; &lt;span class="n"&gt;calculate&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;replica&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pods&lt;/span&gt; &lt;span class="n"&gt;metric&lt;/span&gt; &lt;span class="n"&gt;http_request&lt;/span&gt;
  &lt;span class="n"&gt;ScalingLimited&lt;/span&gt;    &lt;span class="n"&gt;False&lt;/span&gt;     &lt;span class="n"&gt;DesiredWithinRange&lt;/span&gt;  &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;desired&lt;/span&gt; &lt;span class="n"&gt;replica&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;within&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;acceptable&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;
&lt;span class="n"&gt;Events&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 14 May 2019 22:06:59 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-14:/openshift-pod-autoscaling.html</guid><category>openshift</category><category>containers</category><category>docker</category><category>k8s</category></item><item><title>使用OpenShift进行二进制构建</title><link>https://www.EWhisper.cn/binary-builds-with-openshift.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;介绍&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;用例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;限制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;教程概述&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_5"&gt;教程：构建本地代码更改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;教程：构建私有代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pipeline"&gt;教程：来自 pipeline 的二进制工件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;介绍&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;OpenShift 推荐和常用的构建方式是: 直接从代码仓库(如GIT 或SVN)中拉取源码进行构建(即源码构建). 但是这一种构建方式并不能满足所有的需求, 所以还有一种构建方式就是: 二进制构建. 二进制构建适用于以下2个场景:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发人员本地开发调试代码并构建;&lt;/li&gt;
&lt;li&gt;OpenShift和 CI/CD的pipeline进行整合, 获取从前边平台(如自动化开发平台或测试平台)传过来的工件(即二进制包)并构建为镜像.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OpenShift中的二进制构建功能允许开发人员将源代码或工件直接上传到构建(build)，而不是从Git存储库URL pull需要构建的源。通过源代码，Docker或自定义构建策略的 BuildConfig 都可以作为二进制构建启动。从本地工件启动构建时，现有源引用将替换为来自本地用户计算机的源。&lt;/p&gt;
&lt;p&gt;可以使用几种方式提供源，这些方式对应于使用&lt;code&gt;start-build&lt;/code&gt;命令时可用的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从文件（&lt;code&gt;--from-file&lt;/code&gt;）：当构建的整个源包含单个文件时就是这种情况。例如，它可能是用于Docker构建的&lt;code&gt;Dockerfile&lt;/code&gt;，用于Java应用构建的&lt;code&gt;pom.xml&lt;/code&gt;，或用于Ruby构建的&lt;code&gt;Gemfile&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;从目录（&lt;code&gt;--from-directory&lt;/code&gt;）：当源在本地目录中并且未提交到Git存储库时使用此目录。&lt;code&gt;start-build&lt;/code&gt; 命令将创建给定目录的存档，并将其作为源上传到构建器(builder)。&lt;/li&gt;
&lt;li&gt;从存档（&lt;code&gt;--from-archive&lt;/code&gt;）：当具有源的存档已存在时使用此选项。该存档可以是&lt;code&gt;tar&lt;/code&gt;，&lt;code&gt;tar.gz&lt;/code&gt;或&lt;code&gt;zip&lt;/code&gt;格式。&lt;/li&gt;
&lt;li&gt;从Git存储库（&lt;code&gt;--from-repo&lt;/code&gt;）：源是当前用户本地计算机上的Git存储库的一部分。当前存储库的HEAD commit将被存档并发送到OpenShift进行构建。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;用例&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;二进制构建适用于无法从现有Git存储库中提取源的需求。使用二进制构建的原因包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建和测试本地代码的变更。克隆来自公共存储库的源，并将本地变更上传到OpenShift进行构建。而无需在任何地方提交或推送本地更改。&lt;/li&gt;
&lt;li&gt;构建私有代码。新构建可以作为二进制构建从头开始。然后可以将源直接从本地工作站上传到OpenShift，而无需将其签入SCM。&lt;/li&gt;
&lt;li&gt;使用其他来源的工件构建镜像。通过Jenkins pipeline，二进制构建可以用于整合使用Maven或C编译器等工具构建的工件，以及使用这些构建的运行时镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;限制&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;二进制构建无法重复。由于二进制构建依赖于在构建开始时用户上传工件，因此OpenShift无法重复相同的构建而无需用户每次都重复相同的上载。&lt;/li&gt;
&lt;li&gt;无法自动触发二进制生成。它们只能在用户上传所需的二进制工件时手动启动。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;以二进制构建方式启动的构建版本也可能具有已配置的源URL。如果是这种情况，触发器会成功启动构建，但源将来自配置的源URL，而不是来自上次构建运行时用户提供的源。(比如: 用户先从Git仓库下载了源码并修改, 用本地修改后的源码手动上传、构建，那么OpenShift会获取到Git仓库的URL, 如果配置了触发器, 下次构建就直接通过Git URL pull源码并自动构建, 而不是自动获取本地的源码.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_4"&gt;教程概述&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下教程假设您有一个可用的OpenShift集群，并且您有一个可以创建工件的项目。它要求您拥有本地&lt;code&gt;git&lt;/code&gt;和&lt;code&gt;oc&lt;/code&gt;客户端。&lt;/p&gt;
&lt;h3 id="_5"&gt;教程：构建本地代码更改&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;基于现有源存储库创建新应用程序并为其创建路由：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app https://github.com/openshift/ruby-hello-world.git
oc expose svc/ruby-hello-world
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;等待初始构建完成并通过route来查看应用程序的页面。你应该得到一个欢迎页面：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc get route ruby-hello-world
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;在本地克隆存储库：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/openshift/ruby-hello-world.git
&lt;span class="nb"&gt;cd&lt;/span&gt; ruby-hello-world
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;
&lt;p&gt;更改应用程序的视图。使用您喜欢的编辑器编辑 &lt;code&gt;views/main.rb&lt;/code&gt;：将&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;标签更改为&lt;code&gt;&amp;lt;body style="background-color:blue"&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用本地修改的源启动新构建。在存储库的本地目录中，运行：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc start-build ruby-hello-world --from-dir&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; --follow
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;构建完成并重新部署应用程序后，指向应用程序主机的route应该会生成一个蓝色背景的页面。&lt;/p&gt;
&lt;p&gt;您可以继续在本地进行更改并使用&lt;code&gt;oc start-build --from-dir&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;您还可以创建代码分支，在本地提交更改，并使用存储库的HEAD作为构建的源：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout -b my_branch
git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;My changes&amp;quot;&lt;/span&gt;
oc start-build ruby-hello-world --from-repo&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; --follow
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_6"&gt;教程：构建私有代码&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;创建一个本地目录来保存您的代码：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir myapp
&lt;span class="nb"&gt;cd&lt;/span&gt; myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;在目录中创建一个名为&lt;code&gt;Dockerfile&lt;/code&gt;的文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; centos:centos7&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8080&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; index.html /var/run/web/index.html
&lt;span class="k"&gt;CMD&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /var/run/web &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; python -m SimpleHTTPServer &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;创建一个&lt;code&gt;index.html&lt;/code&gt;文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My local app&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is my local application&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;为您的应用程序创建一个新的构建：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-build --strategy docker --binary --docker-image centos:centos7 --name myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="5"&gt;
&lt;li&gt;使用本地目录的内容启动二进制构建：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc start-build myapp --from-dir . --follow
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="6"&gt;
&lt;li&gt;使用&lt;code&gt;new-app&lt;/code&gt;部署应用程序，然后为其创建路由：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app myapp
oc expose svc/myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="7"&gt;
&lt;li&gt;获取指向对应应用主机的路由：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc get route myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在构建和部署代码之后，您可以通过更改本地文件并通过&lt;code&gt;oc start-build myapp --from-dir&lt;/code&gt;再次调用启动新构建来进行迭代。构建完成后，代码将自动部署，更新的内容将在刷新页面时反映在浏览器中。&lt;/p&gt;
&lt;h3 id="pipeline"&gt;教程：来自 pipeline 的二进制工件&lt;a class="headerlink" href="#pipeline" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;OpenShift上的Jenkins允许使用带有合适工具的slave镜像来构建代码。例如，您可以使用&lt;code&gt;maven&lt;/code&gt; slave镜像来从代码存储库构建WAR包。但是，一旦构建了此工件，您需要将其提交到包含正确的运行时工件的镜像以运行您的代码。可以使用二进制构建将这些工件添加到运行时映像。在下面的教程中，我们将创建一个Jenkins pipeline，该pipeline使用&lt;code&gt;maven&lt;/code&gt; slave构建WAR，然后使用带有&lt;code&gt;Dockerfile&lt;/code&gt;的二进制构建将WAR添加到 wildfly 运行时映像。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为您的应用程序创建一个新目录：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir mavenapp
&lt;span class="nb"&gt;cd&lt;/span&gt; mavenapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;创建一个&lt;code&gt;Dockerfile&lt;/code&gt;将WAR复制到wildfly镜像内的适当位置以供执行。将以下内容复制到名为的本地文件 &lt;code&gt;Dockerfile&lt;/code&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; wildfly:latest&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; ROOT.war /wildfly/standalone/deployments/ROOT.war
&lt;span class="k"&gt;CMD&lt;/span&gt;  &lt;span class="nv"&gt;$STI_SCRIPTS_PATH&lt;/span&gt;/run
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;为该&lt;code&gt;Dockerfile&lt;/code&gt;创建一个新的BuildConfig：&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;&lt;/p&gt;
&lt;p&gt;这将自动启动一个构建, 刚开始会构建失败，因为 &lt;code&gt;ROOT.war&lt;/code&gt;工件尚不可用。下面的pipeline将使用二进制构建将该WAR包传递给构建。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat Dockerfile &lt;span class="p"&gt;|&lt;/span&gt; oc new-build -D - --name mavenapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;创建1个使用Jenkins pipeline的BuildConfig, 这个BuildConfig将构建1个WAR包，然后使用该WAR包和先前创建的&lt;code&gt;Dockerfile&lt;/code&gt;来构建镜像。相同的模式可用于其他平台，其中二进制工件由一组工具构建，然后与最终的包含不同运行时的镜像组合。将以下代码保存到&lt;code&gt;mavenapp-pipeline.yml&lt;/code&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;BuildConfig&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mavenapp-pipeline&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;jenkinsPipelineStrategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;jenkinsfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|-&lt;/span&gt;
        &lt;span class="no"&gt;pipeline {&lt;/span&gt;
          &lt;span class="no"&gt;agent { label &amp;quot;maven&amp;quot; }&lt;/span&gt;
          &lt;span class="no"&gt;stages {&lt;/span&gt;
            &lt;span class="no"&gt;stage(&amp;quot;Clone Source&amp;quot;) {&lt;/span&gt;
              &lt;span class="no"&gt;steps {&lt;/span&gt;
                &lt;span class="no"&gt;checkout([$class: &amp;#39;GitSCM&amp;#39;,&lt;/span&gt;
                            &lt;span class="no"&gt;branches: [[name: &amp;#39;*/master&amp;#39;]],&lt;/span&gt;
                            &lt;span class="no"&gt;extensions: [&lt;/span&gt;
                              &lt;span class="no"&gt;[$class: &amp;#39;RelativeTargetDirectory&amp;#39;, relativeTargetDir: &amp;#39;mavenapp&amp;#39;]&lt;/span&gt;
                            &lt;span class="no"&gt;],&lt;/span&gt;
                            &lt;span class="no"&gt;userRemoteConfigs: [[url: &amp;#39;https://github.com/openshift/openshift-jee-sample.git&amp;#39;]]&lt;/span&gt;
                        &lt;span class="no"&gt;])&lt;/span&gt;
              &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;stage(&amp;quot;Build WAR&amp;quot;) {&lt;/span&gt;
              &lt;span class="no"&gt;steps {&lt;/span&gt;
                &lt;span class="no"&gt;dir(&amp;#39;mavenapp&amp;#39;) {&lt;/span&gt;
                  &lt;span class="no"&gt;sh &amp;#39;mvn clean package -Popenshift&amp;#39;&lt;/span&gt;
                &lt;span class="no"&gt;}&lt;/span&gt;
              &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;stage(&amp;quot;Build Image&amp;quot;) {&lt;/span&gt;
              &lt;span class="no"&gt;steps {&lt;/span&gt;
                &lt;span class="no"&gt;dir(&amp;#39;mavenapp/target&amp;#39;) {&lt;/span&gt;
                  &lt;span class="no"&gt;sh &amp;#39;oc start-build mavenapp --from-dir . --follow&amp;#39;&lt;/span&gt;
                &lt;span class="no"&gt;}&lt;/span&gt;
              &lt;span class="no"&gt;}&lt;/span&gt;
            &lt;span class="no"&gt;}&lt;/span&gt;
          &lt;span class="no"&gt;}&lt;/span&gt;
        &lt;span class="no"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;JenkinsPipeline&lt;/span&gt;
  &lt;span class="nt"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="5"&gt;
&lt;li&gt;创建pipeline 构建。如果Jenkins未部署到您的项目中，则使用管道创建的BuildConfig会先部署Jenkins。在Jenkins准备建立您的管道之前可能需要几分钟来启动。您可以通过调用&lt;code&gt;oc rollout status dc/jenkins&lt;/code&gt;来检查Jenkins的状态：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc create -f ./mavenapp-pipeline.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="6"&gt;
&lt;li&gt;一旦Jenkins准备就绪，启动之前定义的管道：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc start-build mavenapp-pipeline
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="7"&gt;
&lt;li&gt;管道构建完成后，使用&lt;code&gt;new-app&lt;/code&gt;部署新应用程序并公开其route：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app mavenapp
oc expose svc/mavenapp
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="8"&gt;
&lt;li&gt;使用浏览器，导航到应用程序的路径：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc get route mavenapp
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Wed, 08 May 2019 18:41:34 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-08:/binary-builds-with-openshift.html</guid><category>openshift</category><category>docker</category><category>devops</category><category>git</category><category>containers</category></item><item><title>OpenShift 和 Kubernetes 有什么区别?</title><link>https://www.EWhisper.cn/openshift-and-kubernetes-whats-difference.html</link><description>&lt;p&gt;OpenShift 3以后, 架构完全基于K8S进行了重构, 但是又有一些差异. 今天, 我们就深入研究一下.&lt;/p&gt;
&lt;h2 id="k8s"&gt;K8S 是"内核"&lt;a class="headerlink" href="#k8s" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;K8S可以认为是当代分布式系统的"内核". 我们意识到, 一个设计良好的作业调度程序, 跨多台及其运行, 能够协调托管在骑上的工作负载的状态, 自然就会促进写作, 就像Linux内核为单个主机上调度工作负载所做的那样. 遵循这一逻辑, 我们知道不同的产品会根据针对用户的不同而差异化地打造.&lt;/p&gt;
&lt;p&gt;在很多手机, 电脑, 服务器, 甚至是树莓派上, 运行的都是相同的Linux 内核, 但是通过不同的不定来支持多种多样的硬件.&lt;/p&gt;
&lt;p&gt;K8S和各种各样的K8S发行版也适用于同样的模型, 通过不同类型的补丁, 来支持在K8S上面的一层. &lt;/p&gt;
&lt;h2 id="openshift"&gt;OpenShift 是发行版&lt;a class="headerlink" href="#openshift" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这是一个强有力的区别。OpenShift就是Kubernetes的发行版，专注于开发人员的体验，而开发人员需要开发下一代云原生应用程序。&lt;/p&gt;
&lt;p&gt;虽然任何人都可以通过选择每1个部分并按照每个用户选择的定制方式组装它们来&lt;a href="http://www.linuxfromscratch.org/"&gt;从Scratch &lt;/a&gt;构建&lt;a href="http://www.linuxfromscratch.org/"&gt;Linux&lt;/a&gt;，但大多数人都没有。大多数用户选择的抽象级别意味着他们不会从管理（甚至了解）Util-Linux版本2.31和2.33之间的差异中获得很多价值。为了更进一步，用户关心最低级别的功能（例如，只要超过最小版本号，他们就知道哪些命令/ API可用），然后提供所提供功能的列表。&lt;/p&gt;
&lt;p&gt;这与OpenShift非常相似。OpenShift将Kubernetes打包并包含其他工具作为OpenShift认为重要且OpenShift的用户需求的功能。就像CoreOS和CentOS包含不同的工具集一样，迎合不同的用户，因此Kubernetes发行版也是如此。&lt;/p&gt;
&lt;h2 id="openshiftk8s"&gt;OpenShift和K8S的具体区别&lt;a class="headerlink" href="#openshiftk8s" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="openshift_1"&gt;OpenShift 架构概述&lt;a class="headerlink" href="#openshift_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;OpenShift容器平台是一系列流行的组件和服务的集合体, 构建于Red Hat Enterprise Linux, Docker, 和K8S之上. OpenShift针对开发人员, 增强了以下功能: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;远程管理&lt;/li&gt;
&lt;li&gt;多租户&lt;/li&gt;
&lt;li&gt;安全性增强&lt;/li&gt;
&lt;li&gt;应用生命周期管理&lt;/li&gt;
&lt;li&gt;自服务接口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="OpenShift 架构" src="./images/openshift-architecture-overview.png"&gt;&lt;/p&gt;
&lt;p&gt;在上图中, 从下至上, 从左至右, 展示了经过Red Hat 在基本的容器架构基础上进一步集成、增强的架构:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本OS是Red Hat Enterprise Linux (RHEL)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;  提供了基本的容器管理API和容器镜像文件格式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt; 管理运行容器的主机集群(实体的或虚拟的). 它通过资源(resources)来描述多容器应用是由多个资源组成的, 以及他们间如何交互&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Etcd&lt;/strong&gt; 是一个分布式 key-value 存储, Kubernetes 通过它来存储集群内的关于容器和其他资源的配置和状态信息.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Docker + Kubernetes 之上, OpenShift增加了容器平台所需要的其他功能. 具体包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OpenShift-Kubernetes 扩展&lt;/strong&gt; 是存储在Etcd中, 由Kubernetes管理的额外的资源类型(resource types). 这些额外的资源类型组成了OpenShift 内部状态和配置, 还有应用的资源.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器化服务&lt;/strong&gt; 充实了很多基础架构功能, 比如网络和认证. 这些功能有些是一直运行的, 有些是按需启动的. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行时和xPaaS&lt;/strong&gt; 是为开发者准备好的容器镜像, 每个都预配置了特定的语言运行时或数据库. 可以被用作镜像流(Image Stream)或在此基础上增加不同的框架, 库, 甚至是中间件来进行扩展. xPaaS 提供了一系列JBoss中间件产品的基础镜像, 如: JBoss EAP 和 ActiveMQ.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DevOps 工具集和用户体验&lt;/strong&gt;: OpenShift 为开发人员和系统管理员提供了一个Web UI和CLI 管理工具, 允许配置和监控应用和OpenShift的服务和资源. Web和 CLI 都是基于相同的REST API, 这个API也可以被外部工具(如: IDE和CI平台)整合. OpenShift也可以访问外部SCM库和容器镜像库.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;OpenShift 团队:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;帮助K8S 完成了Namespace 和 quota功能的开发;&lt;/li&gt;
&lt;li&gt;推动了RBAC 授权认证的开发&lt;/li&gt;
&lt;li&gt;帮助K8S运行更多类型的应用, 并为其开发了一些卷插件(Volume Plugin)&lt;/li&gt;
&lt;li&gt;相比K8S, 多了Deployment Config(DC) resource. 使用该资源可以进行参数化部署, 执行滚动部署和回滚等.&lt;/li&gt;
&lt;li&gt;相比K8S, 多了Route resource. 而Router也是K8S的Ingress功能的前身.&lt;/li&gt;
&lt;li&gt;相比K8S, 默认集成了SDN (Open vSwitch)&lt;/li&gt;
&lt;li&gt;相比K8S, 实现了开发运维一体化.&lt;/li&gt;
&lt;li&gt;纳入CoreOS&lt;/li&gt;
&lt;li&gt;OpenShift 3.11, 集成了Prometheus和Grafana&lt;/li&gt;
&lt;li&gt;相比K8S, 增强了管理物理节点的能力&lt;/li&gt;
&lt;li&gt;目前, OpenShift还和NV合作, 未来会提供基于GPU运算能力的支持.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;资源类型差异&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes 资源类型&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pods&lt;/li&gt;
&lt;li&gt;Services&lt;/li&gt;
&lt;li&gt;Replication Controllers&lt;/li&gt;
&lt;li&gt;Persistent Volume (PV)&lt;/li&gt;
&lt;li&gt;Persistent Volume Claims (PVC)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;OpenShift 资源类型&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;除了以上资源类型, OpenShift 还增加了以下主要的资源类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deployment Configurations (DC) - 用于 持续交付(CD)工作流&lt;/li&gt;
&lt;li&gt;Build Configurations (BC) - 用于 持续集成(CI) 工作流&lt;/li&gt;
&lt;li&gt;Routes - 基于HAProxy, 作用类似于K8S Ingress, 但早于Ingress.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="openshift-s2i"&gt;OpenShift 特有的S2I 功能&lt;a class="headerlink" href="#openshift-s2i" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;OpenShift中的Source-to-Image (S2I) 进程会从SCM仓库中拉取代码, 自动化监测代码需要哪种类型的运行时, 并从特定运行时的基础镜像启动一个pod. 在这个pod 中, OpenShift 以开发人员相同的方式来构建该应用(如, 使用&lt;strong&gt;maven&lt;/strong&gt;来构建java程序). 如果构建成功, 另一个镜像会被创建, 把应用二进制附加到运行时层之上, 并把这个新镜像推送到OpenShift的内部镜像仓库中. 接下来, 可以从这个新镜像创建一个pod来运行该应用. S2I 可以看做是一个嵌入到OpenShift平台中的 CI/CD pipeline.&lt;/p&gt;
&lt;p&gt;CI/CD pipelines 会有很多种变异, 这个pipeline会暴露在这个项目(project, 就是K8S的namespace)中, 那么它就可以被调节来满足开发人员的需求. 例如, 外部CI工具(如Jenkins)可以用于来启动和运行测试, 然后给新镜像打上"成功"或"失败"的标签(label), 并推送到QA或生产环境. 随着时间推移, 一个组织一个部门一个公司可以创建他们自己的pipeline模板, 包括自定义的构建器和部署器.&lt;/p&gt;
&lt;h2 id="_2"&gt;总结&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;OpenShift 平台相比K8S, 具有以下特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自服务平台;&lt;/li&gt;
&lt;li&gt;多语言, 多中间件, 数据库支持&lt;/li&gt;
&lt;li&gt;高可用, 可伸缩性&lt;/li&gt;
&lt;li&gt;也是开源的(Red Hat收取服务费)&lt;/li&gt;
&lt;li&gt;安全 (基于: RBAC, LDAP, 主机, 网络, 容器各个层面的加固)&lt;/li&gt;
&lt;li&gt;动态存储管理&lt;/li&gt;
&lt;li&gt;企业级&lt;/li&gt;
&lt;li&gt;日志整合/ 监控整合&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 03 May 2019 16:51:34 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-03:/openshift-and-kubernetes-whats-difference.html</guid><category>docker</category><category>openshift</category><category>k8s</category><category>containers</category><category>PAAS</category></item></channel></rss>