<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>东风微鸣 Blog - k8s</title><link>https://www.EWhisper.cn/</link><description>Focus on Python/Java/DevOps/Observability</description><lastBuildDate>Sun, 26 May 2019 21:24:52 +0800</lastBuildDate><item><title>使用 Docker 安装 Gitlab</title><link>https://www.EWhisper.cn/install-gitlab-with-docker.html</link><description>&lt;h2 id="docker"&gt;Docker 安装&lt;a class="headerlink" href="#docker" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 说明:&lt;/p&gt;
&lt;p&gt;官网链接:&lt;a href="https://docs.gitlab.com/omnibus/docker/"&gt;GitLab Docker images&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/docker/Dockerfile"&gt;官网 Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker pull gitlab/gitlab-ce  &lt;span class="c1"&gt;# 下载&lt;/span&gt;
sudo docker run --detach &lt;span class="se"&gt;\&lt;/span&gt;
  --hostname gitlab.example.com &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;443&lt;/span&gt;:443 --publish &lt;span class="m"&gt;80&lt;/span&gt;:80 --publish &lt;span class="m"&gt;22&lt;/span&gt;:22 &lt;span class="se"&gt;\&lt;/span&gt;
  --name gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --restart always &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/config:/etc/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/logs:/var/log/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/data:/var/opt/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  gitlab/gitlab-ce:latest  &lt;span class="c1"&gt;# 运行容器&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_1"&gt;数据存在哪儿:&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;本地位置&lt;/th&gt;
&lt;th align="left"&gt;容器位置&lt;/th&gt;
&lt;th align="left"&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;/srv/gitlab/data&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;/var/opt/gitlab&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;用于存储应用数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;/srv/gitlab/logs&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;/var/log/gitlab&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;用于存储日志&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;/srv/gitlab/config&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;/etc/gitlab&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;用于存储GitLab配置文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="gitlab"&gt;配置Gitlab:&lt;a class="headerlink" href="#gitlab" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;配置文件位于: &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;几种配置方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo docker exec -it gitlab /bin/bash&lt;/code&gt; 进入到容器内, 然后通过&lt;code&gt;vi&lt;/code&gt;编辑保存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo docker exec -it gitlab editor /etc/gitlab/gitlab.rb&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编辑完之后, 重启容器:&lt;code&gt;sudo docker restart gitlab&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="docker_1"&gt;预配置 Docker 容器&lt;a class="headerlink" href="#docker_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;也可以通过将环境变量&lt;code&gt;GITLAB_OMNIBUS_CONFIG&lt;/code&gt;添加到docker run命令来预配置GitLab Docker映像。此变量可以包含任何&lt;code&gt;gitlab.rb&lt;/code&gt;设置，并在加载容器&lt;code&gt;gitlab.rb&lt;/code&gt;文件之前进行加载。&lt;/p&gt;
&lt;p&gt;示例如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker run --detach &lt;span class="se"&gt;\&lt;/span&gt;
  --hostname gitlab.example.com &lt;span class="se"&gt;\&lt;/span&gt;
  --env &lt;span class="nv"&gt;GITLAB_OMNIBUS_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;external_url &amp;#39;http://my.domain.com/&amp;#39;; gitlab_rails[&amp;#39;lfs_enabled&amp;#39;] = true;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;443&lt;/span&gt;:443 --publish &lt;span class="m"&gt;80&lt;/span&gt;:80 --publish &lt;span class="m"&gt;22&lt;/span&gt;:22 &lt;span class="se"&gt;\&lt;/span&gt;
  --name gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --restart always &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/config:/etc/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/logs:/var/log/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/data:/var/opt/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  gitlab/gitlab-ce:latest
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;启动容器后&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以通过&lt;a href="http://localhost"&gt;http://localhost&lt;/a&gt; 进行访问.&lt;/p&gt;
&lt;p&gt;可以通过 &lt;code&gt;sudo docker logs -f gitlab&lt;/code&gt; 查看日志.&lt;/p&gt;
&lt;h3 id="ip"&gt;发布到公网IP&lt;a class="headerlink" href="#ip" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker run --detach &lt;span class="se"&gt;\&lt;/span&gt;
  --hostname gitlab.example.com &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;198&lt;/span&gt;.51.100.1:443:443 &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;198&lt;/span&gt;.51.100.1:80:80 &lt;span class="se"&gt;\&lt;/span&gt;
  --publish &lt;span class="m"&gt;198&lt;/span&gt;.51.100.1:22:22 &lt;span class="se"&gt;\&lt;/span&gt;
  --name gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --restart always &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/config:/etc/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/logs:/var/log/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /srv/gitlab/data:/var/opt/gitlab &lt;span class="se"&gt;\&lt;/span&gt;
  gitlab/gitlab-ce:latest
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="docker-composegitlab"&gt;使用docker-compose安装GitLab&lt;a class="headerlink" href="#docker-composegitlab" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;安装 docker compose&lt;/li&gt;
&lt;li&gt;创建&lt;code&gt;docker-compose.yml&lt;/code&gt; 文件（或&lt;a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/docker/docker-compose.yml"&gt;下载示例&lt;/a&gt;）: &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="nt"&gt;web&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gitlab/gitlab-ce:latest&amp;#39;&lt;/span&gt;
   &lt;span class="nt"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
   &lt;span class="nt"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gitlab.example.com&amp;#39;&lt;/span&gt;
   &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="nt"&gt;GITLAB_OMNIBUS_CONFIG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
       &lt;span class="no"&gt;external_url &amp;#39;https://gitlab.example.com&amp;#39;&lt;/span&gt;
       &lt;span class="no"&gt;# Add any other gitlab.rb configuration here, each on its own line&lt;/span&gt;
   &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;80:80&amp;#39;&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;443:443&amp;#39;&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;22:22&amp;#39;&lt;/span&gt;
   &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/srv/gitlab/config:/etc/gitlab&amp;#39;&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/srv/gitlab/logs:/var/log/gitlab&amp;#39;&lt;/span&gt;
     &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/srv/gitlab/data:/var/opt/gitlab&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;确保您&lt;code&gt;docker-compose.yml&lt;/code&gt;与运行&lt;code&gt;docker-compose up -d&lt;/code&gt; 在同一目录中以运行GitLab&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="openshift"&gt;OpenShift 安装&lt;a class="headerlink" href="#openshift" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 注意:&lt;/p&gt;
&lt;p&gt;目前Gitlab通过OpenShift 安装, 有一些已知的问题. 并且只在OpenShift 3.11版本上测试通过.&lt;/p&gt;
&lt;p&gt;另外, 安装是通过 Helm Chart方式进行安装的. 还是有点复杂的...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_3"&gt;已知的问题&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以下问题是已知的，并且预计适用于OpenShift上的GitLab安装：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;anyuid&lt;/code&gt;scc的要求：(OpenShift 的安全加固导致的)&lt;ul&gt;
&lt;li&gt;GitLab的不同组件，如Sidekiq，unicorn等，使用UID 1000来运行服务。&lt;/li&gt;
&lt;li&gt;PostgreSQL chart以&lt;code&gt;root&lt;/code&gt;用户身份运行服务。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/charts/gitlab/issues/752"&gt;问题＃752&lt;/a&gt;是open状态，以调查更多有关解决此问题的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果使用&lt;code&gt;hostpath&lt;/code&gt;卷，则需要为主机中的持久性卷目录授予&lt;code&gt;0777&lt;/code&gt;权限，以授予所有用户对卷的访问权限。&lt;/li&gt;
&lt;li&gt;OpenShift的内置router 不支持通过SSH进行Git操作。 &lt;a href="https://gitlab.com/charts/gitlab/issues/892"&gt;问题＃892&lt;/a&gt; 是oepn状态，以调查更多有关解决此问题的信息。&lt;/li&gt;
&lt;li&gt;众所周知，GitLab Registry不能与OpenShift的内置router配合使用。 &lt;a href="https://gitlab.com/charts/gitlab/issues/893"&gt;问题＃893&lt;/a&gt;是open状态，以调查更多有关修复此问题的信息。&lt;/li&gt;
&lt;li&gt;从Let's Encrypt自动发出SSL证书不适用于OpenShift router。我们建议&lt;a href="https://docs.gitlab.com/charts/installation/tls.html#option-2-use-your-own-wildcard-certificate"&gt;您使用自己的证书&lt;/a&gt;。 &lt;a href="https://gitlab.com/charts/gitlab/issues/894"&gt;问题＃894&lt;/a&gt;开放，以调查更多有关解决此问题的信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_4"&gt;先决条件步骤&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;请参阅&lt;a href="https://www.okd.io/download.html#oc-platforms"&gt;官方文档&lt;/a&gt; 以安装和配置群集。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行&lt;code&gt;oc cluster status&lt;/code&gt;并确认群集正在运行：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc cluster status
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;输出应类似于：
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Web console URL: https://gitlab.example.com:8443/console/

Config is at host directory
Volumes are at host directory
Persistent volumes are at host directory /home/okduser/openshift/openshift.local.clusterup/openshift.local.pv
Data will be discarded when cluster is destroyed
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;请注意主机中Persistent Volumes的位置（在上例中`/home/okduser/openshift/openshift.local.clusterup/openshift.local.pv`）。以下命令需要`PV_HOST_DIRECTORY`环境变量中的路径。
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;修改PV目录的权限（用以上值替换以下命令中的路径）：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chmod -R a+rwx &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PV_HOST_DIRECTORY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/*
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="4"&gt;
&lt;li&gt;切换到系统管理员用户：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc login -u system:admin
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="5"&gt;
&lt;li&gt;将&lt;code&gt;anyuid&lt;/code&gt;scc 添加到系统用户：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc adm policy add-scc-to-group anyuid system:authenticated
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;**警告**：此设置将应用于所有namespace，并将导致Docker镜像未明确指定USER作为`root`用户运行。 [问题＃895](https://gitlab.com/charts/gitlab/issues/895)是开放的，用于记录所需的不同服务帐户，并描述仅将scc添加到这些服务帐户，因此影响可能有限。
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="6"&gt;
&lt;li&gt;创建服务帐户和&lt;code&gt;rolebinding&lt;/code&gt;RBAC并&lt;a href="https://docs.gitlab.com/charts/installation/tools.html#helm"&gt;安装Tiller&lt;/a&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create -f https://gitlab.com/charts/gitlab/raw/master/doc/installation/examples/rbac-config.yaml
helm init --service-account tiller
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_5"&gt;下一步&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在群集启动并运行后，继续&lt;a href="https://docs.gitlab.com/charts/installation/deployment.html"&gt;安装chart&lt;/a&gt;，并准备好静态IP和DNS条目。&lt;/p&gt;
&lt;p&gt;在此之前，请注意常规 chart安装过程中的以下更改：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们将使用OpenShift的内置router，因此需要禁用chart中包含的nginx-ingress服务。将以下标志传递给&lt;code&gt;helm install&lt;/code&gt;命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--set nginx-ingress.enabled&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;由于已知内置注册表不能使用Helm Chart与OpenShift一起使用，因此请禁用注册表服务。将以下标志传递给 &lt;code&gt;helm install&lt;/code&gt;命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--set registry.enabled=false
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="3"&gt;
&lt;li&gt;&lt;a href="https://docs.gitlab.com/charts/installation/tls.html#option-2-use-your-own-wildcard-certificate"&gt;使用您自己的SSL证书&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Sun, 26 May 2019 21:24:52 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-26:/install-gitlab-with-docker.html</guid><category>docker</category><category>openshift</category><category>k8s</category><category>containers</category><category>git</category></item><item><title>容器自动伸缩</title><link>https://www.EWhisper.cn/openshift-pod-autoscaling.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;概览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#horizontal-pod-autoscalers"&gt;使用Horizontal Pod Autoscalers的要求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;支持的指标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;自动缩放&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpu"&gt;根据CPU利用率自动扩展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;根据内存利用率自动缩放&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#horizontal-pod-autoscaler"&gt;查看Horizontal Pod Autoscaler&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#horizontal-pod-autoscaler-status-conditions"&gt;查看Horizontal Pod Autoscaler Status Conditions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;概览&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="./images/Matrix-agent-Smith-clones.jpg"&gt;&lt;/p&gt;
&lt;p&gt;由&lt;code&gt;HorizontalPodAutoscaler&lt;/code&gt;对象定义的横向pod自动伸缩器(autoscaler)指定系统应如何根据从属于该复制控制器(replication controller)或部署配置(deployment configuration)的pod收集的度量标准(metrics)自动增加或减少复制控制器或部署配置的规模。&lt;/p&gt;
&lt;h2 id="horizontal-pod-autoscalers"&gt;使用Horizontal Pod Autoscalers的要求&lt;a class="headerlink" href="#horizontal-pod-autoscalers" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;要使用横向pod自动伸缩器(horizontal pod autoscalers)，您需要安装OpenShift Container Platform度量服务器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ansible-playbook &lt;span class="se"&gt;\&lt;/span&gt;
/usr/share/ansible/openshift-ansible/playbooks/metrics-server/config.yml &lt;span class="se"&gt;\&lt;/span&gt;
-e &lt;span class="nv"&gt;openshift_metrics_server_install&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;您可以通过运行以下命令验证服务器是否已正确安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc adm top node
$ oc adm top pod
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有关这些命令的其他信息，请参阅 &lt;a href="https://docs.openshift.com/container-platform/3.11/admin_guide/manage_nodes.html#viewing-nodes"&gt;查看Nodes&lt;/a&gt;和 &lt;a href="https://docs.openshift.com/container-platform/3.11/admin_guide/managing_pods.html#viewing-pods"&gt;查看Pods&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="_2"&gt;支持的指标&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Horizontal pod autoscalers支持以下度量标准：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;指标&lt;/th&gt;
&lt;th align="left"&gt;描述&lt;/th&gt;
&lt;th align="left"&gt;API版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;CPU利用率&lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/compute_resources.html#dev-cpu-requests"&gt;请求的CPU的&lt;/a&gt;百分比&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;autoscaling/v1&lt;/code&gt;， &lt;code&gt;autoscaling/v2beta1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;内存利用率&lt;/td&gt;
&lt;td align="left"&gt;请求的内存百分比&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;autoscaling/v2beta1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_3"&gt;自动缩放&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;您可以使用&lt;code&gt;oc autoscale&lt;/code&gt;命令创建horizontal pod autoscaler，并指定要运行的pod 的最小和最大数量，以及pod应指向的 &lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/pod_autoscaling.html#creating-a-hpa"&gt;CPU利用率&lt;/a&gt;或&lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/pod_autoscaling.html#pod-autoscaling-memory"&gt;内存利用率&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;创建horizontal pod autoscaler后，它开始尝试查询Heapster以获取pod上的指标。在Heapster获得初始指标之前可能需要一到两分钟。&lt;/p&gt;
&lt;p&gt;在Heapster中提供度量标准后，horizontal pod autoscaler将计算当前度量标准利用率与所需度量标准利用率的比率，并相应地向上或向下扩展。缩放将定期发生，但在指标进入Heapster之前可能需要一到两分钟。&lt;/p&gt;
&lt;p&gt;对于复制控制器(replication controller)，此扩展直接对应于复制控制器的副本。对于部署配置(deployment configuration)，此扩展直接对应于部署配置的副本计数。请注意，自动缩放仅适用于&lt;code&gt;Complete&lt;/code&gt;阶段中的最新部署。&lt;/p&gt;
&lt;p&gt;OpenShift Container Platform自动对资源进行核算，并防止在资源激增期间（例如启动期间）进行不必要的自动扩展。在向上扩展时，&lt;code&gt;unready&lt;/code&gt;状态中的pod的CPU使用率为&lt;code&gt;0 CPU&lt;/code&gt;，并且autoscaler在向下伸缩时会忽略这些pod。无法获取到指标的pod在向上伸缩时CPU使用率为0%，向下伸缩时CPU使用率为100%。这样可以在HPA决策期间实现更高的稳定性。要使用此功能，您必须配置 &lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/application_health.html#dev-guide-application-health"&gt;readiness checks&lt;/a&gt; 以确定是否可以使用新容器。&lt;/p&gt;
&lt;h2 id="cpu"&gt;根据CPU利用率自动扩展&lt;a class="headerlink" href="#cpu" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;oc autoscale&lt;/code&gt;命令并指定在任何给定时间至少要运行的最大pod数。您可以选择指定pod的最小数量以及pod应该定位的平均CPU利用率，否则将从OpenShift Container Platform服务器获得这些默认值。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc autoscale dc/frontend --min &lt;span class="m"&gt;1&lt;/span&gt; --max &lt;span class="m"&gt;10&lt;/span&gt; --cpu-percent&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;
deploymentconfig &lt;span class="s2"&gt;&amp;quot;frontend&amp;quot;&lt;/span&gt; autoscaled
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的示例在使用&lt;code&gt;autoscaling/v1&lt;/code&gt;版本的horizontal pod autoscaler时会创建一个具有以下定义的horizontal pod autoscaler：&lt;/p&gt;
&lt;p&gt;例1. Horizontal Pod Autoscaler 对象定义&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;autoscaling/v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;HorizontalPodAutoscaler&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;frontend&lt;/span&gt; 
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;scaleTargetRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;DeploymentConfig&lt;/span&gt; 
    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;frontend&lt;/span&gt; 
    &lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apps/v1&lt;/span&gt; 
    &lt;span class="nt"&gt;subresource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;scale&lt;/span&gt;
  &lt;span class="nt"&gt;minReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt; 
  &lt;span class="nt"&gt;maxReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt; 
  &lt;span class="nt"&gt;cpuUtilization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;targetCPUUtilizationPercentage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;metadata.name&lt;/td&gt;
&lt;td&gt;这个horizontal pod autoscaler 对象的名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kind&lt;/td&gt;
&lt;td&gt;要伸缩的对象类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.name&lt;/td&gt;
&lt;td&gt;要伸缩的对象的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.apiVersion&lt;/td&gt;
&lt;td&gt;要扩展的对象的API版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;minReplicas&lt;/td&gt;
&lt;td&gt;向下伸缩时的最小副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maxReplicas&lt;/td&gt;
&lt;td&gt;向上扩展时的最大副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;targetCPUUtilizationPercentage&lt;/td&gt;
&lt;td&gt;理想情况下每个pod应使用的请求CPU的百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;或者，在&lt;code&gt;oc autoscale&lt;/code&gt;使用horizontal pod autoscaler的&lt;code&gt;v2beta1&lt;/code&gt;版本时，该命令会创建一个具有以下定义的horizontal pod autoscaler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;autoscaling/v2beta1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;HorizontalPodAutoscaler&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hpa-resource-metrics-cpu&lt;/span&gt; 
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;scaleTargetRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apps/v1&lt;/span&gt; 
    &lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ReplicationController&lt;/span&gt; 
    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hello-hpa-cpu&lt;/span&gt; 
  &lt;span class="nt"&gt;minReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt; 
  &lt;span class="nt"&gt;maxReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt; 
  &lt;span class="nt"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Resource&lt;/span&gt;
    &lt;span class="nt"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cpu&lt;/span&gt;
      &lt;span class="nt"&gt;targetAverageUtilization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;50&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;metadata.name&lt;/td&gt;
&lt;td&gt;这个horizontal pod autoscaler 对象的名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.apiVersion&lt;/td&gt;
&lt;td&gt;要扩展的对象的API版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kind&lt;/td&gt;
&lt;td&gt;要扩展的对象类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.name&lt;/td&gt;
&lt;td&gt;要缩放的对象的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;minReplicas&lt;/td&gt;
&lt;td&gt;向下伸缩时的最小副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maxReplicas&lt;/td&gt;
&lt;td&gt;向上扩展时的最大副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;targetAverageUtilization&lt;/td&gt;
&lt;td&gt;每个pod应使用的请求CPU的平均百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_4"&gt;根据内存利用率自动缩放&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;与基于CPU的自动缩放不同，基于内存的自动缩放需要使用YAML而不是使用&lt;code&gt;oc autoscale&lt;/code&gt;命令来指定自动缩放器。（可选）您可以指定pod的最小数量以及pod应该定位的平均内存利用率，否则将从OpenShift Container Platform服务器获得这些默认值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于内存的自动扩展仅适用&lt;code&gt;v2beta1&lt;/code&gt;的自动扩展API 的版本。通过将以下内容添加到群集的&lt;code&gt;master-config.yaml&lt;/code&gt;文件来启用基于内存的自动缩放：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="nt"&gt;apiServerArguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;runtime-config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apis/autoscaling/v2beta1=true&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol start="2"&gt;
&lt;li&gt;将以下内容放在一个文件中，例如&lt;code&gt;hpa.yaml&lt;/code&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;autoscaling/v2beta1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;HorizontalPodAutoscaler&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hpa-resource-metrics-memory&lt;/span&gt; 
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;scaleTargetRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apps/v1&lt;/span&gt; 
    &lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ReplicationController&lt;/span&gt; 
    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hello-hpa-memory&lt;/span&gt; 
  &lt;span class="nt"&gt;minReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt; 
  &lt;span class="nt"&gt;maxReplicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt; 
  &lt;span class="nt"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Resource&lt;/span&gt;
    &lt;span class="nt"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;memory&lt;/span&gt;
      &lt;span class="nt"&gt;targetAverageUtilization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;50&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;metadata.name&lt;/td&gt;
&lt;td&gt;这个horizontal pod autoscaler 对象的名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.apiVersion&lt;/td&gt;
&lt;td&gt;要扩展的对象的API版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kind&lt;/td&gt;
&lt;td&gt;要扩展的对象类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleTargetRef.name&lt;/td&gt;
&lt;td&gt;要缩放的对象的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;minReplicas&lt;/td&gt;
&lt;td&gt;向下缩小时的最小副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maxReplicas&lt;/td&gt;
&lt;td&gt;向上扩展时的最大副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;targetAverageUtilization&lt;/td&gt;
&lt;td&gt;每个pod应使用的请求内存的平均百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start="3"&gt;
&lt;li&gt;然后，从上面的文件创建自动缩放器：&lt;code&gt;$ oc create -f hpa.yaml&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt;注意:&lt;/p&gt;
&lt;p&gt;要使基于内存的自动缩放工作，内存使用量必须与副本计数成比例地增加和减少。一般：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;副本计数的增加必然导致每个pod的内存（工作集 working set）使用率整体下降。&lt;/li&gt;
&lt;li&gt;副本计数的减少必然导致每个pod的内存使用量整体增加。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用OpenShift Web控制台检查应用程序的内存行为，并确保在使用基于内存的自动缩放之前，您的应用程序满足这些要求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="horizontal-pod-autoscaler"&gt;查看Horizontal Pod Autoscaler&lt;a class="headerlink" href="#horizontal-pod-autoscaler" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;要查看Horizontal Pod Autoscaler的状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;oc get&lt;/code&gt;命令可以查看有关CPU利用率和容器 limits 的信息：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
$ oc get hpa/hpa-resource-metrics-cpu
NAME                         REFERENCE                                 TARGET    CURRENT  MINPODS        MAXPODS    AGE
hpa-resource-metrics-cpu     DeploymentConfig/default/frontend/scale   80%       79%      1              10         8d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输出包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目标(Target)&lt;/strong&gt;。由部署配置控制(deployment configuration)的所有pod的目标平均CPU利用率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Current&lt;/strong&gt;。由部署配置(deployment configuration)控制的所有pod的当前CPU利用率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minpods/Maxpods&lt;/strong&gt;。autoscaler可以设置的最小和最大副本数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;oc describe&lt;/code&gt;命令获取有关Horizontal Pod Autoscaler对象的详细信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc describe hpa/hpa-resource-metrics-cpu
Name:                           hpa-resource-metrics-cpu
Namespace:                      default
Labels:                         &amp;lt;none&amp;gt;
CreationTimestamp:              Mon, &lt;span class="m"&gt;26&lt;/span&gt; Oct &lt;span class="m"&gt;2015&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:13:47 -0400
Reference:                      DeploymentConfig/default/frontend/scale
Target CPU utilization:         &lt;span class="m"&gt;80&lt;/span&gt;% 
Current CPU utilization:        &lt;span class="m"&gt;79&lt;/span&gt;% 
Min replicas:                   &lt;span class="m"&gt;1&lt;/span&gt; 
Max replicas:                   &lt;span class="m"&gt;4&lt;/span&gt; 
ReplicationController pods:     &lt;span class="m"&gt;1&lt;/span&gt; current / &lt;span class="m"&gt;1&lt;/span&gt; desired
Conditions: 
  Type                  Status  Reason                  Message
  ----                  ------  ------                  -------
  AbleToScale           True    ReadyForNewScale        the last scale &lt;span class="nb"&gt;time&lt;/span&gt; was sufficiently old as to warrant a new scale
  ScalingActive         True    ValidMetricFound        the HPA was able to successfully calculate a replica count from pods metric http_requests
  ScalingLimited        False   DesiredWithinRange      the desired replica count is within the acceptable range
Events:
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Target CPU utilization&lt;/td&gt;
&lt;td&gt;每个pod应使用的请求内存的平均百分比。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Current CPU utilization&lt;/td&gt;
&lt;td&gt;由部署配置(deployment configuration)控制的所有pod的当前CPU利用率。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Min replicas&lt;/td&gt;
&lt;td&gt;要缩小到的最小副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Max replicas&lt;/td&gt;
&lt;td&gt;要扩展到的最大副本数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Conditions&lt;/td&gt;
&lt;td&gt;如果对象使用&lt;code&gt;v2alpha1&lt;/code&gt;API，则显示&lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/pod_autoscaling.html#viewing-a-hpa-status"&gt;status conditions&lt;/a&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="horizontal-pod-autoscaler-status-conditions"&gt;查看Horizontal Pod Autoscaler Status Conditions&lt;a class="headerlink" href="#horizontal-pod-autoscaler-status-conditions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;您可以使用设置的状态条件(status conditions)来确定Horizontal Pod Autoscaler 是否能够进行缩放以及当前是否以任何方式限制它。&lt;/p&gt;
&lt;p&gt;自动扩展API &lt;code&gt;v2beta1&lt;/code&gt;的版本提供Horizontal Pod Autoscaler Status Conditions：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;kubernetesMasterConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiServerArguments&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runtime-config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apis/autoscaling/v2beta1=true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置以下状态条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AbleToScale&lt;/code&gt; 指示Horizontal Pod Autoscaler 是否能够获取和更新 scales，以及是否有任何backoff 条件阻止缩放。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;表示缩放是允许的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt;表示对指定的原因缩放不允许。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScalingActive&lt;/code&gt; 指示是否启用Horizontal Pod Autoscaler （目标的副本计数不为零）并且能够计算所需的比例。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;状态表示度量工作正常。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt;条件通常表明与获取指标时遇到问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScalingLimited&lt;/code&gt; 表示不允许自动缩放，因为达到了最大或最小副本计数。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;条件表明，为了进行缩放你需要提高或降低最小或最大副本数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False&lt;/code&gt;状态表明请求的比例是允许的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果您需要添加或编辑此行，请重新启动OpenShift Container Platform服务：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#master-restart api&lt;/span&gt;
&lt;span class="c1"&gt;#master-restart controllers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要查看影响Horizontal Pod Autoscaler 的条件，请使用&lt;code&gt;oc describe hpa&lt;/code&gt;。条件出现在&lt;code&gt;status.conditions&lt;/code&gt;字段中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ oc describe hpa cm-test
Name:                           cm-test
Namespace:                      prom
Labels:                         &amp;lt;none&amp;gt;
Annotations:                    &amp;lt;none&amp;gt;
CreationTimestamp:              Fri, &lt;span class="m"&gt;16&lt;/span&gt; Jun &lt;span class="m"&gt;2017&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:09:22 +0000
Reference:                      ReplicationController/cm-test
Metrics:                        &lt;span class="o"&gt;(&lt;/span&gt; current / target &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;http_requests&amp;quot;&lt;/span&gt; on pods:      66m / 500m
Min replicas:                   &lt;span class="m"&gt;1&lt;/span&gt;
Max replicas:                   &lt;span class="m"&gt;4&lt;/span&gt;
ReplicationController pods:     &lt;span class="m"&gt;1&lt;/span&gt; current / &lt;span class="m"&gt;1&lt;/span&gt; desired
Conditions: 
  Type                  Status  Reason                  Message
  ----                  ------  ------                  -------
  AbleToScale       True      ReadyForNewScale    the last scale &lt;span class="nb"&gt;time&lt;/span&gt; was sufficiently old as to warrant a new scale
  ScalingActive     True      ValidMetricFound    the HPA was able to successfully calculate a replica count from pods metric http_request
  ScalingLimited    False     DesiredWithinRange  the desired replica count is within the acceptable range
Events:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Horizontal Pod Autoscaler Status Conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AbleToScale&lt;/code&gt;条件指示HPA是否能够获取和更新比例，以及任何与backoff相关的条件是否会阻止扩展。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScalingActive&lt;/code&gt;状况指示HPA是否被启用（例如，目标的副本数不为零），并能够计算所需的scales。&lt;code&gt;False&lt;/code&gt;状态通常表示获取指标的问题。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScalingLimited&lt;/code&gt;条件指示期望scale由Horizontal Pod Autoscaler的最大或最小上限。&lt;code&gt;True&lt;/code&gt;状态一般预示着你可能需要在你的水平荚自动配置器升高或降低的最小或最大副本数量的限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是无法扩展的pod的示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Conditions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Type&lt;/span&gt;           &lt;span class="n"&gt;Status&lt;/span&gt;    &lt;span class="n"&gt;Reason&lt;/span&gt;            &lt;span class="n"&gt;Message&lt;/span&gt;
  &lt;span class="o"&gt;----&lt;/span&gt;           &lt;span class="o"&gt;------&lt;/span&gt;    &lt;span class="o"&gt;------&lt;/span&gt;            &lt;span class="o"&gt;-------&lt;/span&gt;
  &lt;span class="n"&gt;AbleToScale&lt;/span&gt;    &lt;span class="n"&gt;False&lt;/span&gt;     &lt;span class="n"&gt;FailedGetScale&lt;/span&gt;    &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;HPA&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;replicationcontrollers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;extensions&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello-hpa-cpu&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下是无法获取缩放所需pod的指标示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Conditions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Type&lt;/span&gt;                  &lt;span class="n"&gt;Status&lt;/span&gt;    &lt;span class="n"&gt;Reason&lt;/span&gt;                    &lt;span class="n"&gt;Message&lt;/span&gt;
  &lt;span class="o"&gt;----&lt;/span&gt;                  &lt;span class="o"&gt;------&lt;/span&gt;    &lt;span class="o"&gt;------&lt;/span&gt;                    &lt;span class="o"&gt;-------&lt;/span&gt;
  &lt;span class="n"&gt;AbleToScale&lt;/span&gt;           &lt;span class="n"&gt;True&lt;/span&gt;     &lt;span class="n"&gt;SucceededGetScale&lt;/span&gt;          &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;HPA&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;
  &lt;span class="n"&gt;ScalingActive&lt;/span&gt;         &lt;span class="n"&gt;False&lt;/span&gt;    &lt;span class="n"&gt;FailedGetResourceMetric&lt;/span&gt;    &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;HPA&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;compute&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;replica&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt; &lt;span class="n"&gt;returned&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;heapster&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下是请求的自动缩放小于所需最小值的pod示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Conditions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Type&lt;/span&gt;              &lt;span class="n"&gt;Status&lt;/span&gt;    &lt;span class="n"&gt;Reason&lt;/span&gt;              &lt;span class="n"&gt;Message&lt;/span&gt;
  &lt;span class="o"&gt;----&lt;/span&gt;              &lt;span class="o"&gt;------&lt;/span&gt;    &lt;span class="o"&gt;------&lt;/span&gt;              &lt;span class="o"&gt;-------&lt;/span&gt;
  &lt;span class="n"&gt;AbleToScale&lt;/span&gt;       &lt;span class="n"&gt;True&lt;/span&gt;      &lt;span class="n"&gt;ReadyForNewScale&lt;/span&gt;    &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;sufficiently&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;warrant&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;
  &lt;span class="n"&gt;ScalingActive&lt;/span&gt;     &lt;span class="n"&gt;True&lt;/span&gt;      &lt;span class="n"&gt;ValidMetricFound&lt;/span&gt;    &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;HPA&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;successfully&lt;/span&gt; &lt;span class="n"&gt;calculate&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;replica&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pods&lt;/span&gt; &lt;span class="n"&gt;metric&lt;/span&gt; &lt;span class="n"&gt;http_request&lt;/span&gt;
  &lt;span class="n"&gt;ScalingLimited&lt;/span&gt;    &lt;span class="n"&gt;False&lt;/span&gt;     &lt;span class="n"&gt;DesiredWithinRange&lt;/span&gt;  &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;desired&lt;/span&gt; &lt;span class="n"&gt;replica&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;within&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;acceptable&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;
&lt;span class="n"&gt;Events&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Tue, 14 May 2019 22:06:59 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-14:/openshift-pod-autoscaling.html</guid><category>openshift</category><category>containers</category><category>docker</category><category>k8s</category></item><item><title>OpenShift 和 Kubernetes 有什么区别?</title><link>https://www.EWhisper.cn/openshift-and-kubernetes-whats-difference.html</link><description>&lt;p&gt;OpenShift 3以后, 架构完全基于K8S进行了重构, 但是又有一些差异. 今天, 我们就深入研究一下.&lt;/p&gt;
&lt;h2 id="k8s"&gt;K8S 是"内核"&lt;a class="headerlink" href="#k8s" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;K8S可以认为是当代分布式系统的"内核". 我们意识到, 一个设计良好的作业调度程序, 跨多台及其运行, 能够协调托管在骑上的工作负载的状态, 自然就会促进写作, 就像Linux内核为单个主机上调度工作负载所做的那样. 遵循这一逻辑, 我们知道不同的产品会根据针对用户的不同而差异化地打造.&lt;/p&gt;
&lt;p&gt;在很多手机, 电脑, 服务器, 甚至是树莓派上, 运行的都是相同的Linux 内核, 但是通过不同的不定来支持多种多样的硬件.&lt;/p&gt;
&lt;p&gt;K8S和各种各样的K8S发行版也适用于同样的模型, 通过不同类型的补丁, 来支持在K8S上面的一层. &lt;/p&gt;
&lt;h2 id="openshift"&gt;OpenShift 是发行版&lt;a class="headerlink" href="#openshift" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这是一个强有力的区别。OpenShift就是Kubernetes的发行版，专注于开发人员的体验，而开发人员需要开发下一代云原生应用程序。&lt;/p&gt;
&lt;p&gt;虽然任何人都可以通过选择每1个部分并按照每个用户选择的定制方式组装它们来&lt;a href="http://www.linuxfromscratch.org/"&gt;从Scratch &lt;/a&gt;构建&lt;a href="http://www.linuxfromscratch.org/"&gt;Linux&lt;/a&gt;，但大多数人都没有。大多数用户选择的抽象级别意味着他们不会从管理（甚至了解）Util-Linux版本2.31和2.33之间的差异中获得很多价值。为了更进一步，用户关心最低级别的功能（例如，只要超过最小版本号，他们就知道哪些命令/ API可用），然后提供所提供功能的列表。&lt;/p&gt;
&lt;p&gt;这与OpenShift非常相似。OpenShift将Kubernetes打包并包含其他工具作为OpenShift认为重要且OpenShift的用户需求的功能。就像CoreOS和CentOS包含不同的工具集一样，迎合不同的用户，因此Kubernetes发行版也是如此。&lt;/p&gt;
&lt;h2 id="openshiftk8s"&gt;OpenShift和K8S的具体区别&lt;a class="headerlink" href="#openshiftk8s" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="openshift_1"&gt;OpenShift 架构概述&lt;a class="headerlink" href="#openshift_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;OpenShift容器平台是一系列流行的组件和服务的集合体, 构建于Red Hat Enterprise Linux, Docker, 和K8S之上. OpenShift针对开发人员, 增强了以下功能: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;远程管理&lt;/li&gt;
&lt;li&gt;多租户&lt;/li&gt;
&lt;li&gt;安全性增强&lt;/li&gt;
&lt;li&gt;应用生命周期管理&lt;/li&gt;
&lt;li&gt;自服务接口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="OpenShift 架构" src="./images/openshift-architecture-overview.png"&gt;&lt;/p&gt;
&lt;p&gt;在上图中, 从下至上, 从左至右, 展示了经过Red Hat 在基本的容器架构基础上进一步集成、增强的架构:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本OS是Red Hat Enterprise Linux (RHEL)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;  提供了基本的容器管理API和容器镜像文件格式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt; 管理运行容器的主机集群(实体的或虚拟的). 它通过资源(resources)来描述多容器应用是由多个资源组成的, 以及他们间如何交互&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Etcd&lt;/strong&gt; 是一个分布式 key-value 存储, Kubernetes 通过它来存储集群内的关于容器和其他资源的配置和状态信息.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Docker + Kubernetes 之上, OpenShift增加了容器平台所需要的其他功能. 具体包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OpenShift-Kubernetes 扩展&lt;/strong&gt; 是存储在Etcd中, 由Kubernetes管理的额外的资源类型(resource types). 这些额外的资源类型组成了OpenShift 内部状态和配置, 还有应用的资源.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器化服务&lt;/strong&gt; 充实了很多基础架构功能, 比如网络和认证. 这些功能有些是一直运行的, 有些是按需启动的. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行时和xPaaS&lt;/strong&gt; 是为开发者准备好的容器镜像, 每个都预配置了特定的语言运行时或数据库. 可以被用作镜像流(Image Stream)或在此基础上增加不同的框架, 库, 甚至是中间件来进行扩展. xPaaS 提供了一系列JBoss中间件产品的基础镜像, 如: JBoss EAP 和 ActiveMQ.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DevOps 工具集和用户体验&lt;/strong&gt;: OpenShift 为开发人员和系统管理员提供了一个Web UI和CLI 管理工具, 允许配置和监控应用和OpenShift的服务和资源. Web和 CLI 都是基于相同的REST API, 这个API也可以被外部工具(如: IDE和CI平台)整合. OpenShift也可以访问外部SCM库和容器镜像库.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="📓" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f4d3.png" title=":notebook:" width="20px"&gt; 备注:&lt;/p&gt;
&lt;p&gt;OpenShift 团队:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;帮助K8S 完成了Namespace 和 quota功能的开发;&lt;/li&gt;
&lt;li&gt;推动了RBAC 授权认证的开发&lt;/li&gt;
&lt;li&gt;帮助K8S运行更多类型的应用, 并为其开发了一些卷插件(Volume Plugin)&lt;/li&gt;
&lt;li&gt;相比K8S, 多了Deployment Config(DC) resource. 使用该资源可以进行参数化部署, 执行滚动部署和回滚等.&lt;/li&gt;
&lt;li&gt;相比K8S, 多了Route resource. 而Router也是K8S的Ingress功能的前身.&lt;/li&gt;
&lt;li&gt;相比K8S, 默认集成了SDN (Open vSwitch)&lt;/li&gt;
&lt;li&gt;相比K8S, 实现了开发运维一体化.&lt;/li&gt;
&lt;li&gt;纳入CoreOS&lt;/li&gt;
&lt;li&gt;OpenShift 3.11, 集成了Prometheus和Grafana&lt;/li&gt;
&lt;li&gt;相比K8S, 增强了管理物理节点的能力&lt;/li&gt;
&lt;li&gt;目前, OpenShift还和NV合作, 未来会提供基于GPU运算能力的支持.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;资源类型差异&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes 资源类型&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pods&lt;/li&gt;
&lt;li&gt;Services&lt;/li&gt;
&lt;li&gt;Replication Controllers&lt;/li&gt;
&lt;li&gt;Persistent Volume (PV)&lt;/li&gt;
&lt;li&gt;Persistent Volume Claims (PVC)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;OpenShift 资源类型&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;除了以上资源类型, OpenShift 还增加了以下主要的资源类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deployment Configurations (DC) - 用于 持续交付(CD)工作流&lt;/li&gt;
&lt;li&gt;Build Configurations (BC) - 用于 持续集成(CI) 工作流&lt;/li&gt;
&lt;li&gt;Routes - 基于HAProxy, 作用类似于K8S Ingress, 但早于Ingress.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="openshift-s2i"&gt;OpenShift 特有的S2I 功能&lt;a class="headerlink" href="#openshift-s2i" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;OpenShift中的Source-to-Image (S2I) 进程会从SCM仓库中拉取代码, 自动化监测代码需要哪种类型的运行时, 并从特定运行时的基础镜像启动一个pod. 在这个pod 中, OpenShift 以开发人员相同的方式来构建该应用(如, 使用&lt;strong&gt;maven&lt;/strong&gt;来构建java程序). 如果构建成功, 另一个镜像会被创建, 把应用二进制附加到运行时层之上, 并把这个新镜像推送到OpenShift的内部镜像仓库中. 接下来, 可以从这个新镜像创建一个pod来运行该应用. S2I 可以看做是一个嵌入到OpenShift平台中的 CI/CD pipeline.&lt;/p&gt;
&lt;p&gt;CI/CD pipelines 会有很多种变异, 这个pipeline会暴露在这个项目(project, 就是K8S的namespace)中, 那么它就可以被调节来满足开发人员的需求. 例如, 外部CI工具(如Jenkins)可以用于来启动和运行测试, 然后给新镜像打上"成功"或"失败"的标签(label), 并推送到QA或生产环境. 随着时间推移, 一个组织一个部门一个公司可以创建他们自己的pipeline模板, 包括自定义的构建器和部署器.&lt;/p&gt;
&lt;h2 id="_2"&gt;总结&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;OpenShift 平台相比K8S, 具有以下特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自服务平台;&lt;/li&gt;
&lt;li&gt;多语言, 多中间件, 数据库支持&lt;/li&gt;
&lt;li&gt;高可用, 可伸缩性&lt;/li&gt;
&lt;li&gt;也是开源的(Red Hat收取服务费)&lt;/li&gt;
&lt;li&gt;安全 (基于: RBAC, LDAP, 主机, 网络, 容器各个层面的加固)&lt;/li&gt;
&lt;li&gt;动态存储管理&lt;/li&gt;
&lt;li&gt;企业级&lt;/li&gt;
&lt;li&gt;日志整合/ 监控整合&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 03 May 2019 16:51:34 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-03:/openshift-and-kubernetes-whats-difference.html</guid><category>docker</category><category>openshift</category><category>k8s</category><category>containers</category><category>PAAS</category></item></channel></rss>