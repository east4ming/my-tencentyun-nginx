<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>东风微鸣 Blog - github</title><link>https://www.EWhisper.cn/</link><description>Focus on Python/Java/DevOps/Observability</description><lastBuildDate>Fri, 10 May 2019 10:32:00 +0800</lastBuildDate><item><title>我的个人博客迁移到Docker啦</title><link>https://www.EWhisper.cn/ewhisper-blog-moved-to-docker.html</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;网站架构&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;数据流向&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;网站架构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;容器化简单步骤&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#nginx"&gt;直接启动NGINX容器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;其他容器化方式&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#dockerfile"&gt;Dockerfile 封装镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-docker-compose"&gt;简单容器编排工具 - docker compose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;查看状态和日志&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;2019年5月10日起, 我的个人博客 - https://www.EWhisper.cn 正式运行在docker里边了! &lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt; &lt;/p&gt;
&lt;p&gt;我把相关的源码, Docker镜像分别上传到了GitHub和Docker Hub. 地址如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub: https://github.com/east4ming/my-tencentyun-nginx&lt;/li&gt;
&lt;li&gt;Docker Hub: https://cloud.docker.com/u/caseycui/repository/docker/caseycui/my-tencentyun-nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="欢迎上&amp;quot;船&amp;quot;" src="./images/illustration-com-container-party.png"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;网站架构&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_2"&gt;数据流向&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我的博客网站的架构其实&lt;strong&gt;非常非常&lt;/strong&gt;简单. 说白了, 就是&lt;strong&gt;NGINX + 静态页面&lt;/strong&gt;. (对的, 你没有看错, 我的网站是个全静态网站, 没有动态页面). &lt;/p&gt;
&lt;p&gt;之前的数据流向大概是:&lt;/p&gt;
&lt;p&gt;用户 -&amp;gt; 域名 -&amp;gt; DNS -&amp;gt; 腾讯云主机外网IP -&amp;gt; 腾讯云主机内网IP -&amp;gt; NGINX 80和443端口  (NGINX作为Web Server, 后端没有App Server和DB)&lt;/p&gt;
&lt;p&gt;现在加了一层Docker, 多了一层 主机 -&amp;gt; docker sdn的转发. 如下:&lt;/p&gt;
&lt;p&gt;用户 -&amp;gt; 域名 -&amp;gt; DNS -&amp;gt; 腾讯云主机外网IP -&amp;gt; 腾讯云主机内网IP -&amp;gt; &lt;strong&gt;Docker SDN端口映射&lt;/strong&gt;(443指向docker的443, 80之下那个docker的80) -&amp;gt; Docker的NGINX容器的 80和443端口 &lt;/p&gt;
&lt;h3 id="_3"&gt;网站架构&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;从头开始说起吧, 我的博客是一个&lt;strong&gt;静态站点&lt;/strong&gt;. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我写博文是先通过MarkDown 写.md格式的文本.&lt;/li&gt;
&lt;li&gt;然后通过&lt;strong&gt;静态站点生成器&lt;/strong&gt;(static site generator) -- &lt;a href="http://www.getpelican.com/"&gt;Pelican&lt;/a&gt; (我用的这个不算最主流的, 主流的如: Hexo等)将我的MarkDown 文本, 根据Pelican中定义的主题, 渲染为一个相应风格HTML文件. &lt;/li&gt;
&lt;li&gt;整个站点, 包括以下内容都是一个个的HTML页面.&lt;ol&gt;
&lt;li&gt;Index页面&lt;/li&gt;
&lt;li&gt;about  和 contact 页面&lt;/li&gt;
&lt;li&gt;标签 类别页面&lt;/li&gt;
&lt;li&gt;RSS 订阅页面&lt;/li&gt;
&lt;li&gt;每一篇博文&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;整个网站呢, 实际上就是:&lt;ol&gt;
&lt;li&gt;HTML(和CSS JS)&lt;/li&gt;
&lt;li&gt;静态内容(如: 图片, 图片目前部分在本地, 部分调用图床外链如&lt;a href="https://www.yupoo.com"&gt;又拍&lt;/a&gt; 七牛 CND等)&lt;/li&gt;
&lt;li&gt;其他功能通过插件(也是JS, 外部的JS)实现, 如:&lt;ol&gt;
&lt;li&gt;评论框 (国内可能看不见, 被屏蔽了....)&lt;/li&gt;
&lt;li&gt;转发条&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Pelican 生成的所有的静态站点内容, 都全部通过rsync等工具同步到我的腾讯云主机的&lt;code&gt;/usr/share/nginx/html&lt;/code&gt; 目录下, 并启动NGINX, 配置80, 443端口监听并处理静态内容就可以了.  &lt;ol&gt;
&lt;li&gt;以前, 我是直接通过&lt;code&gt;systemctl&lt;/code&gt; 在云主机上启动的NGINX&lt;/li&gt;
&lt;li&gt;现在, 是通过docker启动的NGINX镜像.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_4"&gt;容器化简单步骤&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;因为我这个只涉及NGINX的容器化, 而且NGINX有官方提供的标准镜像. 所以容器化非常简单, 最简单的方式, 就是&lt;strong&gt;直接启动NGINX容器&lt;/strong&gt;, 如下:&lt;/p&gt;
&lt;h3 id="nginx"&gt;直接启动NGINX容器&lt;a class="headerlink" href="#nginx" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;其实, 直接启动&lt;strong&gt;NGINX&lt;/strong&gt;容器就好了, 你只需要把以下内容挂载卷或者暴露出来:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;挂载卷&lt;ol&gt;
&lt;li&gt;NGINX相关配置(包括: &lt;code&gt;/etc/nginx&lt;/code&gt;下面的nginx.conf文件, conf.d和default.d文件夹)&lt;/li&gt;
&lt;li&gt;静态站点文件(pelican生成的, 放到&lt;code&gt;/usr/share/nginx/html&lt;/code&gt;的文件)&lt;/li&gt;
&lt;li&gt;证书文件(向云供应商或证书供应商申请到的证书, 放到&lt;code&gt;/etc/pki/nginx&lt;/code&gt; 文件夹)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;暴露端口&lt;ol&gt;
&lt;li&gt;80&lt;/li&gt;
&lt;li&gt;443&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;命令如下: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker run --name my-tencentyun-nginx -d &lt;span class="se"&gt;\&lt;/span&gt;
  -p &lt;span class="m"&gt;80&lt;/span&gt;:80 -p &lt;span class="m"&gt;443&lt;/span&gt;:443 &lt;span class="se"&gt;\&lt;/span&gt;
  -v /etc/nginx/nginx.conf:/etc/nginx/nginx.conf &lt;span class="se"&gt;\&lt;/span&gt;
  -v /etc/nginx/conf.d:/etc/nginx/conf.d &lt;span class="se"&gt;\&lt;/span&gt;
  -v /etc/nginx/default.d:/etc/nginx/default.d &lt;span class="se"&gt;\&lt;/span&gt;
  -v /usr/share/nginx/html:/usr/share/nginx/html &lt;span class="se"&gt;\&lt;/span&gt;
  -v /etc/pki/nginx:/etc/pki/nginx:ro &lt;span class="se"&gt;\&lt;/span&gt;
  nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的命令就不细说了, 很容易理解的. &lt;code&gt;-p&lt;/code&gt;是暴露端口, &lt;code&gt;-v&lt;/code&gt;是把主机的磁盘挂载到容器里, &lt;code&gt;-d&lt;/code&gt;是后台运行.&lt;/p&gt;
&lt;p&gt;启动后, 你的NGINX docker容器就会自动下载并启动运行, 你的网站也可以正式对外服务啦. &lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;img align="absmiddle" alt="🎉" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/1f389.png" title=":tada:" width="20px"&gt;&lt;/p&gt;
&lt;h2 id="_5"&gt;其他容器化方式&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;自己本地或单机玩玩, 上边的容器化方式完全够用了. 但是如果我们有以下需求:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多人合作. 需要封装成新的镜像, 将镜像提供给别人使用.&lt;/li&gt;
&lt;li&gt;更好地编排与管理. 管理一个项目, 需要启动多少个web server, 多少个app server, 多少个db. 相互之间如何交互.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么久需要其他的容器化方式.&lt;/p&gt;
&lt;h3 id="dockerfile"&gt;Dockerfile 封装镜像&lt;a class="headerlink" href="#dockerfile" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种其实是团队, 公司, 或生产上推荐的一种方式. 开发负责写代码, 编译代码, 写Dockerfile, 构建镜像. 并把镜像上传到共有或私有的镜像仓库. 然后另外的团队角色, 如: 测试, 运维, 再从仓库中拉取镜像并启动, 测试, 上线. &lt;/p&gt;
&lt;p&gt;这也实现了docker的最大优势, 他们的slogan: &lt;strong&gt;"build, share and run any application, anywhere"&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;能做到这一点, 也是因为OS+语言+组件+应用包, 整个打包成了一个镜像, 实现了环境的一致性.&lt;/p&gt;
&lt;p&gt;还有一个有点, 因为有Dockerfile, 也方便进行追溯和理解镜像. (如果只是一个镜像的话, 很难知道镜像是怎么做出来的).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建个项目, 本地文件夹是&lt;strong&gt;my-tencentyun-nginx&lt;/strong&gt;, GitHub是: https://github.com/east4ming/my-tencentyun-nginx&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将相关源码和站点文件放到该目录中(配置文件, 站点文件, 证书)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img align="absmiddle" alt="❗" class="emojione" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.0/png/64/2757.png" title=":exclamation:" width="20px"&gt; 注意: &lt;/p&gt;
&lt;p&gt;证书key包含重要的私密信息, 千万不要上传到公网上!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构建镜像: &lt;code&gt;sudo docker build -t caseycui/my-tencentyun-nginx .&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(可选) 推送镜像到Docker Hub: &lt;code&gt;sudo docker push caseycui/my-tencentyun-nginx&lt;/code&gt; (我这边是Docker Hub直接oauth连接到Github, 我的对应的Github仓库代码有更新, 就会自动构建)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行镜像: &lt;code&gt;sudo docker run --name my-tencentyun-nginx -v /etc/pki/nginx:/etc/pki/nginx:ro -d -p 80:80 -p 443:443 caseycui/my-tencentyun-nginx&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Dockerfile 如下:&lt;/p&gt;
&lt;p&gt;最简单的Dockerfile, 就是在nginx镜像的基础上, 把我们自己的nginx配置文件和静态站点文件复制进去, 生成一个新镜像.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; nginx:latest&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt; pelican-output /usr/share/nginx/html
&lt;span class="k"&gt;COPY&lt;/span&gt; nginx.conf /etc/nginx/nginx.conf
&lt;span class="k"&gt;COPY&lt;/span&gt; default.d /etc/nginx/default.d
&lt;span class="c"&gt;#COPY conf.d /etc/nginx/conf.d  # 这边注释掉, 是因为这个目录里还没有内容&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="-docker-compose"&gt;简单容器编排工具 - docker compose&lt;a class="headerlink" href="#-docker-compose" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;docker compose是docker官方出品的容器编排工具, 简单易用. 小规模用用还是挺舒服的. 大规模, 企业级的现在都是使用Kubernetes.&lt;/p&gt;
&lt;p&gt;我这里用docker compose其实是杀鸡用牛刀了, 没啥必要. 它适用于哪种场景呢? &lt;/p&gt;
&lt;p&gt;比如, 我一个项目要上线, 包括: web server, app server, db. 那么这时候docker compose就很合适了. 通过它来编排这3类容器, 使它们相互协作和交互. &lt;/p&gt;
&lt;p&gt;docker-compose是通过&lt;code&gt;docker-compose.yaml&lt;/code&gt;来定义这些编排内容的. 示例如下:&lt;/p&gt;
&lt;p&gt;一个web容器, 一个redis容器. 挂载哪些卷, 怎么编译...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;web&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;.&lt;/span&gt;
    &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;5000:5000&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;.:/code&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;logvolume01:/var/log&lt;/span&gt;
    &lt;span class="nt"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;redis&lt;/span&gt;
  &lt;span class="nt"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;redis&lt;/span&gt;
&lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;logvolume01&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;创建&lt;code&gt;docker-compose.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;web&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;
  &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./nginx.conf:/etc/nginx/nginx.conf&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./default.d:/etc/nginx/default.d&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./conf.d:/etc/nginx/conf.d&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./pelican-output:/usr/share/nginx/html&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/pki/nginx:/etc/pki/nginx:ro&lt;/span&gt;
  &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;80:80&amp;quot;&lt;/span&gt;
   &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;443:443&amp;quot;&lt;/span&gt;
  &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;nginx&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-g&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;daemon&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;off;&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行: &lt;code&gt;sudo nohup docker-compose up &amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_6"&gt;查看状态和日志&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;查看状态: &lt;code&gt;sudo docker ps &amp;lt;container name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看日志: &lt;code&gt;sudo docker logs &amp;lt;container name&amp;gt;&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">东风微鸣</dc:creator><pubDate>Fri, 10 May 2019 10:32:00 +0800</pubDate><guid isPermaLink="false">tag:www.ewhisper.cn,2019-05-10:/ewhisper-blog-moved-to-docker.html</guid><category>nginx</category><category>github</category><category>docker</category><category>containers</category></item></channel></rss>